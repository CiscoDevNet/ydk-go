// This module contains a collection of YANG
// definitions for Cisco IOS-XR SysAdmin configuration.
// 
// This module defines the top level container for
// all hardware devices managed in Sysadmin.
// 
// Copyright(c) 2011-2017 by Cisco Systems, Inc.
// All rights reserved.
package sysadmin_controllers

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package sysadmin_controllers"))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers gaspp}", reflect.TypeOf(Gaspp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:gaspp", reflect.TypeOf(Gaspp{}))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers set}", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:set", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers controller}", reflect.TypeOf(Controller{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:controller", reflect.TypeOf(Controller{}))
}

// Gaspp
type Gaspp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Gaspp_Asic.
    Asic []*Gaspp_Asic
}

func (gaspp *Gaspp) GetEntityData() *types.CommonEntityData {
    gaspp.EntityData.YFilter = gaspp.YFilter
    gaspp.EntityData.YangName = "gaspp"
    gaspp.EntityData.BundleName = "cisco_ios_xr"
    gaspp.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    gaspp.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:gaspp"
    gaspp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gaspp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gaspp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gaspp.EntityData.Children = types.NewOrderedMap()
    gaspp.EntityData.Children.Append("asic", types.YChild{"Asic", nil})
    for i := range gaspp.Asic {
        gaspp.EntityData.Children.Append(types.GetSegmentPath(gaspp.Asic[i]), types.YChild{"Asic", gaspp.Asic[i]})
    }
    gaspp.EntityData.Leafs = types.NewOrderedMap()

    gaspp.EntityData.YListKeys = []string {}

    return &(gaspp.EntityData)
}

// Gaspp_Asic
type Gaspp_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Gaspp_Asic_Instance.
    Instance []*Gaspp_Asic_Instance
}

func (asic *Gaspp_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "gaspp"
    asic.EntityData.SegmentPath = "asic" + types.AddKeyToken(asic.AsicName, "asic-name")
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = types.NewOrderedMap()
    asic.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range asic.Instance {
        asic.EntityData.Children.Append(types.GetSegmentPath(asic.Instance[i]), types.YChild{"Instance", asic.Instance[i]})
    }
    asic.EntityData.Leafs = types.NewOrderedMap()
    asic.EntityData.Leafs.Append("asic-name", types.YLeaf{"AsicName", asic.AsicName})

    asic.EntityData.YListKeys = []string {"AsicName"}

    return &(asic.EntityData)
}

// Gaspp_Asic_Instance
type Gaspp_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // The type is string.
    InstanceName interface{}

    // The type is slice of Gaspp_Asic_Instance_Address.
    Address []*Gaspp_Asic_Instance_Address

    // The type is slice of Gaspp_Asic_Instance_BlockName.
    BlockName []*Gaspp_Asic_Instance_BlockName

    // The type is slice of Gaspp_Asic_Instance_BlockNumber.
    BlockNumber []*Gaspp_Asic_Instance_BlockNumber
}

func (instance *Gaspp_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("address", types.YChild{"Address", nil})
    for i := range instance.Address {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.Address[i]), types.YChild{"Address", instance.Address[i]})
    }
    instance.EntityData.Children.Append("block-name", types.YChild{"BlockName", nil})
    for i := range instance.BlockName {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.BlockName[i]), types.YChild{"BlockName", instance.BlockName[i]})
    }
    instance.EntityData.Children.Append("block-number", types.YChild{"BlockNumber", nil})
    for i := range instance.BlockNumber {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.BlockNumber[i]), types.YChild{"BlockNumber", instance.BlockNumber[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", instance.InstanceName})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Gaspp_Asic_Instance_Address
type Gaspp_Asic_Instance_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Addr interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    Entries interface{}

    // The type is interface{} with range: 0..4294967295. This attribute is
    // mandatory.
    Width interface{}

    // The type is slice of Gaspp_Asic_Instance_Address_Location.
    Location []*Gaspp_Asic_Instance_Address_Location
}

func (address *Gaspp_Asic_Instance_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "instance"
    address.EntityData.SegmentPath = "address" + types.AddKeyToken(address.Addr, "addr") + types.AddKeyToken(address.Size, "size") + types.AddKeyToken(address.Entries, "entries")
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range address.Location {
        address.EntityData.Children.Append(types.GetSegmentPath(address.Location[i]), types.YChild{"Location", address.Location[i]})
    }
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", address.Addr})
    address.EntityData.Leafs.Append("size", types.YLeaf{"Size", address.Size})
    address.EntityData.Leafs.Append("entries", types.YLeaf{"Entries", address.Entries})
    address.EntityData.Leafs.Append("width", types.YLeaf{"Width", address.Width})

    address.EntityData.YListKeys = []string {"Addr", "Size", "Entries"}

    return &(address.EntityData)
}

// Gaspp_Asic_Instance_Address_Location
type Gaspp_Asic_Instance_Address_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of Gaspp_Asic_Instance_Address_Location_DirectData.
    DirectData []*Gaspp_Asic_Instance_Address_Location_DirectData
}

func (location *Gaspp_Asic_Instance_Address_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "address"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("direct_data", types.YChild{"DirectData", nil})
    for i := range location.DirectData {
        location.EntityData.Children.Append(types.GetSegmentPath(location.DirectData[i]), types.YChild{"DirectData", location.DirectData[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Gaspp_Asic_Instance_Address_Location_DirectData
type Gaspp_Asic_Instance_Address_Location_DirectData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (directData *Gaspp_Asic_Instance_Address_Location_DirectData) GetEntityData() *types.CommonEntityData {
    directData.EntityData.YFilter = directData.YFilter
    directData.EntityData.YangName = "direct_data"
    directData.EntityData.BundleName = "cisco_ios_xr"
    directData.EntityData.ParentYangName = "location"
    directData.EntityData.SegmentPath = "direct_data"
    directData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directData.EntityData.Children = types.NewOrderedMap()
    directData.EntityData.Leafs = types.NewOrderedMap()
    directData.EntityData.Leafs.Append("address", types.YLeaf{"Address", directData.Address})
    directData.EntityData.Leafs.Append("name", types.YLeaf{"Name", directData.Name})
    directData.EntityData.Leafs.Append("value", types.YLeaf{"Value", directData.Value})
    directData.EntityData.Leafs.Append("size", types.YLeaf{"Size", directData.Size})

    directData.EntityData.YListKeys = []string {}

    return &(directData.EntityData)
}

// Gaspp_Asic_Instance_BlockName
type Gaspp_Asic_Instance_BlockName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockNm interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockName_RegisterName.
    RegisterName []*Gaspp_Asic_Instance_BlockName_RegisterName
}

func (blockName *Gaspp_Asic_Instance_BlockName) GetEntityData() *types.CommonEntityData {
    blockName.EntityData.YFilter = blockName.YFilter
    blockName.EntityData.YangName = "block-name"
    blockName.EntityData.BundleName = "cisco_ios_xr"
    blockName.EntityData.ParentYangName = "instance"
    blockName.EntityData.SegmentPath = "block-name" + types.AddKeyToken(blockName.BlockNm, "block-nm") + types.AddKeyToken(blockName.BlockNum, "block-num")
    blockName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockName.EntityData.Children = types.NewOrderedMap()
    blockName.EntityData.Children.Append("register-name", types.YChild{"RegisterName", nil})
    for i := range blockName.RegisterName {
        blockName.EntityData.Children.Append(types.GetSegmentPath(blockName.RegisterName[i]), types.YChild{"RegisterName", blockName.RegisterName[i]})
    }
    blockName.EntityData.Leafs = types.NewOrderedMap()
    blockName.EntityData.Leafs.Append("block-nm", types.YLeaf{"BlockNm", blockName.BlockNm})
    blockName.EntityData.Leafs.Append("block-num", types.YLeaf{"BlockNum", blockName.BlockNum})

    blockName.EntityData.YListKeys = []string {"BlockNm", "BlockNum"}

    return &(blockName.EntityData)
}

// Gaspp_Asic_Instance_BlockName_RegisterName
type Gaspp_Asic_Instance_BlockName_RegisterName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockName_RegisterName_Data.
    Data []*Gaspp_Asic_Instance_BlockName_RegisterName_Data
}

func (registerName *Gaspp_Asic_Instance_BlockName_RegisterName) GetEntityData() *types.CommonEntityData {
    registerName.EntityData.YFilter = registerName.YFilter
    registerName.EntityData.YangName = "register-name"
    registerName.EntityData.BundleName = "cisco_ios_xr"
    registerName.EntityData.ParentYangName = "block-name"
    registerName.EntityData.SegmentPath = "register-name" + types.AddKeyToken(registerName.Name, "name")
    registerName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerName.EntityData.Children = types.NewOrderedMap()
    registerName.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range registerName.Data {
        registerName.EntityData.Children.Append(types.GetSegmentPath(registerName.Data[i]), types.YChild{"Data", registerName.Data[i]})
    }
    registerName.EntityData.Leafs = types.NewOrderedMap()
    registerName.EntityData.Leafs.Append("name", types.YLeaf{"Name", registerName.Name})
    registerName.EntityData.Leafs.Append("register", types.YLeaf{"Register", registerName.Register})

    registerName.EntityData.YListKeys = []string {"Name"}

    return &(registerName.EntityData)
}

// Gaspp_Asic_Instance_BlockName_RegisterName_Data
type Gaspp_Asic_Instance_BlockName_RegisterName_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockName_RegisterName_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "register-name"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber
type Gaspp_Asic_Instance_BlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is string.
    BlockNm interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockNumber_RegisterNumber.
    RegisterNumber []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber
}

func (blockNumber *Gaspp_Asic_Instance_BlockNumber) GetEntityData() *types.CommonEntityData {
    blockNumber.EntityData.YFilter = blockNumber.YFilter
    blockNumber.EntityData.YangName = "block-number"
    blockNumber.EntityData.BundleName = "cisco_ios_xr"
    blockNumber.EntityData.ParentYangName = "instance"
    blockNumber.EntityData.SegmentPath = "block-number" + types.AddKeyToken(blockNumber.BlockNum, "block-num")
    blockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNumber.EntityData.Children = types.NewOrderedMap()
    blockNumber.EntityData.Children.Append("register-number", types.YChild{"RegisterNumber", nil})
    for i := range blockNumber.RegisterNumber {
        blockNumber.EntityData.Children.Append(types.GetSegmentPath(blockNumber.RegisterNumber[i]), types.YChild{"RegisterNumber", blockNumber.RegisterNumber[i]})
    }
    blockNumber.EntityData.Leafs = types.NewOrderedMap()
    blockNumber.EntityData.Leafs.Append("block-num", types.YLeaf{"BlockNum", blockNumber.BlockNum})
    blockNumber.EntityData.Leafs.Append("block-nm", types.YLeaf{"BlockNm", blockNumber.BlockNm})

    blockNumber.EntityData.YListKeys = []string {"BlockNum"}

    return &(blockNumber.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is string.
    RegisterName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets.
    RegisterOffsets []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location.
    Location []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location
}

func (registerNumber *Gaspp_Asic_Instance_BlockNumber_RegisterNumber) GetEntityData() *types.CommonEntityData {
    registerNumber.EntityData.YFilter = registerNumber.YFilter
    registerNumber.EntityData.YangName = "register-number"
    registerNumber.EntityData.BundleName = "cisco_ios_xr"
    registerNumber.EntityData.ParentYangName = "block-number"
    registerNumber.EntityData.SegmentPath = "register-number" + types.AddKeyToken(registerNumber.Register, "register")
    registerNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerNumber.EntityData.Children = types.NewOrderedMap()
    registerNumber.EntityData.Children.Append("register-offsets", types.YChild{"RegisterOffsets", nil})
    for i := range registerNumber.RegisterOffsets {
        registerNumber.EntityData.Children.Append(types.GetSegmentPath(registerNumber.RegisterOffsets[i]), types.YChild{"RegisterOffsets", registerNumber.RegisterOffsets[i]})
    }
    registerNumber.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range registerNumber.Location {
        registerNumber.EntityData.Children.Append(types.GetSegmentPath(registerNumber.Location[i]), types.YChild{"Location", registerNumber.Location[i]})
    }
    registerNumber.EntityData.Leafs = types.NewOrderedMap()
    registerNumber.EntityData.Leafs.Append("register", types.YLeaf{"Register", registerNumber.Register})
    registerNumber.EntityData.Leafs.Append("register-name", types.YLeaf{"RegisterName", registerNumber.RegisterName})

    registerNumber.EntityData.YListKeys = []string {"Register"}

    return &(registerNumber.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    RegStart interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumEntries interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location.
    Location []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
}

func (registerOffsets *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets) GetEntityData() *types.CommonEntityData {
    registerOffsets.EntityData.YFilter = registerOffsets.YFilter
    registerOffsets.EntityData.YangName = "register-offsets"
    registerOffsets.EntityData.BundleName = "cisco_ios_xr"
    registerOffsets.EntityData.ParentYangName = "register-number"
    registerOffsets.EntityData.SegmentPath = "register-offsets" + types.AddKeyToken(registerOffsets.RegStart, "reg-start") + types.AddKeyToken(registerOffsets.NumEntries, "num-entries")
    registerOffsets.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerOffsets.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerOffsets.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerOffsets.EntityData.Children = types.NewOrderedMap()
    registerOffsets.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range registerOffsets.Location {
        registerOffsets.EntityData.Children.Append(types.GetSegmentPath(registerOffsets.Location[i]), types.YChild{"Location", registerOffsets.Location[i]})
    }
    registerOffsets.EntityData.Leafs = types.NewOrderedMap()
    registerOffsets.EntityData.Leafs.Append("reg-start", types.YLeaf{"RegStart", registerOffsets.RegStart})
    registerOffsets.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", registerOffsets.NumEntries})

    registerOffsets.EntityData.YListKeys = []string {"RegStart", "NumEntries"}

    return &(registerOffsets.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data.
    Data []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
}

func (location *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-offsets"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range location.Data {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Data[i]), types.YChild{"Data", location.Data[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data.
    Data []*Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
}

func (location *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-number"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range location.Data {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Data[i]), types.YChild{"Data", location.Data[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Set
type Set struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Controller Set_Controller
}

func (set *Set) GetEntityData() *types.CommonEntityData {
    set.EntityData.YFilter = set.YFilter
    set.EntityData.YangName = "set"
    set.EntityData.BundleName = "cisco_ios_xr"
    set.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    set.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:set"
    set.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    set.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    set.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    set.EntityData.Children = types.NewOrderedMap()
    set.EntityData.Children.Append("controller", types.YChild{"Controller", &set.Controller})
    set.EntityData.Leafs = types.NewOrderedMap()

    set.EntityData.YListKeys = []string {}

    return &(set.EntityData)
}

// Set_Controller
type Set_Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic.
    Asic []*Set_Controller_Asic
}

func (controller *Set_Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "set"
    controller.EntityData.SegmentPath = "controller"
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = types.NewOrderedMap()
    controller.EntityData.Children.Append("asic", types.YChild{"Asic", nil})
    for i := range controller.Asic {
        controller.EntityData.Children.Append(types.GetSegmentPath(controller.Asic[i]), types.YChild{"Asic", controller.Asic[i]})
    }
    controller.EntityData.Leafs = types.NewOrderedMap()

    controller.EntityData.YListKeys = []string {}

    return &(controller.EntityData)
}

// Set_Controller_Asic
type Set_Controller_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Set_Controller_Asic_Instance.
    Instance []*Set_Controller_Asic_Instance
}

func (asic *Set_Controller_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "controller"
    asic.EntityData.SegmentPath = "asic" + types.AddKeyToken(asic.AsicName, "asic-name")
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = types.NewOrderedMap()
    asic.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range asic.Instance {
        asic.EntityData.Children.Append(types.GetSegmentPath(asic.Instance[i]), types.YChild{"Instance", asic.Instance[i]})
    }
    asic.EntityData.Leafs = types.NewOrderedMap()
    asic.EntityData.Leafs.Append("asic-name", types.YLeaf{"AsicName", asic.AsicName})

    asic.EntityData.YListKeys = []string {"AsicName"}

    return &(asic.EntityData)
}

// Set_Controller_Asic_Instance
type Set_Controller_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceIds interface{}

    
    FaultInjection Set_Controller_Asic_Instance_FaultInjection
}

func (instance *Set_Controller_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceIds, "instance-ids")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("fault-injection", types.YChild{"FaultInjection", &instance.FaultInjection})
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-ids", types.YLeaf{"InstanceIds", instance.InstanceIds})

    instance.EntityData.YListKeys = []string {"InstanceIds"}

    return &(instance.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection
type Set_Controller_Asic_Instance_FaultInjection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic_Instance_FaultInjection_Module.
    Module []*Set_Controller_Asic_Instance_FaultInjection_Module
}

func (faultInjection *Set_Controller_Asic_Instance_FaultInjection) GetEntityData() *types.CommonEntityData {
    faultInjection.EntityData.YFilter = faultInjection.YFilter
    faultInjection.EntityData.YangName = "fault-injection"
    faultInjection.EntityData.BundleName = "cisco_ios_xr"
    faultInjection.EntityData.ParentYangName = "instance"
    faultInjection.EntityData.SegmentPath = "fault-injection"
    faultInjection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultInjection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultInjection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultInjection.EntityData.Children = types.NewOrderedMap()
    faultInjection.EntityData.Children.Append("module", types.YChild{"Module", nil})
    for i := range faultInjection.Module {
        faultInjection.EntityData.Children.Append(types.GetSegmentPath(faultInjection.Module[i]), types.YChild{"Module", faultInjection.Module[i]})
    }
    faultInjection.EntityData.Leafs = types.NewOrderedMap()

    faultInjection.EntityData.YListKeys = []string {}

    return &(faultInjection.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module
type Set_Controller_Asic_Instance_FaultInjection_Module struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ModuleName interface{}

    
    FaultType Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
}

func (module *Set_Controller_Asic_Instance_FaultInjection_Module) GetEntityData() *types.CommonEntityData {
    module.EntityData.YFilter = module.YFilter
    module.EntityData.YangName = "module"
    module.EntityData.BundleName = "cisco_ios_xr"
    module.EntityData.ParentYangName = "fault-injection"
    module.EntityData.SegmentPath = "module" + types.AddKeyToken(module.ModuleName, "module-name")
    module.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    module.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    module.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    module.EntityData.Children = types.NewOrderedMap()
    module.EntityData.Children.Append("fault-type", types.YChild{"FaultType", &module.FaultType})
    module.EntityData.Leafs = types.NewOrderedMap()
    module.EntityData.Leafs.Append("module-name", types.YLeaf{"ModuleName", module.ModuleName})

    module.EntityData.YListKeys = []string {"ModuleName"}

    return &(module.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ecc Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc

    
    Parity Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity

    
    Other Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
}

func (faultType *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType) GetEntityData() *types.CommonEntityData {
    faultType.EntityData.YFilter = faultType.YFilter
    faultType.EntityData.YangName = "fault-type"
    faultType.EntityData.BundleName = "cisco_ios_xr"
    faultType.EntityData.ParentYangName = "module"
    faultType.EntityData.SegmentPath = "fault-type"
    faultType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultType.EntityData.Children = types.NewOrderedMap()
    faultType.EntityData.Children.Append("ecc", types.YChild{"Ecc", &faultType.Ecc})
    faultType.EntityData.Children.Append("parity", types.YChild{"Parity", &faultType.Parity})
    faultType.EntityData.Children.Append("other", types.YChild{"Other", &faultType.Other})
    faultType.EntityData.Leafs = types.NewOrderedMap()

    faultType.EntityData.YListKeys = []string {}

    return &(faultType.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
}

func (ecc *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc) GetEntityData() *types.CommonEntityData {
    ecc.EntityData.YFilter = ecc.YFilter
    ecc.EntityData.YangName = "ecc"
    ecc.EntityData.BundleName = "cisco_ios_xr"
    ecc.EntityData.ParentYangName = "fault-type"
    ecc.EntityData.SegmentPath = "ecc"
    ecc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ecc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ecc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ecc.EntityData.Children = types.NewOrderedMap()
    ecc.EntityData.Children.Append("all", types.YChild{"All", &ecc.All})
    ecc.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range ecc.BlockNameLst {
        ecc.EntityData.Children.Append(types.GetSegmentPath(ecc.BlockNameLst[i]), types.YChild{"BlockNameLst", ecc.BlockNameLst[i]})
    }
    ecc.EntityData.Leafs = types.NewOrderedMap()

    ecc.EntityData.YListKeys = []string {}

    return &(ecc.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "ecc"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "ecc"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
}

func (parity *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity) GetEntityData() *types.CommonEntityData {
    parity.EntityData.YFilter = parity.YFilter
    parity.EntityData.YangName = "parity"
    parity.EntityData.BundleName = "cisco_ios_xr"
    parity.EntityData.ParentYangName = "fault-type"
    parity.EntityData.SegmentPath = "parity"
    parity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parity.EntityData.Children = types.NewOrderedMap()
    parity.EntityData.Children.Append("all", types.YChild{"All", &parity.All})
    parity.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range parity.BlockNameLst {
        parity.EntityData.Children.Append(types.GetSegmentPath(parity.BlockNameLst[i]), types.YChild{"BlockNameLst", parity.BlockNameLst[i]})
    }
    parity.EntityData.Leafs = types.NewOrderedMap()

    parity.EntityData.YListKeys = []string {}

    return &(parity.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "parity"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "parity"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst.
    BlockNameLst []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
}

func (other *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other) GetEntityData() *types.CommonEntityData {
    other.EntityData.YFilter = other.YFilter
    other.EntityData.YangName = "other"
    other.EntityData.BundleName = "cisco_ios_xr"
    other.EntityData.ParentYangName = "fault-type"
    other.EntityData.SegmentPath = "other"
    other.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    other.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    other.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    other.EntityData.Children = types.NewOrderedMap()
    other.EntityData.Children.Append("all", types.YChild{"All", &other.All})
    other.EntityData.Children.Append("block-name-lst", types.YChild{"BlockNameLst", nil})
    for i := range other.BlockNameLst {
        other.EntityData.Children.Append(types.GetSegmentPath(other.BlockNameLst[i]), types.YChild{"BlockNameLst", other.BlockNameLst[i]})
    }
    other.EntityData.Leafs = types.NewOrderedMap()

    other.EntityData.YListKeys = []string {}

    return &(other.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold.
    Threshold []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "other"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("threshold", types.YChild{"Threshold", nil})
    for i := range all.Threshold {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Threshold[i]), types.YChild{"Threshold", all.Threshold[i]})
    }
    all.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range all.Location {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Location[i]), types.YChild{"Location", all.Location[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + types.AddKeyToken(threshold.NumSeconds, "num-seconds")
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = types.NewOrderedMap()
    threshold.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range threshold.Location {
        threshold.EntityData.Children.Append(types.GetSegmentPath(threshold.Location[i]), types.YChild{"Location", threshold.Location[i]})
    }
    threshold.EntityData.Leafs = types.NewOrderedMap()
    threshold.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", threshold.NumSeconds})

    threshold.EntityData.YListKeys = []string {"NumSeconds"}

    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "other"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + types.AddKeyToken(blockNameLst.BlockName, "block-name")
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = types.NewOrderedMap()
    blockNameLst.EntityData.Children.Append("one", types.YChild{"One", &blockNameLst.One})
    blockNameLst.EntityData.Children.Append("continuous", types.YChild{"Continuous", &blockNameLst.Continuous})
    blockNameLst.EntityData.Children.Append("stop", types.YChild{"Stop", &blockNameLst.Stop})
    blockNameLst.EntityData.Leafs = types.NewOrderedMap()
    blockNameLst.EntityData.Leafs.Append("block-name", types.YLeaf{"BlockName", blockNameLst.BlockName})

    blockNameLst.EntityData.YListKeys = []string {"BlockName"}

    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = types.NewOrderedMap()
    one.EntityData.Children.Append("rate", types.YChild{"Rate", &one.Rate})
    one.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range one.Location {
        one.EntityData.Children.Append(types.GetSegmentPath(one.Location[i]), types.YChild{"Location", one.Location[i]})
    }
    one.EntityData.Leafs = types.NewOrderedMap()

    one.EntityData.YListKeys = []string {}

    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = types.NewOrderedMap()
    continuous.EntityData.Children.Append("rate", types.YChild{"Rate", &continuous.Rate})
    continuous.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range continuous.Location {
        continuous.EntityData.Children.Append(types.GetSegmentPath(continuous.Location[i]), types.YChild{"Location", continuous.Location[i]})
    }
    continuous.EntityData.Leafs = types.NewOrderedMap()

    continuous.EntityData.YListKeys = []string {}

    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = types.NewOrderedMap()
    rate.EntityData.Children.Append("error-number", types.YChild{"ErrorNumber", nil})
    for i := range rate.ErrorNumber {
        rate.EntityData.Children.Append(types.GetSegmentPath(rate.ErrorNumber[i]), types.YChild{"ErrorNumber", rate.ErrorNumber[i]})
    }
    rate.EntityData.Leafs = types.NewOrderedMap()

    rate.EntityData.YListKeys = []string {}

    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + types.AddKeyToken(errorNumber.NumErrs, "num-errs")
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = types.NewOrderedMap()
    errorNumber.EntityData.Children.Append("duration", types.YChild{"Duration", nil})
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children.Append(types.GetSegmentPath(errorNumber.Duration[i]), types.YChild{"Duration", errorNumber.Duration[i]})
    }
    errorNumber.EntityData.Leafs = types.NewOrderedMap()
    errorNumber.EntityData.Leafs.Append("num-errs", types.YLeaf{"NumErrs", errorNumber.NumErrs})

    errorNumber.EntityData.YListKeys = []string {"NumErrs"}

    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + types.AddKeyToken(duration.NumSeconds, "num-seconds")
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = types.NewOrderedMap()
    duration.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range duration.Location {
        duration.EntityData.Children.Append(types.GetSegmentPath(duration.Location[i]), types.YChild{"Location", duration.Location[i]})
    }
    duration.EntityData.Leafs = types.NewOrderedMap()
    duration.EntityData.Leafs.Append("num-seconds", types.YLeaf{"NumSeconds", duration.NumSeconds})

    duration.EntityData.YListKeys = []string {"NumSeconds"}

    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location.
    Location []*Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = types.NewOrderedMap()
    stop.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range stop.Location {
        stop.EntityData.Children.Append(types.GetSegmentPath(stop.Location[i]), types.YChild{"Location", stop.Location[i]})
    }
    stop.EntityData.Leafs = types.NewOrderedMap()

    stop.EntityData.YListKeys = []string {}

    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((([bB][0-9])/(([a-zA-Z]){2}\d{1,2}))|(([fF][0-3])/(([a-zA-Z]){2}\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\d{1,2})))(/[cC][pP][uU]0)?.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.FitLocationName, "fit-location-name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("fit-location-name", types.YLeaf{"FitLocationName", location.FitLocationName})

    location.EntityData.YListKeys = []string {"FitLocationName"}

    return &(location.EntityData)
}

// Controller
type Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_Fabric

    
    SfeOper Controller_SfeOper

    // The type is slice of Controller_Asic.
    Asic []*Controller_Asic

    
    Oper Controller_Oper

    
    Zen Controller_Zen

    
    CccDriver Controller_CccDriver

    
    Switch Controller_Switch

    
    FabricAction Controller_FabricAction
}

func (controller *Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    controller.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:controller"
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = types.NewOrderedMap()
    controller.EntityData.Children.Append("fabric", types.YChild{"Fabric", &controller.Fabric})
    controller.EntityData.Children.Append("sfe_oper", types.YChild{"SfeOper", &controller.SfeOper})
    controller.EntityData.Children.Append("asic", types.YChild{"Asic", nil})
    for i := range controller.Asic {
        controller.EntityData.Children.Append(types.GetSegmentPath(controller.Asic[i]), types.YChild{"Asic", controller.Asic[i]})
    }
    controller.EntityData.Children.Append("oper", types.YChild{"Oper", &controller.Oper})
    controller.EntityData.Children.Append("zen", types.YChild{"Zen", &controller.Zen})
    controller.EntityData.Children.Append("ccc_driver", types.YChild{"CccDriver", &controller.CccDriver})
    controller.EntityData.Children.Append("switch", types.YChild{"Switch", &controller.Switch})
    controller.EntityData.Children.Append("fabric_action", types.YChild{"FabricAction", &controller.FabricAction})
    controller.EntityData.Leafs = types.NewOrderedMap()

    controller.EntityData.YListKeys = []string {}

    return &(controller.EntityData)
}

// Controller_Fabric
// Fabric resource commands
type Controller_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric configuration.
    Fabric Controller_Fabric_Fabric

    
    Oper Controller_Fabric_Oper
}

func (fabric *Controller_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "controller"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("fabric", types.YChild{"Fabric", &fabric.Fabric})
    fabric.EntityData.Children.Append("oper", types.YChild{"Oper", &fabric.Oper})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_Fabric_Fabric
// Fabric configuration
type Controller_Fabric_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Fabric_Fsdbagg

    
    Fgid Controller_Fabric_Fabric_Fgid
}

func (fabric *Controller_Fabric_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "fabric"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("fsdbagg", types.YChild{"Fsdbagg", &fabric.Fsdbagg})
    fabric.EntityData.Children.Append("fgid", types.YChild{"Fgid", &fabric.Fgid})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg
type Controller_Fabric_Fabric_Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set state of fabric plane. The type is slice of
    // Controller_Fabric_Fabric_Fsdbagg_Plane.
    Plane []*Controller_Fabric_Fabric_Fsdbagg_Plane

    // Link configuration commands.
    Link Controller_Fabric_Fabric_Fsdbagg_Link
}

func (fsdbagg *Controller_Fabric_Fabric_Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fabric"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = types.NewOrderedMap()
    fsdbagg.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbagg.Plane {
        fsdbagg.EntityData.Children.Append(types.GetSegmentPath(fsdbagg.Plane[i]), types.YChild{"Plane", fsdbagg.Plane[i]})
    }
    fsdbagg.EntityData.Children.Append("link", types.YChild{"Link", &fsdbagg.Link})
    fsdbagg.EntityData.Leafs = types.NewOrderedMap()

    fsdbagg.EntityData.YListKeys = []string {}

    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Plane
// Set state of fabric plane
type Controller_Fabric_Fabric_Fsdbagg_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5].
    PlaneId interface{}

    // Shut down state. The type is interface{}.
    Shutdown interface{}

    // Back to Back plane mode. The type is interface{}.
    B2b interface{}

    // Multi-Chassis S2 configuration. The type is slice of
    // Controller_Fabric_Fabric_Fsdbagg_Plane_Instance.
    Instance []*Controller_Fabric_Fabric_Fsdbagg_Plane_Instance

    // Multi-Chassis S2 Folded chassis configuration. The type is slice of
    // Controller_Fabric_Fabric_Fsdbagg_Plane_InstanceFolded.
    InstanceFolded []*Controller_Fabric_Fabric_Fsdbagg_Plane_InstanceFolded
}

func (plane *Controller_Fabric_Fabric_Fsdbagg_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.PlaneId, "plane_id")
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range plane.Instance {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.Instance[i]), types.YChild{"Instance", plane.Instance[i]})
    }
    plane.EntityData.Children.Append("instance_folded", types.YChild{"InstanceFolded", nil})
    for i := range plane.InstanceFolded {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.InstanceFolded[i]), types.YChild{"InstanceFolded", plane.InstanceFolded[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", plane.PlaneId})
    plane.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", plane.Shutdown})
    plane.EntityData.Leafs.Append("b2b", types.YLeaf{"B2b", plane.B2b})

    plane.EntityData.YListKeys = []string {"PlaneId"}

    return &(plane.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Plane_Instance
// Multi-Chassis S2 configuration
type Controller_Fabric_Fabric_Fsdbagg_Plane_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..7.
    InstanceId interface{}

    // The type is string with pattern: (0?[F|f][0-3])/[F|f][C|c](0?[0-9]|1[0-1]).
    Location interface{}
}

func (instance *Controller_Fabric_Fabric_Fsdbagg_Plane_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "plane"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("location", types.YLeaf{"Location", instance.Location})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Plane_InstanceFolded
// Multi-Chassis S2 Folded chassis configuration
type Controller_Fabric_Fabric_Fsdbagg_Plane_InstanceFolded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    InstanceId interface{}

    // The type is string with pattern: (0?[F|f][0-3])/[F|f][C|c](0?[0-9]|1[0-1]).
    Location interface{}
}

func (instanceFolded *Controller_Fabric_Fabric_Fsdbagg_Plane_InstanceFolded) GetEntityData() *types.CommonEntityData {
    instanceFolded.EntityData.YFilter = instanceFolded.YFilter
    instanceFolded.EntityData.YangName = "instance_folded"
    instanceFolded.EntityData.BundleName = "cisco_ios_xr"
    instanceFolded.EntityData.ParentYangName = "plane"
    instanceFolded.EntityData.SegmentPath = "instance_folded" + types.AddKeyToken(instanceFolded.InstanceId, "instance-id")
    instanceFolded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instanceFolded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instanceFolded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instanceFolded.EntityData.Children = types.NewOrderedMap()
    instanceFolded.EntityData.Leafs = types.NewOrderedMap()
    instanceFolded.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instanceFolded.InstanceId})
    instanceFolded.EntityData.Leafs.Append("location", types.YLeaf{"Location", instanceFolded.Location})

    instanceFolded.EntityData.YListKeys = []string {"InstanceId"}

    return &(instanceFolded.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Link
// Link configuration commands
type Controller_Fabric_Fabric_Fsdbagg_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set admin state of a fabric link port.
    Port Controller_Fabric_Fabric_Fsdbagg_Link_Port
}

func (link *Controller_Fabric_Fabric_Fsdbagg_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "fsdbagg"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("port", types.YChild{"Port", &link.Port})
    link.EntityData.Leafs = types.NewOrderedMap()

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Link_Port
// Set admin state of a fabric link port
type Controller_Fabric_Fabric_Fsdbagg_Link_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Fabric_Fsdbagg_Link_Port_Location.
    Location []*Controller_Fabric_Fabric_Fsdbagg_Link_Port_Location
}

func (port *Controller_Fabric_Fabric_Fsdbagg_Link_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "link"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Leafs = types.NewOrderedMap()

    port.EntityData.YListKeys = []string {}

    return &(port.EntityData)
}

// Controller_Fabric_Fabric_Fsdbagg_Link_Port_Location
type Controller_Fabric_Fabric_Fsdbagg_Link_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/(0?[0-5])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5])/(0?[0-9]|[1-2][0-9]|3[0-5]))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/(0?[0-2])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3])).
    LocStr interface{}

    // Shut down state. The type is interface{}.
    Shutdown interface{}

    // maintenance state. The type is interface{}.
    Maintenance interface{}
}

func (location *Controller_Fabric_Fabric_Fsdbagg_Link_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", location.Shutdown})
    location.EntityData.Leafs.Append("maintenance", types.YLeaf{"Maintenance", location.Maintenance})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Fabric_Fgid
type Controller_Fabric_Fabric_Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Resource Controller_Fabric_Fabric_Fgid_Resource
}

func (fgid *Controller_Fabric_Fabric_Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "fabric"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = types.NewOrderedMap()
    fgid.EntityData.Children.Append("resource", types.YChild{"Resource", &fgid.Resource})
    fgid.EntityData.Leafs = types.NewOrderedMap()

    fgid.EntityData.YListKeys = []string {}

    return &(fgid.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource
type Controller_Fabric_Fabric_Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Sdr Controller_Fabric_Fabric_Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Fabric_Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = types.NewOrderedMap()
    resource.EntityData.Children.Append("sdr", types.YChild{"Sdr", &resource.Sdr})
    resource.EntityData.Leafs = types.NewOrderedMap()

    resource.EntityData.YListKeys = []string {}

    return &(resource.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource_Sdr
type Controller_Fabric_Fabric_Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Allocation Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation
}

func (sdr *Controller_Fabric_Fabric_Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("allocation", types.YChild{"Allocation", &sdr.Allocation})
    sdr.EntityData.Leafs = types.NewOrderedMap()

    sdr.EntityData.YListKeys = []string {}

    return &(sdr.EntityData)
}

// Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation
type Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 20..50.
    Percent interface{}
}

func (allocation *Controller_Fabric_Fabric_Fgid_Resource_Sdr_Allocation) GetEntityData() *types.CommonEntityData {
    allocation.EntityData.YFilter = allocation.YFilter
    allocation.EntityData.YangName = "allocation"
    allocation.EntityData.BundleName = "cisco_ios_xr"
    allocation.EntityData.ParentYangName = "sdr"
    allocation.EntityData.SegmentPath = "allocation"
    allocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocation.EntityData.Children = types.NewOrderedMap()
    allocation.EntityData.Leafs = types.NewOrderedMap()
    allocation.EntityData.Leafs.Append("percent", types.YLeaf{"Percent", allocation.Percent})

    allocation.EntityData.YListKeys = []string {}

    return &(allocation.EntityData)
}

// Controller_Fabric_Oper
type Controller_Fabric_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Cxp Controller_Fabric_Oper_Cxp

    // FGID management information.
    Fgid Controller_Fabric_Oper_Fgid

    
    FsdbaggActive Controller_Fabric_Oper_FsdbaggActive

    
    FsdbaggLink Controller_Fabric_Oper_FsdbaggLink

    
    FsdbaggSfeAsicType Controller_Fabric_Oper_FsdbaggSfeAsicType

    
    FsdbaggStandby Controller_Fabric_Oper_FsdbaggStandby

    
    FabHealth Controller_Fabric_Oper_FabHealth

    // FSDB Aggregator information.
    FsdbAggregator Controller_Fabric_Oper_FsdbAggregator

    // Fabric link option.
    Link Controller_Fabric_Oper_Link

    // Switch Fabric Element option.
    Sfe Controller_Fabric_Oper_Sfe

    // plane availability status option.
    FsdbPla Controller_Fabric_Oper_FsdbPla

    // FSDB Server information.
    FsdbSrvr Controller_Fabric_Oper_FsdbSrvr
}

func (oper *Controller_Fabric_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "fabric"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = types.NewOrderedMap()
    oper.EntityData.Children.Append("cxp", types.YChild{"Cxp", &oper.Cxp})
    oper.EntityData.Children.Append("fgid", types.YChild{"Fgid", &oper.Fgid})
    oper.EntityData.Children.Append("fsdbagg_active", types.YChild{"FsdbaggActive", &oper.FsdbaggActive})
    oper.EntityData.Children.Append("fsdbagg_link", types.YChild{"FsdbaggLink", &oper.FsdbaggLink})
    oper.EntityData.Children.Append("fsdbagg_sfe_asic_type", types.YChild{"FsdbaggSfeAsicType", &oper.FsdbaggSfeAsicType})
    oper.EntityData.Children.Append("fsdbagg_standby", types.YChild{"FsdbaggStandby", &oper.FsdbaggStandby})
    oper.EntityData.Children.Append("fab_health", types.YChild{"FabHealth", &oper.FabHealth})
    oper.EntityData.Children.Append("fsdb-aggregator", types.YChild{"FsdbAggregator", &oper.FsdbAggregator})
    oper.EntityData.Children.Append("link", types.YChild{"Link", &oper.Link})
    oper.EntityData.Children.Append("sfe", types.YChild{"Sfe", &oper.Sfe})
    oper.EntityData.Children.Append("fsdb_pla", types.YChild{"FsdbPla", &oper.FsdbPla})
    oper.EntityData.Children.Append("fsdb_srvr", types.YChild{"FsdbSrvr", &oper.FsdbSrvr})
    oper.EntityData.Leafs = types.NewOrderedMap()

    oper.EntityData.YListKeys = []string {}

    return &(oper.EntityData)
}

// Controller_Fabric_Oper_Cxp
type Controller_Fabric_Oper_Cxp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Dom Controller_Fabric_Oper_Cxp_Dom

    
    Summary Controller_Fabric_Oper_Cxp_Summary
}

func (cxp *Controller_Fabric_Oper_Cxp) GetEntityData() *types.CommonEntityData {
    cxp.EntityData.YFilter = cxp.YFilter
    cxp.EntityData.YangName = "cxp"
    cxp.EntityData.BundleName = "cisco_ios_xr"
    cxp.EntityData.ParentYangName = "oper"
    cxp.EntityData.SegmentPath = "cxp"
    cxp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cxp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cxp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cxp.EntityData.Children = types.NewOrderedMap()
    cxp.EntityData.Children.Append("dom", types.YChild{"Dom", &cxp.Dom})
    cxp.EntityData.Children.Append("summary", types.YChild{"Summary", &cxp.Summary})
    cxp.EntityData.Leafs = types.NewOrderedMap()

    cxp.EntityData.YListKeys = []string {}

    return &(cxp.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom
type Controller_Fabric_Oper_Cxp_Dom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Cxp_Dom_Location.
    Location []*Controller_Fabric_Oper_Cxp_Dom_Location
}

func (dom *Controller_Fabric_Oper_Cxp_Dom) GetEntityData() *types.CommonEntityData {
    dom.EntityData.YFilter = dom.YFilter
    dom.EntityData.YangName = "dom"
    dom.EntityData.BundleName = "cisco_ios_xr"
    dom.EntityData.ParentYangName = "cxp"
    dom.EntityData.SegmentPath = "dom"
    dom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dom.EntityData.Children = types.NewOrderedMap()
    dom.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range dom.Location {
        dom.EntityData.Children.Append(types.GetSegmentPath(dom.Location[i]), types.YChild{"Location", dom.Location[i]})
    }
    dom.EntityData.Leafs = types.NewOrderedMap()

    dom.EntityData.YListKeys = []string {}

    return &(dom.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom_Location
type Controller_Fabric_Oper_Cxp_Dom_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Cxp_Dom_Location_Port.
    Port []*Controller_Fabric_Oper_Cxp_Dom_Location_Port
}

func (location *Controller_Fabric_Oper_Cxp_Dom_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "dom"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range location.Port {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Port[i]), types.YChild{"Port", location.Port[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom_Location_Port
type Controller_Fabric_Oper_Cxp_Dom_Location_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..31.
    CxpPort interface{}

    // The type is bool.
    ShowPort interface{}

    // The type is bool.
    Cxp2Display interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is string.
    CurLocStr interface{}

    // The type is string.
    Vendorname interface{}

    // The type is string.
    Partnumber interface{}

    // The type is string.
    Serialnumber interface{}

    // The type is string.
    Vid interface{}

    // The type is string.
    Pid interface{}

    // The type is interface{} with range: 0..4294967295.
    VendorRevNum interface{}

    // The type is string.
    VendorPn interface{}

    // The type is string.
    VendorSn interface{}

    // The type is string.
    DevDescription interface{}

    // The type is string.
    CleiCodeNum interface{}

    // The type is string.
    VenDateCode interface{}

    // The type is string.
    VenLotCode interface{}

    // The type is interface{} with range: 0..4294967295.
    VendorOuiIeeeCompanyId interface{}

    // The type is interface{} with range: 0..4294967295.
    EepromRevNum interface{}

    // The type is interface{} with range: 0..4294967295.
    FirmwareRevNum interface{}

    // The type is string.
    TXTempRd interface{}

    // The type is string.
    TXTempSts interface{}

    // The type is string.
    TXVoltSts interface{}

    // The type is string.
    TXVoltRd interface{}

    // The type is string.
    TxChnSts0 interface{}

    // The type is string.
    TxChnSts1 interface{}

    // The type is string.
    TxChnSts2 interface{}

    // The type is string.
    TxChnSts3 interface{}

    // The type is string.
    TxChnSts4 interface{}

    // The type is string.
    TxChnSts5 interface{}

    // The type is string.
    TxChnSts6 interface{}

    // The type is string.
    TxChnSts7 interface{}

    // The type is string.
    TxChnSts8 interface{}

    // The type is string.
    TxChnSts9 interface{}

    // The type is string.
    TxChnSts10 interface{}

    // The type is string.
    TxChnSts11 interface{}

    // The type is string.
    TxFault0 interface{}

    // The type is string.
    TxFault1 interface{}

    // The type is string.
    TxFault2 interface{}

    // The type is string.
    TxFault3 interface{}

    // The type is string.
    TxFault4 interface{}

    // The type is string.
    TxFault5 interface{}

    // The type is string.
    TxFault6 interface{}

    // The type is string.
    TxFault7 interface{}

    // The type is string.
    TxFault8 interface{}

    // The type is string.
    TxFault9 interface{}

    // The type is string.
    TxFault10 interface{}

    // The type is string.
    TxFault11 interface{}

    // The type is string.
    TxBiasCur0 interface{}

    // The type is string.
    TxBiasCur1 interface{}

    // The type is string.
    TxBiasCur2 interface{}

    // The type is string.
    TxBiasCur3 interface{}

    // The type is string.
    TxBiasCur4 interface{}

    // The type is string.
    TxBiasCur5 interface{}

    // The type is string.
    TxBiasCur6 interface{}

    // The type is string.
    TxBiasCur7 interface{}

    // The type is string.
    TxBiasCur8 interface{}

    // The type is string.
    TxBiasCur9 interface{}

    // The type is string.
    TxBiasCur10 interface{}

    // The type is string.
    TxBiasCur11 interface{}

    // The type is string.
    TxLos0 interface{}

    // The type is string.
    TxLos1 interface{}

    // The type is string.
    TxLos2 interface{}

    // The type is string.
    TxLos3 interface{}

    // The type is string.
    TxLos4 interface{}

    // The type is string.
    TxLos5 interface{}

    // The type is string.
    TxLos6 interface{}

    // The type is string.
    TxLos7 interface{}

    // The type is string.
    TxLos8 interface{}

    // The type is string.
    TxLos9 interface{}

    // The type is string.
    TxLos10 interface{}

    // The type is string.
    TxLos11 interface{}

    // The type is string.
    TxOptPwAlm0 interface{}

    // The type is string.
    TxOptPwAlm1 interface{}

    // The type is string.
    TxOptPwAlm2 interface{}

    // The type is string.
    TxOptPwAlm3 interface{}

    // The type is string.
    TxOptPwAlm4 interface{}

    // The type is string.
    TxOptPwAlm5 interface{}

    // The type is string.
    TxOptPwAlm6 interface{}

    // The type is string.
    TxOptPwAlm7 interface{}

    // The type is string.
    TxOptPwAlm8 interface{}

    // The type is string.
    TxOptPwAlm9 interface{}

    // The type is string.
    TxOptPwAlm10 interface{}

    // The type is string.
    TxOptPwAlm11 interface{}

    // The type is string.
    TxOptBsAlm0 interface{}

    // The type is string.
    TxOptBsAlm1 interface{}

    // The type is string.
    TxOptBsAlm2 interface{}

    // The type is string.
    TxOptBsAlm3 interface{}

    // The type is string.
    TxOptBsAlm4 interface{}

    // The type is string.
    TxOptBsAlm5 interface{}

    // The type is string.
    TxOptBsAlm6 interface{}

    // The type is string.
    TxOptBsAlm7 interface{}

    // The type is string.
    TxOptBsAlm8 interface{}

    // The type is string.
    TxOptBsAlm9 interface{}

    // The type is string.
    TxOptBsAlm10 interface{}

    // The type is string.
    TxOptBsAlm11 interface{}

    // The type is string.
    TxLightOpDBm0 interface{}

    // The type is string.
    TxLightOpDBm1 interface{}

    // The type is string.
    TxLightOpDBm2 interface{}

    // The type is string.
    TxLightOpDBm3 interface{}

    // The type is string.
    TxLightOpDBm4 interface{}

    // The type is string.
    TxLightOpDBm5 interface{}

    // The type is string.
    TxLightOpDBm6 interface{}

    // The type is string.
    TxLightOpDBm7 interface{}

    // The type is string.
    TxLightOpDBm8 interface{}

    // The type is string.
    TxLightOpDBm9 interface{}

    // The type is string.
    TxLightOpDBm10 interface{}

    // The type is string.
    TxLightOpDBm11 interface{}

    // The type is string.
    RXTempRd interface{}

    // The type is string.
    RXTempSts interface{}

    // The type is string.
    RXVoltSts interface{}

    // The type is string.
    RXVoltRd interface{}

    // The type is string.
    RxChnSts0 interface{}

    // The type is string.
    RxChnSts1 interface{}

    // The type is string.
    RxChnSts2 interface{}

    // The type is string.
    RxChnSts3 interface{}

    // The type is string.
    RxChnSts4 interface{}

    // The type is string.
    RxChnSts5 interface{}

    // The type is string.
    RxChnSts6 interface{}

    // The type is string.
    RxChnSts7 interface{}

    // The type is string.
    RxChnSts8 interface{}

    // The type is string.
    RxChnSts9 interface{}

    // The type is string.
    RxChnSts10 interface{}

    // The type is string.
    RxChnSts11 interface{}

    // The type is string.
    RxLos0 interface{}

    // The type is string.
    RxLos1 interface{}

    // The type is string.
    RxLos2 interface{}

    // The type is string.
    RxLos3 interface{}

    // The type is string.
    RxLos4 interface{}

    // The type is string.
    RxLos5 interface{}

    // The type is string.
    RxLos6 interface{}

    // The type is string.
    RxLos7 interface{}

    // The type is string.
    RxLos8 interface{}

    // The type is string.
    RxLos9 interface{}

    // The type is string.
    RxLos10 interface{}

    // The type is string.
    RxLos11 interface{}

    // The type is string.
    RxOptPwAlm0 interface{}

    // The type is string.
    RxOptPwAlm1 interface{}

    // The type is string.
    RxOptPwAlm2 interface{}

    // The type is string.
    RxOptPwAlm3 interface{}

    // The type is string.
    RxOptPwAlm4 interface{}

    // The type is string.
    RxOptPwAlm5 interface{}

    // The type is string.
    RxOptPwAlm6 interface{}

    // The type is string.
    RxOptPwAlm7 interface{}

    // The type is string.
    RxOptPwAlm8 interface{}

    // The type is string.
    RxOptPwAlm9 interface{}

    // The type is string.
    RxOptPwAlm10 interface{}

    // The type is string.
    RxOptPwAlm11 interface{}

    // The type is string.
    RxLightInDBm0 interface{}

    // The type is string.
    RxLightInDBm1 interface{}

    // The type is string.
    RxLightInDBm2 interface{}

    // The type is string.
    RxLightInDBm3 interface{}

    // The type is string.
    RxLightInDBm4 interface{}

    // The type is string.
    RxLightInDBm5 interface{}

    // The type is string.
    RxLightInDBm6 interface{}

    // The type is string.
    RxLightInDBm7 interface{}

    // The type is string.
    RxLightInDBm8 interface{}

    // The type is string.
    RxLightInDBm9 interface{}

    // The type is string.
    RxLightInDBm10 interface{}

    // The type is string.
    RxLightInDBm11 interface{}
}

func (port *Controller_Fabric_Oper_Cxp_Dom_Location_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "location"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.CxpPort, "cxp_port")
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("cxp_port", types.YLeaf{"CxpPort", port.CxpPort})
    port.EntityData.Leafs.Append("show_port", types.YLeaf{"ShowPort", port.ShowPort})
    port.EntityData.Leafs.Append("cxp2_display", types.YLeaf{"Cxp2Display", port.Cxp2Display})
    port.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", port.RackNum})
    port.EntityData.Leafs.Append("slot_num", types.YLeaf{"SlotNum", port.SlotNum})
    port.EntityData.Leafs.Append("cur_loc_str", types.YLeaf{"CurLocStr", port.CurLocStr})
    port.EntityData.Leafs.Append("vendorname", types.YLeaf{"Vendorname", port.Vendorname})
    port.EntityData.Leafs.Append("partnumber", types.YLeaf{"Partnumber", port.Partnumber})
    port.EntityData.Leafs.Append("serialnumber", types.YLeaf{"Serialnumber", port.Serialnumber})
    port.EntityData.Leafs.Append("vid", types.YLeaf{"Vid", port.Vid})
    port.EntityData.Leafs.Append("pid", types.YLeaf{"Pid", port.Pid})
    port.EntityData.Leafs.Append("vendor_rev_num", types.YLeaf{"VendorRevNum", port.VendorRevNum})
    port.EntityData.Leafs.Append("vendor_pn", types.YLeaf{"VendorPn", port.VendorPn})
    port.EntityData.Leafs.Append("vendor_sn", types.YLeaf{"VendorSn", port.VendorSn})
    port.EntityData.Leafs.Append("dev_description", types.YLeaf{"DevDescription", port.DevDescription})
    port.EntityData.Leafs.Append("clei_code_num", types.YLeaf{"CleiCodeNum", port.CleiCodeNum})
    port.EntityData.Leafs.Append("ven_date_code", types.YLeaf{"VenDateCode", port.VenDateCode})
    port.EntityData.Leafs.Append("ven_lot_code", types.YLeaf{"VenLotCode", port.VenLotCode})
    port.EntityData.Leafs.Append("vendor_oui_ieee_company_id", types.YLeaf{"VendorOuiIeeeCompanyId", port.VendorOuiIeeeCompanyId})
    port.EntityData.Leafs.Append("eeprom_rev_num", types.YLeaf{"EepromRevNum", port.EepromRevNum})
    port.EntityData.Leafs.Append("firmware_rev_num", types.YLeaf{"FirmwareRevNum", port.FirmwareRevNum})
    port.EntityData.Leafs.Append("TX_temp_rd", types.YLeaf{"TXTempRd", port.TXTempRd})
    port.EntityData.Leafs.Append("TX_temp_sts", types.YLeaf{"TXTempSts", port.TXTempSts})
    port.EntityData.Leafs.Append("TX_volt_sts", types.YLeaf{"TXVoltSts", port.TXVoltSts})
    port.EntityData.Leafs.Append("TX_volt_rd", types.YLeaf{"TXVoltRd", port.TXVoltRd})
    port.EntityData.Leafs.Append("tx_chn_sts0", types.YLeaf{"TxChnSts0", port.TxChnSts0})
    port.EntityData.Leafs.Append("tx_chn_sts1", types.YLeaf{"TxChnSts1", port.TxChnSts1})
    port.EntityData.Leafs.Append("tx_chn_sts2", types.YLeaf{"TxChnSts2", port.TxChnSts2})
    port.EntityData.Leafs.Append("tx_chn_sts3", types.YLeaf{"TxChnSts3", port.TxChnSts3})
    port.EntityData.Leafs.Append("tx_chn_sts4", types.YLeaf{"TxChnSts4", port.TxChnSts4})
    port.EntityData.Leafs.Append("tx_chn_sts5", types.YLeaf{"TxChnSts5", port.TxChnSts5})
    port.EntityData.Leafs.Append("tx_chn_sts6", types.YLeaf{"TxChnSts6", port.TxChnSts6})
    port.EntityData.Leafs.Append("tx_chn_sts7", types.YLeaf{"TxChnSts7", port.TxChnSts7})
    port.EntityData.Leafs.Append("tx_chn_sts8", types.YLeaf{"TxChnSts8", port.TxChnSts8})
    port.EntityData.Leafs.Append("tx_chn_sts9", types.YLeaf{"TxChnSts9", port.TxChnSts9})
    port.EntityData.Leafs.Append("tx_chn_sts10", types.YLeaf{"TxChnSts10", port.TxChnSts10})
    port.EntityData.Leafs.Append("tx_chn_sts11", types.YLeaf{"TxChnSts11", port.TxChnSts11})
    port.EntityData.Leafs.Append("tx_fault0", types.YLeaf{"TxFault0", port.TxFault0})
    port.EntityData.Leafs.Append("tx_fault1", types.YLeaf{"TxFault1", port.TxFault1})
    port.EntityData.Leafs.Append("tx_fault2", types.YLeaf{"TxFault2", port.TxFault2})
    port.EntityData.Leafs.Append("tx_fault3", types.YLeaf{"TxFault3", port.TxFault3})
    port.EntityData.Leafs.Append("tx_fault4", types.YLeaf{"TxFault4", port.TxFault4})
    port.EntityData.Leafs.Append("tx_fault5", types.YLeaf{"TxFault5", port.TxFault5})
    port.EntityData.Leafs.Append("tx_fault6", types.YLeaf{"TxFault6", port.TxFault6})
    port.EntityData.Leafs.Append("tx_fault7", types.YLeaf{"TxFault7", port.TxFault7})
    port.EntityData.Leafs.Append("tx_fault8", types.YLeaf{"TxFault8", port.TxFault8})
    port.EntityData.Leafs.Append("tx_fault9", types.YLeaf{"TxFault9", port.TxFault9})
    port.EntityData.Leafs.Append("tx_fault10", types.YLeaf{"TxFault10", port.TxFault10})
    port.EntityData.Leafs.Append("tx_fault11", types.YLeaf{"TxFault11", port.TxFault11})
    port.EntityData.Leafs.Append("tx_bias_cur0", types.YLeaf{"TxBiasCur0", port.TxBiasCur0})
    port.EntityData.Leafs.Append("tx_bias_cur1", types.YLeaf{"TxBiasCur1", port.TxBiasCur1})
    port.EntityData.Leafs.Append("tx_bias_cur2", types.YLeaf{"TxBiasCur2", port.TxBiasCur2})
    port.EntityData.Leafs.Append("tx_bias_cur3", types.YLeaf{"TxBiasCur3", port.TxBiasCur3})
    port.EntityData.Leafs.Append("tx_bias_cur4", types.YLeaf{"TxBiasCur4", port.TxBiasCur4})
    port.EntityData.Leafs.Append("tx_bias_cur5", types.YLeaf{"TxBiasCur5", port.TxBiasCur5})
    port.EntityData.Leafs.Append("tx_bias_cur6", types.YLeaf{"TxBiasCur6", port.TxBiasCur6})
    port.EntityData.Leafs.Append("tx_bias_cur7", types.YLeaf{"TxBiasCur7", port.TxBiasCur7})
    port.EntityData.Leafs.Append("tx_bias_cur8", types.YLeaf{"TxBiasCur8", port.TxBiasCur8})
    port.EntityData.Leafs.Append("tx_bias_cur9", types.YLeaf{"TxBiasCur9", port.TxBiasCur9})
    port.EntityData.Leafs.Append("tx_bias_cur10", types.YLeaf{"TxBiasCur10", port.TxBiasCur10})
    port.EntityData.Leafs.Append("tx_bias_cur11", types.YLeaf{"TxBiasCur11", port.TxBiasCur11})
    port.EntityData.Leafs.Append("tx_los0", types.YLeaf{"TxLos0", port.TxLos0})
    port.EntityData.Leafs.Append("tx_los1", types.YLeaf{"TxLos1", port.TxLos1})
    port.EntityData.Leafs.Append("tx_los2", types.YLeaf{"TxLos2", port.TxLos2})
    port.EntityData.Leafs.Append("tx_los3", types.YLeaf{"TxLos3", port.TxLos3})
    port.EntityData.Leafs.Append("tx_los4", types.YLeaf{"TxLos4", port.TxLos4})
    port.EntityData.Leafs.Append("tx_los5", types.YLeaf{"TxLos5", port.TxLos5})
    port.EntityData.Leafs.Append("tx_los6", types.YLeaf{"TxLos6", port.TxLos6})
    port.EntityData.Leafs.Append("tx_los7", types.YLeaf{"TxLos7", port.TxLos7})
    port.EntityData.Leafs.Append("tx_los8", types.YLeaf{"TxLos8", port.TxLos8})
    port.EntityData.Leafs.Append("tx_los9", types.YLeaf{"TxLos9", port.TxLos9})
    port.EntityData.Leafs.Append("tx_los10", types.YLeaf{"TxLos10", port.TxLos10})
    port.EntityData.Leafs.Append("tx_los11", types.YLeaf{"TxLos11", port.TxLos11})
    port.EntityData.Leafs.Append("tx_opt_pw_alm0", types.YLeaf{"TxOptPwAlm0", port.TxOptPwAlm0})
    port.EntityData.Leafs.Append("tx_opt_pw_alm1", types.YLeaf{"TxOptPwAlm1", port.TxOptPwAlm1})
    port.EntityData.Leafs.Append("tx_opt_pw_alm2", types.YLeaf{"TxOptPwAlm2", port.TxOptPwAlm2})
    port.EntityData.Leafs.Append("tx_opt_pw_alm3", types.YLeaf{"TxOptPwAlm3", port.TxOptPwAlm3})
    port.EntityData.Leafs.Append("tx_opt_pw_alm4", types.YLeaf{"TxOptPwAlm4", port.TxOptPwAlm4})
    port.EntityData.Leafs.Append("tx_opt_pw_alm5", types.YLeaf{"TxOptPwAlm5", port.TxOptPwAlm5})
    port.EntityData.Leafs.Append("tx_opt_pw_alm6", types.YLeaf{"TxOptPwAlm6", port.TxOptPwAlm6})
    port.EntityData.Leafs.Append("tx_opt_pw_alm7", types.YLeaf{"TxOptPwAlm7", port.TxOptPwAlm7})
    port.EntityData.Leafs.Append("tx_opt_pw_alm8", types.YLeaf{"TxOptPwAlm8", port.TxOptPwAlm8})
    port.EntityData.Leafs.Append("tx_opt_pw_alm9", types.YLeaf{"TxOptPwAlm9", port.TxOptPwAlm9})
    port.EntityData.Leafs.Append("tx_opt_pw_alm10", types.YLeaf{"TxOptPwAlm10", port.TxOptPwAlm10})
    port.EntityData.Leafs.Append("tx_opt_pw_alm11", types.YLeaf{"TxOptPwAlm11", port.TxOptPwAlm11})
    port.EntityData.Leafs.Append("tx_opt_bs_alm0", types.YLeaf{"TxOptBsAlm0", port.TxOptBsAlm0})
    port.EntityData.Leafs.Append("tx_opt_bs_alm1", types.YLeaf{"TxOptBsAlm1", port.TxOptBsAlm1})
    port.EntityData.Leafs.Append("tx_opt_bs_alm2", types.YLeaf{"TxOptBsAlm2", port.TxOptBsAlm2})
    port.EntityData.Leafs.Append("tx_opt_bs_alm3", types.YLeaf{"TxOptBsAlm3", port.TxOptBsAlm3})
    port.EntityData.Leafs.Append("tx_opt_bs_alm4", types.YLeaf{"TxOptBsAlm4", port.TxOptBsAlm4})
    port.EntityData.Leafs.Append("tx_opt_bs_alm5", types.YLeaf{"TxOptBsAlm5", port.TxOptBsAlm5})
    port.EntityData.Leafs.Append("tx_opt_bs_alm6", types.YLeaf{"TxOptBsAlm6", port.TxOptBsAlm6})
    port.EntityData.Leafs.Append("tx_opt_bs_alm7", types.YLeaf{"TxOptBsAlm7", port.TxOptBsAlm7})
    port.EntityData.Leafs.Append("tx_opt_bs_alm8", types.YLeaf{"TxOptBsAlm8", port.TxOptBsAlm8})
    port.EntityData.Leafs.Append("tx_opt_bs_alm9", types.YLeaf{"TxOptBsAlm9", port.TxOptBsAlm9})
    port.EntityData.Leafs.Append("tx_opt_bs_alm10", types.YLeaf{"TxOptBsAlm10", port.TxOptBsAlm10})
    port.EntityData.Leafs.Append("tx_opt_bs_alm11", types.YLeaf{"TxOptBsAlm11", port.TxOptBsAlm11})
    port.EntityData.Leafs.Append("tx_light_op_dBm0", types.YLeaf{"TxLightOpDBm0", port.TxLightOpDBm0})
    port.EntityData.Leafs.Append("tx_light_op_dBm1", types.YLeaf{"TxLightOpDBm1", port.TxLightOpDBm1})
    port.EntityData.Leafs.Append("tx_light_op_dBm2", types.YLeaf{"TxLightOpDBm2", port.TxLightOpDBm2})
    port.EntityData.Leafs.Append("tx_light_op_dBm3", types.YLeaf{"TxLightOpDBm3", port.TxLightOpDBm3})
    port.EntityData.Leafs.Append("tx_light_op_dBm4", types.YLeaf{"TxLightOpDBm4", port.TxLightOpDBm4})
    port.EntityData.Leafs.Append("tx_light_op_dBm5", types.YLeaf{"TxLightOpDBm5", port.TxLightOpDBm5})
    port.EntityData.Leafs.Append("tx_light_op_dBm6", types.YLeaf{"TxLightOpDBm6", port.TxLightOpDBm6})
    port.EntityData.Leafs.Append("tx_light_op_dBm7", types.YLeaf{"TxLightOpDBm7", port.TxLightOpDBm7})
    port.EntityData.Leafs.Append("tx_light_op_dBm8", types.YLeaf{"TxLightOpDBm8", port.TxLightOpDBm8})
    port.EntityData.Leafs.Append("tx_light_op_dBm9", types.YLeaf{"TxLightOpDBm9", port.TxLightOpDBm9})
    port.EntityData.Leafs.Append("tx_light_op_dBm10", types.YLeaf{"TxLightOpDBm10", port.TxLightOpDBm10})
    port.EntityData.Leafs.Append("tx_light_op_dBm11", types.YLeaf{"TxLightOpDBm11", port.TxLightOpDBm11})
    port.EntityData.Leafs.Append("RX_temp_rd", types.YLeaf{"RXTempRd", port.RXTempRd})
    port.EntityData.Leafs.Append("RX_temp_sts", types.YLeaf{"RXTempSts", port.RXTempSts})
    port.EntityData.Leafs.Append("RX_volt_sts", types.YLeaf{"RXVoltSts", port.RXVoltSts})
    port.EntityData.Leafs.Append("RX_volt_rd", types.YLeaf{"RXVoltRd", port.RXVoltRd})
    port.EntityData.Leafs.Append("rx_chn_sts0", types.YLeaf{"RxChnSts0", port.RxChnSts0})
    port.EntityData.Leafs.Append("rx_chn_sts1", types.YLeaf{"RxChnSts1", port.RxChnSts1})
    port.EntityData.Leafs.Append("rx_chn_sts2", types.YLeaf{"RxChnSts2", port.RxChnSts2})
    port.EntityData.Leafs.Append("rx_chn_sts3", types.YLeaf{"RxChnSts3", port.RxChnSts3})
    port.EntityData.Leafs.Append("rx_chn_sts4", types.YLeaf{"RxChnSts4", port.RxChnSts4})
    port.EntityData.Leafs.Append("rx_chn_sts5", types.YLeaf{"RxChnSts5", port.RxChnSts5})
    port.EntityData.Leafs.Append("rx_chn_sts6", types.YLeaf{"RxChnSts6", port.RxChnSts6})
    port.EntityData.Leafs.Append("rx_chn_sts7", types.YLeaf{"RxChnSts7", port.RxChnSts7})
    port.EntityData.Leafs.Append("rx_chn_sts8", types.YLeaf{"RxChnSts8", port.RxChnSts8})
    port.EntityData.Leafs.Append("rx_chn_sts9", types.YLeaf{"RxChnSts9", port.RxChnSts9})
    port.EntityData.Leafs.Append("rx_chn_sts10", types.YLeaf{"RxChnSts10", port.RxChnSts10})
    port.EntityData.Leafs.Append("rx_chn_sts11", types.YLeaf{"RxChnSts11", port.RxChnSts11})
    port.EntityData.Leafs.Append("rx_los0", types.YLeaf{"RxLos0", port.RxLos0})
    port.EntityData.Leafs.Append("rx_los1", types.YLeaf{"RxLos1", port.RxLos1})
    port.EntityData.Leafs.Append("rx_los2", types.YLeaf{"RxLos2", port.RxLos2})
    port.EntityData.Leafs.Append("rx_los3", types.YLeaf{"RxLos3", port.RxLos3})
    port.EntityData.Leafs.Append("rx_los4", types.YLeaf{"RxLos4", port.RxLos4})
    port.EntityData.Leafs.Append("rx_los5", types.YLeaf{"RxLos5", port.RxLos5})
    port.EntityData.Leafs.Append("rx_los6", types.YLeaf{"RxLos6", port.RxLos6})
    port.EntityData.Leafs.Append("rx_los7", types.YLeaf{"RxLos7", port.RxLos7})
    port.EntityData.Leafs.Append("rx_los8", types.YLeaf{"RxLos8", port.RxLos8})
    port.EntityData.Leafs.Append("rx_los9", types.YLeaf{"RxLos9", port.RxLos9})
    port.EntityData.Leafs.Append("rx_los10", types.YLeaf{"RxLos10", port.RxLos10})
    port.EntityData.Leafs.Append("rx_los11", types.YLeaf{"RxLos11", port.RxLos11})
    port.EntityData.Leafs.Append("rx_opt_pw_alm0", types.YLeaf{"RxOptPwAlm0", port.RxOptPwAlm0})
    port.EntityData.Leafs.Append("rx_opt_pw_alm1", types.YLeaf{"RxOptPwAlm1", port.RxOptPwAlm1})
    port.EntityData.Leafs.Append("rx_opt_pw_alm2", types.YLeaf{"RxOptPwAlm2", port.RxOptPwAlm2})
    port.EntityData.Leafs.Append("rx_opt_pw_alm3", types.YLeaf{"RxOptPwAlm3", port.RxOptPwAlm3})
    port.EntityData.Leafs.Append("rx_opt_pw_alm4", types.YLeaf{"RxOptPwAlm4", port.RxOptPwAlm4})
    port.EntityData.Leafs.Append("rx_opt_pw_alm5", types.YLeaf{"RxOptPwAlm5", port.RxOptPwAlm5})
    port.EntityData.Leafs.Append("rx_opt_pw_alm6", types.YLeaf{"RxOptPwAlm6", port.RxOptPwAlm6})
    port.EntityData.Leafs.Append("rx_opt_pw_alm7", types.YLeaf{"RxOptPwAlm7", port.RxOptPwAlm7})
    port.EntityData.Leafs.Append("rx_opt_pw_alm8", types.YLeaf{"RxOptPwAlm8", port.RxOptPwAlm8})
    port.EntityData.Leafs.Append("rx_opt_pw_alm9", types.YLeaf{"RxOptPwAlm9", port.RxOptPwAlm9})
    port.EntityData.Leafs.Append("rx_opt_pw_alm10", types.YLeaf{"RxOptPwAlm10", port.RxOptPwAlm10})
    port.EntityData.Leafs.Append("rx_opt_pw_alm11", types.YLeaf{"RxOptPwAlm11", port.RxOptPwAlm11})
    port.EntityData.Leafs.Append("rx_light_in_dBm0", types.YLeaf{"RxLightInDBm0", port.RxLightInDBm0})
    port.EntityData.Leafs.Append("rx_light_in_dBm1", types.YLeaf{"RxLightInDBm1", port.RxLightInDBm1})
    port.EntityData.Leafs.Append("rx_light_in_dBm2", types.YLeaf{"RxLightInDBm2", port.RxLightInDBm2})
    port.EntityData.Leafs.Append("rx_light_in_dBm3", types.YLeaf{"RxLightInDBm3", port.RxLightInDBm3})
    port.EntityData.Leafs.Append("rx_light_in_dBm4", types.YLeaf{"RxLightInDBm4", port.RxLightInDBm4})
    port.EntityData.Leafs.Append("rx_light_in_dBm5", types.YLeaf{"RxLightInDBm5", port.RxLightInDBm5})
    port.EntityData.Leafs.Append("rx_light_in_dBm6", types.YLeaf{"RxLightInDBm6", port.RxLightInDBm6})
    port.EntityData.Leafs.Append("rx_light_in_dBm7", types.YLeaf{"RxLightInDBm7", port.RxLightInDBm7})
    port.EntityData.Leafs.Append("rx_light_in_dBm8", types.YLeaf{"RxLightInDBm8", port.RxLightInDBm8})
    port.EntityData.Leafs.Append("rx_light_in_dBm9", types.YLeaf{"RxLightInDBm9", port.RxLightInDBm9})
    port.EntityData.Leafs.Append("rx_light_in_dBm10", types.YLeaf{"RxLightInDBm10", port.RxLightInDBm10})
    port.EntityData.Leafs.Append("rx_light_in_dBm11", types.YLeaf{"RxLightInDBm11", port.RxLightInDBm11})

    port.EntityData.YListKeys = []string {"CxpPort"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary
type Controller_Fabric_Oper_Cxp_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Cxp_Summary_Rack.
    Rack []*Controller_Fabric_Oper_Cxp_Summary_Rack
}

func (summary *Controller_Fabric_Oper_Cxp_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "cxp"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range summary.Rack {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Rack[i]), types.YChild{"Rack", summary.Rack[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack
type Controller_Fabric_Oper_Cxp_Summary_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    RackStr interface{}

    // The type is string. The default value is Rack No..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag.
    SplitTblFlag []*Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag
}

func (rack *Controller_Fabric_Oper_Cxp_Summary_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "summary"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackStr, "rack_str")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("split_tbl_flag", types.YChild{"SplitTblFlag", nil})
    for i := range rack.SplitTblFlag {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.SplitTblFlag[i]), types.YChild{"SplitTblFlag", rack.SplitTblFlag[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_str", types.YLeaf{"RackStr", rack.RackStr})
    rack.EntityData.Leafs.Append("description", types.YLeaf{"Description", rack.Description})

    rack.EntityData.YListKeys = []string {"RackStr"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag
type Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    TblSplt interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot.
    SmryPerSlot []*Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot
}

func (splitTblFlag *Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag) GetEntityData() *types.CommonEntityData {
    splitTblFlag.EntityData.YFilter = splitTblFlag.YFilter
    splitTblFlag.EntityData.YangName = "split_tbl_flag"
    splitTblFlag.EntityData.BundleName = "cisco_ios_xr"
    splitTblFlag.EntityData.ParentYangName = "rack"
    splitTblFlag.EntityData.SegmentPath = "split_tbl_flag" + types.AddKeyToken(splitTblFlag.TblSplt, "tbl_splt")
    splitTblFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    splitTblFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    splitTblFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    splitTblFlag.EntityData.Children = types.NewOrderedMap()
    splitTblFlag.EntityData.Children.Append("smry_per_slot", types.YChild{"SmryPerSlot", nil})
    for i := range splitTblFlag.SmryPerSlot {
        splitTblFlag.EntityData.Children.Append(types.GetSegmentPath(splitTblFlag.SmryPerSlot[i]), types.YChild{"SmryPerSlot", splitTblFlag.SmryPerSlot[i]})
    }
    splitTblFlag.EntityData.Leafs = types.NewOrderedMap()
    splitTblFlag.EntityData.Leafs.Append("tbl_splt", types.YLeaf{"TblSplt", splitTblFlag.TblSplt})

    splitTblFlag.EntityData.YListKeys = []string {"TblSplt"}

    return &(splitTblFlag.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot
type Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    SlotNo interface{}

    // The type is string.
    FuncRackName interface{}

    // The type is interface{} with range: 0..4294967295.
    MaxCxp interface{}

    // The type is bool. The default value is false.
    RowCxp1 interface{}

    // The type is bool. The default value is false.
    RowCxp2 interface{}

    // The type is bool. The default value is false.
    SlotRow interface{}

    // The type is bool.
    TblSpltFlag interface{}

    // The type is interface{} with range: 0..4294967295.
    CxpPortNo interface{}

    // The type is string.
    FcLocStr interface{}

    // The type is string.
    CxpSts0 interface{}

    // The type is string.
    CxpSts1 interface{}

    // The type is string.
    CxpSts2 interface{}

    // The type is string.
    CxpSts3 interface{}

    // The type is string.
    CxpSts4 interface{}

    // The type is string.
    CxpSts5 interface{}

    // The type is string.
    CxpSts6 interface{}

    // The type is string.
    CxpSts7 interface{}

    // The type is string.
    CxpSts8 interface{}

    // The type is string.
    CxpSts9 interface{}

    // The type is string.
    CxpSts10 interface{}

    // The type is string.
    CxpSts11 interface{}

    // The type is string.
    CxpSts12 interface{}

    // The type is string.
    CxpSts13 interface{}

    // The type is string.
    CxpSts14 interface{}

    // The type is string.
    CxpSts15 interface{}
}

func (smryPerSlot *Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot) GetEntityData() *types.CommonEntityData {
    smryPerSlot.EntityData.YFilter = smryPerSlot.YFilter
    smryPerSlot.EntityData.YangName = "smry_per_slot"
    smryPerSlot.EntityData.BundleName = "cisco_ios_xr"
    smryPerSlot.EntityData.ParentYangName = "split_tbl_flag"
    smryPerSlot.EntityData.SegmentPath = "smry_per_slot" + types.AddKeyToken(smryPerSlot.SlotNo, "slot_no")
    smryPerSlot.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    smryPerSlot.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    smryPerSlot.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    smryPerSlot.EntityData.Children = types.NewOrderedMap()
    smryPerSlot.EntityData.Leafs = types.NewOrderedMap()
    smryPerSlot.EntityData.Leafs.Append("slot_no", types.YLeaf{"SlotNo", smryPerSlot.SlotNo})
    smryPerSlot.EntityData.Leafs.Append("func_rack_name", types.YLeaf{"FuncRackName", smryPerSlot.FuncRackName})
    smryPerSlot.EntityData.Leafs.Append("max_cxp", types.YLeaf{"MaxCxp", smryPerSlot.MaxCxp})
    smryPerSlot.EntityData.Leafs.Append("row_cxp_1", types.YLeaf{"RowCxp1", smryPerSlot.RowCxp1})
    smryPerSlot.EntityData.Leafs.Append("row_cxp_2", types.YLeaf{"RowCxp2", smryPerSlot.RowCxp2})
    smryPerSlot.EntityData.Leafs.Append("slot_row", types.YLeaf{"SlotRow", smryPerSlot.SlotRow})
    smryPerSlot.EntityData.Leafs.Append("tbl_splt_flag", types.YLeaf{"TblSpltFlag", smryPerSlot.TblSpltFlag})
    smryPerSlot.EntityData.Leafs.Append("cxp_port_no", types.YLeaf{"CxpPortNo", smryPerSlot.CxpPortNo})
    smryPerSlot.EntityData.Leafs.Append("fc_loc_str", types.YLeaf{"FcLocStr", smryPerSlot.FcLocStr})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_0", types.YLeaf{"CxpSts0", smryPerSlot.CxpSts0})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_1", types.YLeaf{"CxpSts1", smryPerSlot.CxpSts1})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_2", types.YLeaf{"CxpSts2", smryPerSlot.CxpSts2})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_3", types.YLeaf{"CxpSts3", smryPerSlot.CxpSts3})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_4", types.YLeaf{"CxpSts4", smryPerSlot.CxpSts4})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_5", types.YLeaf{"CxpSts5", smryPerSlot.CxpSts5})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_6", types.YLeaf{"CxpSts6", smryPerSlot.CxpSts6})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_7", types.YLeaf{"CxpSts7", smryPerSlot.CxpSts7})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_8", types.YLeaf{"CxpSts8", smryPerSlot.CxpSts8})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_9", types.YLeaf{"CxpSts9", smryPerSlot.CxpSts9})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_10", types.YLeaf{"CxpSts10", smryPerSlot.CxpSts10})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_11", types.YLeaf{"CxpSts11", smryPerSlot.CxpSts11})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_12", types.YLeaf{"CxpSts12", smryPerSlot.CxpSts12})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_13", types.YLeaf{"CxpSts13", smryPerSlot.CxpSts13})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_14", types.YLeaf{"CxpSts14", smryPerSlot.CxpSts14})
    smryPerSlot.EntityData.Leafs.Append("cxp_sts_15", types.YLeaf{"CxpSts15", smryPerSlot.CxpSts15})

    smryPerSlot.EntityData.YListKeys = []string {"SlotNo"}

    return &(smryPerSlot.EntityData)
}

// Controller_Fabric_Oper_Fgid
// FGID management information
type Controller_Fabric_Oper_Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Information Controller_Fabric_Oper_Fgid_Information

    
    Resource Controller_Fabric_Oper_Fgid_Resource

    
    Statistics Controller_Fabric_Oper_Fgid_Statistics

    
    FgidMgr Controller_Fabric_Oper_Fgid_FgidMgr

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError.
    ProgramError []*Controller_Fabric_Oper_Fgid_ProgramError
}

func (fgid *Controller_Fabric_Oper_Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "oper"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = types.NewOrderedMap()
    fgid.EntityData.Children.Append("information", types.YChild{"Information", &fgid.Information})
    fgid.EntityData.Children.Append("resource", types.YChild{"Resource", &fgid.Resource})
    fgid.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fgid.Statistics})
    fgid.EntityData.Children.Append("fgid_mgr", types.YChild{"FgidMgr", &fgid.FgidMgr})
    fgid.EntityData.Children.Append("program_error", types.YChild{"ProgramError", nil})
    for i := range fgid.ProgramError {
        fgid.EntityData.Children.Append(types.GetSegmentPath(fgid.ProgramError[i]), types.YChild{"ProgramError", fgid.ProgramError[i]})
    }
    fgid.EntityData.Leafs = types.NewOrderedMap()

    fgid.EntityData.YListKeys = []string {}

    return &(fgid.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information
type Controller_Fabric_Oper_Fgid_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id.
    Id []*Controller_Fabric_Oper_Fgid_Information_Id
}

func (information *Controller_Fabric_Oper_Fgid_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "fgid"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Children.Append("id", types.YChild{"Id", nil})
    for i := range information.Id {
        information.EntityData.Children.Append(types.GetSegmentPath(information.Id[i]), types.YChild{"Id", information.Id[i]})
    }
    information.EntityData.Leafs = types.NewOrderedMap()

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id
type Controller_Fabric_Oper_Fgid_Information_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..524287.
    FgidId interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAssoFabricqIds interface{}

    // The type is string.
    AssoClientInfo interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps.
    HexBitmaps []*Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps.
    BinaryBitmaps []*Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds.
    AssoFabricqIds []*Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_Drivers.
    Drivers []*Controller_Fabric_Oper_Fgid_Information_Id_Drivers
}

func (id *Controller_Fabric_Oper_Fgid_Information_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "information"
    id.EntityData.SegmentPath = "id" + types.AddKeyToken(id.FgidId, "fgid_id")
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = types.NewOrderedMap()
    id.EntityData.Children.Append("hex_bitmaps", types.YChild{"HexBitmaps", nil})
    for i := range id.HexBitmaps {
        id.EntityData.Children.Append(types.GetSegmentPath(id.HexBitmaps[i]), types.YChild{"HexBitmaps", id.HexBitmaps[i]})
    }
    id.EntityData.Children.Append("binary_bitmaps", types.YChild{"BinaryBitmaps", nil})
    for i := range id.BinaryBitmaps {
        id.EntityData.Children.Append(types.GetSegmentPath(id.BinaryBitmaps[i]), types.YChild{"BinaryBitmaps", id.BinaryBitmaps[i]})
    }
    id.EntityData.Children.Append("asso_fabricq_ids", types.YChild{"AssoFabricqIds", nil})
    for i := range id.AssoFabricqIds {
        id.EntityData.Children.Append(types.GetSegmentPath(id.AssoFabricqIds[i]), types.YChild{"AssoFabricqIds", id.AssoFabricqIds[i]})
    }
    id.EntityData.Children.Append("drivers", types.YChild{"Drivers", nil})
    for i := range id.Drivers {
        id.EntityData.Children.Append(types.GetSegmentPath(id.Drivers[i]), types.YChild{"Drivers", id.Drivers[i]})
    }
    id.EntityData.Leafs = types.NewOrderedMap()
    id.EntityData.Leafs.Append("fgid_id", types.YLeaf{"FgidId", id.FgidId})
    id.EntityData.Leafs.Append("total_asso_fabricq_ids", types.YLeaf{"TotalAssoFabricqIds", id.TotalAssoFabricqIds})
    id.EntityData.Leafs.Append("asso_client_info", types.YLeaf{"AssoClientInfo", id.AssoClientInfo})

    id.EntityData.YListKeys = []string {"FgidId"}

    return &(id.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (hexBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps) GetEntityData() *types.CommonEntityData {
    hexBitmaps.EntityData.YFilter = hexBitmaps.YFilter
    hexBitmaps.EntityData.YangName = "hex_bitmaps"
    hexBitmaps.EntityData.BundleName = "cisco_ios_xr"
    hexBitmaps.EntityData.ParentYangName = "id"
    hexBitmaps.EntityData.SegmentPath = "hex_bitmaps" + types.AddKeyToken(hexBitmaps.RackNumber, "rack_number")
    hexBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hexBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hexBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hexBitmaps.EntityData.Children = types.NewOrderedMap()
    hexBitmaps.EntityData.Leafs = types.NewOrderedMap()
    hexBitmaps.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", hexBitmaps.RackNumber})
    hexBitmaps.EntityData.Leafs.Append("bitmap", types.YLeaf{"Bitmap", hexBitmaps.Bitmap})

    hexBitmaps.EntityData.YListKeys = []string {"RackNumber"}

    return &(hexBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (binaryBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps) GetEntityData() *types.CommonEntityData {
    binaryBitmaps.EntityData.YFilter = binaryBitmaps.YFilter
    binaryBitmaps.EntityData.YangName = "binary_bitmaps"
    binaryBitmaps.EntityData.BundleName = "cisco_ios_xr"
    binaryBitmaps.EntityData.ParentYangName = "id"
    binaryBitmaps.EntityData.SegmentPath = "binary_bitmaps" + types.AddKeyToken(binaryBitmaps.RackNumber, "rack_number")
    binaryBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binaryBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binaryBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binaryBitmaps.EntityData.Children = types.NewOrderedMap()
    binaryBitmaps.EntityData.Leafs = types.NewOrderedMap()
    binaryBitmaps.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", binaryBitmaps.RackNumber})
    binaryBitmaps.EntityData.Leafs.Append("bitmap", types.YLeaf{"Bitmap", binaryBitmaps.Bitmap})

    binaryBitmaps.EntityData.YListKeys = []string {"RackNumber"}

    return &(binaryBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds
type Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FabricqId interface{}
}

func (assoFabricqIds *Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds) GetEntityData() *types.CommonEntityData {
    assoFabricqIds.EntityData.YFilter = assoFabricqIds.YFilter
    assoFabricqIds.EntityData.YangName = "asso_fabricq_ids"
    assoFabricqIds.EntityData.BundleName = "cisco_ios_xr"
    assoFabricqIds.EntityData.ParentYangName = "id"
    assoFabricqIds.EntityData.SegmentPath = "asso_fabricq_ids" + types.AddKeyToken(assoFabricqIds.FabricqId, "fabricq_id")
    assoFabricqIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assoFabricqIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assoFabricqIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assoFabricqIds.EntityData.Children = types.NewOrderedMap()
    assoFabricqIds.EntityData.Leafs = types.NewOrderedMap()
    assoFabricqIds.EntityData.Leafs.Append("fabricq_id", types.YLeaf{"FabricqId", assoFabricqIds.FabricqId})

    assoFabricqIds.EntityData.YListKeys = []string {"FabricqId"}

    return &(assoFabricqIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients.
    Clients []*Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
}

func (drivers *Controller_Fabric_Oper_Fgid_Information_Id_Drivers) GetEntityData() *types.CommonEntityData {
    drivers.EntityData.YFilter = drivers.YFilter
    drivers.EntityData.YangName = "drivers"
    drivers.EntityData.BundleName = "cisco_ios_xr"
    drivers.EntityData.ParentYangName = "id"
    drivers.EntityData.SegmentPath = "drivers" + types.AddKeyToken(drivers.RackNumber, "rack_number")
    drivers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drivers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drivers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drivers.EntityData.Children = types.NewOrderedMap()
    drivers.EntityData.Children.Append("clients", types.YChild{"Clients", nil})
    for i := range drivers.Clients {
        drivers.EntityData.Children.Append(types.GetSegmentPath(drivers.Clients[i]), types.YChild{"Clients", drivers.Clients[i]})
    }
    drivers.EntityData.Leafs = types.NewOrderedMap()
    drivers.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", drivers.RackNumber})

    drivers.EntityData.YListKeys = []string {"RackNumber"}

    return &(drivers.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientIdx interface{}

    // The type is bool. The default value is false.
    ShowAsic0 interface{}

    // The type is string.
    Asic0Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic1 interface{}

    // The type is string.
    Asic1Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic2 interface{}

    // The type is string.
    Asic2Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic3 interface{}

    // The type is string.
    Asic3Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic4 interface{}

    // The type is string.
    Asic4Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic5 interface{}

    // The type is string.
    Asic5Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic6 interface{}

    // The type is string.
    Asic6Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic7 interface{}

    // The type is string.
    Asic7Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic8 interface{}

    // The type is string.
    Asic8Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic9 interface{}

    // The type is string.
    Asic9Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic10 interface{}

    // The type is string.
    Asic10Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic11 interface{}

    // The type is string.
    Asic11Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic12 interface{}

    // The type is string.
    Asic12Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic13 interface{}

    // The type is string.
    Asic13Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic14 interface{}

    // The type is string.
    Asic14Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic15 interface{}

    // The type is string.
    Asic15Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic16 interface{}

    // The type is string.
    Asic16Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic17 interface{}

    // The type is string.
    Asic17Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic18 interface{}

    // The type is string.
    Asic18Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic19 interface{}

    // The type is string.
    Asic19Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic20 interface{}

    // The type is string.
    Asic20Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic21 interface{}

    // The type is string.
    Asic21Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic22 interface{}

    // The type is string.
    Asic22Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic23 interface{}

    // The type is string.
    Asic23Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic24 interface{}

    // The type is string.
    Asic24Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic25 interface{}

    // The type is string.
    Asic25Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic26 interface{}

    // The type is string.
    Asic26Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic27 interface{}

    // The type is string.
    Asic27Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic28 interface{}

    // The type is string.
    Asic28Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic29 interface{}

    // The type is string.
    Asic29Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic30 interface{}

    // The type is string.
    Asic30Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic31 interface{}

    // The type is string.
    Asic31Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic32 interface{}

    // The type is string.
    Asic32Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic33 interface{}

    // The type is string.
    Asic33Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic34 interface{}

    // The type is string.
    Asic34Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic35 interface{}

    // The type is string.
    Asic35Bitmap interface{}
}

func (clients *Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients) GetEntityData() *types.CommonEntityData {
    clients.EntityData.YFilter = clients.YFilter
    clients.EntityData.YangName = "clients"
    clients.EntityData.BundleName = "cisco_ios_xr"
    clients.EntityData.ParentYangName = "drivers"
    clients.EntityData.SegmentPath = "clients" + types.AddKeyToken(clients.ClientIdx, "client_idx")
    clients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clients.EntityData.Children = types.NewOrderedMap()
    clients.EntityData.Leafs = types.NewOrderedMap()
    clients.EntityData.Leafs.Append("client_idx", types.YLeaf{"ClientIdx", clients.ClientIdx})
    clients.EntityData.Leafs.Append("show_asic_0", types.YLeaf{"ShowAsic0", clients.ShowAsic0})
    clients.EntityData.Leafs.Append("asic_0_bitmap", types.YLeaf{"Asic0Bitmap", clients.Asic0Bitmap})
    clients.EntityData.Leafs.Append("show_asic_1", types.YLeaf{"ShowAsic1", clients.ShowAsic1})
    clients.EntityData.Leafs.Append("asic_1_bitmap", types.YLeaf{"Asic1Bitmap", clients.Asic1Bitmap})
    clients.EntityData.Leafs.Append("show_asic_2", types.YLeaf{"ShowAsic2", clients.ShowAsic2})
    clients.EntityData.Leafs.Append("asic_2_bitmap", types.YLeaf{"Asic2Bitmap", clients.Asic2Bitmap})
    clients.EntityData.Leafs.Append("show_asic_3", types.YLeaf{"ShowAsic3", clients.ShowAsic3})
    clients.EntityData.Leafs.Append("asic_3_bitmap", types.YLeaf{"Asic3Bitmap", clients.Asic3Bitmap})
    clients.EntityData.Leafs.Append("show_asic_4", types.YLeaf{"ShowAsic4", clients.ShowAsic4})
    clients.EntityData.Leafs.Append("asic_4_bitmap", types.YLeaf{"Asic4Bitmap", clients.Asic4Bitmap})
    clients.EntityData.Leafs.Append("show_asic_5", types.YLeaf{"ShowAsic5", clients.ShowAsic5})
    clients.EntityData.Leafs.Append("asic_5_bitmap", types.YLeaf{"Asic5Bitmap", clients.Asic5Bitmap})
    clients.EntityData.Leafs.Append("show_asic_6", types.YLeaf{"ShowAsic6", clients.ShowAsic6})
    clients.EntityData.Leafs.Append("asic_6_bitmap", types.YLeaf{"Asic6Bitmap", clients.Asic6Bitmap})
    clients.EntityData.Leafs.Append("show_asic_7", types.YLeaf{"ShowAsic7", clients.ShowAsic7})
    clients.EntityData.Leafs.Append("asic_7_bitmap", types.YLeaf{"Asic7Bitmap", clients.Asic7Bitmap})
    clients.EntityData.Leafs.Append("show_asic_8", types.YLeaf{"ShowAsic8", clients.ShowAsic8})
    clients.EntityData.Leafs.Append("asic_8_bitmap", types.YLeaf{"Asic8Bitmap", clients.Asic8Bitmap})
    clients.EntityData.Leafs.Append("show_asic_9", types.YLeaf{"ShowAsic9", clients.ShowAsic9})
    clients.EntityData.Leafs.Append("asic_9_bitmap", types.YLeaf{"Asic9Bitmap", clients.Asic9Bitmap})
    clients.EntityData.Leafs.Append("show_asic_10", types.YLeaf{"ShowAsic10", clients.ShowAsic10})
    clients.EntityData.Leafs.Append("asic_10_bitmap", types.YLeaf{"Asic10Bitmap", clients.Asic10Bitmap})
    clients.EntityData.Leafs.Append("show_asic_11", types.YLeaf{"ShowAsic11", clients.ShowAsic11})
    clients.EntityData.Leafs.Append("asic_11_bitmap", types.YLeaf{"Asic11Bitmap", clients.Asic11Bitmap})
    clients.EntityData.Leafs.Append("show_asic_12", types.YLeaf{"ShowAsic12", clients.ShowAsic12})
    clients.EntityData.Leafs.Append("asic_12_bitmap", types.YLeaf{"Asic12Bitmap", clients.Asic12Bitmap})
    clients.EntityData.Leafs.Append("show_asic_13", types.YLeaf{"ShowAsic13", clients.ShowAsic13})
    clients.EntityData.Leafs.Append("asic_13_bitmap", types.YLeaf{"Asic13Bitmap", clients.Asic13Bitmap})
    clients.EntityData.Leafs.Append("show_asic_14", types.YLeaf{"ShowAsic14", clients.ShowAsic14})
    clients.EntityData.Leafs.Append("asic_14_bitmap", types.YLeaf{"Asic14Bitmap", clients.Asic14Bitmap})
    clients.EntityData.Leafs.Append("show_asic_15", types.YLeaf{"ShowAsic15", clients.ShowAsic15})
    clients.EntityData.Leafs.Append("asic_15_bitmap", types.YLeaf{"Asic15Bitmap", clients.Asic15Bitmap})
    clients.EntityData.Leafs.Append("show_asic_16", types.YLeaf{"ShowAsic16", clients.ShowAsic16})
    clients.EntityData.Leafs.Append("asic_16_bitmap", types.YLeaf{"Asic16Bitmap", clients.Asic16Bitmap})
    clients.EntityData.Leafs.Append("show_asic_17", types.YLeaf{"ShowAsic17", clients.ShowAsic17})
    clients.EntityData.Leafs.Append("asic_17_bitmap", types.YLeaf{"Asic17Bitmap", clients.Asic17Bitmap})
    clients.EntityData.Leafs.Append("show_asic_18", types.YLeaf{"ShowAsic18", clients.ShowAsic18})
    clients.EntityData.Leafs.Append("asic_18_bitmap", types.YLeaf{"Asic18Bitmap", clients.Asic18Bitmap})
    clients.EntityData.Leafs.Append("show_asic_19", types.YLeaf{"ShowAsic19", clients.ShowAsic19})
    clients.EntityData.Leafs.Append("asic_19_bitmap", types.YLeaf{"Asic19Bitmap", clients.Asic19Bitmap})
    clients.EntityData.Leafs.Append("show_asic_20", types.YLeaf{"ShowAsic20", clients.ShowAsic20})
    clients.EntityData.Leafs.Append("asic_20_bitmap", types.YLeaf{"Asic20Bitmap", clients.Asic20Bitmap})
    clients.EntityData.Leafs.Append("show_asic_21", types.YLeaf{"ShowAsic21", clients.ShowAsic21})
    clients.EntityData.Leafs.Append("asic_21_bitmap", types.YLeaf{"Asic21Bitmap", clients.Asic21Bitmap})
    clients.EntityData.Leafs.Append("show_asic_22", types.YLeaf{"ShowAsic22", clients.ShowAsic22})
    clients.EntityData.Leafs.Append("asic_22_bitmap", types.YLeaf{"Asic22Bitmap", clients.Asic22Bitmap})
    clients.EntityData.Leafs.Append("show_asic_23", types.YLeaf{"ShowAsic23", clients.ShowAsic23})
    clients.EntityData.Leafs.Append("asic_23_bitmap", types.YLeaf{"Asic23Bitmap", clients.Asic23Bitmap})
    clients.EntityData.Leafs.Append("show_asic_24", types.YLeaf{"ShowAsic24", clients.ShowAsic24})
    clients.EntityData.Leafs.Append("asic_24_bitmap", types.YLeaf{"Asic24Bitmap", clients.Asic24Bitmap})
    clients.EntityData.Leafs.Append("show_asic_25", types.YLeaf{"ShowAsic25", clients.ShowAsic25})
    clients.EntityData.Leafs.Append("asic_25_bitmap", types.YLeaf{"Asic25Bitmap", clients.Asic25Bitmap})
    clients.EntityData.Leafs.Append("show_asic_26", types.YLeaf{"ShowAsic26", clients.ShowAsic26})
    clients.EntityData.Leafs.Append("asic_26_bitmap", types.YLeaf{"Asic26Bitmap", clients.Asic26Bitmap})
    clients.EntityData.Leafs.Append("show_asic_27", types.YLeaf{"ShowAsic27", clients.ShowAsic27})
    clients.EntityData.Leafs.Append("asic_27_bitmap", types.YLeaf{"Asic27Bitmap", clients.Asic27Bitmap})
    clients.EntityData.Leafs.Append("show_asic_28", types.YLeaf{"ShowAsic28", clients.ShowAsic28})
    clients.EntityData.Leafs.Append("asic_28_bitmap", types.YLeaf{"Asic28Bitmap", clients.Asic28Bitmap})
    clients.EntityData.Leafs.Append("show_asic_29", types.YLeaf{"ShowAsic29", clients.ShowAsic29})
    clients.EntityData.Leafs.Append("asic_29_bitmap", types.YLeaf{"Asic29Bitmap", clients.Asic29Bitmap})
    clients.EntityData.Leafs.Append("show_asic_30", types.YLeaf{"ShowAsic30", clients.ShowAsic30})
    clients.EntityData.Leafs.Append("asic_30_bitmap", types.YLeaf{"Asic30Bitmap", clients.Asic30Bitmap})
    clients.EntityData.Leafs.Append("show_asic_31", types.YLeaf{"ShowAsic31", clients.ShowAsic31})
    clients.EntityData.Leafs.Append("asic_31_bitmap", types.YLeaf{"Asic31Bitmap", clients.Asic31Bitmap})
    clients.EntityData.Leafs.Append("show_asic_32", types.YLeaf{"ShowAsic32", clients.ShowAsic32})
    clients.EntityData.Leafs.Append("asic_32_bitmap", types.YLeaf{"Asic32Bitmap", clients.Asic32Bitmap})
    clients.EntityData.Leafs.Append("show_asic_33", types.YLeaf{"ShowAsic33", clients.ShowAsic33})
    clients.EntityData.Leafs.Append("asic_33_bitmap", types.YLeaf{"Asic33Bitmap", clients.Asic33Bitmap})
    clients.EntityData.Leafs.Append("show_asic_34", types.YLeaf{"ShowAsic34", clients.ShowAsic34})
    clients.EntityData.Leafs.Append("asic_34_bitmap", types.YLeaf{"Asic34Bitmap", clients.Asic34Bitmap})
    clients.EntityData.Leafs.Append("show_asic_35", types.YLeaf{"ShowAsic35", clients.ShowAsic35})
    clients.EntityData.Leafs.Append("asic_35_bitmap", types.YLeaf{"Asic35Bitmap", clients.Asic35Bitmap})

    clients.EntityData.YListKeys = []string {"ClientIdx"}

    return &(clients.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource
type Controller_Fabric_Oper_Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr.
    Sdr []*Controller_Fabric_Oper_Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Oper_Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = types.NewOrderedMap()
    resource.EntityData.Children.Append("sdr", types.YChild{"Sdr", nil})
    for i := range resource.Sdr {
        resource.EntityData.Children.Append(types.GetSegmentPath(resource.Sdr[i]), types.YChild{"Sdr", resource.Sdr[i]})
    }
    resource.EntityData.Leafs = types.NewOrderedMap()

    resource.EntityData.YListKeys = []string {}

    return &(resource.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr
type Controller_Fabric_Oper_Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr_Application.
    Application []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
}

func (sdr *Controller_Fabric_Oper_Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr" + types.AddKeyToken(sdr.SdrName, "sdr_name")
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdr.Application {
        sdr.EntityData.Children.Append(types.GetSegmentPath(sdr.Application[i]), types.YChild{"Application", sdr.Application[i]})
    }
    sdr.EntityData.Leafs = types.NewOrderedMap()
    sdr.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdr.SdrName})
    sdr.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdr.Description})

    sdr.EntityData.YListKeys = []string {"SdrName"}

    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange.
    IdsRange []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
}

func (application *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Children.Append("ids_range", types.YChild{"IdsRange", nil})
    for i := range application.IdsRange {
        application.EntityData.Children.Append(types.GetSegmentPath(application.IdsRange[i]), types.YChild{"IdsRange", application.IdsRange[i]})
    }
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..524287.
    Id interface{}

    // This attribute is a key. The type is interface{} with range: 0..524288.
    Elements interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds.
    FgidIds []*Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
}

func (idsRange *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange) GetEntityData() *types.CommonEntityData {
    idsRange.EntityData.YFilter = idsRange.YFilter
    idsRange.EntityData.YangName = "ids_range"
    idsRange.EntityData.BundleName = "cisco_ios_xr"
    idsRange.EntityData.ParentYangName = "application"
    idsRange.EntityData.SegmentPath = "ids_range" + types.AddKeyToken(idsRange.Id, "id") + types.AddKeyToken(idsRange.Elements, "elements")
    idsRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idsRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idsRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idsRange.EntityData.Children = types.NewOrderedMap()
    idsRange.EntityData.Children.Append("fgid_ids", types.YChild{"FgidIds", nil})
    for i := range idsRange.FgidIds {
        idsRange.EntityData.Children.Append(types.GetSegmentPath(idsRange.FgidIds[i]), types.YChild{"FgidIds", idsRange.FgidIds[i]})
    }
    idsRange.EntityData.Leafs = types.NewOrderedMap()
    idsRange.EntityData.Leafs.Append("id", types.YLeaf{"Id", idsRange.Id})
    idsRange.EntityData.Leafs.Append("elements", types.YLeaf{"Elements", idsRange.Elements})

    idsRange.EntityData.YListKeys = []string {"Id", "Elements"}

    return &(idsRange.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FgidId interface{}

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    LineIdx interface{}

    // The type is string.
    SdrNameH interface{}

    // The type is string.
    AppNameH interface{}
}

func (fgidIds *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds) GetEntityData() *types.CommonEntityData {
    fgidIds.EntityData.YFilter = fgidIds.YFilter
    fgidIds.EntityData.YangName = "fgid_ids"
    fgidIds.EntityData.BundleName = "cisco_ios_xr"
    fgidIds.EntityData.ParentYangName = "ids_range"
    fgidIds.EntityData.SegmentPath = "fgid_ids" + types.AddKeyToken(fgidIds.FgidId, "fgid_id") + types.AddKeyToken(fgidIds.LineIdx, "line_idx")
    fgidIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidIds.EntityData.Children = types.NewOrderedMap()
    fgidIds.EntityData.Leafs = types.NewOrderedMap()
    fgidIds.EntityData.Leafs.Append("fgid_id", types.YLeaf{"FgidId", fgidIds.FgidId})
    fgidIds.EntityData.Leafs.Append("line_idx", types.YLeaf{"LineIdx", fgidIds.LineIdx})
    fgidIds.EntityData.Leafs.Append("sdr_name_h", types.YLeaf{"SdrNameH", fgidIds.SdrNameH})
    fgidIds.EntityData.Leafs.Append("app_name_h", types.YLeaf{"AppNameH", fgidIds.AppNameH})

    fgidIds.EntityData.YListKeys = []string {"FgidId", "LineIdx"}

    return &(fgidIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics
type Controller_Fabric_Oper_Fgid_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_Fgid_Statistics_All

    
    Sdr Controller_Fabric_Oper_Fgid_Statistics_Sdr

    
    Pool Controller_Fabric_Oper_Fgid_Statistics_Pool

    
    System Controller_Fabric_Oper_Fgid_Statistics_System
}

func (statistics *Controller_Fabric_Oper_Fgid_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fgid"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("all", types.YChild{"All", &statistics.All})
    statistics.EntityData.Children.Append("sdr", types.YChild{"Sdr", &statistics.Sdr})
    statistics.EntityData.Children.Append("pool", types.YChild{"Pool", &statistics.Pool})
    statistics.EntityData.Children.Append("system", types.YChild{"System", &statistics.System})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All
type Controller_Fabric_Oper_Fgid_Statistics_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_StatsList.
    StatsList []*Controller_Fabric_Oper_Fgid_Statistics_All_StatsList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_SdrList.
    SdrList []*Controller_Fabric_Oper_Fgid_Statistics_All_SdrList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_PoolList.
    PoolList []*Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
}

func (all *Controller_Fabric_Oper_Fgid_Statistics_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "statistics"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("stats_list", types.YChild{"StatsList", nil})
    for i := range all.StatsList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.StatsList[i]), types.YChild{"StatsList", all.StatsList[i]})
    }
    all.EntityData.Children.Append("sdr_list", types.YChild{"SdrList", nil})
    for i := range all.SdrList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.SdrList[i]), types.YChild{"SdrList", all.SdrList[i]})
    }
    all.EntityData.Children.Append("pool_list", types.YChild{"PoolList", nil})
    for i := range all.PoolList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.PoolList[i]), types.YChild{"PoolList", all.PoolList[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_All_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_All_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "all"
    statsList.EntityData.SegmentPath = "stats_list" + types.AddKeyToken(statsList.SystemStats, "system_stats")
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = types.NewOrderedMap()
    statsList.EntityData.Leafs = types.NewOrderedMap()
    statsList.EntityData.Leafs.Append("system_stats", types.YLeaf{"SystemStats", statsList.SystemStats})
    statsList.EntityData.Leafs.Append("system_total_fgids", types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids})
    statsList.EntityData.Leafs.Append("system_inuse_fgids", types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids})
    statsList.EntityData.Leafs.Append("system_hwm_fgids", types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids})

    statsList.EntityData.YListKeys = []string {"SystemStats"}

    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application.
    Application []*Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "all"
    sdrList.EntityData.SegmentPath = "sdr_list" + types.AddKeyToken(sdrList.SdrName, "sdr_name")
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = types.NewOrderedMap()
    sdrList.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdrList.Application {
        sdrList.EntityData.Children.Append(types.GetSegmentPath(sdrList.Application[i]), types.YChild{"Application", sdrList.Application[i]})
    }
    sdrList.EntityData.Leafs = types.NewOrderedMap()
    sdrList.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdrList.SdrName})
    sdrList.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdrList.Description})
    sdrList.EntityData.Leafs.Append("sdr_total_fgids", types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids})
    sdrList.EntityData.Leafs.Append("sdr_inuse_fgids", types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids})
    sdrList.EntityData.Leafs.Append("sdr_hwm_fgids", types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids})

    sdrList.EntityData.YListKeys = []string {"SdrName"}

    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})
    application.EntityData.Leafs.Append("app_id", types.YLeaf{"AppId", application.AppId})
    application.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", application.PoolId})
    application.EntityData.Leafs.Append("inuse_fgids", types.YLeaf{"InuseFgids", application.InuseFgids})
    application.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", application.HwmFgids})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_All_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_All_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "all"
    poolList.EntityData.SegmentPath = "pool_list" + types.AddKeyToken(poolList.PoolId, "pool_id")
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = types.NewOrderedMap()
    poolList.EntityData.Leafs = types.NewOrderedMap()
    poolList.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", poolList.PoolId})
    poolList.EntityData.Leafs.Append("pool_name", types.YLeaf{"PoolName", poolList.PoolName})
    poolList.EntityData.Leafs.Append("pool_type", types.YLeaf{"PoolType", poolList.PoolType})
    poolList.EntityData.Leafs.Append("start_fgid", types.YLeaf{"StartFgid", poolList.StartFgid})
    poolList.EntityData.Leafs.Append("total_fgids", types.YLeaf{"TotalFgids", poolList.TotalFgids})
    poolList.EntityData.Leafs.Append("current_fgids", types.YLeaf{"CurrentFgids", poolList.CurrentFgids})
    poolList.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", poolList.HwmFgids})

    poolList.EntityData.YListKeys = []string {"PoolId"}

    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr
type Controller_Fabric_Oper_Fgid_Statistics_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList.
    SdrList []*Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
}

func (sdr *Controller_Fabric_Oper_Fgid_Statistics_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "statistics"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("sdr_list", types.YChild{"SdrList", nil})
    for i := range sdr.SdrList {
        sdr.EntityData.Children.Append(types.GetSegmentPath(sdr.SdrList[i]), types.YChild{"SdrList", sdr.SdrList[i]})
    }
    sdr.EntityData.Leafs = types.NewOrderedMap()

    sdr.EntityData.YListKeys = []string {}

    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application.
    Application []*Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "sdr"
    sdrList.EntityData.SegmentPath = "sdr_list" + types.AddKeyToken(sdrList.SdrName, "sdr_name")
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = types.NewOrderedMap()
    sdrList.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range sdrList.Application {
        sdrList.EntityData.Children.Append(types.GetSegmentPath(sdrList.Application[i]), types.YChild{"Application", sdrList.Application[i]})
    }
    sdrList.EntityData.Leafs = types.NewOrderedMap()
    sdrList.EntityData.Leafs.Append("sdr_name", types.YLeaf{"SdrName", sdrList.SdrName})
    sdrList.EntityData.Leafs.Append("description", types.YLeaf{"Description", sdrList.Description})
    sdrList.EntityData.Leafs.Append("sdr_total_fgids", types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids})
    sdrList.EntityData.Leafs.Append("sdr_inuse_fgids", types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids})
    sdrList.EntityData.Leafs.Append("sdr_hwm_fgids", types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids})

    sdrList.EntityData.YListKeys = []string {"SdrName"}

    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.AppName, "app_name")
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("app_name", types.YLeaf{"AppName", application.AppName})
    application.EntityData.Leafs.Append("description", types.YLeaf{"Description", application.Description})
    application.EntityData.Leafs.Append("app_id", types.YLeaf{"AppId", application.AppId})
    application.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", application.PoolId})
    application.EntityData.Leafs.Append("inuse_fgids", types.YLeaf{"InuseFgids", application.InuseFgids})
    application.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", application.HwmFgids})

    application.EntityData.YListKeys = []string {"AppName"}

    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool
type Controller_Fabric_Oper_Fgid_Statistics_Pool struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList.
    PoolList []*Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
}

func (pool *Controller_Fabric_Oper_Fgid_Statistics_Pool) GetEntityData() *types.CommonEntityData {
    pool.EntityData.YFilter = pool.YFilter
    pool.EntityData.YangName = "pool"
    pool.EntityData.BundleName = "cisco_ios_xr"
    pool.EntityData.ParentYangName = "statistics"
    pool.EntityData.SegmentPath = "pool"
    pool.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pool.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pool.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pool.EntityData.Children = types.NewOrderedMap()
    pool.EntityData.Children.Append("pool_list", types.YChild{"PoolList", nil})
    for i := range pool.PoolList {
        pool.EntityData.Children.Append(types.GetSegmentPath(pool.PoolList[i]), types.YChild{"PoolList", pool.PoolList[i]})
    }
    pool.EntityData.Leafs = types.NewOrderedMap()

    pool.EntityData.YListKeys = []string {}

    return &(pool.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "pool"
    poolList.EntityData.SegmentPath = "pool_list" + types.AddKeyToken(poolList.PoolId, "pool_id")
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = types.NewOrderedMap()
    poolList.EntityData.Leafs = types.NewOrderedMap()
    poolList.EntityData.Leafs.Append("pool_id", types.YLeaf{"PoolId", poolList.PoolId})
    poolList.EntityData.Leafs.Append("pool_name", types.YLeaf{"PoolName", poolList.PoolName})
    poolList.EntityData.Leafs.Append("pool_type", types.YLeaf{"PoolType", poolList.PoolType})
    poolList.EntityData.Leafs.Append("start_fgid", types.YLeaf{"StartFgid", poolList.StartFgid})
    poolList.EntityData.Leafs.Append("total_fgids", types.YLeaf{"TotalFgids", poolList.TotalFgids})
    poolList.EntityData.Leafs.Append("current_fgids", types.YLeaf{"CurrentFgids", poolList.CurrentFgids})
    poolList.EntityData.Leafs.Append("hwm_fgids", types.YLeaf{"HwmFgids", poolList.HwmFgids})

    poolList.EntityData.YListKeys = []string {"PoolId"}

    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System
type Controller_Fabric_Oper_Fgid_Statistics_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_System_StatsList.
    StatsList []*Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
}

func (system *Controller_Fabric_Oper_Fgid_Statistics_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "statistics"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = types.NewOrderedMap()
    system.EntityData.Children.Append("stats_list", types.YChild{"StatsList", nil})
    for i := range system.StatsList {
        system.EntityData.Children.Append(types.GetSegmentPath(system.StatsList[i]), types.YChild{"StatsList", system.StatsList[i]})
    }
    system.EntityData.Leafs = types.NewOrderedMap()

    system.EntityData.YListKeys = []string {}

    return &(system.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_System_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_System_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "system"
    statsList.EntityData.SegmentPath = "stats_list" + types.AddKeyToken(statsList.SystemStats, "system_stats")
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = types.NewOrderedMap()
    statsList.EntityData.Leafs = types.NewOrderedMap()
    statsList.EntityData.Leafs.Append("system_stats", types.YLeaf{"SystemStats", statsList.SystemStats})
    statsList.EntityData.Leafs.Append("system_total_fgids", types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids})
    statsList.EntityData.Leafs.Append("system_inuse_fgids", types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids})
    statsList.EntityData.Leafs.Append("system_hwm_fgids", types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids})

    statsList.EntityData.YListKeys = []string {"SystemStats"}

    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr
type Controller_Fabric_Oper_Fgid_FgidMgr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace.
    Trace []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace
}

func (fgidMgr *Controller_Fabric_Oper_Fgid_FgidMgr) GetEntityData() *types.CommonEntityData {
    fgidMgr.EntityData.YFilter = fgidMgr.YFilter
    fgidMgr.EntityData.YangName = "fgid_mgr"
    fgidMgr.EntityData.BundleName = "cisco_ios_xr"
    fgidMgr.EntityData.ParentYangName = "fgid"
    fgidMgr.EntityData.SegmentPath = "fgid_mgr"
    fgidMgr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidMgr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidMgr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidMgr.EntityData.Children = types.NewOrderedMap()
    fgidMgr.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fgidMgr.Trace {
        fgidMgr.EntityData.Children.Append(types.GetSegmentPath(fgidMgr.Trace[i]), types.YChild{"Trace", fgidMgr.Trace[i]})
    }
    fgidMgr.EntityData.Leafs = types.NewOrderedMap()

    fgidMgr.EntityData.YListKeys = []string {}

    return &(fgidMgr.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace
// show traceable processes
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location.
    Location []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
}

func (trace *Controller_Fabric_Oper_Fgid_FgidMgr_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fgid_mgr"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError
type Controller_Fabric_Oper_Fgid_ProgramError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..524287.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..524287.
    End interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError_Rack.
    Rack []*Controller_Fabric_Oper_Fgid_ProgramError_Rack
}

func (programError *Controller_Fabric_Oper_Fgid_ProgramError) GetEntityData() *types.CommonEntityData {
    programError.EntityData.YFilter = programError.YFilter
    programError.EntityData.YangName = "program_error"
    programError.EntityData.BundleName = "cisco_ios_xr"
    programError.EntityData.ParentYangName = "fgid"
    programError.EntityData.SegmentPath = "program_error" + types.AddKeyToken(programError.Start, "start") + types.AddKeyToken(programError.End, "end")
    programError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    programError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    programError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    programError.EntityData.Children = types.NewOrderedMap()
    programError.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range programError.Rack {
        programError.EntityData.Children.Append(types.GetSegmentPath(programError.Rack[i]), types.YChild{"Rack", programError.Rack[i]})
    }
    programError.EntityData.Leafs = types.NewOrderedMap()
    programError.EntityData.Leafs.Append("start", types.YLeaf{"Start", programError.Start})
    programError.EntityData.Leafs.Append("end", types.YLeaf{"End", programError.End})

    programError.EntityData.YListKeys = []string {"Start", "End"}

    return &(programError.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError_Rack
type Controller_Fabric_Oper_Fgid_ProgramError_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    FgidsInError interface{}

    // The type is bool.
    FoundFgidsInError interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalErrorFgids interface{}

    // The type is bool.
    IncorrectFgidsRange interface{}

    // The type is bool.
    CmdNotSupported interface{}
}

func (rack *Controller_Fabric_Oper_Fgid_ProgramError_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "program_error"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackId, "rack_id")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", rack.RackId})
    rack.EntityData.Leafs.Append("rack_id_str", types.YLeaf{"RackIdStr", rack.RackIdStr})
    rack.EntityData.Leafs.Append("fgids_in_error", types.YLeaf{"FgidsInError", rack.FgidsInError})
    rack.EntityData.Leafs.Append("found_fgids_in_error", types.YLeaf{"FoundFgidsInError", rack.FoundFgidsInError})
    rack.EntityData.Leafs.Append("total_error_fgids", types.YLeaf{"TotalErrorFgids", rack.TotalErrorFgids})
    rack.EntityData.Leafs.Append("incorrect_fgids_range", types.YLeaf{"IncorrectFgidsRange", rack.IncorrectFgidsRange})
    rack.EntityData.Leafs.Append("cmd_not_supported", types.YLeaf{"CmdNotSupported", rack.CmdNotSupported})

    rack.EntityData.YListKeys = []string {"RackId"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive
type Controller_Fabric_Oper_FsdbaggActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggActive_Plane

    
    Bundle Controller_Fabric_Oper_FsdbaggActive_Bundle

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Statistics
}

func (fsdbaggActive *Controller_Fabric_Oper_FsdbaggActive) GetEntityData() *types.CommonEntityData {
    fsdbaggActive.EntityData.YFilter = fsdbaggActive.YFilter
    fsdbaggActive.EntityData.YangName = "fsdbagg_active"
    fsdbaggActive.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggActive.EntityData.ParentYangName = "oper"
    fsdbaggActive.EntityData.SegmentPath = "fsdbagg_active"
    fsdbaggActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggActive.EntityData.Children = types.NewOrderedMap()
    fsdbaggActive.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbaggActive.Plane {
        fsdbaggActive.EntityData.Children.Append(types.GetSegmentPath(fsdbaggActive.Plane[i]), types.YChild{"Plane", fsdbaggActive.Plane[i]})
    }
    fsdbaggActive.EntityData.Children.Append("bundle", types.YChild{"Bundle", &fsdbaggActive.Bundle})
    fsdbaggActive.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fsdbaggActive.Statistics})
    fsdbaggActive.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggActive.EntityData.YListKeys = []string {}

    return &(fsdbaggActive.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane
type Controller_Fabric_Oper_FsdbaggActive_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-5].
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_active"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle
type Controller_Fabric_Oper_FsdbaggActive_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_All

    
    Port Controller_Fabric_Oper_FsdbaggActive_Bundle_Port

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Bundle_Location.
    Location []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
}

func (bundle *Controller_Fabric_Oper_FsdbaggActive_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "fsdbagg_active"
    bundle.EntityData.SegmentPath = "bundle"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = types.NewOrderedMap()
    bundle.EntityData.Children.Append("summary", types.YChild{"Summary", &bundle.Summary})
    bundle.EntityData.Children.Append("all", types.YChild{"All", &bundle.All})
    bundle.EntityData.Children.Append("port", types.YChild{"Port", &bundle.Port})
    bundle.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range bundle.Location {
        bundle.EntityData.Children.Append(types.GetSegmentPath(bundle.Location[i]), types.YChild{"Location", bundle.Location[i]})
    }
    bundle.EntityData.Leafs = types.NewOrderedMap()

    bundle.EntityData.YListKeys = []string {}

    return &(bundle.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList.
    BundleSummaryList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
}

func (summary *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "bundle"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("bundle_summary_list", types.YChild{"BundleSummaryList", nil})
    for i := range summary.BundleSummaryList {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.BundleSummaryList[i]), types.YChild{"BundleSummaryList", summary.BundleSummaryList[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    BundlesNotConnected interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBports interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBports interface{}

    // The type is interface{} with range: 0..4294967295.
    BportsNotConnected interface{}
}

func (bundleSummaryList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList) GetEntityData() *types.CommonEntityData {
    bundleSummaryList.EntityData.YFilter = bundleSummaryList.YFilter
    bundleSummaryList.EntityData.YangName = "bundle_summary_list"
    bundleSummaryList.EntityData.BundleName = "cisco_ios_xr"
    bundleSummaryList.EntityData.ParentYangName = "summary"
    bundleSummaryList.EntityData.SegmentPath = "bundle_summary_list" + types.AddKeyToken(bundleSummaryList.Idx, "idx")
    bundleSummaryList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSummaryList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSummaryList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSummaryList.EntityData.Children = types.NewOrderedMap()
    bundleSummaryList.EntityData.Leafs = types.NewOrderedMap()
    bundleSummaryList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleSummaryList.Idx})
    bundleSummaryList.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", bundleSummaryList.TotalBundles})
    bundleSummaryList.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", bundleSummaryList.DownBundles})
    bundleSummaryList.EntityData.Leafs.Append("bundles_not_connected", types.YLeaf{"BundlesNotConnected", bundleSummaryList.BundlesNotConnected})
    bundleSummaryList.EntityData.Leafs.Append("total_bports", types.YLeaf{"TotalBports", bundleSummaryList.TotalBports})
    bundleSummaryList.EntityData.Leafs.Append("down_bports", types.YLeaf{"DownBports", bundleSummaryList.DownBports})
    bundleSummaryList.EntityData.Leafs.Append("bports_not_connected", types.YLeaf{"BportsNotConnected", bundleSummaryList.BportsNotConnected})

    bundleSummaryList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleSummaryList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList.
    BundleAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "bundle"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("bundle_all_list", types.YChild{"BundleAllList", nil})
    for i := range all.BundleAllList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.BundleAllList[i]), types.YChild{"BundleAllList", all.BundleAllList[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "all"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + types.AddKeyToken(bundleAllList.Idx, "idx")
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleAllList.Idx})
    bundleAllList.EntityData.Leafs.Append("bundle_id", types.YLeaf{"BundleId", bundleAllList.BundleId})
    bundleAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bundleAllList.OperState})
    bundleAllList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", bundleAllList.PlaneId})
    bundleAllList.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", bundleAllList.TotalLinks})
    bundleAllList.EntityData.Leafs.Append("down_links", types.YLeaf{"DownLinks", bundleAllList.DownLinks})
    bundleAllList.EntityData.Leafs.Append("bport1", types.YLeaf{"Bport1", bundleAllList.Bport1})
    bundleAllList.EntityData.Leafs.Append("bport2", types.YLeaf{"Bport2", bundleAllList.Bport2})

    bundleAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location.
    Location []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
}

func (port *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "bundle"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("all", types.YChild{"All", &port.All})
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Leafs = types.NewOrderedMap()

    port.EntityData.YListKeys = []string {}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList.
    BportAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "port"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("bport_all_list", types.YChild{"BportAllList", nil})
    for i := range all.BportAllList {
        all.EntityData.Children.Append(types.GetSegmentPath(all.BportAllList[i]), types.YChild{"BportAllList", all.BportAllList[i]})
    }
    all.EntityData.Children.Append("statistics", types.YChild{"Statistics", &all.Statistics})
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "all"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + types.AddKeyToken(bportAllList.Idx, "idx")
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = types.NewOrderedMap()
    bportAllList.EntityData.Leafs = types.NewOrderedMap()
    bportAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportAllList.Idx})
    bportAllList.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportAllList.BportId})
    bportAllList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", bportAllList.AdminState})
    bportAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bportAllList.OperState})
    bportAllList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", bportAllList.DownFlags})

    bportAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "all"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("bport_stats_all_racks", types.YChild{"BportStatsAllRacks", nil})
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.BportStatsAllRacks[i]), types.YChild{"BportStatsAllRacks", statistics.BportStatsAllRacks[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + types.AddKeyToken(bportStatsAllRacks.Idx, "idx")
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Children.Append("bport_stats_rack", types.YChild{"BportStatsRack", nil})
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children.Append(types.GetSegmentPath(bportStatsAllRacks.BportStatsRack[i]), types.YChild{"BportStatsRack", bportStatsAllRacks.BportStatsRack[i]})
    }
    bportStatsAllRacks.EntityData.Leafs = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsAllRacks.Idx})
    bportStatsAllRacks.EntityData.Leafs.Append("total_racks", types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks})

    bportStatsAllRacks.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + types.AddKeyToken(bportStatsRack.Idx, "idx")
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = types.NewOrderedMap()
    bportStatsRack.EntityData.Children.Append("bport_stats", types.YChild{"BportStats", nil})
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children.Append(types.GetSegmentPath(bportStatsRack.BportStats[i]), types.YChild{"BportStats", bportStatsRack.BportStats[i]})
    }
    bportStatsRack.EntityData.Leafs = types.NewOrderedMap()
    bportStatsRack.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsRack.Idx})
    bportStatsRack.EntityData.Leafs.Append("rack_num_str", types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr})

    bportStatsRack.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + types.AddKeyToken(bportStats.Idx, "idx")
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = types.NewOrderedMap()
    bportStats.EntityData.Leafs = types.NewOrderedMap()
    bportStats.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStats.Idx})
    bportStats.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportStats.BportId})
    bportStats.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", bportStats.RxDataCells})
    bportStats.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", bportStats.TxDataCells})
    bportStats.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", bportStats.RxCeCells})
    bportStats.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", bportStats.RxUceCells})
    bportStats.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", bportStats.RxPeCells})
    bportStats.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", bportStats.LastClearTs})

    bportStats.EntityData.YListKeys = []string {"Idx"}

    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1]))).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList.
    BportAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bport_all_list", types.YChild{"BportAllList", nil})
    for i := range location.BportAllList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.BportAllList[i]), types.YChild{"BportAllList", location.BportAllList[i]})
    }
    location.EntityData.Children.Append("statistics", types.YChild{"Statistics", &location.Statistics})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "location"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + types.AddKeyToken(bportAllList.Idx, "idx")
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = types.NewOrderedMap()
    bportAllList.EntityData.Leafs = types.NewOrderedMap()
    bportAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportAllList.Idx})
    bportAllList.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportAllList.BportId})
    bportAllList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", bportAllList.AdminState})
    bportAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bportAllList.OperState})
    bportAllList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", bportAllList.DownFlags})

    bportAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "location"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("bport_stats_all_racks", types.YChild{"BportStatsAllRacks", nil})
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.BportStatsAllRacks[i]), types.YChild{"BportStatsAllRacks", statistics.BportStatsAllRacks[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + types.AddKeyToken(bportStatsAllRacks.Idx, "idx")
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Children.Append("bport_stats_rack", types.YChild{"BportStatsRack", nil})
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children.Append(types.GetSegmentPath(bportStatsAllRacks.BportStatsRack[i]), types.YChild{"BportStatsRack", bportStatsAllRacks.BportStatsRack[i]})
    }
    bportStatsAllRacks.EntityData.Leafs = types.NewOrderedMap()
    bportStatsAllRacks.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsAllRacks.Idx})
    bportStatsAllRacks.EntityData.Leafs.Append("total_racks", types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks})

    bportStatsAllRacks.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + types.AddKeyToken(bportStatsRack.Idx, "idx")
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = types.NewOrderedMap()
    bportStatsRack.EntityData.Children.Append("bport_stats", types.YChild{"BportStats", nil})
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children.Append(types.GetSegmentPath(bportStatsRack.BportStats[i]), types.YChild{"BportStats", bportStatsRack.BportStats[i]})
    }
    bportStatsRack.EntityData.Leafs = types.NewOrderedMap()
    bportStatsRack.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStatsRack.Idx})
    bportStatsRack.EntityData.Leafs.Append("rack_num_str", types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr})

    bportStatsRack.EntityData.YListKeys = []string {"Idx"}

    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + types.AddKeyToken(bportStats.Idx, "idx")
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = types.NewOrderedMap()
    bportStats.EntityData.Leafs = types.NewOrderedMap()
    bportStats.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bportStats.Idx})
    bportStats.EntityData.Leafs.Append("bport_id", types.YLeaf{"BportId", bportStats.BportId})
    bportStats.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", bportStats.RxDataCells})
    bportStats.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", bportStats.TxDataCells})
    bportStats.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", bportStats.RxCeCells})
    bportStats.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", bportStats.RxUceCells})
    bportStats.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow})
    bportStats.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", bportStats.RxPeCells})
    bportStats.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", bportStats.LastClearTs})

    bportStats.EntityData.YListKeys = []string {"Idx"}

    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1]))).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList.
    BundleAllList []*Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "bundle"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bundle_all_list", types.YChild{"BundleAllList", nil})
    for i := range location.BundleAllList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.BundleAllList[i]), types.YChild{"BundleAllList", location.BundleAllList[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "location"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + types.AddKeyToken(bundleAllList.Idx, "idx")
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs = types.NewOrderedMap()
    bundleAllList.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", bundleAllList.Idx})
    bundleAllList.EntityData.Leafs.Append("bundle_id", types.YLeaf{"BundleId", bundleAllList.BundleId})
    bundleAllList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", bundleAllList.OperState})
    bundleAllList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", bundleAllList.PlaneId})
    bundleAllList.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", bundleAllList.TotalLinks})
    bundleAllList.EntityData.Leafs.Append("down_links", types.YLeaf{"DownLinks", bundleAllList.DownLinks})
    bundleAllList.EntityData.Leafs.Append("bport1", types.YLeaf{"Bport1", bundleAllList.Bport1})
    bundleAllList.EntityData.Leafs.Append("bport2", types.YLeaf{"Bport2", bundleAllList.Bport2})

    bundleAllList.EntityData.YListKeys = []string {"Idx"}

    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_active"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range statistics.Plane {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Plane[i]), types.YChild{"Plane", statistics.Plane[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-5].
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink
type Controller_Fabric_Oper_FsdbaggLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggLink_Port.
    Port []*Controller_Fabric_Oper_FsdbaggLink_Port
}

func (fsdbaggLink *Controller_Fabric_Oper_FsdbaggLink) GetEntityData() *types.CommonEntityData {
    fsdbaggLink.EntityData.YFilter = fsdbaggLink.YFilter
    fsdbaggLink.EntityData.YangName = "fsdbagg_link"
    fsdbaggLink.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggLink.EntityData.ParentYangName = "oper"
    fsdbaggLink.EntityData.SegmentPath = "fsdbagg_link"
    fsdbaggLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggLink.EntityData.Children = types.NewOrderedMap()
    fsdbaggLink.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range fsdbaggLink.Port {
        fsdbaggLink.EntityData.Children.Append(types.GetSegmentPath(fsdbaggLink.Port[i]), types.YChild{"Port", fsdbaggLink.Port[i]})
    }
    fsdbaggLink.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggLink.EntityData.YListKeys = []string {}

    return &(fsdbaggLink.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink_Port
type Controller_Fabric_Oper_FsdbaggLink_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: fia|s1|s2|s3.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}
}

func (port *Controller_Fabric_Oper_FsdbaggLink_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "fsdbagg_link"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.Portname, "portname")
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("portname", types.YLeaf{"Portname", port.Portname})
    port.EntityData.Leafs.Append("description", types.YLeaf{"Description", port.Description})

    port.EntityData.YListKeys = []string {"Portname"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType
type Controller_Fabric_Oper_FsdbaggSfeAsicType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes.
    AsicTypes []*Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
}

func (fsdbaggSfeAsicType *Controller_Fabric_Oper_FsdbaggSfeAsicType) GetEntityData() *types.CommonEntityData {
    fsdbaggSfeAsicType.EntityData.YFilter = fsdbaggSfeAsicType.YFilter
    fsdbaggSfeAsicType.EntityData.YangName = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggSfeAsicType.EntityData.ParentYangName = "oper"
    fsdbaggSfeAsicType.EntityData.SegmentPath = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggSfeAsicType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggSfeAsicType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggSfeAsicType.EntityData.Children = types.NewOrderedMap()
    fsdbaggSfeAsicType.EntityData.Children.Append("asic_types", types.YChild{"AsicTypes", nil})
    for i := range fsdbaggSfeAsicType.AsicTypes {
        fsdbaggSfeAsicType.EntityData.Children.Append(types.GetSegmentPath(fsdbaggSfeAsicType.AsicTypes[i]), types.YChild{"AsicTypes", fsdbaggSfeAsicType.AsicTypes[i]})
    }
    fsdbaggSfeAsicType.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggSfeAsicType.EntityData.YListKeys = []string {}

    return &(fsdbaggSfeAsicType.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Asicname interface{}

    // The type is string. The default value is asic..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block.
    Block []*Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
}

func (asicTypes *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes) GetEntityData() *types.CommonEntityData {
    asicTypes.EntityData.YFilter = asicTypes.YFilter
    asicTypes.EntityData.YangName = "asic_types"
    asicTypes.EntityData.BundleName = "cisco_ios_xr"
    asicTypes.EntityData.ParentYangName = "fsdbagg_sfe_asic_type"
    asicTypes.EntityData.SegmentPath = "asic_types" + types.AddKeyToken(asicTypes.Asicname, "asicname")
    asicTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicTypes.EntityData.Children = types.NewOrderedMap()
    asicTypes.EntityData.Children.Append("block", types.YChild{"Block", nil})
    for i := range asicTypes.Block {
        asicTypes.EntityData.Children.Append(types.GetSegmentPath(asicTypes.Block[i]), types.YChild{"Block", asicTypes.Block[i]})
    }
    asicTypes.EntityData.Leafs = types.NewOrderedMap()
    asicTypes.EntityData.Leafs.Append("asicname", types.YLeaf{"Asicname", asicTypes.Asicname})
    asicTypes.EntityData.Leafs.Append("description", types.YLeaf{"Description", asicTypes.Description})

    asicTypes.EntityData.YListKeys = []string {"Asicname"}

    return &(asicTypes.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Blockname interface{}
}

func (block *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block) GetEntityData() *types.CommonEntityData {
    block.EntityData.YFilter = block.YFilter
    block.EntityData.YangName = "block"
    block.EntityData.BundleName = "cisco_ios_xr"
    block.EntityData.ParentYangName = "asic_types"
    block.EntityData.SegmentPath = "block" + types.AddKeyToken(block.Blockname, "blockname")
    block.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    block.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    block.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    block.EntityData.Children = types.NewOrderedMap()
    block.EntityData.Leafs = types.NewOrderedMap()
    block.EntityData.Leafs.Append("blockname", types.YLeaf{"Blockname", block.Blockname})

    block.EntityData.YListKeys = []string {"Blockname"}

    return &(block.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby
type Controller_Fabric_Oper_FsdbaggStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggStandby_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggStandby_Plane

    
    Statistics Controller_Fabric_Oper_FsdbaggStandby_Statistics
}

func (fsdbaggStandby *Controller_Fabric_Oper_FsdbaggStandby) GetEntityData() *types.CommonEntityData {
    fsdbaggStandby.EntityData.YFilter = fsdbaggStandby.YFilter
    fsdbaggStandby.EntityData.YangName = "fsdbagg_standby"
    fsdbaggStandby.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggStandby.EntityData.ParentYangName = "oper"
    fsdbaggStandby.EntityData.SegmentPath = "fsdbagg_standby"
    fsdbaggStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggStandby.EntityData.Children = types.NewOrderedMap()
    fsdbaggStandby.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range fsdbaggStandby.Plane {
        fsdbaggStandby.EntityData.Children.Append(types.GetSegmentPath(fsdbaggStandby.Plane[i]), types.YChild{"Plane", fsdbaggStandby.Plane[i]})
    }
    fsdbaggStandby.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fsdbaggStandby.Statistics})
    fsdbaggStandby.EntityData.Leafs = types.NewOrderedMap()

    fsdbaggStandby.EntityData.YListKeys = []string {}

    return &(fsdbaggStandby.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-5].
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_standby"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics
type Controller_Fabric_Oper_FsdbaggStandby_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane.
    Plane []*Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggStandby_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_standby"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("plane", types.YChild{"Plane", nil})
    for i := range statistics.Plane {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Plane[i]), types.YChild{"Plane", statistics.Plane[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-5].
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError.
    AsicInternalError []*Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + types.AddKeyToken(plane.Planeid, "planeid")
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = types.NewOrderedMap()
    plane.EntityData.Children.Append("asic_internal_error", types.YChild{"AsicInternalError", nil})
    for i := range plane.AsicInternalError {
        plane.EntityData.Children.Append(types.GetSegmentPath(plane.AsicInternalError[i]), types.YChild{"AsicInternalError", plane.AsicInternalError[i]})
    }
    plane.EntityData.Leafs = types.NewOrderedMap()
    plane.EntityData.Leafs.Append("planeid", types.YLeaf{"Planeid", plane.Planeid})
    plane.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", plane.AdminState})
    plane.EntityData.Leafs.Append("ucast_oper_state", types.YLeaf{"UcastOperState", plane.UcastOperState})
    plane.EntityData.Leafs.Append("mcast_oper_state", types.YLeaf{"McastOperState", plane.McastOperState})
    plane.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", plane.PlaneMode})
    plane.EntityData.Leafs.Append("ucast_cnt_up", types.YLeaf{"UcastCntUp", plane.UcastCntUp})
    plane.EntityData.Leafs.Append("ucast_cnt_some_up", types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp})
    plane.EntityData.Leafs.Append("ucast_cnt_dn", types.YLeaf{"UcastCntDn", plane.UcastCntDn})
    plane.EntityData.Leafs.Append("mcast_cnt_up", types.YLeaf{"McastCntUp", plane.McastCntUp})
    plane.EntityData.Leafs.Append("mcast_cnt_some_up", types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp})
    plane.EntityData.Leafs.Append("mcast_cnt_dn", types.YLeaf{"McastCntDn", plane.McastCntDn})
    plane.EntityData.Leafs.Append("total_bundles", types.YLeaf{"TotalBundles", plane.TotalBundles})
    plane.EntityData.Leafs.Append("down_bundles", types.YLeaf{"DownBundles", plane.DownBundles})
    plane.EntityData.Leafs.Append("rx_data_cells", types.YLeaf{"RxDataCells", plane.RxDataCells})
    plane.EntityData.Leafs.Append("tx_data_cells", types.YLeaf{"TxDataCells", plane.TxDataCells})
    plane.EntityData.Leafs.Append("rx_ce_cells_is_overflow", types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_ce_cells", types.YLeaf{"RxCeCells", plane.RxCeCells})
    plane.EntityData.Leafs.Append("rx_uce_cells_is_overflow", types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_uce_cells", types.YLeaf{"RxUceCells", plane.RxUceCells})
    plane.EntityData.Leafs.Append("rx_pe_cells_is_overflow", types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow})
    plane.EntityData.Leafs.Append("rx_pe_cells", types.YLeaf{"RxPeCells", plane.RxPeCells})
    plane.EntityData.Leafs.Append("ucast_lost_cells", types.YLeaf{"UcastLostCells", plane.UcastLostCells})
    plane.EntityData.Leafs.Append("mcast_lost_cells", types.YLeaf{"McastLostCells", plane.McastLostCells})
    plane.EntityData.Leafs.Append("last_clear_ts", types.YLeaf{"LastClearTs", plane.LastClearTs})
    plane.EntityData.Leafs.Append("last_clear_reason", types.YLeaf{"LastClearReason", plane.LastClearReason})
    plane.EntityData.Leafs.Append("last_clear_req_ts", types.YLeaf{"LastClearReqTs", plane.LastClearReqTs})
    plane.EntityData.Leafs.Append("last_clear_status", types.YLeaf{"LastClearStatus", plane.LastClearStatus})
    plane.EntityData.Leafs.Append("is_asic_internal_error", types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError})
    plane.EntityData.Leafs.Append("asic_internal_drops", types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops})
    plane.EntityData.Leafs.Append("asic_location_drops", types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops})
    plane.EntityData.Leafs.Append("ppu_state", types.YLeaf{"PpuState", plane.PpuState})

    plane.EntityData.YListKeys = []string {"Planeid"}

    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + types.AddKeyToken(asicInternalError.AsicNumber, "asic_number")
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs = types.NewOrderedMap()
    asicInternalError.EntityData.Leafs.Append("asic_number", types.YLeaf{"AsicNumber", asicInternalError.AsicNumber})
    asicInternalError.EntityData.Leafs.Append("asic_location", types.YLeaf{"AsicLocation", asicInternalError.AsicLocation})
    asicInternalError.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError})
    asicInternalError.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError})
    asicInternalError.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError})
    asicInternalError.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError})
    asicInternalError.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError})
    asicInternalError.EntityData.Leafs.Append("link_no_sign_accept_error", types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError})
    asicInternalError.EntityData.Leafs.Append("link_token_error", types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError})
    asicInternalError.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount})
    asicInternalError.EntityData.Leafs.Append("last_asic_internal_error_ts", types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs})

    asicInternalError.EntityData.YListKeys = []string {"AsicNumber"}

    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FabHealth
type Controller_Fabric_Oper_FabHealth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FabHealth_SysInfoList.
    SysInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList
}

func (fabHealth *Controller_Fabric_Oper_FabHealth) GetEntityData() *types.CommonEntityData {
    fabHealth.EntityData.YFilter = fabHealth.YFilter
    fabHealth.EntityData.YangName = "fab_health"
    fabHealth.EntityData.BundleName = "cisco_ios_xr"
    fabHealth.EntityData.ParentYangName = "oper"
    fabHealth.EntityData.SegmentPath = "fab_health"
    fabHealth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabHealth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabHealth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabHealth.EntityData.Children = types.NewOrderedMap()
    fabHealth.EntityData.Children.Append("sys_info_list", types.YChild{"SysInfoList", nil})
    for i := range fabHealth.SysInfoList {
        fabHealth.EntityData.Children.Append(types.GetSegmentPath(fabHealth.SysInfoList[i]), types.YChild{"SysInfoList", fabHealth.SysInfoList[i]})
    }
    fabHealth.EntityData.Leafs = types.NewOrderedMap()

    fabHealth.EntityData.YListKeys = []string {}

    return &(fabHealth.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    IndexKey interface{}

    // The type is bool.
    AggrStatus interface{}

    // The type is string.
    AvailableRackIds interface{}

    // The type is string.
    RackIdSeparator interface{}

    // The type is string.
    AvailableFmLoc interface{}

    // The type is string.
    FmLocSeparator interface{}

    // The type is interface{} with range: 0..4294967295.
    RackTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    RackLcc interface{}

    // The type is interface{} with range: 0..4294967295.
    RackFcc interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowSysPlaneDetail interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList.
    SysPlaneInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList.
    RackInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus.
    FsdbStatus []*Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus.
    SfeStatus []*Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc.
    SfeDrvrLoc []*Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc

    // The type is slice of Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep.
    SfeFmSep []*Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep
}

func (sysInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList) GetEntityData() *types.CommonEntityData {
    sysInfoList.EntityData.YFilter = sysInfoList.YFilter
    sysInfoList.EntityData.YangName = "sys_info_list"
    sysInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysInfoList.EntityData.ParentYangName = "fab_health"
    sysInfoList.EntityData.SegmentPath = "sys_info_list" + types.AddKeyToken(sysInfoList.IndexKey, "index_key")
    sysInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysInfoList.EntityData.Children = types.NewOrderedMap()
    sysInfoList.EntityData.Children.Append("sys_plane_info_list", types.YChild{"SysPlaneInfoList", nil})
    for i := range sysInfoList.SysPlaneInfoList {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SysPlaneInfoList[i]), types.YChild{"SysPlaneInfoList", sysInfoList.SysPlaneInfoList[i]})
    }
    sysInfoList.EntityData.Children.Append("rack_info_list", types.YChild{"RackInfoList", nil})
    for i := range sysInfoList.RackInfoList {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.RackInfoList[i]), types.YChild{"RackInfoList", sysInfoList.RackInfoList[i]})
    }
    sysInfoList.EntityData.Children.Append("fsdb_status", types.YChild{"FsdbStatus", nil})
    for i := range sysInfoList.FsdbStatus {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.FsdbStatus[i]), types.YChild{"FsdbStatus", sysInfoList.FsdbStatus[i]})
    }
    sysInfoList.EntityData.Children.Append("sfe_status", types.YChild{"SfeStatus", nil})
    for i := range sysInfoList.SfeStatus {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SfeStatus[i]), types.YChild{"SfeStatus", sysInfoList.SfeStatus[i]})
    }
    sysInfoList.EntityData.Children.Append("sfe_drvr_loc", types.YChild{"SfeDrvrLoc", nil})
    for i := range sysInfoList.SfeDrvrLoc {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SfeDrvrLoc[i]), types.YChild{"SfeDrvrLoc", sysInfoList.SfeDrvrLoc[i]})
    }
    sysInfoList.EntityData.Children.Append("sfe_fm_sep", types.YChild{"SfeFmSep", nil})
    for i := range sysInfoList.SfeFmSep {
        sysInfoList.EntityData.Children.Append(types.GetSegmentPath(sysInfoList.SfeFmSep[i]), types.YChild{"SfeFmSep", sysInfoList.SfeFmSep[i]})
    }
    sysInfoList.EntityData.Leafs = types.NewOrderedMap()
    sysInfoList.EntityData.Leafs.Append("index_key", types.YLeaf{"IndexKey", sysInfoList.IndexKey})
    sysInfoList.EntityData.Leafs.Append("aggr_status", types.YLeaf{"AggrStatus", sysInfoList.AggrStatus})
    sysInfoList.EntityData.Leafs.Append("available_rack_ids", types.YLeaf{"AvailableRackIds", sysInfoList.AvailableRackIds})
    sysInfoList.EntityData.Leafs.Append("rack_id_separator", types.YLeaf{"RackIdSeparator", sysInfoList.RackIdSeparator})
    sysInfoList.EntityData.Leafs.Append("available_fm_loc", types.YLeaf{"AvailableFmLoc", sysInfoList.AvailableFmLoc})
    sysInfoList.EntityData.Leafs.Append("fm_loc_separator", types.YLeaf{"FmLocSeparator", sysInfoList.FmLocSeparator})
    sysInfoList.EntityData.Leafs.Append("rack_total", types.YLeaf{"RackTotal", sysInfoList.RackTotal})
    sysInfoList.EntityData.Leafs.Append("rack_lcc", types.YLeaf{"RackLcc", sysInfoList.RackLcc})
    sysInfoList.EntityData.Leafs.Append("rack_fcc", types.YLeaf{"RackFcc", sysInfoList.RackFcc})
    sysInfoList.EntityData.Leafs.Append("plane_up", types.YLeaf{"PlaneUp", sysInfoList.PlaneUp})
    sysInfoList.EntityData.Leafs.Append("plane_dn", types.YLeaf{"PlaneDn", sysInfoList.PlaneDn})
    sysInfoList.EntityData.Leafs.Append("plane_mcast_dn", types.YLeaf{"PlaneMcastDn", sysInfoList.PlaneMcastDn})
    sysInfoList.EntityData.Leafs.Append("plane_admin_dn", types.YLeaf{"PlaneAdminDn", sysInfoList.PlaneAdminDn})
    sysInfoList.EntityData.Leafs.Append("show_sys_plane_detail", types.YLeaf{"ShowSysPlaneDetail", sysInfoList.ShowSysPlaneDetail})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_total", types.YLeaf{"SfeAsicsTotal", sysInfoList.SfeAsicsTotal})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_up", types.YLeaf{"SfeAsicsUp", sysInfoList.SfeAsicsUp})
    sysInfoList.EntityData.Leafs.Append("sfe_asics_dn", types.YLeaf{"SfeAsicsDn", sysInfoList.SfeAsicsDn})
    sysInfoList.EntityData.Leafs.Append("fia_asics_total", types.YLeaf{"FiaAsicsTotal", sysInfoList.FiaAsicsTotal})
    sysInfoList.EntityData.Leafs.Append("fia_asics_up", types.YLeaf{"FiaAsicsUp", sysInfoList.FiaAsicsUp})
    sysInfoList.EntityData.Leafs.Append("fia_asics_dn", types.YLeaf{"FiaAsicsDn", sysInfoList.FiaAsicsDn})

    sysInfoList.EntityData.YListKeys = []string {"IndexKey"}

    return &(sysInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    RacksWPlaneFault interface{}

    // The type is bool.
    IsDataDrop interface{}
}

func (sysPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList) GetEntityData() *types.CommonEntityData {
    sysPlaneInfoList.EntityData.YFilter = sysPlaneInfoList.YFilter
    sysPlaneInfoList.EntityData.YangName = "sys_plane_info_list"
    sysPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysPlaneInfoList.EntityData.ParentYangName = "sys_info_list"
    sysPlaneInfoList.EntityData.SegmentPath = "sys_plane_info_list" + types.AddKeyToken(sysPlaneInfoList.PlaneId, "plane_id")
    sysPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysPlaneInfoList.EntityData.Children = types.NewOrderedMap()
    sysPlaneInfoList.EntityData.Leafs = types.NewOrderedMap()
    sysPlaneInfoList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", sysPlaneInfoList.PlaneId})
    sysPlaneInfoList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", sysPlaneInfoList.AdminState})
    sysPlaneInfoList.EntityData.Leafs.Append("plane_state", types.YLeaf{"PlaneState", sysPlaneInfoList.PlaneState})
    sysPlaneInfoList.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", sysPlaneInfoList.PlaneMode})
    sysPlaneInfoList.EntityData.Leafs.Append("racks_w_plane_fault", types.YLeaf{"RacksWPlaneFault", sysPlaneInfoList.RacksWPlaneFault})
    sysPlaneInfoList.EntityData.Leafs.Append("is_data_drop", types.YLeaf{"IsDataDrop", sysPlaneInfoList.IsDataDrop})

    sysPlaneInfoList.EntityData.YListKeys = []string {"PlaneId"}

    return &(sysPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowRackPlaneDetail interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AmbaValid interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList.
    RackPlaneInfoList []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
}

func (rackInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList) GetEntityData() *types.CommonEntityData {
    rackInfoList.EntityData.YFilter = rackInfoList.YFilter
    rackInfoList.EntityData.YangName = "rack_info_list"
    rackInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackInfoList.EntityData.ParentYangName = "sys_info_list"
    rackInfoList.EntityData.SegmentPath = "rack_info_list" + types.AddKeyToken(rackInfoList.RackId, "rack_id")
    rackInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackInfoList.EntityData.Children = types.NewOrderedMap()
    rackInfoList.EntityData.Children.Append("rack_plane_info_list", types.YChild{"RackPlaneInfoList", nil})
    for i := range rackInfoList.RackPlaneInfoList {
        rackInfoList.EntityData.Children.Append(types.GetSegmentPath(rackInfoList.RackPlaneInfoList[i]), types.YChild{"RackPlaneInfoList", rackInfoList.RackPlaneInfoList[i]})
    }
    rackInfoList.EntityData.Leafs = types.NewOrderedMap()
    rackInfoList.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", rackInfoList.RackId})
    rackInfoList.EntityData.Leafs.Append("rack_name", types.YLeaf{"RackName", rackInfoList.RackName})
    rackInfoList.EntityData.Leafs.Append("rack_type", types.YLeaf{"RackType", rackInfoList.RackType})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_total", types.YLeaf{"SfeAsicsTotal", rackInfoList.SfeAsicsTotal})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_up", types.YLeaf{"SfeAsicsUp", rackInfoList.SfeAsicsUp})
    rackInfoList.EntityData.Leafs.Append("sfe_asics_dn", types.YLeaf{"SfeAsicsDn", rackInfoList.SfeAsicsDn})
    rackInfoList.EntityData.Leafs.Append("fia_asics_total", types.YLeaf{"FiaAsicsTotal", rackInfoList.FiaAsicsTotal})
    rackInfoList.EntityData.Leafs.Append("fia_asics_up", types.YLeaf{"FiaAsicsUp", rackInfoList.FiaAsicsUp})
    rackInfoList.EntityData.Leafs.Append("fia_asics_dn", types.YLeaf{"FiaAsicsDn", rackInfoList.FiaAsicsDn})
    rackInfoList.EntityData.Leafs.Append("plane_up", types.YLeaf{"PlaneUp", rackInfoList.PlaneUp})
    rackInfoList.EntityData.Leafs.Append("plane_dn", types.YLeaf{"PlaneDn", rackInfoList.PlaneDn})
    rackInfoList.EntityData.Leafs.Append("plane_mcast_dn", types.YLeaf{"PlaneMcastDn", rackInfoList.PlaneMcastDn})
    rackInfoList.EntityData.Leafs.Append("plane_admin_dn", types.YLeaf{"PlaneAdminDn", rackInfoList.PlaneAdminDn})
    rackInfoList.EntityData.Leafs.Append("show_rack_plane_detail", types.YLeaf{"ShowRackPlaneDetail", rackInfoList.ShowRackPlaneDetail})
    rackInfoList.EntityData.Leafs.Append("amba_valid", types.YLeaf{"AmbaValid", rackInfoList.AmbaValid})

    rackInfoList.EntityData.YListKeys = []string {"RackId"}

    return &(rackInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba.
    ReachableAmba []*Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
}

func (rackPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList) GetEntityData() *types.CommonEntityData {
    rackPlaneInfoList.EntityData.YFilter = rackPlaneInfoList.YFilter
    rackPlaneInfoList.EntityData.YangName = "rack_plane_info_list"
    rackPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackPlaneInfoList.EntityData.ParentYangName = "rack_info_list"
    rackPlaneInfoList.EntityData.SegmentPath = "rack_plane_info_list" + types.AddKeyToken(rackPlaneInfoList.PlaneId, "plane_id")
    rackPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackPlaneInfoList.EntityData.Children = types.NewOrderedMap()
    rackPlaneInfoList.EntityData.Children.Append("reachable_amba", types.YChild{"ReachableAmba", nil})
    for i := range rackPlaneInfoList.ReachableAmba {
        rackPlaneInfoList.EntityData.Children.Append(types.GetSegmentPath(rackPlaneInfoList.ReachableAmba[i]), types.YChild{"ReachableAmba", rackPlaneInfoList.ReachableAmba[i]})
    }
    rackPlaneInfoList.EntityData.Leafs = types.NewOrderedMap()
    rackPlaneInfoList.EntityData.Leafs.Append("plane_id", types.YLeaf{"PlaneId", rackPlaneInfoList.PlaneId})
    rackPlaneInfoList.EntityData.Leafs.Append("plane_state", types.YLeaf{"PlaneState", rackPlaneInfoList.PlaneState})
    rackPlaneInfoList.EntityData.Leafs.Append("plane_mode", types.YLeaf{"PlaneMode", rackPlaneInfoList.PlaneMode})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_total", types.YLeaf{"AsicsTotal", rackPlaneInfoList.AsicsTotal})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_up", types.YLeaf{"AsicsUp", rackPlaneInfoList.AsicsUp})
    rackPlaneInfoList.EntityData.Leafs.Append("asics_dn", types.YLeaf{"AsicsDn", rackPlaneInfoList.AsicsDn})

    rackPlaneInfoList.EntityData.YListKeys = []string {"PlaneId"}

    return &(rackPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    NumReachable interface{}
}

func (reachableAmba *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba) GetEntityData() *types.CommonEntityData {
    reachableAmba.EntityData.YFilter = reachableAmba.YFilter
    reachableAmba.EntityData.YangName = "reachable_amba"
    reachableAmba.EntityData.BundleName = "cisco_ios_xr"
    reachableAmba.EntityData.ParentYangName = "rack_plane_info_list"
    reachableAmba.EntityData.SegmentPath = "reachable_amba" + types.AddKeyToken(reachableAmba.Idx, "idx")
    reachableAmba.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableAmba.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableAmba.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableAmba.EntityData.Children = types.NewOrderedMap()
    reachableAmba.EntityData.Leafs = types.NewOrderedMap()
    reachableAmba.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", reachableAmba.Idx})
    reachableAmba.EntityData.Leafs.Append("num_reachable", types.YLeaf{"NumReachable", reachableAmba.NumReachable})

    reachableAmba.EntityData.YListKeys = []string {"Idx"}

    return &(reachableAmba.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is bool.
    Status interface{}
}

func (fsdbStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus) GetEntityData() *types.CommonEntityData {
    fsdbStatus.EntityData.YFilter = fsdbStatus.YFilter
    fsdbStatus.EntityData.YangName = "fsdb_status"
    fsdbStatus.EntityData.BundleName = "cisco_ios_xr"
    fsdbStatus.EntityData.ParentYangName = "sys_info_list"
    fsdbStatus.EntityData.SegmentPath = "fsdb_status" + types.AddKeyToken(fsdbStatus.RackId, "rack_id")
    fsdbStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbStatus.EntityData.Children = types.NewOrderedMap()
    fsdbStatus.EntityData.Leafs = types.NewOrderedMap()
    fsdbStatus.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", fsdbStatus.RackId})
    fsdbStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", fsdbStatus.Status})

    fsdbStatus.EntityData.YListKeys = []string {"RackId"}

    return &(fsdbStatus.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is bool.
    Status interface{}
}

func (sfeStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus) GetEntityData() *types.CommonEntityData {
    sfeStatus.EntityData.YFilter = sfeStatus.YFilter
    sfeStatus.EntityData.YangName = "sfe_status"
    sfeStatus.EntityData.BundleName = "cisco_ios_xr"
    sfeStatus.EntityData.ParentYangName = "sys_info_list"
    sfeStatus.EntityData.SegmentPath = "sfe_status" + types.AddKeyToken(sfeStatus.RackId, "rack_id")
    sfeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeStatus.EntityData.Children = types.NewOrderedMap()
    sfeStatus.EntityData.Leafs = types.NewOrderedMap()
    sfeStatus.EntityData.Leafs.Append("rack_id", types.YLeaf{"RackId", sfeStatus.RackId})
    sfeStatus.EntityData.Leafs.Append("status", types.YLeaf{"Status", sfeStatus.Status})

    sfeStatus.EntityData.YListKeys = []string {"RackId"}

    return &(sfeStatus.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}
}

func (sfeDrvrLoc *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc) GetEntityData() *types.CommonEntityData {
    sfeDrvrLoc.EntityData.YFilter = sfeDrvrLoc.YFilter
    sfeDrvrLoc.EntityData.YangName = "sfe_drvr_loc"
    sfeDrvrLoc.EntityData.BundleName = "cisco_ios_xr"
    sfeDrvrLoc.EntityData.ParentYangName = "sys_info_list"
    sfeDrvrLoc.EntityData.SegmentPath = "sfe_drvr_loc" + types.AddKeyToken(sfeDrvrLoc.LocStr, "loc_str")
    sfeDrvrLoc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeDrvrLoc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeDrvrLoc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeDrvrLoc.EntityData.Children = types.NewOrderedMap()
    sfeDrvrLoc.EntityData.Leafs = types.NewOrderedMap()
    sfeDrvrLoc.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", sfeDrvrLoc.LocStr})

    sfeDrvrLoc.EntityData.YListKeys = []string {"LocStr"}

    return &(sfeDrvrLoc.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}
}

func (sfeFmSep *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep) GetEntityData() *types.CommonEntityData {
    sfeFmSep.EntityData.YFilter = sfeFmSep.YFilter
    sfeFmSep.EntityData.YangName = "sfe_fm_sep"
    sfeFmSep.EntityData.BundleName = "cisco_ios_xr"
    sfeFmSep.EntityData.ParentYangName = "sys_info_list"
    sfeFmSep.EntityData.SegmentPath = "sfe_fm_sep" + types.AddKeyToken(sfeFmSep.LocStr, "loc_str")
    sfeFmSep.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeFmSep.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeFmSep.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeFmSep.EntityData.Children = types.NewOrderedMap()
    sfeFmSep.EntityData.Leafs = types.NewOrderedMap()
    sfeFmSep.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", sfeFmSep.LocStr})

    sfeFmSep.EntityData.YListKeys = []string {"LocStr"}

    return &(sfeFmSep.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator
// FSDB Aggregator information
type Controller_Fabric_Oper_FsdbAggregator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
}

func (fsdbAggregator *Controller_Fabric_Oper_FsdbAggregator) GetEntityData() *types.CommonEntityData {
    fsdbAggregator.EntityData.YFilter = fsdbAggregator.YFilter
    fsdbAggregator.EntityData.YangName = "fsdb-aggregator"
    fsdbAggregator.EntityData.BundleName = "cisco_ios_xr"
    fsdbAggregator.EntityData.ParentYangName = "oper"
    fsdbAggregator.EntityData.SegmentPath = "fsdb-aggregator"
    fsdbAggregator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbAggregator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbAggregator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbAggregator.EntityData.Children = types.NewOrderedMap()
    fsdbAggregator.EntityData.Children.Append("fsdbagg", types.YChild{"Fsdbagg", &fsdbAggregator.Fsdbagg})
    fsdbAggregator.EntityData.Leafs = types.NewOrderedMap()

    fsdbAggregator.EntityData.YListKeys = []string {}

    return &(fsdbAggregator.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace.
    Trace []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
}

func (fsdbagg *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fsdb-aggregator"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = types.NewOrderedMap()
    fsdbagg.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fsdbagg.Trace {
        fsdbagg.EntityData.Children.Append(types.GetSegmentPath(fsdbagg.Trace[i]), types.YChild{"Trace", fsdbagg.Trace[i]})
    }
    fsdbagg.EntityData.Leafs = types.NewOrderedMap()

    fsdbagg.EntityData.YListKeys = []string {}

    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location.
    Location []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdbagg"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Link
// Fabric link option
type Controller_Fabric_Oper_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack.
    Rack []*Controller_Fabric_Oper_Link_Rack

    // The type is slice of Controller_Fabric_Oper_Link_NodeLocation.
    NodeLocation []*Controller_Fabric_Oper_Link_NodeLocation
}

func (link *Controller_Fabric_Oper_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "oper"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range link.Rack {
        link.EntityData.Children.Append(types.GetSegmentPath(link.Rack[i]), types.YChild{"Rack", link.Rack[i]})
    }
    link.EntityData.Children.Append("node_location", types.YChild{"NodeLocation", nil})
    for i := range link.NodeLocation {
        link.EntityData.Children.Append(types.GetSegmentPath(link.NodeLocation[i]), types.YChild{"NodeLocation", link.NodeLocation[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()

    link.EntityData.YListKeys = []string {}

    return &(link.EntityData)
}

// Controller_Fabric_Oper_Link_Rack
type Controller_Fabric_Oper_Link_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port.
    Port []*Controller_Fabric_Oper_Link_Rack_Port
}

func (rack *Controller_Fabric_Oper_Link_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "link"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("port", types.YChild{"Port", nil})
    for i := range rack.Port {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.Port[i]), types.YChild{"Port", rack.Port[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port
type Controller_Fabric_Oper_Link_Rack_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: fia|s1|s2|s3.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Location.
    Location []*Controller_Fabric_Oper_Link_Rack_Port_Location

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Tx
}

func (port *Controller_Fabric_Oper_Link_Rack_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "rack"
    port.EntityData.SegmentPath = "port" + types.AddKeyToken(port.Portname, "portname")
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range port.Location {
        port.EntityData.Children.Append(types.GetSegmentPath(port.Location[i]), types.YChild{"Location", port.Location[i]})
    }
    port.EntityData.Children.Append("rx", types.YChild{"Rx", &port.Rx})
    port.EntityData.Children.Append("tx", types.YChild{"Tx", &port.Tx})
    port.EntityData.Leafs = types.NewOrderedMap()
    port.EntityData.Leafs.Append("portname", types.YLeaf{"Portname", port.Portname})
    port.EntityData.Leafs.Append("description", types.YLeaf{"Description", port.Description})

    port.EntityData.YListKeys = []string {"Portname"}

    return &(port.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location
type Controller_Fabric_Oper_Link_Rack_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/(0?[0-5])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5])/(0?[0-9]|[1-2][0-9]|3[0-5]))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/(0?[0-2])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3])).
    LocStr interface{}

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Location_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
}

func (location *Controller_Fabric_Oper_Link_Rack_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("rx", types.YChild{"Rx", &location.Rx})
    location.EntityData.Children.Append("tx", types.YChild{"Tx", &location.Tx})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("er", types.YChild{"Er", &state.Er})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = types.NewOrderedMap()
    er.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range er.DataIdx {
        er.EntityData.Children.Append(types.GetSegmentPath(er.DataIdx[i]), types.YChild{"DataIdx", er.DataIdx[i]})
    }
    er.EntityData.Children.Append("brief", types.YChild{"Brief", &er.Brief})
    er.EntityData.Children.Append("detail", types.YChild{"Detail", &er.Detail})
    er.EntityData.Leafs = types.NewOrderedMap()

    er.EntityData.YListKeys = []string {}

    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("er", types.YChild{"Er", &state.Er})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = types.NewOrderedMap()
    er.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range er.DataIdx {
        er.EntityData.Children.Append(types.GetSegmentPath(er.DataIdx[i]), types.YChild{"DataIdx", er.DataIdx[i]})
    }
    er.EntityData.Children.Append("brief", types.YChild{"Brief", &er.Brief})
    er.EntityData.Children.Append("detail", types.YChild{"Detail", &er.Detail})
    er.EntityData.Leafs = types.NewOrderedMap()

    er.EntityData.YListKeys = []string {}

    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "port"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range rx.DataIdx {
        rx.EntityData.Children.Append(types.GetSegmentPath(rx.DataIdx[i]), types.YChild{"DataIdx", rx.DataIdx[i]})
    }
    rx.EntityData.Children.Append("brief", types.YChild{"Brief", &rx.Brief})
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("state", types.YChild{"State", &rx.State})
    rx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &rx.Statistics})
    rx.EntityData.Leafs = types.NewOrderedMap()

    rx.EntityData.YListKeys = []string {}

    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("er", types.YChild{"Er", &state.Er})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = types.NewOrderedMap()
    er.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range er.DataIdx {
        er.EntityData.Children.Append(types.GetSegmentPath(er.DataIdx[i]), types.YChild{"DataIdx", er.DataIdx[i]})
    }
    er.EntityData.Children.Append("brief", types.YChild{"Brief", &er.Brief})
    er.EntityData.Children.Append("detail", types.YChild{"Detail", &er.Detail})
    er.EntityData.Leafs = types.NewOrderedMap()

    er.EntityData.YListKeys = []string {}

    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "port"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range tx.DataIdx {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.DataIdx[i]), types.YChild{"DataIdx", tx.DataIdx[i]})
    }
    tx.EntityData.Children.Append("brief", types.YChild{"Brief", &tx.Brief})
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("state", types.YChild{"State", &tx.State})
    tx.EntityData.Children.Append("statistics", types.YChild{"Statistics", &tx.Statistics})
    tx.EntityData.Leafs = types.NewOrderedMap()

    tx.EntityData.YListKeys = []string {}

    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = types.NewOrderedMap()
    state.EntityData.Children.Append("up", types.YChild{"Up", &state.Up})
    state.EntityData.Children.Append("down", types.YChild{"Down", &state.Down})
    state.EntityData.Children.Append("er", types.YChild{"Er", &state.Er})
    state.EntityData.Children.Append("mismatch", types.YChild{"Mismatch", &state.Mismatch})
    state.EntityData.Leafs = types.NewOrderedMap()

    state.EntityData.YListKeys = []string {}

    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = types.NewOrderedMap()
    up.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range up.DataIdx {
        up.EntityData.Children.Append(types.GetSegmentPath(up.DataIdx[i]), types.YChild{"DataIdx", up.DataIdx[i]})
    }
    up.EntityData.Children.Append("brief", types.YChild{"Brief", &up.Brief})
    up.EntityData.Children.Append("detail", types.YChild{"Detail", &up.Detail})
    up.EntityData.Leafs = types.NewOrderedMap()

    up.EntityData.YListKeys = []string {}

    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = types.NewOrderedMap()
    down.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range down.DataIdx {
        down.EntityData.Children.Append(types.GetSegmentPath(down.DataIdx[i]), types.YChild{"DataIdx", down.DataIdx[i]})
    }
    down.EntityData.Children.Append("brief", types.YChild{"Brief", &down.Brief})
    down.EntityData.Children.Append("detail", types.YChild{"Detail", &down.Detail})
    down.EntityData.Leafs = types.NewOrderedMap()

    down.EntityData.YListKeys = []string {}

    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = types.NewOrderedMap()
    er.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range er.DataIdx {
        er.EntityData.Children.Append(types.GetSegmentPath(er.DataIdx[i]), types.YChild{"DataIdx", er.DataIdx[i]})
    }
    er.EntityData.Children.Append("brief", types.YChild{"Brief", &er.Brief})
    er.EntityData.Children.Append("detail", types.YChild{"Detail", &er.Detail})
    er.EntityData.Leafs = types.NewOrderedMap()

    er.EntityData.YListKeys = []string {}

    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = types.NewOrderedMap()
    mismatch.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children.Append(types.GetSegmentPath(mismatch.DataIdx[i]), types.YChild{"DataIdx", mismatch.DataIdx[i]})
    }
    mismatch.EntityData.Children.Append("brief", types.YChild{"Brief", &mismatch.Brief})
    mismatch.EntityData.Children.Append("detail", types.YChild{"Detail", &mismatch.Detail})
    mismatch.EntityData.Leafs = types.NewOrderedMap()

    mismatch.EntityData.YListKeys = []string {}

    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History.
    History []*Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range dataIdx.History {
        dataIdx.EntityData.Children.Append(types.GetSegmentPath(dataIdx.History[i]), types.YChild{"History", dataIdx.History[i]})
    }
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", dataIdx.AdminState})
    dataIdx.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", dataIdx.OperState})
    dataIdx.EntityData.Leafs.Append("near_end_cdr_ln", types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn})
    dataIdx.EntityData.Leafs.Append("near_end_cxp_ch", types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cxp_ch", types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh})
    dataIdx.EntityData.Leafs.Append("far_end_cdr_ln", types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn})
    dataIdx.EntityData.Leafs.Append("neighbor_link", types.YLeaf{"NeighborLink", dataIdx.NeighborLink})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range statistics.DataIdx {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.DataIdx[i]), types.YChild{"DataIdx", statistics.DataIdx[i]})
    }
    statistics.EntityData.Children.Append("brief", types.YChild{"Brief", &statistics.Brief})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range brief.DataIdx {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.DataIdx[i]), types.YChild{"DataIdx", brief.DataIdx[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx.
    DataIdx []*Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("data_idx", types.YChild{"DataIdx", nil})
    for i := range detail.DataIdx {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.DataIdx[i]), types.YChild{"DataIdx", detail.DataIdx[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RX8b10bCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + types.AddKeyToken(dataIdx.PortDataIdx, "port_data_idx")
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = types.NewOrderedMap()
    dataIdx.EntityData.Leafs = types.NewOrderedMap()
    dataIdx.EntityData.Leafs.Append("port_data_idx", types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx})
    dataIdx.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", dataIdx.RackNum})
    dataIdx.EntityData.Leafs.Append("sfe_port", types.YLeaf{"SfePort", dataIdx.SfePort})
    dataIdx.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", dataIdx.TXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", dataIdx.TXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", dataIdx.TXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", dataIdx.RXCRCErrorsCounter})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", dataIdx.RXLFECFECCorrectableError})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_disparity_errors", types.YLeaf{"RX8b10bDisparityErrors", dataIdx.RX8b10bDisparityErrors})
    dataIdx.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", dataIdx.RXControlCellsCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", dataIdx.RXDataCellCounter})
    dataIdx.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", dataIdx.RXDataByteCounter})
    dataIdx.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", dataIdx.RXDroppedRetransmittedControl})
    dataIdx.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", dataIdx.TXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", dataIdx.RXAsynFifoRate})
    dataIdx.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", dataIdx.RXLFECFECUncorrectableErrors})
    dataIdx.EntityData.Leafs.Append("RX_8b_10b_code_errors", types.YLeaf{"RX8b10bCodeErrors", dataIdx.RX8b10bCodeErrors})
    dataIdx.EntityData.Leafs.Append("is_link_error", types.YLeaf{"IsLinkError", dataIdx.IsLinkError})
    dataIdx.EntityData.Leafs.Append("link_crc_error", types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError})
    dataIdx.EntityData.Leafs.Append("link_size_error", types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError})
    dataIdx.EntityData.Leafs.Append("link_mis_align_error", types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError})
    dataIdx.EntityData.Leafs.Append("link_code_group_error", types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_lock_error", types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError})
    dataIdx.EntityData.Leafs.Append("link_no_sig_accept_error", types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError})
    dataIdx.EntityData.Leafs.Append("link_tokens_error", types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError})
    dataIdx.EntityData.Leafs.Append("error_token_count", types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount})

    dataIdx.EntityData.YListKeys = []string {"PortDataIdx"}

    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation
type Controller_Fabric_Oper_Link_NodeLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    NodeStr interface{}
}

func (nodeLocation *Controller_Fabric_Oper_Link_NodeLocation) GetEntityData() *types.CommonEntityData {
    nodeLocation.EntityData.YFilter = nodeLocation.YFilter
    nodeLocation.EntityData.YangName = "node_location"
    nodeLocation.EntityData.BundleName = "cisco_ios_xr"
    nodeLocation.EntityData.ParentYangName = "link"
    nodeLocation.EntityData.SegmentPath = "node_location" + types.AddKeyToken(nodeLocation.NodeStr, "node_str")
    nodeLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeLocation.EntityData.Children = types.NewOrderedMap()
    nodeLocation.EntityData.Leafs = types.NewOrderedMap()
    nodeLocation.EntityData.Leafs.Append("node_str", types.YLeaf{"NodeStr", nodeLocation.NodeStr})

    nodeLocation.EntityData.YListKeys = []string {"NodeStr"}

    return &(nodeLocation.EntityData)
}

// Controller_Fabric_Oper_Sfe
// Switch Fabric Element option
type Controller_Fabric_Oper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack.
    Rack []*Controller_Fabric_Oper_Sfe_Rack
}

func (sfe *Controller_Fabric_Oper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = types.NewOrderedMap()
    sfe.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range sfe.Rack {
        sfe.EntityData.Children.Append(types.GetSegmentPath(sfe.Rack[i]), types.YChild{"Rack", sfe.Rack[i]})
    }
    sfe.EntityData.Leafs = types.NewOrderedMap()

    sfe.EntityData.YListKeys = []string {}

    return &(sfe.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack
type Controller_Fabric_Oper_Sfe_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages.
    AsicStages []*Controller_Fabric_Oper_Sfe_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_Sfe_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "sfe"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("asic_stages", types.YChild{"AsicStages", nil})
    for i := range rack.AsicStages {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.AsicStages[i]), types.YChild{"AsicStages", rack.AsicStages[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages
type Controller_Fabric_Oper_Sfe_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // fia|s123|s13|s2|b2b.
    AsicStageName interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location.
    Location []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
}

func (asicStages *Controller_Fabric_Oper_Sfe_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + types.AddKeyToken(asicStages.AsicStageName, "asic_stage_name")
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = types.NewOrderedMap()
    asicStages.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range asicStages.Location {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Location[i]), types.YChild{"Location", asicStages.Location[i]})
    }
    asicStages.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range asicStages.AsicList {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.AsicList[i]), types.YChild{"AsicList", asicStages.AsicList[i]})
    }
    asicStages.EntityData.Children.Append("brief", types.YChild{"Brief", &asicStages.Brief})
    asicStages.EntityData.Children.Append("detail", types.YChild{"Detail", &asicStages.Detail})
    asicStages.EntityData.Leafs = types.NewOrderedMap()
    asicStages.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asicStages.AsicStageName})

    asicStages.EntityData.YListKeys = []string {"AsicStageName"}

    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/(0?[0-5]))|((0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5]))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/(0?[0-2])).
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
}

func (location *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "asic_stages"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range location.AsicList {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AsicList[i]), types.YChild{"AsicList", location.AsicList[i]})
    }
    location.EntityData.Children.Append("brief", types.YChild{"Brief", &location.Brief})
    location.EntityData.Children.Append("detail", types.YChild{"Detail", &location.Detail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "location"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "location"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range brief.AsicList {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.AsicList[i]), types.YChild{"AsicList", brief.AsicList[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "location"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range detail.AsicList {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.AsicList[i]), types.YChild{"AsicList", detail.AsicList[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "asic_stages"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "asic_stages"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range brief.AsicList {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.AsicList[i]), types.YChild{"AsicList", brief.AsicList[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList.
    AsicList []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "asic_stages"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range detail.AsicList {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.AsicList[i]), types.YChild{"AsicList", detail.AsicList[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History.
    History []*Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range asicList.History {
        asicList.EntityData.Children.Append(types.GetSegmentPath(asicList.History[i]), types.YChild{"History", asicList.History[i]})
    }
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_loc_str", types.YLeaf{"AsicLocStr", asicList.AsicLocStr})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("down_flags", types.YLeaf{"DownFlags", asicList.DownFlags})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_Fabric_Oper_FsdbPla
// plane availability status option
type Controller_Fabric_Oper_FsdbPla struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack. The type is slice of Controller_Fabric_Oper_FsdbPla_Rack.
    Rack []*Controller_Fabric_Oper_FsdbPla_Rack
}

func (fsdbPla *Controller_Fabric_Oper_FsdbPla) GetEntityData() *types.CommonEntityData {
    fsdbPla.EntityData.YFilter = fsdbPla.YFilter
    fsdbPla.EntityData.YangName = "fsdb_pla"
    fsdbPla.EntityData.BundleName = "cisco_ios_xr"
    fsdbPla.EntityData.ParentYangName = "oper"
    fsdbPla.EntityData.SegmentPath = "fsdb_pla"
    fsdbPla.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbPla.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbPla.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbPla.EntityData.Children = types.NewOrderedMap()
    fsdbPla.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range fsdbPla.Rack {
        fsdbPla.EntityData.Children.Append(types.GetSegmentPath(fsdbPla.Rack[i]), types.YChild{"Rack", fsdbPla.Rack[i]})
    }
    fsdbPla.EntityData.Leafs = types.NewOrderedMap()

    fsdbPla.EntityData.YListKeys = []string {}

    return &(fsdbPla.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack
// Rack
type Controller_Fabric_Oper_FsdbPla_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages.
    AsicStages []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_FsdbPla_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "fsdb_pla"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNumber, "rack_number")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("asic_stages", types.YChild{"AsicStages", nil})
    for i := range rack.AsicStages {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.AsicStages[i]), types.YChild{"AsicStages", rack.AsicStages[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", rack.RackNumber})

    rack.EntityData.YListKeys = []string {"RackNumber"}

    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: s1|s2|s3|s123.
    AsicStageIdx interface{}

    // The type is string with pattern: s1|s2|s3|s123.
    AsicStageName interface{}

    // The type is string.
    RackNumber interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids.
    Fabids []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids.
    DownFabids []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination.
    Destination []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
}

func (asicStages *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + types.AddKeyToken(asicStages.AsicStageIdx, "asic_stage_idx")
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = types.NewOrderedMap()
    asicStages.EntityData.Children.Append("fabids", types.YChild{"Fabids", nil})
    for i := range asicStages.Fabids {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Fabids[i]), types.YChild{"Fabids", asicStages.Fabids[i]})
    }
    asicStages.EntityData.Children.Append("down_fabids", types.YChild{"DownFabids", nil})
    for i := range asicStages.DownFabids {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.DownFabids[i]), types.YChild{"DownFabids", asicStages.DownFabids[i]})
    }
    asicStages.EntityData.Children.Append("destination", types.YChild{"Destination", nil})
    for i := range asicStages.Destination {
        asicStages.EntityData.Children.Append(types.GetSegmentPath(asicStages.Destination[i]), types.YChild{"Destination", asicStages.Destination[i]})
    }
    asicStages.EntityData.Leafs = types.NewOrderedMap()
    asicStages.EntityData.Leafs.Append("asic_stage_idx", types.YLeaf{"AsicStageIdx", asicStages.AsicStageIdx})
    asicStages.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asicStages.AsicStageName})
    asicStages.EntityData.Leafs.Append("rack_number", types.YLeaf{"RackNumber", asicStages.RackNumber})
    asicStages.EntityData.Leafs.Append("plane_number", types.YLeaf{"PlaneNumber", asicStages.PlaneNumber})

    asicStages.EntityData.YListKeys = []string {"AsicStageIdx"}

    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    Plane0Mask interface{}

    // The type is string.
    Plane1Mask interface{}

    // The type is string.
    Plane2Mask interface{}

    // The type is string.
    Plane3Mask interface{}

    // The type is string.
    Plane4Mask interface{}

    // The type is string.
    Plane5Mask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}
}

func (fabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids) GetEntityData() *types.CommonEntityData {
    fabids.EntityData.YFilter = fabids.YFilter
    fabids.EntityData.YangName = "fabids"
    fabids.EntityData.BundleName = "cisco_ios_xr"
    fabids.EntityData.ParentYangName = "asic_stages"
    fabids.EntityData.SegmentPath = "fabids" + types.AddKeyToken(fabids.Idx, "idx")
    fabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabids.EntityData.Children = types.NewOrderedMap()
    fabids.EntityData.Leafs = types.NewOrderedMap()
    fabids.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", fabids.Idx})
    fabids.EntityData.Leafs.Append("fabid_address", types.YLeaf{"FabidAddress", fabids.FabidAddress})
    fabids.EntityData.Leafs.Append("plane_num", types.YLeaf{"PlaneNum", fabids.PlaneNum})
    fabids.EntityData.Leafs.Append("plane_0_mask", types.YLeaf{"Plane0Mask", fabids.Plane0Mask})
    fabids.EntityData.Leafs.Append("plane_1_mask", types.YLeaf{"Plane1Mask", fabids.Plane1Mask})
    fabids.EntityData.Leafs.Append("plane_2_mask", types.YLeaf{"Plane2Mask", fabids.Plane2Mask})
    fabids.EntityData.Leafs.Append("plane_3_mask", types.YLeaf{"Plane3Mask", fabids.Plane3Mask})
    fabids.EntityData.Leafs.Append("plane_4_mask", types.YLeaf{"Plane4Mask", fabids.Plane4Mask})
    fabids.EntityData.Leafs.Append("plane_5_mask", types.YLeaf{"Plane5Mask", fabids.Plane5Mask})
    fabids.EntityData.Leafs.Append("min_links_per_asic", types.YLeaf{"MinLinksPerAsic", fabids.MinLinksPerAsic})
    fabids.EntityData.Leafs.Append("max_links_per_asic", types.YLeaf{"MaxLinksPerAsic", fabids.MaxLinksPerAsic})
    fabids.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", fabids.TotalLinks})
    fabids.EntityData.Leafs.Append("min_up_links_per_asic", types.YLeaf{"MinUpLinksPerAsic", fabids.MinUpLinksPerAsic})
    fabids.EntityData.Leafs.Append("max_up_links_per_asic", types.YLeaf{"MaxUpLinksPerAsic", fabids.MaxUpLinksPerAsic})
    fabids.EntityData.Leafs.Append("total_up_links", types.YLeaf{"TotalUpLinks", fabids.TotalUpLinks})

    fabids.EntityData.YListKeys = []string {"Idx"}

    return &(fabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is string.
    FabidStatus interface{}
}

func (downFabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids) GetEntityData() *types.CommonEntityData {
    downFabids.EntityData.YFilter = downFabids.YFilter
    downFabids.EntityData.YangName = "down_fabids"
    downFabids.EntityData.BundleName = "cisco_ios_xr"
    downFabids.EntityData.ParentYangName = "asic_stages"
    downFabids.EntityData.SegmentPath = "down_fabids" + types.AddKeyToken(downFabids.Idx, "idx")
    downFabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downFabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downFabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downFabids.EntityData.Children = types.NewOrderedMap()
    downFabids.EntityData.Leafs = types.NewOrderedMap()
    downFabids.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", downFabids.Idx})
    downFabids.EntityData.Leafs.Append("fabid_address", types.YLeaf{"FabidAddress", downFabids.FabidAddress})
    downFabids.EntityData.Leafs.Append("fabid_status", types.YLeaf{"FabidStatus", downFabids.FabidStatus})

    downFabids.EntityData.YListKeys = []string {"Idx"}

    return &(downFabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // (0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5])|([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|10[0-1][0-9]|102[0-3]).
    AmbaId interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes.
    Planes []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
}

func (destination *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "asic_stages"
    destination.EntityData.SegmentPath = "destination" + types.AddKeyToken(destination.AmbaId, "amba_id")
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = types.NewOrderedMap()
    destination.EntityData.Children.Append("planes", types.YChild{"Planes", nil})
    for i := range destination.Planes {
        destination.EntityData.Children.Append(types.GetSegmentPath(destination.Planes[i]), types.YChild{"Planes", destination.Planes[i]})
    }
    destination.EntityData.Leafs = types.NewOrderedMap()
    destination.EntityData.Leafs.Append("amba_id", types.YLeaf{"AmbaId", destination.AmbaId})

    destination.EntityData.YListKeys = []string {"AmbaId"}

    return &(destination.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneIdx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    FabidName interface{}

    // The type is bool.
    ShowFabid interface{}

    // The type is string.
    AsicStage interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards.
    Cards []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
}

func (planes *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes) GetEntityData() *types.CommonEntityData {
    planes.EntityData.YFilter = planes.YFilter
    planes.EntityData.YangName = "planes"
    planes.EntityData.BundleName = "cisco_ios_xr"
    planes.EntityData.ParentYangName = "destination"
    planes.EntityData.SegmentPath = "planes" + types.AddKeyToken(planes.PlaneIdx, "plane_idx")
    planes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    planes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    planes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    planes.EntityData.Children = types.NewOrderedMap()
    planes.EntityData.Children.Append("cards", types.YChild{"Cards", nil})
    for i := range planes.Cards {
        planes.EntityData.Children.Append(types.GetSegmentPath(planes.Cards[i]), types.YChild{"Cards", planes.Cards[i]})
    }
    planes.EntityData.Leafs = types.NewOrderedMap()
    planes.EntityData.Leafs.Append("plane_idx", types.YLeaf{"PlaneIdx", planes.PlaneIdx})
    planes.EntityData.Leafs.Append("plane_num", types.YLeaf{"PlaneNum", planes.PlaneNum})
    planes.EntityData.Leafs.Append("fabid_name", types.YLeaf{"FabidName", planes.FabidName})
    planes.EntityData.Leafs.Append("show_fabid", types.YLeaf{"ShowFabid", planes.ShowFabid})
    planes.EntityData.Leafs.Append("asic_stage", types.YLeaf{"AsicStage", planes.AsicStage})

    planes.EntityData.YListKeys = []string {"PlaneIdx"}

    return &(planes.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CardIdx interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics.
    Asics []*Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
}

func (cards *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards) GetEntityData() *types.CommonEntityData {
    cards.EntityData.YFilter = cards.YFilter
    cards.EntityData.YangName = "cards"
    cards.EntityData.BundleName = "cisco_ios_xr"
    cards.EntityData.ParentYangName = "planes"
    cards.EntityData.SegmentPath = "cards" + types.AddKeyToken(cards.CardIdx, "card_idx")
    cards.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cards.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cards.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cards.EntityData.Children = types.NewOrderedMap()
    cards.EntityData.Children.Append("asics", types.YChild{"Asics", nil})
    for i := range cards.Asics {
        cards.EntityData.Children.Append(types.GetSegmentPath(cards.Asics[i]), types.YChild{"Asics", cards.Asics[i]})
    }
    cards.EntityData.Leafs = types.NewOrderedMap()
    cards.EntityData.Leafs.Append("card_idx", types.YLeaf{"CardIdx", cards.CardIdx})

    cards.EntityData.YListKeys = []string {"CardIdx"}

    return &(cards.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    AsicIdx interface{}

    // The type is string.
    AsicRSA interface{}

    // The type is string.
    ReachabilityMask interface{}

    // The type is string.
    LinkupMask interface{}

    // The type is string.
    AllReachMask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAllReachLinks interface{}

    // The type is string with pattern: s1|s2|s3|s123.
    AsicStageName interface{}
}

func (asics *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics) GetEntityData() *types.CommonEntityData {
    asics.EntityData.YFilter = asics.YFilter
    asics.EntityData.YangName = "asics"
    asics.EntityData.BundleName = "cisco_ios_xr"
    asics.EntityData.ParentYangName = "cards"
    asics.EntityData.SegmentPath = "asics" + types.AddKeyToken(asics.AsicIdx, "asic_idx")
    asics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asics.EntityData.Children = types.NewOrderedMap()
    asics.EntityData.Leafs = types.NewOrderedMap()
    asics.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asics.AsicIdx})
    asics.EntityData.Leafs.Append("asic_RSA", types.YLeaf{"AsicRSA", asics.AsicRSA})
    asics.EntityData.Leafs.Append("reachability_mask", types.YLeaf{"ReachabilityMask", asics.ReachabilityMask})
    asics.EntityData.Leafs.Append("linkup_mask", types.YLeaf{"LinkupMask", asics.LinkupMask})
    asics.EntityData.Leafs.Append("all_reach_mask", types.YLeaf{"AllReachMask", asics.AllReachMask})
    asics.EntityData.Leafs.Append("total_links", types.YLeaf{"TotalLinks", asics.TotalLinks})
    asics.EntityData.Leafs.Append("total_up_links", types.YLeaf{"TotalUpLinks", asics.TotalUpLinks})
    asics.EntityData.Leafs.Append("total_all_reach_links", types.YLeaf{"TotalAllReachLinks", asics.TotalAllReachLinks})
    asics.EntityData.Leafs.Append("asic_stage_name", types.YLeaf{"AsicStageName", asics.AsicStageName})

    asics.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asics.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr
// FSDB Server information
type Controller_Fabric_Oper_FsdbSrvr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    FsdbServer Controller_Fabric_Oper_FsdbSrvr_FsdbServer
}

func (fsdbSrvr *Controller_Fabric_Oper_FsdbSrvr) GetEntityData() *types.CommonEntityData {
    fsdbSrvr.EntityData.YFilter = fsdbSrvr.YFilter
    fsdbSrvr.EntityData.YangName = "fsdb_srvr"
    fsdbSrvr.EntityData.BundleName = "cisco_ios_xr"
    fsdbSrvr.EntityData.ParentYangName = "oper"
    fsdbSrvr.EntityData.SegmentPath = "fsdb_srvr"
    fsdbSrvr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbSrvr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbSrvr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbSrvr.EntityData.Children = types.NewOrderedMap()
    fsdbSrvr.EntityData.Children.Append("fsdb_server", types.YChild{"FsdbServer", &fsdbSrvr.FsdbServer})
    fsdbSrvr.EntityData.Leafs = types.NewOrderedMap()

    fsdbSrvr.EntityData.YListKeys = []string {}

    return &(fsdbSrvr.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace.
    Trace []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
}

func (fsdbServer *Controller_Fabric_Oper_FsdbSrvr_FsdbServer) GetEntityData() *types.CommonEntityData {
    fsdbServer.EntityData.YFilter = fsdbServer.YFilter
    fsdbServer.EntityData.YangName = "fsdb_server"
    fsdbServer.EntityData.BundleName = "cisco_ios_xr"
    fsdbServer.EntityData.ParentYangName = "fsdb_srvr"
    fsdbServer.EntityData.SegmentPath = "fsdb_server"
    fsdbServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbServer.EntityData.Children = types.NewOrderedMap()
    fsdbServer.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range fsdbServer.Trace {
        fsdbServer.EntityData.Children.Append(types.GetSegmentPath(fsdbServer.Trace[i]), types.YChild{"Trace", fsdbServer.Trace[i]})
    }
    fsdbServer.EntityData.Leafs = types.NewOrderedMap()

    fsdbServer.EntityData.YListKeys = []string {}

    return &(fsdbServer.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location.
    Location []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdb_server"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions.
    AllOptions []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_SfeOper
type Controller_SfeOper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric SFE driver commands.
    Sfe Controller_SfeOper_Sfe

    
    SfeTrace Controller_SfeOper_SfeTrace
}

func (sfeOper *Controller_SfeOper) GetEntityData() *types.CommonEntityData {
    sfeOper.EntityData.YFilter = sfeOper.YFilter
    sfeOper.EntityData.YangName = "sfe_oper"
    sfeOper.EntityData.BundleName = "cisco_ios_xr"
    sfeOper.EntityData.ParentYangName = "controller"
    sfeOper.EntityData.SegmentPath = "sfe_oper"
    sfeOper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeOper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeOper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeOper.EntityData.Children = types.NewOrderedMap()
    sfeOper.EntityData.Children.Append("sfe", types.YChild{"Sfe", &sfeOper.Sfe})
    sfeOper.EntityData.Children.Append("sfe_trace", types.YChild{"SfeTrace", &sfeOper.SfeTrace})
    sfeOper.EntityData.Leafs = types.NewOrderedMap()

    sfeOper.EntityData.YListKeys = []string {}

    return &(sfeOper.EntityData)
}

// Controller_SfeOper_Sfe
// Fabric SFE driver commands
type Controller_SfeOper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Driver Controller_SfeOper_Sfe_Driver

    
    Statistics Controller_SfeOper_Sfe_Statistics

    
    LinkInfo Controller_SfeOper_Sfe_LinkInfo

    
    Diagshell Controller_SfeOper_Sfe_Diagshell

    
    Register Controller_SfeOper_Sfe_Register

    
    DumpFile Controller_SfeOper_Sfe_DumpFile

    
    Parse Controller_SfeOper_Sfe_Parse
}

func (sfe *Controller_SfeOper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "sfe_oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = types.NewOrderedMap()
    sfe.EntityData.Children.Append("driver", types.YChild{"Driver", &sfe.Driver})
    sfe.EntityData.Children.Append("statistics", types.YChild{"Statistics", &sfe.Statistics})
    sfe.EntityData.Children.Append("link-info", types.YChild{"LinkInfo", &sfe.LinkInfo})
    sfe.EntityData.Children.Append("diagshell", types.YChild{"Diagshell", &sfe.Diagshell})
    sfe.EntityData.Children.Append("register", types.YChild{"Register", &sfe.Register})
    sfe.EntityData.Children.Append("dump-file", types.YChild{"DumpFile", &sfe.DumpFile})
    sfe.EntityData.Children.Append("parse", types.YChild{"Parse", &sfe.Parse})
    sfe.EntityData.Leafs = types.NewOrderedMap()

    sfe.EntityData.YListKeys = []string {}

    return &(sfe.EntityData)
}

// Controller_SfeOper_Sfe_Driver
type Controller_SfeOper_Sfe_Driver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack.
    Rack []*Controller_SfeOper_Sfe_Driver_Rack
}

func (driver *Controller_SfeOper_Sfe_Driver) GetEntityData() *types.CommonEntityData {
    driver.EntityData.YFilter = driver.YFilter
    driver.EntityData.YangName = "driver"
    driver.EntityData.BundleName = "cisco_ios_xr"
    driver.EntityData.ParentYangName = "sfe"
    driver.EntityData.SegmentPath = "driver"
    driver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    driver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    driver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    driver.EntityData.Children = types.NewOrderedMap()
    driver.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range driver.Rack {
        driver.EntityData.Children.Append(types.GetSegmentPath(driver.Rack[i]), types.YChild{"Rack", driver.Rack[i]})
    }
    driver.EntityData.Leafs = types.NewOrderedMap()

    driver.EntityData.YListKeys = []string {}

    return &(driver.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack
type Controller_SfeOper_Sfe_Driver_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // (0?[0-9])|(1[0-5])|([F|f][0-3]).
    RackNum interface{}

    // The type is string. The default value is rack no..
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo.
    DrvrInfo []*Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo
}

func (rack *Controller_SfeOper_Sfe_Driver_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "driver"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.RackNum, "rack_num")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("drvr_info", types.YChild{"DrvrInfo", nil})
    for i := range rack.DrvrInfo {
        rack.EntityData.Children.Append(types.GetSegmentPath(rack.DrvrInfo[i]), types.YChild{"DrvrInfo", rack.DrvrInfo[i]})
    }
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", rack.RackNum})
    rack.EntityData.Leafs.Append("description", types.YLeaf{"Description", rack.Description})

    rack.EntityData.YListKeys = []string {"RackNum"}

    return &(rack.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo
type Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    DrvVersion interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMajorRev interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMinorRev interface{}

    // The type is string.
    FuncRole interface{}

    // The type is string.
    IssuRole interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    IpAddress interface{}

    // The type is interface{} with range: 0..4294967295.
    CardAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    ExpAsicAvailMask interface{}

    // The type is interface{} with range: 0..4294967295.
    UcmcRatio interface{}

    // The type is bool.
    PmConnActive interface{}

    // The type is bool.
    PlatformLocalConnActive interface{}

    // The type is bool.
    FsdbConnActive interface{}

    // The type is bool.
    FgidConnActive interface{}

    // The type is bool.
    CmConnActive interface{}

    // The type is bool.
    CccConnActive interface{}

    // The type is bool.
    IssuMgrConnActive interface{}

    // The type is bool.
    PeerSfeConnActive interface{}

    // The type is bool.
    CxpConnActive interface{}

    // The type is bool.
    PmRegActive interface{}

    // The type is bool.
    PlatformLocalRegActive interface{}

    // The type is bool.
    FsdbRegActive interface{}

    // The type is bool.
    FgidRegActive interface{}

    // The type is bool.
    CmRegActive interface{}

    // The type is bool.
    IssuMgrRegActive interface{}

    // The type is bool.
    PeerSfeRegActive interface{}

    // The type is bool.
    CxpRegActive interface{}

    // The type is interface{} with range: 0..255.
    NumPmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPlatformLocalConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFsdbConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFgidConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFstatsConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCccConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumIssuMgrConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPeerSfeConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCxpConnReqs interface{}

    // The type is bool.
    IsGasppRegistered interface{}

    // The type is bool.
    IsCihRegistered interface{}

    // The type is string.
    StartupTime interface{}

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList.
    AsicList []*Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList
}

func (drvrInfo *Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo) GetEntityData() *types.CommonEntityData {
    drvrInfo.EntityData.YFilter = drvrInfo.YFilter
    drvrInfo.EntityData.YangName = "drvr_info"
    drvrInfo.EntityData.BundleName = "cisco_ios_xr"
    drvrInfo.EntityData.ParentYangName = "rack"
    drvrInfo.EntityData.SegmentPath = "drvr_info" + types.AddKeyToken(drvrInfo.Idx, "idx")
    drvrInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drvrInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drvrInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drvrInfo.EntityData.Children = types.NewOrderedMap()
    drvrInfo.EntityData.Children.Append("asic_list", types.YChild{"AsicList", nil})
    for i := range drvrInfo.AsicList {
        drvrInfo.EntityData.Children.Append(types.GetSegmentPath(drvrInfo.AsicList[i]), types.YChild{"AsicList", drvrInfo.AsicList[i]})
    }
    drvrInfo.EntityData.Leafs = types.NewOrderedMap()
    drvrInfo.EntityData.Leafs.Append("idx", types.YLeaf{"Idx", drvrInfo.Idx})
    drvrInfo.EntityData.Leafs.Append("drv_version", types.YLeaf{"DrvVersion", drvrInfo.DrvVersion})
    drvrInfo.EntityData.Leafs.Append("coeff_major_rev", types.YLeaf{"CoeffMajorRev", drvrInfo.CoeffMajorRev})
    drvrInfo.EntityData.Leafs.Append("coeff_minor_rev", types.YLeaf{"CoeffMinorRev", drvrInfo.CoeffMinorRev})
    drvrInfo.EntityData.Leafs.Append("func_role", types.YLeaf{"FuncRole", drvrInfo.FuncRole})
    drvrInfo.EntityData.Leafs.Append("issu_role", types.YLeaf{"IssuRole", drvrInfo.IssuRole})
    drvrInfo.EntityData.Leafs.Append("rack_name", types.YLeaf{"RackName", drvrInfo.RackName})
    drvrInfo.EntityData.Leafs.Append("rack_type", types.YLeaf{"RackType", drvrInfo.RackType})
    drvrInfo.EntityData.Leafs.Append("rack_num", types.YLeaf{"RackNum", drvrInfo.RackNum})
    drvrInfo.EntityData.Leafs.Append("ip_address", types.YLeaf{"IpAddress", drvrInfo.IpAddress})
    drvrInfo.EntityData.Leafs.Append("card_avail_mask", types.YLeaf{"CardAvailMask", drvrInfo.CardAvailMask})
    drvrInfo.EntityData.Leafs.Append("asic_avail_mask", types.YLeaf{"AsicAvailMask", drvrInfo.AsicAvailMask})
    drvrInfo.EntityData.Leafs.Append("exp_asic_avail_mask", types.YLeaf{"ExpAsicAvailMask", drvrInfo.ExpAsicAvailMask})
    drvrInfo.EntityData.Leafs.Append("ucmc_ratio", types.YLeaf{"UcmcRatio", drvrInfo.UcmcRatio})
    drvrInfo.EntityData.Leafs.Append("pm_conn_active", types.YLeaf{"PmConnActive", drvrInfo.PmConnActive})
    drvrInfo.EntityData.Leafs.Append("platform_local_conn_active", types.YLeaf{"PlatformLocalConnActive", drvrInfo.PlatformLocalConnActive})
    drvrInfo.EntityData.Leafs.Append("fsdb_conn_active", types.YLeaf{"FsdbConnActive", drvrInfo.FsdbConnActive})
    drvrInfo.EntityData.Leafs.Append("fgid_conn_active", types.YLeaf{"FgidConnActive", drvrInfo.FgidConnActive})
    drvrInfo.EntityData.Leafs.Append("cm_conn_active", types.YLeaf{"CmConnActive", drvrInfo.CmConnActive})
    drvrInfo.EntityData.Leafs.Append("ccc_conn_active", types.YLeaf{"CccConnActive", drvrInfo.CccConnActive})
    drvrInfo.EntityData.Leafs.Append("issu_mgr_conn_active", types.YLeaf{"IssuMgrConnActive", drvrInfo.IssuMgrConnActive})
    drvrInfo.EntityData.Leafs.Append("peer_sfe_conn_active", types.YLeaf{"PeerSfeConnActive", drvrInfo.PeerSfeConnActive})
    drvrInfo.EntityData.Leafs.Append("cxp_conn_active", types.YLeaf{"CxpConnActive", drvrInfo.CxpConnActive})
    drvrInfo.EntityData.Leafs.Append("pm_reg_active", types.YLeaf{"PmRegActive", drvrInfo.PmRegActive})
    drvrInfo.EntityData.Leafs.Append("platform_local_reg_active", types.YLeaf{"PlatformLocalRegActive", drvrInfo.PlatformLocalRegActive})
    drvrInfo.EntityData.Leafs.Append("fsdb_reg_active", types.YLeaf{"FsdbRegActive", drvrInfo.FsdbRegActive})
    drvrInfo.EntityData.Leafs.Append("fgid_reg_active", types.YLeaf{"FgidRegActive", drvrInfo.FgidRegActive})
    drvrInfo.EntityData.Leafs.Append("cm_reg_active", types.YLeaf{"CmRegActive", drvrInfo.CmRegActive})
    drvrInfo.EntityData.Leafs.Append("issu_mgr_reg_active", types.YLeaf{"IssuMgrRegActive", drvrInfo.IssuMgrRegActive})
    drvrInfo.EntityData.Leafs.Append("peer_sfe_reg_active", types.YLeaf{"PeerSfeRegActive", drvrInfo.PeerSfeRegActive})
    drvrInfo.EntityData.Leafs.Append("cxp_reg_active", types.YLeaf{"CxpRegActive", drvrInfo.CxpRegActive})
    drvrInfo.EntityData.Leafs.Append("num_pm_conn_reqs", types.YLeaf{"NumPmConnReqs", drvrInfo.NumPmConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_platform_local_conn_reqs", types.YLeaf{"NumPlatformLocalConnReqs", drvrInfo.NumPlatformLocalConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fsdb_conn_reqs", types.YLeaf{"NumFsdbConnReqs", drvrInfo.NumFsdbConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fgid_conn_reqs", types.YLeaf{"NumFgidConnReqs", drvrInfo.NumFgidConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_fstats_conn_reqs", types.YLeaf{"NumFstatsConnReqs", drvrInfo.NumFstatsConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_cm_conn_reqs", types.YLeaf{"NumCmConnReqs", drvrInfo.NumCmConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_ccc_conn_reqs", types.YLeaf{"NumCccConnReqs", drvrInfo.NumCccConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_issu_mgr_conn_reqs", types.YLeaf{"NumIssuMgrConnReqs", drvrInfo.NumIssuMgrConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_peer_sfe_conn_reqs", types.YLeaf{"NumPeerSfeConnReqs", drvrInfo.NumPeerSfeConnReqs})
    drvrInfo.EntityData.Leafs.Append("num_cxp_conn_reqs", types.YLeaf{"NumCxpConnReqs", drvrInfo.NumCxpConnReqs})
    drvrInfo.EntityData.Leafs.Append("is_gaspp_registered", types.YLeaf{"IsGasppRegistered", drvrInfo.IsGasppRegistered})
    drvrInfo.EntityData.Leafs.Append("is_cih_registered", types.YLeaf{"IsCihRegistered", drvrInfo.IsCihRegistered})
    drvrInfo.EntityData.Leafs.Append("startup_time", types.YLeaf{"StartupTime", drvrInfo.StartupTime})

    drvrInfo.EntityData.YListKeys = []string {"Idx"}

    return &(drvrInfo.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList
type Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    AsicIdx interface{}

    // The type is string.
    AsicInstance interface{}

    // The type is string.
    CardPresent interface{}

    // The type is string.
    CardPowered interface{}

    // The type is interface{} with range: 0..4294967295.
    HotplugEvent interface{}

    // The type is string.
    AsicType interface{}

    // The type is string.
    AsicCardname interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    FabPlane interface{}

    // The type is string.
    FabGroup interface{}

    // The type is string.
    FgidDownload interface{}

    // The type is string.
    AsicState interface{}

    // The type is string.
    AsicDisconnectSignal interface{}

    // The type is string.
    LastInitCause interface{}

    // The type is interface{} with range: 0..4294967295.
    NumPonResets interface{}

    // The type is interface{} with range: 0..4294967295.
    NumHardResets interface{}
}

func (asicList *Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "drvr_info"
    asicList.EntityData.SegmentPath = "asic_list" + types.AddKeyToken(asicList.AsicIdx, "asic_idx")
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = types.NewOrderedMap()
    asicList.EntityData.Leafs = types.NewOrderedMap()
    asicList.EntityData.Leafs.Append("asic_idx", types.YLeaf{"AsicIdx", asicList.AsicIdx})
    asicList.EntityData.Leafs.Append("asic_instance", types.YLeaf{"AsicInstance", asicList.AsicInstance})
    asicList.EntityData.Leafs.Append("card_present", types.YLeaf{"CardPresent", asicList.CardPresent})
    asicList.EntityData.Leafs.Append("card_powered", types.YLeaf{"CardPowered", asicList.CardPowered})
    asicList.EntityData.Leafs.Append("hotplug_event", types.YLeaf{"HotplugEvent", asicList.HotplugEvent})
    asicList.EntityData.Leafs.Append("asic_type", types.YLeaf{"AsicType", asicList.AsicType})
    asicList.EntityData.Leafs.Append("asic_cardname", types.YLeaf{"AsicCardname", asicList.AsicCardname})
    asicList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", asicList.AdminState})
    asicList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", asicList.OperState})
    asicList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", asicList.FabPlane})
    asicList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", asicList.FabGroup})
    asicList.EntityData.Leafs.Append("fgid_download", types.YLeaf{"FgidDownload", asicList.FgidDownload})
    asicList.EntityData.Leafs.Append("asic_state", types.YLeaf{"AsicState", asicList.AsicState})
    asicList.EntityData.Leafs.Append("asic_disconnect_signal", types.YLeaf{"AsicDisconnectSignal", asicList.AsicDisconnectSignal})
    asicList.EntityData.Leafs.Append("last_init_cause", types.YLeaf{"LastInitCause", asicList.LastInitCause})
    asicList.EntityData.Leafs.Append("num_pon_resets", types.YLeaf{"NumPonResets", asicList.NumPonResets})
    asicList.EntityData.Leafs.Append("num_hard_resets", types.YLeaf{"NumHardResets", asicList.NumHardResets})

    asicList.EntityData.YListKeys = []string {"AsicIdx"}

    return &(asicList.EntityData)
}

// Controller_SfeOper_Sfe_Statistics
type Controller_SfeOper_Sfe_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Statistics_Location.
    Location []*Controller_SfeOper_Sfe_Statistics_Location
}

func (statistics *Controller_SfeOper_Sfe_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "sfe"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range statistics.Location {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Location[i]), types.YChild{"Location", statistics.Location[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location
type Controller_SfeOper_Sfe_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S)..
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Statistics_Location_AsicTypes.
    AsicTypes []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes
}

func (location *Controller_SfeOper_Sfe_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("asic_types", types.YChild{"AsicTypes", nil})
    for i := range location.AsicTypes {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AsicTypes[i]), types.YChild{"AsicTypes", location.AsicTypes[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Asicname interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block.
    Block []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block
}

func (asicTypes *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes) GetEntityData() *types.CommonEntityData {
    asicTypes.EntityData.YFilter = asicTypes.YFilter
    asicTypes.EntityData.YangName = "asic_types"
    asicTypes.EntityData.BundleName = "cisco_ios_xr"
    asicTypes.EntityData.ParentYangName = "location"
    asicTypes.EntityData.SegmentPath = "asic_types" + types.AddKeyToken(asicTypes.Asicname, "asicname")
    asicTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicTypes.EntityData.Children = types.NewOrderedMap()
    asicTypes.EntityData.Children.Append("block", types.YChild{"Block", nil})
    for i := range asicTypes.Block {
        asicTypes.EntityData.Children.Append(types.GetSegmentPath(asicTypes.Block[i]), types.YChild{"Block", asicTypes.Block[i]})
    }
    asicTypes.EntityData.Leafs = types.NewOrderedMap()
    asicTypes.EntityData.Leafs.Append("asicname", types.YLeaf{"Asicname", asicTypes.Asicname})

    asicTypes.EntityData.YListKeys = []string {"Asicname"}

    return &(asicTypes.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Blockname interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance.
    Instance []*Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance
}

func (block *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block) GetEntityData() *types.CommonEntityData {
    block.EntityData.YFilter = block.YFilter
    block.EntityData.YangName = "block"
    block.EntityData.BundleName = "cisco_ios_xr"
    block.EntityData.ParentYangName = "asic_types"
    block.EntityData.SegmentPath = "block" + types.AddKeyToken(block.Blockname, "blockname")
    block.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    block.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    block.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    block.EntityData.Children = types.NewOrderedMap()
    block.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range block.Instance {
        block.EntityData.Children.Append(types.GetSegmentPath(block.Instance[i]), types.YChild{"Instance", block.Instance[i]})
    }
    block.EntityData.Leafs = types.NewOrderedMap()
    block.EntityData.Leafs.Append("blockname", types.YLeaf{"Blockname", block.Blockname})

    block.EntityData.YListKeys = []string {"Blockname"}

    return &(block.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance
type Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    StatsOutput interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_AsicTypes_Block_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "block"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("stats_output", types.YLeaf{"StatsOutput", instance.StatsOutput})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo
type Controller_SfeOper_Sfe_LinkInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location.
    Location []*Controller_SfeOper_Sfe_LinkInfo_Location
}

func (linkInfo *Controller_SfeOper_Sfe_LinkInfo) GetEntityData() *types.CommonEntityData {
    linkInfo.EntityData.YFilter = linkInfo.YFilter
    linkInfo.EntityData.YangName = "link-info"
    linkInfo.EntityData.BundleName = "cisco_ios_xr"
    linkInfo.EntityData.ParentYangName = "sfe"
    linkInfo.EntityData.SegmentPath = "link-info"
    linkInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkInfo.EntityData.Children = types.NewOrderedMap()
    linkInfo.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range linkInfo.Location {
        linkInfo.EntityData.Children.Append(types.GetSegmentPath(linkInfo.Location[i]), types.YChild{"Location", linkInfo.Location[i]})
    }
    linkInfo.EntityData.Leafs = types.NewOrderedMap()

    linkInfo.EntityData.YListKeys = []string {}

    return &(linkInfo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location
type Controller_SfeOper_Sfe_LinkInfo_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Rx.
    Rx []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx.
    Tx []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx
}

func (location *Controller_SfeOper_Sfe_LinkInfo_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "link-info"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("rx", types.YChild{"Rx", nil})
    for i := range location.Rx {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Rx[i]), types.YChild{"Rx", location.Rx[i]})
    }
    location.EntityData.Children.Append("tx", types.YChild{"Tx", nil})
    for i := range location.Tx {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Tx[i]), types.YChild{"Tx", location.Tx[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
}

func (rx *Controller_SfeOper_Sfe_LinkInfo_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx" + types.AddKeyToken(rx.Start, "start") + types.AddKeyToken(rx.End, "end")
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = types.NewOrderedMap()
    rx.EntityData.Children.Append("detail", types.YChild{"Detail", &rx.Detail})
    rx.EntityData.Children.Append("topo", types.YChild{"Topo", &rx.Topo})
    rx.EntityData.Children.Append("flap", types.YChild{"Flap", &rx.Flap})
    rx.EntityData.Children.Append("stats", types.YChild{"Stats", &rx.Stats})
    rx.EntityData.Leafs = types.NewOrderedMap()
    rx.EntityData.Leafs.Append("start", types.YLeaf{"Start", rx.Start})
    rx.EntityData.Leafs.Append("end", types.YLeaf{"End", rx.End})

    rx.EntityData.YListKeys = []string {"Start", "End"}

    return &(rx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("topo", types.YChild{"Topo", &detail.Topo})
    detail.EntityData.Children.Append("flap", types.YChild{"Flap", &detail.Flap})
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "detail"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = types.NewOrderedMap()
    topo.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range topo.Instance {
        topo.EntityData.Children.Append(types.GetSegmentPath(topo.Instance[i]), types.YChild{"Instance", topo.Instance[i]})
    }
    topo.EntityData.Leafs = types.NewOrderedMap()

    topo.EntityData.YListKeys = []string {}

    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "detail"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = types.NewOrderedMap()
    flap.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range flap.Instance {
        flap.EntityData.Children.Append(types.GetSegmentPath(flap.Instance[i]), types.YChild{"Instance", flap.Instance[i]})
    }
    flap.EntityData.Leafs = types.NewOrderedMap()

    flap.EntityData.YListKeys = []string {}

    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "rx"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = types.NewOrderedMap()
    topo.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range topo.Instance {
        topo.EntityData.Children.Append(types.GetSegmentPath(topo.Instance[i]), types.YChild{"Instance", topo.Instance[i]})
    }
    topo.EntityData.Leafs = types.NewOrderedMap()

    topo.EntityData.YListKeys = []string {}

    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "rx"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = types.NewOrderedMap()
    flap.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range flap.Instance {
        flap.EntityData.Children.Append(types.GetSegmentPath(flap.Instance[i]), types.YChild{"Instance", flap.Instance[i]})
    }
    flap.EntityData.Leafs = types.NewOrderedMap()

    flap.EntityData.YListKeys = []string {}

    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "rx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("data", types.YChild{"Data", &stats.Data})
    stats.EntityData.Children.Append("ctrl", types.YChild{"Ctrl", &stats.Ctrl})
    stats.EntityData.Children.Append("all", types.YChild{"All", &stats.All})
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range data.Instance {
        data.EntityData.Children.Append(types.GetSegmentPath(data.Instance[i]), types.YChild{"Instance", data.Instance[i]})
    }
    data.EntityData.Leafs = types.NewOrderedMap()

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = types.NewOrderedMap()
    ctrl.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range ctrl.Instance {
        ctrl.EntityData.Children.Append(types.GetSegmentPath(ctrl.Instance[i]), types.YChild{"Instance", ctrl.Instance[i]})
    }
    ctrl.EntityData.Leafs = types.NewOrderedMap()

    ctrl.EntityData.YListKeys = []string {}

    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range all.Instance {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Instance[i]), types.YChild{"Instance", all.Instance[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
}

func (tx *Controller_SfeOper_Sfe_LinkInfo_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx" + types.AddKeyToken(tx.Start, "start") + types.AddKeyToken(tx.End, "end")
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = types.NewOrderedMap()
    tx.EntityData.Children.Append("detail", types.YChild{"Detail", &tx.Detail})
    tx.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range tx.Instance {
        tx.EntityData.Children.Append(types.GetSegmentPath(tx.Instance[i]), types.YChild{"Instance", tx.Instance[i]})
    }
    tx.EntityData.Children.Append("stats", types.YChild{"Stats", &tx.Stats})
    tx.EntityData.Leafs = types.NewOrderedMap()
    tx.EntityData.Leafs.Append("start", types.YLeaf{"Start", tx.Start})
    tx.EntityData.Leafs.Append("end", types.YLeaf{"End", tx.End})

    tx.EntityData.YListKeys = []string {"Start", "End"}

    return &(tx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range detail.Instance {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Instance[i]), types.YChild{"Instance", detail.Instance[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "detail"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "tx"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "tx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("data", types.YChild{"Data", &stats.Data})
    stats.EntityData.Children.Append("ctrl", types.YChild{"Ctrl", &stats.Ctrl})
    stats.EntityData.Children.Append("all", types.YChild{"All", &stats.All})
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range data.Instance {
        data.EntityData.Children.Append(types.GetSegmentPath(data.Instance[i]), types.YChild{"Instance", data.Instance[i]})
    }
    data.EntityData.Leafs = types.NewOrderedMap()

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = types.NewOrderedMap()
    ctrl.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range ctrl.Instance {
        ctrl.EntityData.Children.Append(types.GetSegmentPath(ctrl.Instance[i]), types.YChild{"Instance", ctrl.Instance[i]})
    }
    ctrl.EntityData.Leafs = types.NewOrderedMap()

    ctrl.EntityData.YListKeys = []string {}

    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance.
    Instance []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = types.NewOrderedMap()
    all.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range all.Instance {
        all.EntityData.Children.Append(types.GetSegmentPath(all.Instance[i]), types.YChild{"Instance", all.Instance[i]})
    }
    all.EntityData.Leafs = types.NewOrderedMap()

    all.EntityData.YListKeys = []string {}

    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("nodeid_str", types.YLeaf{"NodeidStr", instance.NodeidStr})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    PhyLink interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXBECRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXCRCErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXLFECFECUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RXDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History.
    History []*Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Children.Append("history", types.YChild{"History", nil})
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children.Append(types.GetSegmentPath(linkIdxList.History[i]), types.YChild{"History", linkIdxList.History[i]})
    }
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("link_id_str", types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr})
    linkIdxList.EntityData.Leafs.Append("phy_link", types.YLeaf{"PhyLink", linkIdxList.PhyLink})
    linkIdxList.EntityData.Leafs.Append("speed", types.YLeaf{"Speed", linkIdxList.Speed})
    linkIdxList.EntityData.Leafs.Append("stage", types.YLeaf{"Stage", linkIdxList.Stage})
    linkIdxList.EntityData.Leafs.Append("fab_plane", types.YLeaf{"FabPlane", linkIdxList.FabPlane})
    linkIdxList.EntityData.Leafs.Append("fab_group", types.YLeaf{"FabGroup", linkIdxList.FabGroup})
    linkIdxList.EntityData.Leafs.Append("flap_cnt", types.YLeaf{"FlapCnt", linkIdxList.FlapCnt})
    linkIdxList.EntityData.Leafs.Append("num_admin_shuts", types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts})
    linkIdxList.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", linkIdxList.AdminState})
    linkIdxList.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", linkIdxList.OperState})
    linkIdxList.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", linkIdxList.Flags})
    linkIdxList.EntityData.Leafs.Append("far_end_link_fsdb", types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb})
    linkIdxList.EntityData.Leafs.Append("far_end_link_hw", types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw})
    linkIdxList.EntityData.Leafs.Append("coeff1", types.YLeaf{"Coeff1", linkIdxList.Coeff1})
    linkIdxList.EntityData.Leafs.Append("coeff2", types.YLeaf{"Coeff2", linkIdxList.Coeff2})
    linkIdxList.EntityData.Leafs.Append("TX_Control_cells_counter", types.YLeaf{"TXControlCellsCounter", linkIdxList.TXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_cell_counter", types.YLeaf{"TXDataCellCounter", linkIdxList.TXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("TX_Data_byte_counter", types.YLeaf{"TXDataByteCounter", linkIdxList.TXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("TX_BEC_retransmit", types.YLeaf{"TXBECRetransmit", linkIdxList.TXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("TX_Asyn_fifo_rate", types.YLeaf{"TXAsynFifoRate", linkIdxList.TXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_Control_cells_counter", types.YLeaf{"RXControlCellsCounter", linkIdxList.RXControlCellsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_cell_counter", types.YLeaf{"RXDataCellCounter", linkIdxList.RXDataCellCounter})
    linkIdxList.EntityData.Leafs.Append("RX_Data_byte_counter", types.YLeaf{"RXDataByteCounter", linkIdxList.RXDataByteCounter})
    linkIdxList.EntityData.Leafs.Append("RX_BEC_retransmit", types.YLeaf{"RXBECRetransmit", linkIdxList.RXBECRetransmit})
    linkIdxList.EntityData.Leafs.Append("RX_Asyn_fifo_rate", types.YLeaf{"RXAsynFifoRate", linkIdxList.RXAsynFifoRate})
    linkIdxList.EntityData.Leafs.Append("RX_CRC_errors_counter", types.YLeaf{"RXCRCErrorsCounter", linkIdxList.RXCRCErrorsCounter})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_correctable_error", types.YLeaf{"RXLFECFECCorrectableError", linkIdxList.RXLFECFECCorrectableError})
    linkIdxList.EntityData.Leafs.Append("RX_LFEC_FEC_uncorrectable_errors", types.YLeaf{"RXLFECFECUncorrectableErrors", linkIdxList.RXLFECFECUncorrectableErrors})
    linkIdxList.EntityData.Leafs.Append("RX_dropped_retransmitted_control", types.YLeaf{"RXDroppedRetransmittedControl", linkIdxList.RXDroppedRetransmittedControl})
    linkIdxList.EntityData.Leafs.Append("fsm_state", types.YLeaf{"FsmState", linkIdxList.FsmState})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + types.AddKeyToken(history.HistoryIdx, "history_idx")
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = types.NewOrderedMap()
    history.EntityData.Leafs = types.NewOrderedMap()
    history.EntityData.Leafs.Append("history_idx", types.YLeaf{"HistoryIdx", history.HistoryIdx})
    history.EntityData.Leafs.Append("time_stamp", types.YLeaf{"TimeStamp", history.TimeStamp})
    history.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", history.AdminState})
    history.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", history.OperState})
    history.EntityData.Leafs.Append("error_state", types.YLeaf{"ErrorState", history.ErrorState})
    history.EntityData.Leafs.Append("down_reasons", types.YLeaf{"DownReasons", history.DownReasons})

    history.EntityData.YListKeys = []string {"HistoryIdx"}

    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell
type Controller_SfeOper_Sfe_Diagshell struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location.
    Location []*Controller_SfeOper_Sfe_Diagshell_Location
}

func (diagshell *Controller_SfeOper_Sfe_Diagshell) GetEntityData() *types.CommonEntityData {
    diagshell.EntityData.YFilter = diagshell.YFilter
    diagshell.EntityData.YangName = "diagshell"
    diagshell.EntityData.BundleName = "cisco_ios_xr"
    diagshell.EntityData.ParentYangName = "sfe"
    diagshell.EntityData.SegmentPath = "diagshell"
    diagshell.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagshell.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagshell.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagshell.EntityData.Children = types.NewOrderedMap()
    diagshell.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range diagshell.Location {
        diagshell.EntityData.Children.Append(types.GetSegmentPath(diagshell.Location[i]), types.YChild{"Location", diagshell.Location[i]})
    }
    diagshell.EntityData.Leafs = types.NewOrderedMap()

    diagshell.EntityData.YListKeys = []string {}

    return &(diagshell.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location
type Controller_SfeOper_Sfe_Diagshell_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location_Instance.
    Instance []*Controller_SfeOper_Sfe_Diagshell_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Diagshell_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "diagshell"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range location.Instance {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Instance[i]), types.YChild{"Instance", location.Instance[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance
type Controller_SfeOper_Sfe_Diagshell_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd.
    DiagCmd []*Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
}

func (instance *Controller_SfeOper_Sfe_Diagshell_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceNum, "instance_num")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("diag_cmd", types.YChild{"DiagCmd", nil})
    for i := range instance.DiagCmd {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.DiagCmd[i]), types.YChild{"DiagCmd", instance.DiagCmd[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance_num", types.YLeaf{"InstanceNum", instance.InstanceNum})

    instance.EntityData.YListKeys = []string {"InstanceNum"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    CmdStr interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes.
    Bytes []*Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
}

func (diagCmd *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd) GetEntityData() *types.CommonEntityData {
    diagCmd.EntityData.YFilter = diagCmd.YFilter
    diagCmd.EntityData.YangName = "diag_cmd"
    diagCmd.EntityData.BundleName = "cisco_ios_xr"
    diagCmd.EntityData.ParentYangName = "instance"
    diagCmd.EntityData.SegmentPath = "diag_cmd" + types.AddKeyToken(diagCmd.CmdStr, "cmd_str")
    diagCmd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagCmd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagCmd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagCmd.EntityData.Children = types.NewOrderedMap()
    diagCmd.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range diagCmd.Bytes {
        diagCmd.EntityData.Children.Append(types.GetSegmentPath(diagCmd.Bytes[i]), types.YChild{"Bytes", diagCmd.Bytes[i]})
    }
    diagCmd.EntityData.Leafs = types.NewOrderedMap()
    diagCmd.EntityData.Leafs.Append("cmd_str", types.YLeaf{"CmdStr", diagCmd.CmdStr})

    diagCmd.EntityData.YListKeys = []string {"CmdStr"}

    return &(diagCmd.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "diag_cmd"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Register
type Controller_SfeOper_Sfe_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Register_Location.
    Location []*Controller_SfeOper_Sfe_Register_Location
}

func (register *Controller_SfeOper_Sfe_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "sfe"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = types.NewOrderedMap()
    register.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range register.Location {
        register.EntityData.Children.Append(types.GetSegmentPath(register.Location[i]), types.YChild{"Location", register.Location[i]})
    }
    register.EntityData.Leafs = types.NewOrderedMap()

    register.EntityData.YListKeys = []string {}

    return &(register.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location
type Controller_SfeOper_Sfe_Register_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Register_Location_Instance.
    Instance []*Controller_SfeOper_Sfe_Register_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Register_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range location.Instance {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Instance[i]), types.YChild{"Instance", location.Instance[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance
type Controller_SfeOper_Sfe_Register_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Register_Location_Instance_Bytes.
    Bytes []*Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
}

func (instance *Controller_SfeOper_Sfe_Register_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceNum, "instance_num")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range instance.Bytes {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.Bytes[i]), types.YChild{"Bytes", instance.Bytes[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance_num", types.YLeaf{"InstanceNum", instance.InstanceNum})

    instance.EntityData.YListKeys = []string {"InstanceNum"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
type Controller_SfeOper_Sfe_Register_Location_Instance_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Register_Location_Instance_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "instance"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile
type Controller_SfeOper_Sfe_DumpFile struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location.
    Location []*Controller_SfeOper_Sfe_DumpFile_Location
}

func (dumpFile *Controller_SfeOper_Sfe_DumpFile) GetEntityData() *types.CommonEntityData {
    dumpFile.EntityData.YFilter = dumpFile.YFilter
    dumpFile.EntityData.YangName = "dump-file"
    dumpFile.EntityData.BundleName = "cisco_ios_xr"
    dumpFile.EntityData.ParentYangName = "sfe"
    dumpFile.EntityData.SegmentPath = "dump-file"
    dumpFile.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dumpFile.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dumpFile.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dumpFile.EntityData.Children = types.NewOrderedMap()
    dumpFile.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range dumpFile.Location {
        dumpFile.EntityData.Children.Append(types.GetSegmentPath(dumpFile.Location[i]), types.YChild{"Location", dumpFile.Location[i]})
    }
    dumpFile.EntityData.Leafs = types.NewOrderedMap()

    dumpFile.EntityData.YListKeys = []string {}

    return &(dumpFile.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location
type Controller_SfeOper_Sfe_DumpFile_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File.
    File []*Controller_SfeOper_Sfe_DumpFile_Location_File
}

func (location *Controller_SfeOper_Sfe_DumpFile_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "dump-file"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("file", types.YChild{"File", nil})
    for i := range location.File {
        location.EntityData.Children.Append(types.GetSegmentPath(location.File[i]), types.YChild{"File", location.File[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File
type Controller_SfeOper_Sfe_DumpFile_Location_File struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FileName interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes.
    Bytes []*Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
}

func (file *Controller_SfeOper_Sfe_DumpFile_Location_File) GetEntityData() *types.CommonEntityData {
    file.EntityData.YFilter = file.YFilter
    file.EntityData.YangName = "file"
    file.EntityData.BundleName = "cisco_ios_xr"
    file.EntityData.ParentYangName = "location"
    file.EntityData.SegmentPath = "file" + types.AddKeyToken(file.FileName, "file_name")
    file.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    file.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    file.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    file.EntityData.Children = types.NewOrderedMap()
    file.EntityData.Children.Append("bytes", types.YChild{"Bytes", nil})
    for i := range file.Bytes {
        file.EntityData.Children.Append(types.GetSegmentPath(file.Bytes[i]), types.YChild{"Bytes", file.Bytes[i]})
    }
    file.EntityData.Leafs = types.NewOrderedMap()
    file.EntityData.Leafs.Append("file_name", types.YLeaf{"FileName", file.FileName})

    file.EntityData.YListKeys = []string {"FileName"}

    return &(file.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
type Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "file"
    bytes.EntityData.SegmentPath = "bytes" + types.AddKeyToken(bytes.ByteIdx, "byte_idx")
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = types.NewOrderedMap()
    bytes.EntityData.Leafs = types.NewOrderedMap()
    bytes.EntityData.Leafs.Append("byte_idx", types.YLeaf{"ByteIdx", bytes.ByteIdx})
    bytes.EntityData.Leafs.Append("data", types.YLeaf{"Data", bytes.Data})

    bytes.EntityData.YListKeys = []string {"ByteIdx"}

    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Parse
type Controller_SfeOper_Sfe_Parse struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location.
    Location []*Controller_SfeOper_Sfe_Parse_Location
}

func (parse *Controller_SfeOper_Sfe_Parse) GetEntityData() *types.CommonEntityData {
    parse.EntityData.YFilter = parse.YFilter
    parse.EntityData.YangName = "parse"
    parse.EntityData.BundleName = "cisco_ios_xr"
    parse.EntityData.ParentYangName = "sfe"
    parse.EntityData.SegmentPath = "parse"
    parse.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parse.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parse.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parse.EntityData.Children = types.NewOrderedMap()
    parse.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range parse.Location {
        parse.EntityData.Children.Append(types.GetSegmentPath(parse.Location[i]), types.YChild{"Location", parse.Location[i]})
    }
    parse.EntityData.Leafs = types.NewOrderedMap()

    parse.EntityData.YListKeys = []string {}

    return &(parse.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location
type Controller_SfeOper_Sfe_Parse_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))).
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link.
    Link []*Controller_SfeOper_Sfe_Parse_Location_Link
}

func (location *Controller_SfeOper_Sfe_Parse_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "parse"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocStr, "loc_str")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("link", types.YChild{"Link", nil})
    for i := range location.Link {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Link[i]), types.YChild{"Link", location.Link[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", location.LocStr})
    location.EntityData.Leafs.Append("description", types.YLeaf{"Description", location.Description})

    location.EntityData.YListKeys = []string {"LocStr"}

    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link
type Controller_SfeOper_Sfe_Parse_Location_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link_Instance.
    Instance []*Controller_SfeOper_Sfe_Parse_Location_Link_Instance
}

func (link *Controller_SfeOper_Sfe_Parse_Location_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "location"
    link.EntityData.SegmentPath = "link" + types.AddKeyToken(link.Start, "start") + types.AddKeyToken(link.End, "end")
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = types.NewOrderedMap()
    link.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range link.Instance {
        link.EntityData.Children.Append(types.GetSegmentPath(link.Instance[i]), types.YChild{"Instance", link.Instance[i]})
    }
    link.EntityData.Leafs = types.NewOrderedMap()
    link.EntityData.Leafs.Append("start", types.YLeaf{"Start", link.Start})
    link.EntityData.Leafs.Append("end", types.YLeaf{"End", link.End})

    link.EntityData.YListKeys = []string {"Start", "End"}

    return &(link.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-5]|all.
    InstanceId interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList.
    LinkIdxList []*Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_Parse_Location_Link_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "link"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("link_idx_list", types.YChild{"LinkIdxList", nil})
    for i := range instance.LinkIdxList {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.LinkIdxList[i]), types.YChild{"LinkIdxList", instance.LinkIdxList[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("is_show", types.YLeaf{"IsShow", instance.IsShow})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    SlotIdStr interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstId interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNumId interface{}

    // The type is interface{} with range: 0..4294967295.
    LogSlot interface{}

    // The type is interface{} with range: 0..4294967295.
    PhySlot interface{}

    // The type is interface{} with range: 0..4294967295.
    FapId interface{}

    // The type is interface{} with range: 0..4294967295.
    Unit interface{}

    // The type is interface{} with range: 0..4294967295.
    SfiId interface{}

    // The type is string.
    IpAddr interface{}

    // The type is string.
    DriverRun interface{}
}

func (linkIdxList *Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + types.AddKeyToken(linkIdxList.LinkIdx, "link_idx")
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs = types.NewOrderedMap()
    linkIdxList.EntityData.Leafs.Append("link_idx", types.YLeaf{"LinkIdx", linkIdxList.LinkIdx})
    linkIdxList.EntityData.Leafs.Append("rack_id_str", types.YLeaf{"RackIdStr", linkIdxList.RackIdStr})
    linkIdxList.EntityData.Leafs.Append("slot_id_str", types.YLeaf{"SlotIdStr", linkIdxList.SlotIdStr})
    linkIdxList.EntityData.Leafs.Append("asic_inst_id", types.YLeaf{"AsicInstId", linkIdxList.AsicInstId})
    linkIdxList.EntityData.Leafs.Append("link_num_id", types.YLeaf{"LinkNumId", linkIdxList.LinkNumId})
    linkIdxList.EntityData.Leafs.Append("log_slot", types.YLeaf{"LogSlot", linkIdxList.LogSlot})
    linkIdxList.EntityData.Leafs.Append("phy_slot", types.YLeaf{"PhySlot", linkIdxList.PhySlot})
    linkIdxList.EntityData.Leafs.Append("fap_id", types.YLeaf{"FapId", linkIdxList.FapId})
    linkIdxList.EntityData.Leafs.Append("unit", types.YLeaf{"Unit", linkIdxList.Unit})
    linkIdxList.EntityData.Leafs.Append("sfi_id", types.YLeaf{"SfiId", linkIdxList.SfiId})
    linkIdxList.EntityData.Leafs.Append("ip_addr", types.YLeaf{"IpAddr", linkIdxList.IpAddr})
    linkIdxList.EntityData.Leafs.Append("driver_run", types.YLeaf{"DriverRun", linkIdxList.DriverRun})

    linkIdxList.EntityData.YListKeys = []string {"LinkIdx"}

    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_SfeTrace
type Controller_SfeOper_SfeTrace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SfeDriver Controller_SfeOper_SfeTrace_SfeDriver
}

func (sfeTrace *Controller_SfeOper_SfeTrace) GetEntityData() *types.CommonEntityData {
    sfeTrace.EntityData.YFilter = sfeTrace.YFilter
    sfeTrace.EntityData.YangName = "sfe_trace"
    sfeTrace.EntityData.BundleName = "cisco_ios_xr"
    sfeTrace.EntityData.ParentYangName = "sfe_oper"
    sfeTrace.EntityData.SegmentPath = "sfe_trace"
    sfeTrace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeTrace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeTrace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeTrace.EntityData.Children = types.NewOrderedMap()
    sfeTrace.EntityData.Children.Append("sfe_driver", types.YChild{"SfeDriver", &sfeTrace.SfeDriver})
    sfeTrace.EntityData.Leafs = types.NewOrderedMap()

    sfeTrace.EntityData.YListKeys = []string {}

    return &(sfeTrace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver
type Controller_SfeOper_SfeTrace_SfeDriver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace.
    Trace []*Controller_SfeOper_SfeTrace_SfeDriver_Trace
}

func (sfeDriver *Controller_SfeOper_SfeTrace_SfeDriver) GetEntityData() *types.CommonEntityData {
    sfeDriver.EntityData.YFilter = sfeDriver.YFilter
    sfeDriver.EntityData.YangName = "sfe_driver"
    sfeDriver.EntityData.BundleName = "cisco_ios_xr"
    sfeDriver.EntityData.ParentYangName = "sfe_trace"
    sfeDriver.EntityData.SegmentPath = "sfe_driver"
    sfeDriver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeDriver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeDriver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeDriver.EntityData.Children = types.NewOrderedMap()
    sfeDriver.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range sfeDriver.Trace {
        sfeDriver.EntityData.Children.Append(types.GetSegmentPath(sfeDriver.Trace[i]), types.YChild{"Trace", sfeDriver.Trace[i]})
    }
    sfeDriver.EntityData.Leafs = types.NewOrderedMap()

    sfeDriver.EntityData.YListKeys = []string {}

    return &(sfeDriver.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace
// show traceable processes
type Controller_SfeOper_SfeTrace_SfeDriver_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location.
    Location []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
}

func (trace *Controller_SfeOper_SfeTrace_SfeDriver_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "sfe_driver"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions.
    AllOptions []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
}

func (location *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Asic
type Controller_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Controller_Asic_Instance.
    Instance []*Controller_Asic_Instance
}

func (asic *Controller_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "controller"
    asic.EntityData.SegmentPath = "asic" + types.AddKeyToken(asic.AsicName, "asic-name")
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = types.NewOrderedMap()
    asic.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range asic.Instance {
        asic.EntityData.Children.Append(types.GetSegmentPath(asic.Instance[i]), types.YChild{"Instance", asic.Instance[i]})
    }
    asic.EntityData.Leafs = types.NewOrderedMap()
    asic.EntityData.Leafs.Append("asic-name", types.YLeaf{"AsicName", asic.AsicName})

    asic.EntityData.YListKeys = []string {"AsicName"}

    return &(asic.EntityData)
}

// Controller_Asic_Instance
type Controller_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // The type is string.
    InstanceName interface{}

    // The type is slice of Controller_Asic_Instance_Address.
    Address []*Controller_Asic_Instance_Address

    // The type is slice of Controller_Asic_Instance_BlockName.
    BlockName []*Controller_Asic_Instance_BlockName

    // The type is slice of Controller_Asic_Instance_BlockNumber.
    BlockNumber []*Controller_Asic_Instance_BlockNumber
}

func (instance *Controller_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceId, "instance-id")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("address", types.YChild{"Address", nil})
    for i := range instance.Address {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.Address[i]), types.YChild{"Address", instance.Address[i]})
    }
    instance.EntityData.Children.Append("block-name", types.YChild{"BlockName", nil})
    for i := range instance.BlockName {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.BlockName[i]), types.YChild{"BlockName", instance.BlockName[i]})
    }
    instance.EntityData.Children.Append("block-number", types.YChild{"BlockNumber", nil})
    for i := range instance.BlockNumber {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.BlockNumber[i]), types.YChild{"BlockNumber", instance.BlockNumber[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-id", types.YLeaf{"InstanceId", instance.InstanceId})
    instance.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", instance.InstanceName})

    instance.EntityData.YListKeys = []string {"InstanceId"}

    return &(instance.EntityData)
}

// Controller_Asic_Instance_Address
type Controller_Asic_Instance_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Addr interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    Entries interface{}

    // The type is interface{} with range: 0..4294967295. This attribute is
    // mandatory.
    Width interface{}

    // The type is slice of Controller_Asic_Instance_Address_Location.
    Location []*Controller_Asic_Instance_Address_Location
}

func (address *Controller_Asic_Instance_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "instance"
    address.EntityData.SegmentPath = "address" + types.AddKeyToken(address.Addr, "addr") + types.AddKeyToken(address.Size, "size") + types.AddKeyToken(address.Entries, "entries")
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range address.Location {
        address.EntityData.Children.Append(types.GetSegmentPath(address.Location[i]), types.YChild{"Location", address.Location[i]})
    }
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", address.Addr})
    address.EntityData.Leafs.Append("size", types.YLeaf{"Size", address.Size})
    address.EntityData.Leafs.Append("entries", types.YLeaf{"Entries", address.Entries})
    address.EntityData.Leafs.Append("width", types.YLeaf{"Width", address.Width})

    address.EntityData.YListKeys = []string {"Addr", "Size", "Entries"}

    return &(address.EntityData)
}

// Controller_Asic_Instance_Address_Location
type Controller_Asic_Instance_Address_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of Controller_Asic_Instance_Address_Location_DirectData.
    DirectData []*Controller_Asic_Instance_Address_Location_DirectData
}

func (location *Controller_Asic_Instance_Address_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "address"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("direct_data", types.YChild{"DirectData", nil})
    for i := range location.DirectData {
        location.EntityData.Children.Append(types.GetSegmentPath(location.DirectData[i]), types.YChild{"DirectData", location.DirectData[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Asic_Instance_Address_Location_DirectData
type Controller_Asic_Instance_Address_Location_DirectData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (directData *Controller_Asic_Instance_Address_Location_DirectData) GetEntityData() *types.CommonEntityData {
    directData.EntityData.YFilter = directData.YFilter
    directData.EntityData.YangName = "direct_data"
    directData.EntityData.BundleName = "cisco_ios_xr"
    directData.EntityData.ParentYangName = "location"
    directData.EntityData.SegmentPath = "direct_data"
    directData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directData.EntityData.Children = types.NewOrderedMap()
    directData.EntityData.Leafs = types.NewOrderedMap()
    directData.EntityData.Leafs.Append("address", types.YLeaf{"Address", directData.Address})
    directData.EntityData.Leafs.Append("name", types.YLeaf{"Name", directData.Name})
    directData.EntityData.Leafs.Append("value", types.YLeaf{"Value", directData.Value})
    directData.EntityData.Leafs.Append("size", types.YLeaf{"Size", directData.Size})

    directData.EntityData.YListKeys = []string {}

    return &(directData.EntityData)
}

// Controller_Asic_Instance_BlockName
type Controller_Asic_Instance_BlockName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockNm interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is slice of Controller_Asic_Instance_BlockName_RegisterName.
    RegisterName []*Controller_Asic_Instance_BlockName_RegisterName
}

func (blockName *Controller_Asic_Instance_BlockName) GetEntityData() *types.CommonEntityData {
    blockName.EntityData.YFilter = blockName.YFilter
    blockName.EntityData.YangName = "block-name"
    blockName.EntityData.BundleName = "cisco_ios_xr"
    blockName.EntityData.ParentYangName = "instance"
    blockName.EntityData.SegmentPath = "block-name" + types.AddKeyToken(blockName.BlockNm, "block-nm") + types.AddKeyToken(blockName.BlockNum, "block-num")
    blockName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockName.EntityData.Children = types.NewOrderedMap()
    blockName.EntityData.Children.Append("register-name", types.YChild{"RegisterName", nil})
    for i := range blockName.RegisterName {
        blockName.EntityData.Children.Append(types.GetSegmentPath(blockName.RegisterName[i]), types.YChild{"RegisterName", blockName.RegisterName[i]})
    }
    blockName.EntityData.Leafs = types.NewOrderedMap()
    blockName.EntityData.Leafs.Append("block-nm", types.YLeaf{"BlockNm", blockName.BlockNm})
    blockName.EntityData.Leafs.Append("block-num", types.YLeaf{"BlockNum", blockName.BlockNum})

    blockName.EntityData.YListKeys = []string {"BlockNm", "BlockNum"}

    return &(blockName.EntityData)
}

// Controller_Asic_Instance_BlockName_RegisterName
type Controller_Asic_Instance_BlockName_RegisterName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is slice of Controller_Asic_Instance_BlockName_RegisterName_Data.
    Data []*Controller_Asic_Instance_BlockName_RegisterName_Data
}

func (registerName *Controller_Asic_Instance_BlockName_RegisterName) GetEntityData() *types.CommonEntityData {
    registerName.EntityData.YFilter = registerName.YFilter
    registerName.EntityData.YangName = "register-name"
    registerName.EntityData.BundleName = "cisco_ios_xr"
    registerName.EntityData.ParentYangName = "block-name"
    registerName.EntityData.SegmentPath = "register-name" + types.AddKeyToken(registerName.Name, "name")
    registerName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerName.EntityData.Children = types.NewOrderedMap()
    registerName.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range registerName.Data {
        registerName.EntityData.Children.Append(types.GetSegmentPath(registerName.Data[i]), types.YChild{"Data", registerName.Data[i]})
    }
    registerName.EntityData.Leafs = types.NewOrderedMap()
    registerName.EntityData.Leafs.Append("name", types.YLeaf{"Name", registerName.Name})
    registerName.EntityData.Leafs.Append("register", types.YLeaf{"Register", registerName.Register})

    registerName.EntityData.YListKeys = []string {"Name"}

    return &(registerName.EntityData)
}

// Controller_Asic_Instance_BlockName_RegisterName_Data
type Controller_Asic_Instance_BlockName_RegisterName_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockName_RegisterName_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "register-name"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_Asic_Instance_BlockNumber
type Controller_Asic_Instance_BlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is string.
    BlockNm interface{}

    // The type is slice of Controller_Asic_Instance_BlockNumber_RegisterNumber.
    RegisterNumber []*Controller_Asic_Instance_BlockNumber_RegisterNumber
}

func (blockNumber *Controller_Asic_Instance_BlockNumber) GetEntityData() *types.CommonEntityData {
    blockNumber.EntityData.YFilter = blockNumber.YFilter
    blockNumber.EntityData.YangName = "block-number"
    blockNumber.EntityData.BundleName = "cisco_ios_xr"
    blockNumber.EntityData.ParentYangName = "instance"
    blockNumber.EntityData.SegmentPath = "block-number" + types.AddKeyToken(blockNumber.BlockNum, "block-num")
    blockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNumber.EntityData.Children = types.NewOrderedMap()
    blockNumber.EntityData.Children.Append("register-number", types.YChild{"RegisterNumber", nil})
    for i := range blockNumber.RegisterNumber {
        blockNumber.EntityData.Children.Append(types.GetSegmentPath(blockNumber.RegisterNumber[i]), types.YChild{"RegisterNumber", blockNumber.RegisterNumber[i]})
    }
    blockNumber.EntityData.Leafs = types.NewOrderedMap()
    blockNumber.EntityData.Leafs.Append("block-num", types.YLeaf{"BlockNum", blockNumber.BlockNum})
    blockNumber.EntityData.Leafs.Append("block-nm", types.YLeaf{"BlockNm", blockNumber.BlockNm})

    blockNumber.EntityData.YListKeys = []string {"BlockNum"}

    return &(blockNumber.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber
type Controller_Asic_Instance_BlockNumber_RegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is string.
    RegisterName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets.
    RegisterOffsets []*Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_Location.
    Location []*Controller_Asic_Instance_BlockNumber_RegisterNumber_Location
}

func (registerNumber *Controller_Asic_Instance_BlockNumber_RegisterNumber) GetEntityData() *types.CommonEntityData {
    registerNumber.EntityData.YFilter = registerNumber.YFilter
    registerNumber.EntityData.YangName = "register-number"
    registerNumber.EntityData.BundleName = "cisco_ios_xr"
    registerNumber.EntityData.ParentYangName = "block-number"
    registerNumber.EntityData.SegmentPath = "register-number" + types.AddKeyToken(registerNumber.Register, "register")
    registerNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerNumber.EntityData.Children = types.NewOrderedMap()
    registerNumber.EntityData.Children.Append("register-offsets", types.YChild{"RegisterOffsets", nil})
    for i := range registerNumber.RegisterOffsets {
        registerNumber.EntityData.Children.Append(types.GetSegmentPath(registerNumber.RegisterOffsets[i]), types.YChild{"RegisterOffsets", registerNumber.RegisterOffsets[i]})
    }
    registerNumber.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range registerNumber.Location {
        registerNumber.EntityData.Children.Append(types.GetSegmentPath(registerNumber.Location[i]), types.YChild{"Location", registerNumber.Location[i]})
    }
    registerNumber.EntityData.Leafs = types.NewOrderedMap()
    registerNumber.EntityData.Leafs.Append("register", types.YLeaf{"Register", registerNumber.Register})
    registerNumber.EntityData.Leafs.Append("register-name", types.YLeaf{"RegisterName", registerNumber.RegisterName})

    registerNumber.EntityData.YListKeys = []string {"Register"}

    return &(registerNumber.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    RegStart interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumEntries interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location.
    Location []*Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
}

func (registerOffsets *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets) GetEntityData() *types.CommonEntityData {
    registerOffsets.EntityData.YFilter = registerOffsets.YFilter
    registerOffsets.EntityData.YangName = "register-offsets"
    registerOffsets.EntityData.BundleName = "cisco_ios_xr"
    registerOffsets.EntityData.ParentYangName = "register-number"
    registerOffsets.EntityData.SegmentPath = "register-offsets" + types.AddKeyToken(registerOffsets.RegStart, "reg-start") + types.AddKeyToken(registerOffsets.NumEntries, "num-entries")
    registerOffsets.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerOffsets.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerOffsets.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerOffsets.EntityData.Children = types.NewOrderedMap()
    registerOffsets.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range registerOffsets.Location {
        registerOffsets.EntityData.Children.Append(types.GetSegmentPath(registerOffsets.Location[i]), types.YChild{"Location", registerOffsets.Location[i]})
    }
    registerOffsets.EntityData.Leafs = types.NewOrderedMap()
    registerOffsets.EntityData.Leafs.Append("reg-start", types.YLeaf{"RegStart", registerOffsets.RegStart})
    registerOffsets.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", registerOffsets.NumEntries})

    registerOffsets.EntityData.YListKeys = []string {"RegStart", "NumEntries"}

    return &(registerOffsets.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data.
    Data []*Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
}

func (location *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-offsets"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range location.Data {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Data[i]), types.YChild{"Data", location.Data[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_Location
type Controller_Asic_Instance_BlockNumber_RegisterNumber_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data.
    Data []*Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
}

func (location *Controller_Asic_Instance_BlockNumber_RegisterNumber_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-number"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("data", types.YChild{"Data", nil})
    for i := range location.Data {
        location.EntityData.Children.Append(types.GetSegmentPath(location.Data[i]), types.YChild{"Data", location.Data[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
type Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = types.NewOrderedMap()
    data.EntityData.Leafs = types.NewOrderedMap()
    data.EntityData.Leafs.Append("address", types.YLeaf{"Address", data.Address})
    data.EntityData.Leafs.Append("name", types.YLeaf{"Name", data.Name})
    data.EntityData.Leafs.Append("value", types.YLeaf{"Value", data.Value})
    data.EntityData.Leafs.Append("size", types.YLeaf{"Size", data.Size})

    data.EntityData.YListKeys = []string {}

    return &(data.EntityData)
}

// Controller_Oper
type Controller_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SliceControl Controller_Oper_SliceControl
}

func (oper *Controller_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "controller"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = types.NewOrderedMap()
    oper.EntityData.Children.Append("slice_control", types.YChild{"SliceControl", &oper.SliceControl})
    oper.EntityData.Leafs = types.NewOrderedMap()

    oper.EntityData.YListKeys = []string {}

    return &(oper.EntityData)
}

// Controller_Oper_SliceControl
type Controller_Oper_SliceControl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Oper_SliceControl_LocationList.
    LocationList []*Controller_Oper_SliceControl_LocationList
}

func (sliceControl *Controller_Oper_SliceControl) GetEntityData() *types.CommonEntityData {
    sliceControl.EntityData.YFilter = sliceControl.YFilter
    sliceControl.EntityData.YangName = "slice_control"
    sliceControl.EntityData.BundleName = "cisco_ios_xr"
    sliceControl.EntityData.ParentYangName = "oper"
    sliceControl.EntityData.SegmentPath = "slice_control"
    sliceControl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceControl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceControl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceControl.EntityData.Children = types.NewOrderedMap()
    sliceControl.EntityData.Children.Append("location_list", types.YChild{"LocationList", nil})
    for i := range sliceControl.LocationList {
        sliceControl.EntityData.Children.Append(types.GetSegmentPath(sliceControl.LocationList[i]), types.YChild{"LocationList", sliceControl.LocationList[i]})
    }
    sliceControl.EntityData.Leafs = types.NewOrderedMap()

    sliceControl.EntityData.YListKeys = []string {}

    return &(sliceControl.EntityData)
}

// Controller_Oper_SliceControl_LocationList
type Controller_Oper_SliceControl_LocationList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // ((0?[0-9]|1[0-5])/(0?[0-7])).
    LocStr interface{}

    // The type is string.
    Description interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_ManagerContextInfo.
    ManagerContextInfo []*Controller_Oper_SliceControl_LocationList_ManagerContextInfo

    // The type is slice of Controller_Oper_SliceControl_LocationList_FPGA.
    FPGA []*Controller_Oper_SliceControl_LocationList_FPGA
}

func (locationList *Controller_Oper_SliceControl_LocationList) GetEntityData() *types.CommonEntityData {
    locationList.EntityData.YFilter = locationList.YFilter
    locationList.EntityData.YangName = "location_list"
    locationList.EntityData.BundleName = "cisco_ios_xr"
    locationList.EntityData.ParentYangName = "slice_control"
    locationList.EntityData.SegmentPath = "location_list" + types.AddKeyToken(locationList.LocStr, "loc_str")
    locationList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locationList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locationList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locationList.EntityData.Children = types.NewOrderedMap()
    locationList.EntityData.Children.Append("manager_context_info", types.YChild{"ManagerContextInfo", nil})
    for i := range locationList.ManagerContextInfo {
        locationList.EntityData.Children.Append(types.GetSegmentPath(locationList.ManagerContextInfo[i]), types.YChild{"ManagerContextInfo", locationList.ManagerContextInfo[i]})
    }
    locationList.EntityData.Children.Append("FPGA", types.YChild{"FPGA", nil})
    for i := range locationList.FPGA {
        locationList.EntityData.Children.Append(types.GetSegmentPath(locationList.FPGA[i]), types.YChild{"FPGA", locationList.FPGA[i]})
    }
    locationList.EntityData.Leafs = types.NewOrderedMap()
    locationList.EntityData.Leafs.Append("loc_str", types.YLeaf{"LocStr", locationList.LocStr})
    locationList.EntityData.Leafs.Append("description", types.YLeaf{"Description", locationList.Description})

    locationList.EntityData.YListKeys = []string {"LocStr"}

    return &(locationList.EntityData)
}

// Controller_Oper_SliceControl_LocationList_ManagerContextInfo
type Controller_Oper_SliceControl_LocationList_ManagerContextInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Id interface{}

    // The type is interface{} with range: 0..255.
    NumControllers interface{}

    // The type is string.
    Levm interface{}

    // The type is string.
    CccHdl interface{}

    // The type is string.
    Trace interface{}

    // The type is string.
    XmHdl interface{}

    // The type is string.
    FmHdl interface{}

    // The type is bool. The default value is false.
    Sim interface{}

    // The type is bool. The default value is false.
    Debug interface{}

    // The type is interface{} with range: 0..4294967295.
    CardType interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}
}

func (managerContextInfo *Controller_Oper_SliceControl_LocationList_ManagerContextInfo) GetEntityData() *types.CommonEntityData {
    managerContextInfo.EntityData.YFilter = managerContextInfo.YFilter
    managerContextInfo.EntityData.YangName = "manager_context_info"
    managerContextInfo.EntityData.BundleName = "cisco_ios_xr"
    managerContextInfo.EntityData.ParentYangName = "location_list"
    managerContextInfo.EntityData.SegmentPath = "manager_context_info" + types.AddKeyToken(managerContextInfo.Id, "id")
    managerContextInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    managerContextInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    managerContextInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    managerContextInfo.EntityData.Children = types.NewOrderedMap()
    managerContextInfo.EntityData.Leafs = types.NewOrderedMap()
    managerContextInfo.EntityData.Leafs.Append("id", types.YLeaf{"Id", managerContextInfo.Id})
    managerContextInfo.EntityData.Leafs.Append("num_controllers", types.YLeaf{"NumControllers", managerContextInfo.NumControllers})
    managerContextInfo.EntityData.Leafs.Append("levm", types.YLeaf{"Levm", managerContextInfo.Levm})
    managerContextInfo.EntityData.Leafs.Append("ccc_hdl", types.YLeaf{"CccHdl", managerContextInfo.CccHdl})
    managerContextInfo.EntityData.Leafs.Append("trace", types.YLeaf{"Trace", managerContextInfo.Trace})
    managerContextInfo.EntityData.Leafs.Append("xm_hdl", types.YLeaf{"XmHdl", managerContextInfo.XmHdl})
    managerContextInfo.EntityData.Leafs.Append("fm_hdl", types.YLeaf{"FmHdl", managerContextInfo.FmHdl})
    managerContextInfo.EntityData.Leafs.Append("sim", types.YLeaf{"Sim", managerContextInfo.Sim})
    managerContextInfo.EntityData.Leafs.Append("debug", types.YLeaf{"Debug", managerContextInfo.Debug})
    managerContextInfo.EntityData.Leafs.Append("card_type", types.YLeaf{"CardType", managerContextInfo.CardType})
    managerContextInfo.EntityData.Leafs.Append("slot_num", types.YLeaf{"SlotNum", managerContextInfo.SlotNum})

    managerContextInfo.EntityData.YListKeys = []string {"Id"}

    return &(managerContextInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA
type Controller_Oper_SliceControl_LocationList_FPGA struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-1]|all.
    SliceControllerId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo.
    SliceContextInfo []*Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices.
    ClockingDevices []*Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices

    // The type is slice of Controller_Oper_SliceControl_LocationList_FPGA_Slice.
    Slice []*Controller_Oper_SliceControl_LocationList_FPGA_Slice
}

func (fPGA *Controller_Oper_SliceControl_LocationList_FPGA) GetEntityData() *types.CommonEntityData {
    fPGA.EntityData.YFilter = fPGA.YFilter
    fPGA.EntityData.YangName = "FPGA"
    fPGA.EntityData.BundleName = "cisco_ios_xr"
    fPGA.EntityData.ParentYangName = "location_list"
    fPGA.EntityData.SegmentPath = "FPGA" + types.AddKeyToken(fPGA.SliceControllerId, "slice_controller_id")
    fPGA.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fPGA.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fPGA.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fPGA.EntityData.Children = types.NewOrderedMap()
    fPGA.EntityData.Children.Append("slice_context_info", types.YChild{"SliceContextInfo", nil})
    for i := range fPGA.SliceContextInfo {
        fPGA.EntityData.Children.Append(types.GetSegmentPath(fPGA.SliceContextInfo[i]), types.YChild{"SliceContextInfo", fPGA.SliceContextInfo[i]})
    }
    fPGA.EntityData.Children.Append("clocking_devices", types.YChild{"ClockingDevices", nil})
    for i := range fPGA.ClockingDevices {
        fPGA.EntityData.Children.Append(types.GetSegmentPath(fPGA.ClockingDevices[i]), types.YChild{"ClockingDevices", fPGA.ClockingDevices[i]})
    }
    fPGA.EntityData.Children.Append("slice", types.YChild{"Slice", nil})
    for i := range fPGA.Slice {
        fPGA.EntityData.Children.Append(types.GetSegmentPath(fPGA.Slice[i]), types.YChild{"Slice", fPGA.Slice[i]})
    }
    fPGA.EntityData.Leafs = types.NewOrderedMap()
    fPGA.EntityData.Leafs.Append("slice_controller_id", types.YLeaf{"SliceControllerId", fPGA.SliceControllerId})

    fPGA.EntityData.YListKeys = []string {"SliceControllerId"}

    return &(fPGA.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo
type Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-1]|all.
    Id interface{}

    // The type is string with pattern: [0-1]|all.
    SliceControllerId interface{}

    // The type is interface{} with range: 0..255.
    Slices interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    OperState interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PciStatus interface{}

    // The type is string.
    BaoDesc interface{}

    // The type is string.
    Handle interface{}

    // The type is string.
    Irq interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    Msi interface{}

    // The type is string.
    Regs interface{}

    // The type is interface{} with range: 0..255.
    NumPll interface{}

    // The type is string.
    CHd interface{}

    // The type is string.
    DHd interface{}

    // The type is string.
    IHd interface{}

    // The type is string.
    FmHdl interface{}

    // The type is string.
    Trace interface{}

    // The type is string.
    Levm interface{}

    // The type is string.
    HwVer interface{}

    // The type is string.
    PcaVer interface{}

    // The type is string.
    TcamVendor interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (sliceContextInfo *Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo) GetEntityData() *types.CommonEntityData {
    sliceContextInfo.EntityData.YFilter = sliceContextInfo.YFilter
    sliceContextInfo.EntityData.YangName = "slice_context_info"
    sliceContextInfo.EntityData.BundleName = "cisco_ios_xr"
    sliceContextInfo.EntityData.ParentYangName = "FPGA"
    sliceContextInfo.EntityData.SegmentPath = "slice_context_info" + types.AddKeyToken(sliceContextInfo.Id, "id")
    sliceContextInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceContextInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceContextInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceContextInfo.EntityData.Children = types.NewOrderedMap()
    sliceContextInfo.EntityData.Leafs = types.NewOrderedMap()
    sliceContextInfo.EntityData.Leafs.Append("id", types.YLeaf{"Id", sliceContextInfo.Id})
    sliceContextInfo.EntityData.Leafs.Append("slice_controller_id", types.YLeaf{"SliceControllerId", sliceContextInfo.SliceControllerId})
    sliceContextInfo.EntityData.Leafs.Append("slices", types.YLeaf{"Slices", sliceContextInfo.Slices})
    sliceContextInfo.EntityData.Leafs.Append("oper_state", types.YLeaf{"OperState", sliceContextInfo.OperState})
    sliceContextInfo.EntityData.Leafs.Append("pci_status", types.YLeaf{"PciStatus", sliceContextInfo.PciStatus})
    sliceContextInfo.EntityData.Leafs.Append("bao_desc", types.YLeaf{"BaoDesc", sliceContextInfo.BaoDesc})
    sliceContextInfo.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", sliceContextInfo.Handle})
    sliceContextInfo.EntityData.Leafs.Append("irq", types.YLeaf{"Irq", sliceContextInfo.Irq})
    sliceContextInfo.EntityData.Leafs.Append("msi", types.YLeaf{"Msi", sliceContextInfo.Msi})
    sliceContextInfo.EntityData.Leafs.Append("regs", types.YLeaf{"Regs", sliceContextInfo.Regs})
    sliceContextInfo.EntityData.Leafs.Append("num_pll", types.YLeaf{"NumPll", sliceContextInfo.NumPll})
    sliceContextInfo.EntityData.Leafs.Append("c_hd", types.YLeaf{"CHd", sliceContextInfo.CHd})
    sliceContextInfo.EntityData.Leafs.Append("d_hd", types.YLeaf{"DHd", sliceContextInfo.DHd})
    sliceContextInfo.EntityData.Leafs.Append("i_hd", types.YLeaf{"IHd", sliceContextInfo.IHd})
    sliceContextInfo.EntityData.Leafs.Append("fm_hdl", types.YLeaf{"FmHdl", sliceContextInfo.FmHdl})
    sliceContextInfo.EntityData.Leafs.Append("trace", types.YLeaf{"Trace", sliceContextInfo.Trace})
    sliceContextInfo.EntityData.Leafs.Append("levm", types.YLeaf{"Levm", sliceContextInfo.Levm})
    sliceContextInfo.EntityData.Leafs.Append("hw_ver", types.YLeaf{"HwVer", sliceContextInfo.HwVer})
    sliceContextInfo.EntityData.Leafs.Append("pca_ver", types.YLeaf{"PcaVer", sliceContextInfo.PcaVer})
    sliceContextInfo.EntityData.Leafs.Append("tcam_vendor", types.YLeaf{"TcamVendor", sliceContextInfo.TcamVendor})
    sliceContextInfo.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", sliceContextInfo.IsDataAvailable})

    sliceContextInfo.EntityData.YListKeys = []string {"Id"}

    return &(sliceContextInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices
type Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-2].
    PllDeviceId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll.
    Pll []*Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll
}

func (clockingDevices *Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices) GetEntityData() *types.CommonEntityData {
    clockingDevices.EntityData.YFilter = clockingDevices.YFilter
    clockingDevices.EntityData.YangName = "clocking_devices"
    clockingDevices.EntityData.BundleName = "cisco_ios_xr"
    clockingDevices.EntityData.ParentYangName = "FPGA"
    clockingDevices.EntityData.SegmentPath = "clocking_devices" + types.AddKeyToken(clockingDevices.PllDeviceId, "pll_device_id")
    clockingDevices.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockingDevices.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockingDevices.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockingDevices.EntityData.Children = types.NewOrderedMap()
    clockingDevices.EntityData.Children.Append("pll", types.YChild{"Pll", nil})
    for i := range clockingDevices.Pll {
        clockingDevices.EntityData.Children.Append(types.GetSegmentPath(clockingDevices.Pll[i]), types.YChild{"Pll", clockingDevices.Pll[i]})
    }
    clockingDevices.EntityData.Leafs = types.NewOrderedMap()
    clockingDevices.EntityData.Leafs.Append("pll_device_id", types.YLeaf{"PllDeviceId", clockingDevices.PllDeviceId})
    clockingDevices.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", clockingDevices.IsDataAvailable})

    clockingDevices.EntityData.YListKeys = []string {"PllDeviceId"}

    return &(clockingDevices.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll
type Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-3].
    PllId interface{}

    // The type is string.
    ClockingBus interface{}

    // The type is string.
    ClockingMode interface{}

    // The type is string.
    ClockingDevAddr interface{}

    // The type is string.
    ClockingI2cRegs interface{}
}

func (pll *Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll) GetEntityData() *types.CommonEntityData {
    pll.EntityData.YFilter = pll.YFilter
    pll.EntityData.YangName = "pll"
    pll.EntityData.BundleName = "cisco_ios_xr"
    pll.EntityData.ParentYangName = "clocking_devices"
    pll.EntityData.SegmentPath = "pll" + types.AddKeyToken(pll.PllId, "pll_id")
    pll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pll.EntityData.Children = types.NewOrderedMap()
    pll.EntityData.Leafs = types.NewOrderedMap()
    pll.EntityData.Leafs.Append("pll_id", types.YLeaf{"PllId", pll.PllId})
    pll.EntityData.Leafs.Append("clocking_bus", types.YLeaf{"ClockingBus", pll.ClockingBus})
    pll.EntityData.Leafs.Append("clocking_mode", types.YLeaf{"ClockingMode", pll.ClockingMode})
    pll.EntityData.Leafs.Append("clocking_dev_addr", types.YLeaf{"ClockingDevAddr", pll.ClockingDevAddr})
    pll.EntityData.Leafs.Append("clocking_i2c_regs", types.YLeaf{"ClockingI2cRegs", pll.ClockingI2cRegs})

    pll.EntityData.YListKeys = []string {"PllId"}

    return &(pll.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice
type Controller_Oper_SliceControl_LocationList_FPGA_Slice struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-2]|all.
    SliceId interface{}

    
    Summary Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor.
    CurrSensor []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom.
    Eeprom []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary.
    OpticsSummary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics.
    Optics []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy.
    Phy []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor.
    TempSensor []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor.
    VoltSensor []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary.
    GearboxSummary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary.
    Gearbox2Summary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary.
    DualGearboxSummary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox.
    Gearbox []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2.
    Gearbox2 []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox.
    DualGearbox []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak.
    Cpak []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary.
    ModenaSummary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena.
    Modena []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena
}

func (slice *Controller_Oper_SliceControl_LocationList_FPGA_Slice) GetEntityData() *types.CommonEntityData {
    slice.EntityData.YFilter = slice.YFilter
    slice.EntityData.YangName = "slice"
    slice.EntityData.BundleName = "cisco_ios_xr"
    slice.EntityData.ParentYangName = "FPGA"
    slice.EntityData.SegmentPath = "slice" + types.AddKeyToken(slice.SliceId, "slice_id")
    slice.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slice.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slice.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slice.EntityData.Children = types.NewOrderedMap()
    slice.EntityData.Children.Append("summary", types.YChild{"Summary", &slice.Summary})
    slice.EntityData.Children.Append("curr_sensor", types.YChild{"CurrSensor", nil})
    for i := range slice.CurrSensor {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.CurrSensor[i]), types.YChild{"CurrSensor", slice.CurrSensor[i]})
    }
    slice.EntityData.Children.Append("eeprom", types.YChild{"Eeprom", nil})
    for i := range slice.Eeprom {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Eeprom[i]), types.YChild{"Eeprom", slice.Eeprom[i]})
    }
    slice.EntityData.Children.Append("optics_summary", types.YChild{"OpticsSummary", nil})
    for i := range slice.OpticsSummary {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.OpticsSummary[i]), types.YChild{"OpticsSummary", slice.OpticsSummary[i]})
    }
    slice.EntityData.Children.Append("optics", types.YChild{"Optics", nil})
    for i := range slice.Optics {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Optics[i]), types.YChild{"Optics", slice.Optics[i]})
    }
    slice.EntityData.Children.Append("phy", types.YChild{"Phy", nil})
    for i := range slice.Phy {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Phy[i]), types.YChild{"Phy", slice.Phy[i]})
    }
    slice.EntityData.Children.Append("temp_sensor", types.YChild{"TempSensor", nil})
    for i := range slice.TempSensor {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.TempSensor[i]), types.YChild{"TempSensor", slice.TempSensor[i]})
    }
    slice.EntityData.Children.Append("volt_sensor", types.YChild{"VoltSensor", nil})
    for i := range slice.VoltSensor {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.VoltSensor[i]), types.YChild{"VoltSensor", slice.VoltSensor[i]})
    }
    slice.EntityData.Children.Append("gearbox_summary", types.YChild{"GearboxSummary", nil})
    for i := range slice.GearboxSummary {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.GearboxSummary[i]), types.YChild{"GearboxSummary", slice.GearboxSummary[i]})
    }
    slice.EntityData.Children.Append("gearbox2_summary", types.YChild{"Gearbox2Summary", nil})
    for i := range slice.Gearbox2Summary {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Gearbox2Summary[i]), types.YChild{"Gearbox2Summary", slice.Gearbox2Summary[i]})
    }
    slice.EntityData.Children.Append("dual_gearbox_summary", types.YChild{"DualGearboxSummary", nil})
    for i := range slice.DualGearboxSummary {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.DualGearboxSummary[i]), types.YChild{"DualGearboxSummary", slice.DualGearboxSummary[i]})
    }
    slice.EntityData.Children.Append("gearbox", types.YChild{"Gearbox", nil})
    for i := range slice.Gearbox {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Gearbox[i]), types.YChild{"Gearbox", slice.Gearbox[i]})
    }
    slice.EntityData.Children.Append("gearbox2", types.YChild{"Gearbox2", nil})
    for i := range slice.Gearbox2 {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Gearbox2[i]), types.YChild{"Gearbox2", slice.Gearbox2[i]})
    }
    slice.EntityData.Children.Append("dual_gearbox", types.YChild{"DualGearbox", nil})
    for i := range slice.DualGearbox {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.DualGearbox[i]), types.YChild{"DualGearbox", slice.DualGearbox[i]})
    }
    slice.EntityData.Children.Append("cpak", types.YChild{"Cpak", nil})
    for i := range slice.Cpak {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Cpak[i]), types.YChild{"Cpak", slice.Cpak[i]})
    }
    slice.EntityData.Children.Append("modena_summary", types.YChild{"ModenaSummary", nil})
    for i := range slice.ModenaSummary {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.ModenaSummary[i]), types.YChild{"ModenaSummary", slice.ModenaSummary[i]})
    }
    slice.EntityData.Children.Append("modena", types.YChild{"Modena", nil})
    for i := range slice.Modena {
        slice.EntityData.Children.Append(types.GetSegmentPath(slice.Modena[i]), types.YChild{"Modena", slice.Modena[i]})
    }
    slice.EntityData.Leafs = types.NewOrderedMap()
    slice.EntityData.Leafs.Append("slice_id", types.YLeaf{"SliceId", slice.SliceId})

    slice.EntityData.YListKeys = []string {"SliceId"}

    return &(slice.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary.
    SliceSummary []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary
}

func (summary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "slice"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("slice_summary", types.YChild{"SliceSummary", nil})
    for i := range summary.SliceSummary {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.SliceSummary[i]), types.YChild{"SliceSummary", summary.SliceSummary[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: [0-2]|all.
    SliceSummId interface{}

    // The type is string with pattern: [0-2]|all.
    SliceId interface{}

    // The type is interface{} with range: 0..255.
    NumPhy interface{}

    // The type is interface{} with range: 0..255.
    NumOptics interface{}

    // The type is interface{} with range: 0..255.
    NumEeprom interface{}

    // The type is interface{} with range: 0..255.
    NumTempSensors interface{}

    // The type is interface{} with range: 0..255.
    NumVoltSensors interface{}

    // The type is interface{} with range: 0..255.
    NumCurrSensors interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (sliceSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary) GetEntityData() *types.CommonEntityData {
    sliceSummary.EntityData.YFilter = sliceSummary.YFilter
    sliceSummary.EntityData.YangName = "slice_summary"
    sliceSummary.EntityData.BundleName = "cisco_ios_xr"
    sliceSummary.EntityData.ParentYangName = "summary"
    sliceSummary.EntityData.SegmentPath = "slice_summary" + types.AddKeyToken(sliceSummary.SliceSummId, "slice_summ_id")
    sliceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceSummary.EntityData.Children = types.NewOrderedMap()
    sliceSummary.EntityData.Leafs = types.NewOrderedMap()
    sliceSummary.EntityData.Leafs.Append("slice_summ_id", types.YLeaf{"SliceSummId", sliceSummary.SliceSummId})
    sliceSummary.EntityData.Leafs.Append("slice_id", types.YLeaf{"SliceId", sliceSummary.SliceId})
    sliceSummary.EntityData.Leafs.Append("num_phy", types.YLeaf{"NumPhy", sliceSummary.NumPhy})
    sliceSummary.EntityData.Leafs.Append("num_optics", types.YLeaf{"NumOptics", sliceSummary.NumOptics})
    sliceSummary.EntityData.Leafs.Append("num_eeprom", types.YLeaf{"NumEeprom", sliceSummary.NumEeprom})
    sliceSummary.EntityData.Leafs.Append("num_temp_sensors", types.YLeaf{"NumTempSensors", sliceSummary.NumTempSensors})
    sliceSummary.EntityData.Leafs.Append("num_volt_sensors", types.YLeaf{"NumVoltSensors", sliceSummary.NumVoltSensors})
    sliceSummary.EntityData.Leafs.Append("num_curr_sensors", types.YLeaf{"NumCurrSensors", sliceSummary.NumCurrSensors})
    sliceSummary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", sliceSummary.IsDataAvailable})

    sliceSummary.EntityData.YListKeys = []string {"SliceSummId"}

    return &(sliceSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-5]).
    SensorId interface{}

    // The type is string.
    CurrSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrLastValue interface{}

    // The type is bool. The default value is false.
    CurrSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrNum1secIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (currSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor) GetEntityData() *types.CommonEntityData {
    currSensor.EntityData.YFilter = currSensor.YFilter
    currSensor.EntityData.YangName = "curr_sensor"
    currSensor.EntityData.BundleName = "cisco_ios_xr"
    currSensor.EntityData.ParentYangName = "slice"
    currSensor.EntityData.SegmentPath = "curr_sensor" + types.AddKeyToken(currSensor.SensorId, "sensor_id")
    currSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    currSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    currSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    currSensor.EntityData.Children = types.NewOrderedMap()
    currSensor.EntityData.Leafs = types.NewOrderedMap()
    currSensor.EntityData.Leafs.Append("sensor_id", types.YLeaf{"SensorId", currSensor.SensorId})
    currSensor.EntityData.Leafs.Append("curr_sensor_id", types.YLeaf{"CurrSensorId", currSensor.CurrSensorId})
    currSensor.EntityData.Leafs.Append("curr_dev_addr", types.YLeaf{"CurrDevAddr", currSensor.CurrDevAddr})
    currSensor.EntityData.Leafs.Append("curr_poll_intvl", types.YLeaf{"CurrPollIntvl", currSensor.CurrPollIntvl})
    currSensor.EntityData.Leafs.Append("curr_delta", types.YLeaf{"CurrDelta", currSensor.CurrDelta})
    currSensor.EntityData.Leafs.Append("curr_raw_data", types.YLeaf{"CurrRawData", currSensor.CurrRawData})
    currSensor.EntityData.Leafs.Append("curr_sensor_value", types.YLeaf{"CurrSensorValue", currSensor.CurrSensorValue})
    currSensor.EntityData.Leafs.Append("curr_unit", types.YLeaf{"CurrUnit", currSensor.CurrUnit})
    currSensor.EntityData.Leafs.Append("curr_last_value", types.YLeaf{"CurrLastValue", currSensor.CurrLastValue})
    currSensor.EntityData.Leafs.Append("curr_send_update", types.YLeaf{"CurrSendUpdate", currSensor.CurrSendUpdate})
    currSensor.EntityData.Leafs.Append("curr_num_1sec_intervals", types.YLeaf{"CurrNum1secIntervals", currSensor.CurrNum1secIntervals})
    currSensor.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", currSensor.IsDataAvailable})

    currSensor.EntityData.YListKeys = []string {"SensorId"}

    return &(currSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-1].
    EepromId interface{}

    // The type is string.
    EepromType interface{}

    // The type is string.
    EepromBus interface{}

    // The type is string.
    EepromI2cRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (eeprom *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "slice"
    eeprom.EntityData.SegmentPath = "eeprom" + types.AddKeyToken(eeprom.EepromId, "eeprom_id")
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = types.NewOrderedMap()
    eeprom.EntityData.Leafs = types.NewOrderedMap()
    eeprom.EntityData.Leafs.Append("eeprom_id", types.YLeaf{"EepromId", eeprom.EepromId})
    eeprom.EntityData.Leafs.Append("eeprom_type", types.YLeaf{"EepromType", eeprom.EepromType})
    eeprom.EntityData.Leafs.Append("eeprom_bus", types.YLeaf{"EepromBus", eeprom.EepromBus})
    eeprom.EntityData.Leafs.Append("eeprom_i2c_regs", types.YLeaf{"EepromI2cRegs", eeprom.EepromI2cRegs})
    eeprom.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", eeprom.IsDataAvailable})

    eeprom.EntityData.YListKeys = []string {"EepromId"}

    return &(eeprom.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-4].
    OpticsId interface{}

    // The type is string.
    OpticsType interface{}

    // The type is string.
    OpticsBus interface{}

    // The type is string.
    OpticsI2cRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (opticsSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary) GetEntityData() *types.CommonEntityData {
    opticsSummary.EntityData.YFilter = opticsSummary.YFilter
    opticsSummary.EntityData.YangName = "optics_summary"
    opticsSummary.EntityData.BundleName = "cisco_ios_xr"
    opticsSummary.EntityData.ParentYangName = "slice"
    opticsSummary.EntityData.SegmentPath = "optics_summary" + types.AddKeyToken(opticsSummary.OpticsId, "optics_id")
    opticsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsSummary.EntityData.Children = types.NewOrderedMap()
    opticsSummary.EntityData.Leafs = types.NewOrderedMap()
    opticsSummary.EntityData.Leafs.Append("optics_id", types.YLeaf{"OpticsId", opticsSummary.OpticsId})
    opticsSummary.EntityData.Leafs.Append("optics_type", types.YLeaf{"OpticsType", opticsSummary.OpticsType})
    opticsSummary.EntityData.Leafs.Append("optics_bus", types.YLeaf{"OpticsBus", opticsSummary.OpticsBus})
    opticsSummary.EntityData.Leafs.Append("optics_i2c_regs", types.YLeaf{"OpticsI2cRegs", opticsSummary.OpticsI2cRegs})
    opticsSummary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", opticsSummary.IsDataAvailable})

    opticsSummary.EntityData.YListKeys = []string {"OpticsId"}

    return &(opticsSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-4].
    OpticsId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp.
    Cxp []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo.
    TxInfo []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo.
    RxInfo []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients.
    TxCoefficients []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients.
    RxCoefficients []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients
}

func (optics *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics) GetEntityData() *types.CommonEntityData {
    optics.EntityData.YFilter = optics.YFilter
    optics.EntityData.YangName = "optics"
    optics.EntityData.BundleName = "cisco_ios_xr"
    optics.EntityData.ParentYangName = "slice"
    optics.EntityData.SegmentPath = "optics" + types.AddKeyToken(optics.OpticsId, "optics_id")
    optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optics.EntityData.Children = types.NewOrderedMap()
    optics.EntityData.Children.Append("cxp", types.YChild{"Cxp", nil})
    for i := range optics.Cxp {
        optics.EntityData.Children.Append(types.GetSegmentPath(optics.Cxp[i]), types.YChild{"Cxp", optics.Cxp[i]})
    }
    optics.EntityData.Children.Append("tx_info", types.YChild{"TxInfo", nil})
    for i := range optics.TxInfo {
        optics.EntityData.Children.Append(types.GetSegmentPath(optics.TxInfo[i]), types.YChild{"TxInfo", optics.TxInfo[i]})
    }
    optics.EntityData.Children.Append("rx_info", types.YChild{"RxInfo", nil})
    for i := range optics.RxInfo {
        optics.EntityData.Children.Append(types.GetSegmentPath(optics.RxInfo[i]), types.YChild{"RxInfo", optics.RxInfo[i]})
    }
    optics.EntityData.Children.Append("tx_coefficients", types.YChild{"TxCoefficients", nil})
    for i := range optics.TxCoefficients {
        optics.EntityData.Children.Append(types.GetSegmentPath(optics.TxCoefficients[i]), types.YChild{"TxCoefficients", optics.TxCoefficients[i]})
    }
    optics.EntityData.Children.Append("rx_coefficients", types.YChild{"RxCoefficients", nil})
    for i := range optics.RxCoefficients {
        optics.EntityData.Children.Append(types.GetSegmentPath(optics.RxCoefficients[i]), types.YChild{"RxCoefficients", optics.RxCoefficients[i]})
    }
    optics.EntityData.Leafs = types.NewOrderedMap()
    optics.EntityData.Leafs.Append("optics_id", types.YLeaf{"OpticsId", optics.OpticsId})

    optics.EntityData.YListKeys = []string {"OpticsId"}

    return &(optics.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-2].
    CxpId interface{}

    // The type is string.
    Signature interface{}

    // The type is bool. The default value is false.
    CxpPortReady interface{}

    // The type is string.
    Opaque interface{}

    // The type is string.
    Nodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Slice interface{}

    // The type is string.
    Capabilities interface{}

    // The type is string.
    VendorName interface{}

    // The type is string.
    VendorPartNum interface{}

    // The type is string.
    VendorRevNum interface{}

    // The type is string.
    VendorSerialNum interface{}

    // The type is bool. The default value is false.
    Passive interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (cxp *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp) GetEntityData() *types.CommonEntityData {
    cxp.EntityData.YFilter = cxp.YFilter
    cxp.EntityData.YangName = "cxp"
    cxp.EntityData.BundleName = "cisco_ios_xr"
    cxp.EntityData.ParentYangName = "optics"
    cxp.EntityData.SegmentPath = "cxp" + types.AddKeyToken(cxp.CxpId, "cxp_id")
    cxp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cxp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cxp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cxp.EntityData.Children = types.NewOrderedMap()
    cxp.EntityData.Leafs = types.NewOrderedMap()
    cxp.EntityData.Leafs.Append("cxp_id", types.YLeaf{"CxpId", cxp.CxpId})
    cxp.EntityData.Leafs.Append("signature", types.YLeaf{"Signature", cxp.Signature})
    cxp.EntityData.Leafs.Append("cxp_port_ready", types.YLeaf{"CxpPortReady", cxp.CxpPortReady})
    cxp.EntityData.Leafs.Append("opaque", types.YLeaf{"Opaque", cxp.Opaque})
    cxp.EntityData.Leafs.Append("nodeid", types.YLeaf{"Nodeid", cxp.Nodeid})
    cxp.EntityData.Leafs.Append("slice", types.YLeaf{"Slice", cxp.Slice})
    cxp.EntityData.Leafs.Append("capabilities", types.YLeaf{"Capabilities", cxp.Capabilities})
    cxp.EntityData.Leafs.Append("vendor_name", types.YLeaf{"VendorName", cxp.VendorName})
    cxp.EntityData.Leafs.Append("vendor_part_num", types.YLeaf{"VendorPartNum", cxp.VendorPartNum})
    cxp.EntityData.Leafs.Append("vendor_rev_num", types.YLeaf{"VendorRevNum", cxp.VendorRevNum})
    cxp.EntityData.Leafs.Append("vendor_serial_num", types.YLeaf{"VendorSerialNum", cxp.VendorSerialNum})
    cxp.EntityData.Leafs.Append("passive", types.YLeaf{"Passive", cxp.Passive})
    cxp.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", cxp.IsDataAvailable})

    cxp.EntityData.YListKeys = []string {"CxpId"}

    return &(cxp.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-1]).
    TxChannelId interface{}

    // The type is string.
    TxStatusFlag interface{}

    // The type is string.
    TxErrorFlag interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (txInfo *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo) GetEntityData() *types.CommonEntityData {
    txInfo.EntityData.YFilter = txInfo.YFilter
    txInfo.EntityData.YangName = "tx_info"
    txInfo.EntityData.BundleName = "cisco_ios_xr"
    txInfo.EntityData.ParentYangName = "optics"
    txInfo.EntityData.SegmentPath = "tx_info" + types.AddKeyToken(txInfo.TxChannelId, "tx_channel_id")
    txInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txInfo.EntityData.Children = types.NewOrderedMap()
    txInfo.EntityData.Leafs = types.NewOrderedMap()
    txInfo.EntityData.Leafs.Append("tx_channel_id", types.YLeaf{"TxChannelId", txInfo.TxChannelId})
    txInfo.EntityData.Leafs.Append("tx_status_flag", types.YLeaf{"TxStatusFlag", txInfo.TxStatusFlag})
    txInfo.EntityData.Leafs.Append("tx_error_flag", types.YLeaf{"TxErrorFlag", txInfo.TxErrorFlag})
    txInfo.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", txInfo.IsDataAvailable})

    txInfo.EntityData.YListKeys = []string {"TxChannelId"}

    return &(txInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-1]).
    RxChannelId interface{}

    // The type is string.
    RxStatusFlag interface{}

    // The type is string.
    RxErrorFlag interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (rxInfo *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo) GetEntityData() *types.CommonEntityData {
    rxInfo.EntityData.YFilter = rxInfo.YFilter
    rxInfo.EntityData.YangName = "rx_info"
    rxInfo.EntityData.BundleName = "cisco_ios_xr"
    rxInfo.EntityData.ParentYangName = "optics"
    rxInfo.EntityData.SegmentPath = "rx_info" + types.AddKeyToken(rxInfo.RxChannelId, "rx_channel_id")
    rxInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxInfo.EntityData.Children = types.NewOrderedMap()
    rxInfo.EntityData.Leafs = types.NewOrderedMap()
    rxInfo.EntityData.Leafs.Append("rx_channel_id", types.YLeaf{"RxChannelId", rxInfo.RxChannelId})
    rxInfo.EntityData.Leafs.Append("rx_status_flag", types.YLeaf{"RxStatusFlag", rxInfo.RxStatusFlag})
    rxInfo.EntityData.Leafs.Append("rx_error_flag", types.YLeaf{"RxErrorFlag", rxInfo.RxErrorFlag})
    rxInfo.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", rxInfo.IsDataAvailable})

    rxInfo.EntityData.YListKeys = []string {"RxChannelId"}

    return &(rxInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-1]).
    TxChannelId interface{}

    // The type is string.
    Equalization interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (txCoefficients *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients) GetEntityData() *types.CommonEntityData {
    txCoefficients.EntityData.YFilter = txCoefficients.YFilter
    txCoefficients.EntityData.YangName = "tx_coefficients"
    txCoefficients.EntityData.BundleName = "cisco_ios_xr"
    txCoefficients.EntityData.ParentYangName = "optics"
    txCoefficients.EntityData.SegmentPath = "tx_coefficients" + types.AddKeyToken(txCoefficients.TxChannelId, "tx_channel_id")
    txCoefficients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txCoefficients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txCoefficients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txCoefficients.EntityData.Children = types.NewOrderedMap()
    txCoefficients.EntityData.Leafs = types.NewOrderedMap()
    txCoefficients.EntityData.Leafs.Append("tx_channel_id", types.YLeaf{"TxChannelId", txCoefficients.TxChannelId})
    txCoefficients.EntityData.Leafs.Append("equalization", types.YLeaf{"Equalization", txCoefficients.Equalization})
    txCoefficients.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", txCoefficients.IsDataAvailable})

    txCoefficients.EntityData.YListKeys = []string {"TxChannelId"}

    return &(txCoefficients.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-1]).
    RxChannelId interface{}

    // The type is string.
    Amplitude interface{}

    // The type is string.
    DeEmphasis interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (rxCoefficients *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients) GetEntityData() *types.CommonEntityData {
    rxCoefficients.EntityData.YFilter = rxCoefficients.YFilter
    rxCoefficients.EntityData.YangName = "rx_coefficients"
    rxCoefficients.EntityData.BundleName = "cisco_ios_xr"
    rxCoefficients.EntityData.ParentYangName = "optics"
    rxCoefficients.EntityData.SegmentPath = "rx_coefficients" + types.AddKeyToken(rxCoefficients.RxChannelId, "rx_channel_id")
    rxCoefficients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxCoefficients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxCoefficients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxCoefficients.EntityData.Children = types.NewOrderedMap()
    rxCoefficients.EntityData.Leafs = types.NewOrderedMap()
    rxCoefficients.EntityData.Leafs.Append("rx_channel_id", types.YLeaf{"RxChannelId", rxCoefficients.RxChannelId})
    rxCoefficients.EntityData.Leafs.Append("amplitude", types.YLeaf{"Amplitude", rxCoefficients.Amplitude})
    rxCoefficients.EntityData.Leafs.Append("de_emphasis", types.YLeaf{"DeEmphasis", rxCoefficients.DeEmphasis})
    rxCoefficients.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", rxCoefficients.IsDataAvailable})

    rxCoefficients.EntityData.YListKeys = []string {"RxChannelId"}

    return &(rxCoefficients.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-9].
    PhyId interface{}

    // The type is string.
    PhyType interface{}

    // The type is string.
    PhyBus interface{}

    // The type is string.
    PhyI2cRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (phy *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy) GetEntityData() *types.CommonEntityData {
    phy.EntityData.YFilter = phy.YFilter
    phy.EntityData.YangName = "phy"
    phy.EntityData.BundleName = "cisco_ios_xr"
    phy.EntityData.ParentYangName = "slice"
    phy.EntityData.SegmentPath = "phy" + types.AddKeyToken(phy.PhyId, "phy_id")
    phy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    phy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    phy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    phy.EntityData.Children = types.NewOrderedMap()
    phy.EntityData.Leafs = types.NewOrderedMap()
    phy.EntityData.Leafs.Append("phy_id", types.YLeaf{"PhyId", phy.PhyId})
    phy.EntityData.Leafs.Append("phy_type", types.YLeaf{"PhyType", phy.PhyType})
    phy.EntityData.Leafs.Append("phy_bus", types.YLeaf{"PhyBus", phy.PhyBus})
    phy.EntityData.Leafs.Append("phy_i2c_regs", types.YLeaf{"PhyI2cRegs", phy.PhyI2cRegs})
    phy.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", phy.IsDataAvailable})

    phy.EntityData.YListKeys = []string {"PhyId"}

    return &(phy.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-9]|2[0-1]).
    SensorId interface{}

    // The type is string.
    TempSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    TempDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    TempPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    TempDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    TempRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    TempLastValue interface{}

    // The type is bool. The default value is false.
    TempSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempNum1secIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (tempSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor) GetEntityData() *types.CommonEntityData {
    tempSensor.EntityData.YFilter = tempSensor.YFilter
    tempSensor.EntityData.YangName = "temp_sensor"
    tempSensor.EntityData.BundleName = "cisco_ios_xr"
    tempSensor.EntityData.ParentYangName = "slice"
    tempSensor.EntityData.SegmentPath = "temp_sensor" + types.AddKeyToken(tempSensor.SensorId, "sensor_id")
    tempSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tempSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tempSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tempSensor.EntityData.Children = types.NewOrderedMap()
    tempSensor.EntityData.Leafs = types.NewOrderedMap()
    tempSensor.EntityData.Leafs.Append("sensor_id", types.YLeaf{"SensorId", tempSensor.SensorId})
    tempSensor.EntityData.Leafs.Append("temp_sensor_id", types.YLeaf{"TempSensorId", tempSensor.TempSensorId})
    tempSensor.EntityData.Leafs.Append("temp_dev_addr", types.YLeaf{"TempDevAddr", tempSensor.TempDevAddr})
    tempSensor.EntityData.Leafs.Append("temp_poll_intvl", types.YLeaf{"TempPollIntvl", tempSensor.TempPollIntvl})
    tempSensor.EntityData.Leafs.Append("temp_delta", types.YLeaf{"TempDelta", tempSensor.TempDelta})
    tempSensor.EntityData.Leafs.Append("temp_raw_data", types.YLeaf{"TempRawData", tempSensor.TempRawData})
    tempSensor.EntityData.Leafs.Append("temp_sensor_value", types.YLeaf{"TempSensorValue", tempSensor.TempSensorValue})
    tempSensor.EntityData.Leafs.Append("temp_unit", types.YLeaf{"TempUnit", tempSensor.TempUnit})
    tempSensor.EntityData.Leafs.Append("temp_last_value", types.YLeaf{"TempLastValue", tempSensor.TempLastValue})
    tempSensor.EntityData.Leafs.Append("temp_send_update", types.YLeaf{"TempSendUpdate", tempSensor.TempSendUpdate})
    tempSensor.EntityData.Leafs.Append("temp_num_1sec_intervals", types.YLeaf{"TempNum1secIntervals", tempSensor.TempNum1secIntervals})
    tempSensor.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", tempSensor.IsDataAvailable})

    tempSensor.EntityData.YListKeys = []string {"SensorId"}

    return &(tempSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // all|(0?[0-9]|1[0-9]|2[0-1]).
    SensorId interface{}

    // The type is string.
    VoltSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltLastValue interface{}

    // The type is bool. The default value is false.
    VoltSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltNum1secIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (voltSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor) GetEntityData() *types.CommonEntityData {
    voltSensor.EntityData.YFilter = voltSensor.YFilter
    voltSensor.EntityData.YangName = "volt_sensor"
    voltSensor.EntityData.BundleName = "cisco_ios_xr"
    voltSensor.EntityData.ParentYangName = "slice"
    voltSensor.EntityData.SegmentPath = "volt_sensor" + types.AddKeyToken(voltSensor.SensorId, "sensor_id")
    voltSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    voltSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    voltSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    voltSensor.EntityData.Children = types.NewOrderedMap()
    voltSensor.EntityData.Leafs = types.NewOrderedMap()
    voltSensor.EntityData.Leafs.Append("sensor_id", types.YLeaf{"SensorId", voltSensor.SensorId})
    voltSensor.EntityData.Leafs.Append("volt_sensor_id", types.YLeaf{"VoltSensorId", voltSensor.VoltSensorId})
    voltSensor.EntityData.Leafs.Append("volt_dev_addr", types.YLeaf{"VoltDevAddr", voltSensor.VoltDevAddr})
    voltSensor.EntityData.Leafs.Append("volt_poll_intvl", types.YLeaf{"VoltPollIntvl", voltSensor.VoltPollIntvl})
    voltSensor.EntityData.Leafs.Append("volt_delta", types.YLeaf{"VoltDelta", voltSensor.VoltDelta})
    voltSensor.EntityData.Leafs.Append("volt_raw_data", types.YLeaf{"VoltRawData", voltSensor.VoltRawData})
    voltSensor.EntityData.Leafs.Append("volt_sensor_value", types.YLeaf{"VoltSensorValue", voltSensor.VoltSensorValue})
    voltSensor.EntityData.Leafs.Append("volt_unit", types.YLeaf{"VoltUnit", voltSensor.VoltUnit})
    voltSensor.EntityData.Leafs.Append("volt_last_value", types.YLeaf{"VoltLastValue", voltSensor.VoltLastValue})
    voltSensor.EntityData.Leafs.Append("volt_send_update", types.YLeaf{"VoltSendUpdate", voltSensor.VoltSendUpdate})
    voltSensor.EntityData.Leafs.Append("volt_num_1sec_intervals", types.YLeaf{"VoltNum1secIntervals", voltSensor.VoltNum1secIntervals})
    voltSensor.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", voltSensor.IsDataAvailable})

    voltSensor.EntityData.YListKeys = []string {"SensorId"}

    return &(voltSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-1].
    GearboxId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gnext interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    SyslaneLOSMask interface{}

    // The type is string.
    LinelaneLOSMask interface{}

    // The type is string.
    SyslaneEnableMask interface{}

    // The type is string.
    LinelaneEnableMask interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}

    // The type is string.
    LineSideTxPll interface{}

    // The type is string.
    LineTxVco interface{}

    // The type is string.
    LineTxVcoState interface{}

    // The type is string.
    LineSideRxPll interface{}

    // The type is string.
    LineRxVco interface{}

    // The type is string.
    LineRxVcoState interface{}
}

func (gearboxSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary) GetEntityData() *types.CommonEntityData {
    gearboxSummary.EntityData.YFilter = gearboxSummary.YFilter
    gearboxSummary.EntityData.YangName = "gearbox_summary"
    gearboxSummary.EntityData.BundleName = "cisco_ios_xr"
    gearboxSummary.EntityData.ParentYangName = "slice"
    gearboxSummary.EntityData.SegmentPath = "gearbox_summary" + types.AddKeyToken(gearboxSummary.GearboxId, "gearbox_id")
    gearboxSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearboxSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearboxSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearboxSummary.EntityData.Children = types.NewOrderedMap()
    gearboxSummary.EntityData.Leafs = types.NewOrderedMap()
    gearboxSummary.EntityData.Leafs.Append("gearbox_id", types.YLeaf{"GearboxId", gearboxSummary.GearboxId})
    gearboxSummary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", gearboxSummary.IsDataAvailable})
    gearboxSummary.EntityData.Leafs.Append("inited", types.YLeaf{"Inited", gearboxSummary.Inited})
    gearboxSummary.EntityData.Leafs.Append("gopaque", types.YLeaf{"Gopaque", gearboxSummary.Gopaque})
    gearboxSummary.EntityData.Leafs.Append("gnodeid", types.YLeaf{"Gnodeid", gearboxSummary.Gnodeid})
    gearboxSummary.EntityData.Leafs.Append("gslice", types.YLeaf{"Gslice", gearboxSummary.Gslice})
    gearboxSummary.EntityData.Leafs.Append("gport", types.YLeaf{"Gport", gearboxSummary.Gport})
    gearboxSummary.EntityData.Leafs.Append("gdev_addr", types.YLeaf{"GdevAddr", gearboxSummary.GdevAddr})
    gearboxSummary.EntityData.Leafs.Append("gdev_type", types.YLeaf{"GdevType", gearboxSummary.GdevType})
    gearboxSummary.EntityData.Leafs.Append("gctrace_err_hdl", types.YLeaf{"GctraceErrHdl", gearboxSummary.GctraceErrHdl})
    gearboxSummary.EntityData.Leafs.Append("gctrace_evt_hdl", types.YLeaf{"GctraceEvtHdl", gearboxSummary.GctraceEvtHdl})
    gearboxSummary.EntityData.Leafs.Append("gctrace_intr_hdl", types.YLeaf{"GctraceIntrHdl", gearboxSummary.GctraceIntrHdl})
    gearboxSummary.EntityData.Leafs.Append("gnext", types.YLeaf{"Gnext", gearboxSummary.Gnext})
    gearboxSummary.EntityData.Leafs.Append("gparent", types.YLeaf{"Gparent", gearboxSummary.Gparent})
    gearboxSummary.EntityData.Leafs.Append("syslaneLOSMask", types.YLeaf{"SyslaneLOSMask", gearboxSummary.SyslaneLOSMask})
    gearboxSummary.EntityData.Leafs.Append("linelaneLOSMask", types.YLeaf{"LinelaneLOSMask", gearboxSummary.LinelaneLOSMask})
    gearboxSummary.EntityData.Leafs.Append("syslaneEnableMask", types.YLeaf{"SyslaneEnableMask", gearboxSummary.SyslaneEnableMask})
    gearboxSummary.EntityData.Leafs.Append("linelaneEnableMask", types.YLeaf{"LinelaneEnableMask", gearboxSummary.LinelaneEnableMask})
    gearboxSummary.EntityData.Leafs.Append("line_lane_cnt", types.YLeaf{"LineLaneCnt", gearboxSummary.LineLaneCnt})
    gearboxSummary.EntityData.Leafs.Append("sys_lane_cnt", types.YLeaf{"SysLaneCnt", gearboxSummary.SysLaneCnt})
    gearboxSummary.EntityData.Leafs.Append("verbose", types.YLeaf{"Verbose", gearboxSummary.Verbose})
    gearboxSummary.EntityData.Leafs.Append("dwnld_done", types.YLeaf{"DwnldDone", gearboxSummary.DwnldDone})
    gearboxSummary.EntityData.Leafs.Append("chip_version", types.YLeaf{"ChipVersion", gearboxSummary.ChipVersion})
    gearboxSummary.EntityData.Leafs.Append("reversion", types.YLeaf{"Reversion", gearboxSummary.Reversion})
    gearboxSummary.EntityData.Leafs.Append("firmware_version", types.YLeaf{"FirmwareVersion", gearboxSummary.FirmwareVersion})
    gearboxSummary.EntityData.Leafs.Append("ucode_checksum", types.YLeaf{"UcodeChecksum", gearboxSummary.UcodeChecksum})
    gearboxSummary.EntityData.Leafs.Append("chip_modesel", types.YLeaf{"ChipModesel", gearboxSummary.ChipModesel})
    gearboxSummary.EntityData.Leafs.Append("chip_ref_clocksel", types.YLeaf{"ChipRefClocksel", gearboxSummary.ChipRefClocksel})
    gearboxSummary.EntityData.Leafs.Append("line_side_tx_pll", types.YLeaf{"LineSideTxPll", gearboxSummary.LineSideTxPll})
    gearboxSummary.EntityData.Leafs.Append("line_tx_vco", types.YLeaf{"LineTxVco", gearboxSummary.LineTxVco})
    gearboxSummary.EntityData.Leafs.Append("line_tx_vco_state", types.YLeaf{"LineTxVcoState", gearboxSummary.LineTxVcoState})
    gearboxSummary.EntityData.Leafs.Append("line_side_rx_pll", types.YLeaf{"LineSideRxPll", gearboxSummary.LineSideRxPll})
    gearboxSummary.EntityData.Leafs.Append("line_rx_vco", types.YLeaf{"LineRxVco", gearboxSummary.LineRxVco})
    gearboxSummary.EntityData.Leafs.Append("line_rx_vco_state", types.YLeaf{"LineRxVcoState", gearboxSummary.LineRxVcoState})

    gearboxSummary.EntityData.YListKeys = []string {"GearboxId"}

    return &(gearboxSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-3].
    Gearbox2Id interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}
}

func (gearbox2Summary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary) GetEntityData() *types.CommonEntityData {
    gearbox2Summary.EntityData.YFilter = gearbox2Summary.YFilter
    gearbox2Summary.EntityData.YangName = "gearbox2_summary"
    gearbox2Summary.EntityData.BundleName = "cisco_ios_xr"
    gearbox2Summary.EntityData.ParentYangName = "slice"
    gearbox2Summary.EntityData.SegmentPath = "gearbox2_summary" + types.AddKeyToken(gearbox2Summary.Gearbox2Id, "gearbox2_id")
    gearbox2Summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2Summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2Summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2Summary.EntityData.Children = types.NewOrderedMap()
    gearbox2Summary.EntityData.Leafs = types.NewOrderedMap()
    gearbox2Summary.EntityData.Leafs.Append("gearbox2_id", types.YLeaf{"Gearbox2Id", gearbox2Summary.Gearbox2Id})
    gearbox2Summary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", gearbox2Summary.IsDataAvailable})
    gearbox2Summary.EntityData.Leafs.Append("inited", types.YLeaf{"Inited", gearbox2Summary.Inited})
    gearbox2Summary.EntityData.Leafs.Append("gopaque", types.YLeaf{"Gopaque", gearbox2Summary.Gopaque})
    gearbox2Summary.EntityData.Leafs.Append("gnodeid", types.YLeaf{"Gnodeid", gearbox2Summary.Gnodeid})
    gearbox2Summary.EntityData.Leafs.Append("gslice", types.YLeaf{"Gslice", gearbox2Summary.Gslice})
    gearbox2Summary.EntityData.Leafs.Append("gport", types.YLeaf{"Gport", gearbox2Summary.Gport})
    gearbox2Summary.EntityData.Leafs.Append("gdev_addr", types.YLeaf{"GdevAddr", gearbox2Summary.GdevAddr})
    gearbox2Summary.EntityData.Leafs.Append("gdev_type", types.YLeaf{"GdevType", gearbox2Summary.GdevType})
    gearbox2Summary.EntityData.Leafs.Append("gctrace_err_hdl", types.YLeaf{"GctraceErrHdl", gearbox2Summary.GctraceErrHdl})
    gearbox2Summary.EntityData.Leafs.Append("gctrace_evt_hdl", types.YLeaf{"GctraceEvtHdl", gearbox2Summary.GctraceEvtHdl})
    gearbox2Summary.EntityData.Leafs.Append("gctrace_intr_hdl", types.YLeaf{"GctraceIntrHdl", gearbox2Summary.GctraceIntrHdl})
    gearbox2Summary.EntityData.Leafs.Append("gparent", types.YLeaf{"Gparent", gearbox2Summary.Gparent})
    gearbox2Summary.EntityData.Leafs.Append("line_lane_cnt", types.YLeaf{"LineLaneCnt", gearbox2Summary.LineLaneCnt})
    gearbox2Summary.EntityData.Leafs.Append("sys_lane_cnt", types.YLeaf{"SysLaneCnt", gearbox2Summary.SysLaneCnt})
    gearbox2Summary.EntityData.Leafs.Append("verbose", types.YLeaf{"Verbose", gearbox2Summary.Verbose})
    gearbox2Summary.EntityData.Leafs.Append("dwnld_done", types.YLeaf{"DwnldDone", gearbox2Summary.DwnldDone})
    gearbox2Summary.EntityData.Leafs.Append("chip_version", types.YLeaf{"ChipVersion", gearbox2Summary.ChipVersion})
    gearbox2Summary.EntityData.Leafs.Append("reversion", types.YLeaf{"Reversion", gearbox2Summary.Reversion})
    gearbox2Summary.EntityData.Leafs.Append("firmware_version", types.YLeaf{"FirmwareVersion", gearbox2Summary.FirmwareVersion})
    gearbox2Summary.EntityData.Leafs.Append("ucode_checksum", types.YLeaf{"UcodeChecksum", gearbox2Summary.UcodeChecksum})
    gearbox2Summary.EntityData.Leafs.Append("chip_modesel", types.YLeaf{"ChipModesel", gearbox2Summary.ChipModesel})
    gearbox2Summary.EntityData.Leafs.Append("chip_ref_clocksel", types.YLeaf{"ChipRefClocksel", gearbox2Summary.ChipRefClocksel})

    gearbox2Summary.EntityData.YListKeys = []string {"Gearbox2Id"}

    return &(gearbox2Summary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-1].
    DualGearboxId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gnext interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    SyslaneLOSMask interface{}

    // The type is string.
    LinelaneLOSMask interface{}

    // The type is string.
    SyslaneEnableMask interface{}

    // The type is string.
    LinelaneEnableMask interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}

    // The type is string.
    LineSideTxPll interface{}

    // The type is string.
    LineTxVco interface{}

    // The type is string.
    LineTxVcoState interface{}

    // The type is string.
    LineSideRxPll interface{}

    // The type is string.
    LineRxVco interface{}

    // The type is string.
    LineRxVcoState interface{}
}

func (dualGearboxSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary) GetEntityData() *types.CommonEntityData {
    dualGearboxSummary.EntityData.YFilter = dualGearboxSummary.YFilter
    dualGearboxSummary.EntityData.YangName = "dual_gearbox_summary"
    dualGearboxSummary.EntityData.BundleName = "cisco_ios_xr"
    dualGearboxSummary.EntityData.ParentYangName = "slice"
    dualGearboxSummary.EntityData.SegmentPath = "dual_gearbox_summary" + types.AddKeyToken(dualGearboxSummary.DualGearboxId, "dual_gearbox_id")
    dualGearboxSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearboxSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearboxSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearboxSummary.EntityData.Children = types.NewOrderedMap()
    dualGearboxSummary.EntityData.Leafs = types.NewOrderedMap()
    dualGearboxSummary.EntityData.Leafs.Append("dual_gearbox_id", types.YLeaf{"DualGearboxId", dualGearboxSummary.DualGearboxId})
    dualGearboxSummary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", dualGearboxSummary.IsDataAvailable})
    dualGearboxSummary.EntityData.Leafs.Append("inited", types.YLeaf{"Inited", dualGearboxSummary.Inited})
    dualGearboxSummary.EntityData.Leafs.Append("gopaque", types.YLeaf{"Gopaque", dualGearboxSummary.Gopaque})
    dualGearboxSummary.EntityData.Leafs.Append("gnodeid", types.YLeaf{"Gnodeid", dualGearboxSummary.Gnodeid})
    dualGearboxSummary.EntityData.Leafs.Append("gslice", types.YLeaf{"Gslice", dualGearboxSummary.Gslice})
    dualGearboxSummary.EntityData.Leafs.Append("gport", types.YLeaf{"Gport", dualGearboxSummary.Gport})
    dualGearboxSummary.EntityData.Leafs.Append("gdev_addr", types.YLeaf{"GdevAddr", dualGearboxSummary.GdevAddr})
    dualGearboxSummary.EntityData.Leafs.Append("gdev_type", types.YLeaf{"GdevType", dualGearboxSummary.GdevType})
    dualGearboxSummary.EntityData.Leafs.Append("gctrace_err_hdl", types.YLeaf{"GctraceErrHdl", dualGearboxSummary.GctraceErrHdl})
    dualGearboxSummary.EntityData.Leafs.Append("gctrace_evt_hdl", types.YLeaf{"GctraceEvtHdl", dualGearboxSummary.GctraceEvtHdl})
    dualGearboxSummary.EntityData.Leafs.Append("gctrace_intr_hdl", types.YLeaf{"GctraceIntrHdl", dualGearboxSummary.GctraceIntrHdl})
    dualGearboxSummary.EntityData.Leafs.Append("gnext", types.YLeaf{"Gnext", dualGearboxSummary.Gnext})
    dualGearboxSummary.EntityData.Leafs.Append("gparent", types.YLeaf{"Gparent", dualGearboxSummary.Gparent})
    dualGearboxSummary.EntityData.Leafs.Append("syslaneLOSMask", types.YLeaf{"SyslaneLOSMask", dualGearboxSummary.SyslaneLOSMask})
    dualGearboxSummary.EntityData.Leafs.Append("linelaneLOSMask", types.YLeaf{"LinelaneLOSMask", dualGearboxSummary.LinelaneLOSMask})
    dualGearboxSummary.EntityData.Leafs.Append("syslaneEnableMask", types.YLeaf{"SyslaneEnableMask", dualGearboxSummary.SyslaneEnableMask})
    dualGearboxSummary.EntityData.Leafs.Append("linelaneEnableMask", types.YLeaf{"LinelaneEnableMask", dualGearboxSummary.LinelaneEnableMask})
    dualGearboxSummary.EntityData.Leafs.Append("line_lane_cnt", types.YLeaf{"LineLaneCnt", dualGearboxSummary.LineLaneCnt})
    dualGearboxSummary.EntityData.Leafs.Append("sys_lane_cnt", types.YLeaf{"SysLaneCnt", dualGearboxSummary.SysLaneCnt})
    dualGearboxSummary.EntityData.Leafs.Append("verbose", types.YLeaf{"Verbose", dualGearboxSummary.Verbose})
    dualGearboxSummary.EntityData.Leafs.Append("dwnld_done", types.YLeaf{"DwnldDone", dualGearboxSummary.DwnldDone})
    dualGearboxSummary.EntityData.Leafs.Append("chip_version", types.YLeaf{"ChipVersion", dualGearboxSummary.ChipVersion})
    dualGearboxSummary.EntityData.Leafs.Append("reversion", types.YLeaf{"Reversion", dualGearboxSummary.Reversion})
    dualGearboxSummary.EntityData.Leafs.Append("firmware_version", types.YLeaf{"FirmwareVersion", dualGearboxSummary.FirmwareVersion})
    dualGearboxSummary.EntityData.Leafs.Append("ucode_checksum", types.YLeaf{"UcodeChecksum", dualGearboxSummary.UcodeChecksum})
    dualGearboxSummary.EntityData.Leafs.Append("chip_modesel", types.YLeaf{"ChipModesel", dualGearboxSummary.ChipModesel})
    dualGearboxSummary.EntityData.Leafs.Append("chip_ref_clocksel", types.YLeaf{"ChipRefClocksel", dualGearboxSummary.ChipRefClocksel})
    dualGearboxSummary.EntityData.Leafs.Append("line_side_tx_pll", types.YLeaf{"LineSideTxPll", dualGearboxSummary.LineSideTxPll})
    dualGearboxSummary.EntityData.Leafs.Append("line_tx_vco", types.YLeaf{"LineTxVco", dualGearboxSummary.LineTxVco})
    dualGearboxSummary.EntityData.Leafs.Append("line_tx_vco_state", types.YLeaf{"LineTxVcoState", dualGearboxSummary.LineTxVcoState})
    dualGearboxSummary.EntityData.Leafs.Append("line_side_rx_pll", types.YLeaf{"LineSideRxPll", dualGearboxSummary.LineSideRxPll})
    dualGearboxSummary.EntityData.Leafs.Append("line_rx_vco", types.YLeaf{"LineRxVco", dualGearboxSummary.LineRxVco})
    dualGearboxSummary.EntityData.Leafs.Append("line_rx_vco_state", types.YLeaf{"LineRxVcoState", dualGearboxSummary.LineRxVcoState})

    dualGearboxSummary.EntityData.YListKeys = []string {"DualGearboxId"}

    return &(dualGearboxSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-1].
    GearboxId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane.
    GearboxLane []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane
}

func (gearbox *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox) GetEntityData() *types.CommonEntityData {
    gearbox.EntityData.YFilter = gearbox.YFilter
    gearbox.EntityData.YangName = "gearbox"
    gearbox.EntityData.BundleName = "cisco_ios_xr"
    gearbox.EntityData.ParentYangName = "slice"
    gearbox.EntityData.SegmentPath = "gearbox" + types.AddKeyToken(gearbox.GearboxId, "gearbox_id")
    gearbox.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox.EntityData.Children = types.NewOrderedMap()
    gearbox.EntityData.Children.Append("gearbox_lane", types.YChild{"GearboxLane", nil})
    for i := range gearbox.GearboxLane {
        gearbox.EntityData.Children.Append(types.GetSegmentPath(gearbox.GearboxLane[i]), types.YChild{"GearboxLane", gearbox.GearboxLane[i]})
    }
    gearbox.EntityData.Leafs = types.NewOrderedMap()
    gearbox.EntityData.Leafs.Append("gearbox_id", types.YLeaf{"GearboxId", gearbox.GearboxId})

    gearbox.EntityData.YListKeys = []string {"GearboxId"}

    return &(gearbox.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-9].
    GearboxLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (gearboxLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane) GetEntityData() *types.CommonEntityData {
    gearboxLane.EntityData.YFilter = gearboxLane.YFilter
    gearboxLane.EntityData.YangName = "gearbox_lane"
    gearboxLane.EntityData.BundleName = "cisco_ios_xr"
    gearboxLane.EntityData.ParentYangName = "gearbox"
    gearboxLane.EntityData.SegmentPath = "gearbox_lane" + types.AddKeyToken(gearboxLane.GearboxLaneId, "gearbox_lane_id")
    gearboxLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearboxLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearboxLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearboxLane.EntityData.Children = types.NewOrderedMap()
    gearboxLane.EntityData.Leafs = types.NewOrderedMap()
    gearboxLane.EntityData.Leafs.Append("gearbox_lane_id", types.YLeaf{"GearboxLaneId", gearboxLane.GearboxLaneId})
    gearboxLane.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", gearboxLane.IsDataAvailable})
    gearboxLane.EntityData.Leafs.Append("system_side_lanes", types.YLeaf{"SystemSideLanes", gearboxLane.SystemSideLanes})
    gearboxLane.EntityData.Leafs.Append("cdr_lock_status_caui", types.YLeaf{"CdrLockStatusCaui", gearboxLane.CdrLockStatusCaui})
    gearboxLane.EntityData.Leafs.Append("line_side_lanes", types.YLeaf{"LineSideLanes", gearboxLane.LineSideLanes})
    gearboxLane.EntityData.Leafs.Append("lane_status_cdr", types.YLeaf{"LaneStatusCdr", gearboxLane.LaneStatusCdr})
    gearboxLane.EntityData.Leafs.Append("lane_status_sig", types.YLeaf{"LaneStatusSig", gearboxLane.LaneStatusSig})
    gearboxLane.EntityData.Leafs.Append("los_status", types.YLeaf{"LosStatus", gearboxLane.LosStatus})
    gearboxLane.EntityData.Leafs.Append("system_side_loopback", types.YLeaf{"SystemSideLoopback", gearboxLane.SystemSideLoopback})
    gearboxLane.EntityData.Leafs.Append("lane_side_loopback", types.YLeaf{"LaneSideLoopback", gearboxLane.LaneSideLoopback})

    gearboxLane.EntityData.YListKeys = []string {"GearboxLaneId"}

    return &(gearboxLane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-3].
    Gearbox2Id interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane.
    Gearbox2Lane []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane
}

func (gearbox2 *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2) GetEntityData() *types.CommonEntityData {
    gearbox2.EntityData.YFilter = gearbox2.YFilter
    gearbox2.EntityData.YangName = "gearbox2"
    gearbox2.EntityData.BundleName = "cisco_ios_xr"
    gearbox2.EntityData.ParentYangName = "slice"
    gearbox2.EntityData.SegmentPath = "gearbox2" + types.AddKeyToken(gearbox2.Gearbox2Id, "gearbox2_id")
    gearbox2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2.EntityData.Children = types.NewOrderedMap()
    gearbox2.EntityData.Children.Append("gearbox2_lane", types.YChild{"Gearbox2Lane", nil})
    for i := range gearbox2.Gearbox2Lane {
        gearbox2.EntityData.Children.Append(types.GetSegmentPath(gearbox2.Gearbox2Lane[i]), types.YChild{"Gearbox2Lane", gearbox2.Gearbox2Lane[i]})
    }
    gearbox2.EntityData.Leafs = types.NewOrderedMap()
    gearbox2.EntityData.Leafs.Append("gearbox2_id", types.YLeaf{"Gearbox2Id", gearbox2.Gearbox2Id})

    gearbox2.EntityData.YListKeys = []string {"Gearbox2Id"}

    return &(gearbox2.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-9].
    Gearbox2LaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (gearbox2Lane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane) GetEntityData() *types.CommonEntityData {
    gearbox2Lane.EntityData.YFilter = gearbox2Lane.YFilter
    gearbox2Lane.EntityData.YangName = "gearbox2_lane"
    gearbox2Lane.EntityData.BundleName = "cisco_ios_xr"
    gearbox2Lane.EntityData.ParentYangName = "gearbox2"
    gearbox2Lane.EntityData.SegmentPath = "gearbox2_lane" + types.AddKeyToken(gearbox2Lane.Gearbox2LaneId, "gearbox2_lane_id")
    gearbox2Lane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2Lane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2Lane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2Lane.EntityData.Children = types.NewOrderedMap()
    gearbox2Lane.EntityData.Leafs = types.NewOrderedMap()
    gearbox2Lane.EntityData.Leafs.Append("gearbox2_lane_id", types.YLeaf{"Gearbox2LaneId", gearbox2Lane.Gearbox2LaneId})
    gearbox2Lane.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", gearbox2Lane.IsDataAvailable})
    gearbox2Lane.EntityData.Leafs.Append("system_side_lanes", types.YLeaf{"SystemSideLanes", gearbox2Lane.SystemSideLanes})
    gearbox2Lane.EntityData.Leafs.Append("cdr_lock_status_caui", types.YLeaf{"CdrLockStatusCaui", gearbox2Lane.CdrLockStatusCaui})
    gearbox2Lane.EntityData.Leafs.Append("line_side_lanes", types.YLeaf{"LineSideLanes", gearbox2Lane.LineSideLanes})
    gearbox2Lane.EntityData.Leafs.Append("lane_status_cdr", types.YLeaf{"LaneStatusCdr", gearbox2Lane.LaneStatusCdr})
    gearbox2Lane.EntityData.Leafs.Append("lane_status_sig", types.YLeaf{"LaneStatusSig", gearbox2Lane.LaneStatusSig})
    gearbox2Lane.EntityData.Leafs.Append("los_status", types.YLeaf{"LosStatus", gearbox2Lane.LosStatus})
    gearbox2Lane.EntityData.Leafs.Append("system_side_loopback", types.YLeaf{"SystemSideLoopback", gearbox2Lane.SystemSideLoopback})
    gearbox2Lane.EntityData.Leafs.Append("lane_side_loopback", types.YLeaf{"LaneSideLoopback", gearbox2Lane.LaneSideLoopback})

    gearbox2Lane.EntityData.YListKeys = []string {"Gearbox2LaneId"}

    return &(gearbox2Lane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-1].
    DualGearboxId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane.
    DualGearboxLane []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane
}

func (dualGearbox *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox) GetEntityData() *types.CommonEntityData {
    dualGearbox.EntityData.YFilter = dualGearbox.YFilter
    dualGearbox.EntityData.YangName = "dual_gearbox"
    dualGearbox.EntityData.BundleName = "cisco_ios_xr"
    dualGearbox.EntityData.ParentYangName = "slice"
    dualGearbox.EntityData.SegmentPath = "dual_gearbox" + types.AddKeyToken(dualGearbox.DualGearboxId, "dual_gearbox_id")
    dualGearbox.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearbox.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearbox.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearbox.EntityData.Children = types.NewOrderedMap()
    dualGearbox.EntityData.Children.Append("dual_gearbox_lane", types.YChild{"DualGearboxLane", nil})
    for i := range dualGearbox.DualGearboxLane {
        dualGearbox.EntityData.Children.Append(types.GetSegmentPath(dualGearbox.DualGearboxLane[i]), types.YChild{"DualGearboxLane", dualGearbox.DualGearboxLane[i]})
    }
    dualGearbox.EntityData.Leafs = types.NewOrderedMap()
    dualGearbox.EntityData.Leafs.Append("dual_gearbox_id", types.YLeaf{"DualGearboxId", dualGearbox.DualGearboxId})

    dualGearbox.EntityData.YListKeys = []string {"DualGearboxId"}

    return &(dualGearbox.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-9].
    DualGearboxLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (dualGearboxLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane) GetEntityData() *types.CommonEntityData {
    dualGearboxLane.EntityData.YFilter = dualGearboxLane.YFilter
    dualGearboxLane.EntityData.YangName = "dual_gearbox_lane"
    dualGearboxLane.EntityData.BundleName = "cisco_ios_xr"
    dualGearboxLane.EntityData.ParentYangName = "dual_gearbox"
    dualGearboxLane.EntityData.SegmentPath = "dual_gearbox_lane" + types.AddKeyToken(dualGearboxLane.DualGearboxLaneId, "dual_gearbox_lane_id")
    dualGearboxLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearboxLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearboxLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearboxLane.EntityData.Children = types.NewOrderedMap()
    dualGearboxLane.EntityData.Leafs = types.NewOrderedMap()
    dualGearboxLane.EntityData.Leafs.Append("dual_gearbox_lane_id", types.YLeaf{"DualGearboxLaneId", dualGearboxLane.DualGearboxLaneId})
    dualGearboxLane.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", dualGearboxLane.IsDataAvailable})
    dualGearboxLane.EntityData.Leafs.Append("system_side_lanes", types.YLeaf{"SystemSideLanes", dualGearboxLane.SystemSideLanes})
    dualGearboxLane.EntityData.Leafs.Append("cdr_lock_status_caui", types.YLeaf{"CdrLockStatusCaui", dualGearboxLane.CdrLockStatusCaui})
    dualGearboxLane.EntityData.Leafs.Append("line_side_lanes", types.YLeaf{"LineSideLanes", dualGearboxLane.LineSideLanes})
    dualGearboxLane.EntityData.Leafs.Append("lane_status_cdr", types.YLeaf{"LaneStatusCdr", dualGearboxLane.LaneStatusCdr})
    dualGearboxLane.EntityData.Leafs.Append("lane_status_sig", types.YLeaf{"LaneStatusSig", dualGearboxLane.LaneStatusSig})
    dualGearboxLane.EntityData.Leafs.Append("los_status", types.YLeaf{"LosStatus", dualGearboxLane.LosStatus})
    dualGearboxLane.EntityData.Leafs.Append("system_side_loopback", types.YLeaf{"SystemSideLoopback", dualGearboxLane.SystemSideLoopback})
    dualGearboxLane.EntityData.Leafs.Append("lane_side_loopback", types.YLeaf{"LaneSideLoopback", dualGearboxLane.LaneSideLoopback})

    dualGearboxLane.EntityData.YListKeys = []string {"DualGearboxLaneId"}

    return &(dualGearboxLane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-3].
    CpakId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    Csignature interface{}

    // The type is bool. The default value is false.
    Cready interface{}

    // The type is bool. The default value is false.
    Cpassive interface{}

    // The type is interface{} with range: 0..255.
    ChwVerMajor interface{}

    // The type is interface{} with range: 0..255.
    ChwVerMinor interface{}

    // The type is string.
    Copaque interface{}

    // The type is string.
    Cnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Cslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Cport interface{}

    // The type is interface{} with range: 0..255.
    CprtAddr interface{}

    // The type is interface{} with range: 0..255.
    CdevAddr interface{}

    // The type is interface{} with range: 0..255.
    CdevSel interface{}

    // The type is interface{} with range: 0..255.
    CupgradeInprogress interface{}

    // The type is string.
    CopticsType interface{}

    // The type is string.
    CctraceErrHdl interface{}

    // The type is string.
    CctraceEvtHdl interface{}

    // The type is string.
    Cnext interface{}

    // The type is string.
    Cparent interface{}

    // The type is string.
    CrunningImage interface{}

    // The type is string.
    CcommittedImage interface{}
}

func (cpak *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak) GetEntityData() *types.CommonEntityData {
    cpak.EntityData.YFilter = cpak.YFilter
    cpak.EntityData.YangName = "cpak"
    cpak.EntityData.BundleName = "cisco_ios_xr"
    cpak.EntityData.ParentYangName = "slice"
    cpak.EntityData.SegmentPath = "cpak" + types.AddKeyToken(cpak.CpakId, "cpak_id")
    cpak.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpak.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpak.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpak.EntityData.Children = types.NewOrderedMap()
    cpak.EntityData.Leafs = types.NewOrderedMap()
    cpak.EntityData.Leafs.Append("cpak_id", types.YLeaf{"CpakId", cpak.CpakId})
    cpak.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", cpak.IsDataAvailable})
    cpak.EntityData.Leafs.Append("csignature", types.YLeaf{"Csignature", cpak.Csignature})
    cpak.EntityData.Leafs.Append("cready", types.YLeaf{"Cready", cpak.Cready})
    cpak.EntityData.Leafs.Append("cpassive", types.YLeaf{"Cpassive", cpak.Cpassive})
    cpak.EntityData.Leafs.Append("chw_ver_major", types.YLeaf{"ChwVerMajor", cpak.ChwVerMajor})
    cpak.EntityData.Leafs.Append("chw_ver_minor", types.YLeaf{"ChwVerMinor", cpak.ChwVerMinor})
    cpak.EntityData.Leafs.Append("copaque", types.YLeaf{"Copaque", cpak.Copaque})
    cpak.EntityData.Leafs.Append("cnodeid", types.YLeaf{"Cnodeid", cpak.Cnodeid})
    cpak.EntityData.Leafs.Append("cslice", types.YLeaf{"Cslice", cpak.Cslice})
    cpak.EntityData.Leafs.Append("cport", types.YLeaf{"Cport", cpak.Cport})
    cpak.EntityData.Leafs.Append("cprt_addr", types.YLeaf{"CprtAddr", cpak.CprtAddr})
    cpak.EntityData.Leafs.Append("cdev_addr", types.YLeaf{"CdevAddr", cpak.CdevAddr})
    cpak.EntityData.Leafs.Append("cdev_sel", types.YLeaf{"CdevSel", cpak.CdevSel})
    cpak.EntityData.Leafs.Append("cupgrade_inprogress", types.YLeaf{"CupgradeInprogress", cpak.CupgradeInprogress})
    cpak.EntityData.Leafs.Append("coptics_type", types.YLeaf{"CopticsType", cpak.CopticsType})
    cpak.EntityData.Leafs.Append("cctrace_err_hdl", types.YLeaf{"CctraceErrHdl", cpak.CctraceErrHdl})
    cpak.EntityData.Leafs.Append("cctrace_evt_hdl", types.YLeaf{"CctraceEvtHdl", cpak.CctraceEvtHdl})
    cpak.EntityData.Leafs.Append("cnext", types.YLeaf{"Cnext", cpak.Cnext})
    cpak.EntityData.Leafs.Append("cparent", types.YLeaf{"Cparent", cpak.Cparent})
    cpak.EntityData.Leafs.Append("crunning_image", types.YLeaf{"CrunningImage", cpak.CrunningImage})
    cpak.EntityData.Leafs.Append("ccommitted_image", types.YLeaf{"CcommittedImage", cpak.CcommittedImage})

    cpak.EntityData.YListKeys = []string {"CpakId"}

    return &(cpak.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-19].
    ModenaId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Mready interface{}

    // The type is string.
    MportCtxP interface{}

    // The type is string.
    Mlevm interface{}

    // The type is string.
    MctraceErrHdl interface{}

    // The type is string.
    MctraceEvtHdl interface{}

    // The type is string.
    Msignature interface{}

    // The type is bool. The default value is false.
    MlpcReady interface{}

    // The type is string.
    Mopaque interface{}

    // The type is string.
    Mnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Mslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Mport interface{}

    // The type is interface{} with range: 0..255.
    MdevAddr interface{}

    // The type is string.
    MrdFunc interface{}

    // The type is string.
    MwrFunc interface{}

    // The type is string.
    Mnext interface{}
}

func (modenaSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary) GetEntityData() *types.CommonEntityData {
    modenaSummary.EntityData.YFilter = modenaSummary.YFilter
    modenaSummary.EntityData.YangName = "modena_summary"
    modenaSummary.EntityData.BundleName = "cisco_ios_xr"
    modenaSummary.EntityData.ParentYangName = "slice"
    modenaSummary.EntityData.SegmentPath = "modena_summary" + types.AddKeyToken(modenaSummary.ModenaId, "modena_id")
    modenaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modenaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modenaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modenaSummary.EntityData.Children = types.NewOrderedMap()
    modenaSummary.EntityData.Leafs = types.NewOrderedMap()
    modenaSummary.EntityData.Leafs.Append("modena_id", types.YLeaf{"ModenaId", modenaSummary.ModenaId})
    modenaSummary.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", modenaSummary.IsDataAvailable})
    modenaSummary.EntityData.Leafs.Append("mready", types.YLeaf{"Mready", modenaSummary.Mready})
    modenaSummary.EntityData.Leafs.Append("mport_ctx_p", types.YLeaf{"MportCtxP", modenaSummary.MportCtxP})
    modenaSummary.EntityData.Leafs.Append("mlevm", types.YLeaf{"Mlevm", modenaSummary.Mlevm})
    modenaSummary.EntityData.Leafs.Append("mctrace_err_hdl", types.YLeaf{"MctraceErrHdl", modenaSummary.MctraceErrHdl})
    modenaSummary.EntityData.Leafs.Append("mctrace_evt_hdl", types.YLeaf{"MctraceEvtHdl", modenaSummary.MctraceEvtHdl})
    modenaSummary.EntityData.Leafs.Append("msignature", types.YLeaf{"Msignature", modenaSummary.Msignature})
    modenaSummary.EntityData.Leafs.Append("mlpc_ready", types.YLeaf{"MlpcReady", modenaSummary.MlpcReady})
    modenaSummary.EntityData.Leafs.Append("mopaque", types.YLeaf{"Mopaque", modenaSummary.Mopaque})
    modenaSummary.EntityData.Leafs.Append("mnodeid", types.YLeaf{"Mnodeid", modenaSummary.Mnodeid})
    modenaSummary.EntityData.Leafs.Append("mslice", types.YLeaf{"Mslice", modenaSummary.Mslice})
    modenaSummary.EntityData.Leafs.Append("mport", types.YLeaf{"Mport", modenaSummary.Mport})
    modenaSummary.EntityData.Leafs.Append("mdev_addr", types.YLeaf{"MdevAddr", modenaSummary.MdevAddr})
    modenaSummary.EntityData.Leafs.Append("mrd_func", types.YLeaf{"MrdFunc", modenaSummary.MrdFunc})
    modenaSummary.EntityData.Leafs.Append("mwr_func", types.YLeaf{"MwrFunc", modenaSummary.MwrFunc})
    modenaSummary.EntityData.Leafs.Append("mnext", types.YLeaf{"Mnext", modenaSummary.Mnext})

    modenaSummary.EntityData.YListKeys = []string {"ModenaId"}

    return &(modenaSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-19].
    ModenaId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane.
    ModenaLane []*Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane
}

func (modena *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena) GetEntityData() *types.CommonEntityData {
    modena.EntityData.YFilter = modena.YFilter
    modena.EntityData.YangName = "modena"
    modena.EntityData.BundleName = "cisco_ios_xr"
    modena.EntityData.ParentYangName = "slice"
    modena.EntityData.SegmentPath = "modena" + types.AddKeyToken(modena.ModenaId, "modena_id")
    modena.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modena.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modena.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modena.EntityData.Children = types.NewOrderedMap()
    modena.EntityData.Children.Append("modena_lane", types.YChild{"ModenaLane", nil})
    for i := range modena.ModenaLane {
        modena.EntityData.Children.Append(types.GetSegmentPath(modena.ModenaLane[i]), types.YChild{"ModenaLane", modena.ModenaLane[i]})
    }
    modena.EntityData.Leafs = types.NewOrderedMap()
    modena.EntityData.Leafs.Append("modena_id", types.YLeaf{"ModenaId", modena.ModenaId})

    modena.EntityData.YListKeys = []string {"ModenaId"}

    return &(modena.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-3].
    ModenaLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    OperMode interface{}
}

func (modenaLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane) GetEntityData() *types.CommonEntityData {
    modenaLane.EntityData.YFilter = modenaLane.YFilter
    modenaLane.EntityData.YangName = "modena_lane"
    modenaLane.EntityData.BundleName = "cisco_ios_xr"
    modenaLane.EntityData.ParentYangName = "modena"
    modenaLane.EntityData.SegmentPath = "modena_lane" + types.AddKeyToken(modenaLane.ModenaLaneId, "modena_lane_id")
    modenaLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modenaLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modenaLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modenaLane.EntityData.Children = types.NewOrderedMap()
    modenaLane.EntityData.Leafs = types.NewOrderedMap()
    modenaLane.EntityData.Leafs.Append("modena_lane_id", types.YLeaf{"ModenaLaneId", modenaLane.ModenaLaneId})
    modenaLane.EntityData.Leafs.Append("is_data_available", types.YLeaf{"IsDataAvailable", modenaLane.IsDataAvailable})
    modenaLane.EntityData.Leafs.Append("oper_mode", types.YLeaf{"OperMode", modenaLane.OperMode})

    modenaLane.EntityData.YListKeys = []string {"ModenaLaneId"}

    return &(modenaLane.EntityData)
}

// Controller_Zen
type Controller_Zen struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenOper Controller_Zen_ZenOper

    // show traceable processes. The type is slice of Controller_Zen_Trace.
    Trace []*Controller_Zen_Trace
}

func (zen *Controller_Zen) GetEntityData() *types.CommonEntityData {
    zen.EntityData.YFilter = zen.YFilter
    zen.EntityData.YangName = "zen"
    zen.EntityData.BundleName = "cisco_ios_xr"
    zen.EntityData.ParentYangName = "controller"
    zen.EntityData.SegmentPath = "zen"
    zen.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zen.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zen.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zen.EntityData.Children = types.NewOrderedMap()
    zen.EntityData.Children.Append("zen_oper", types.YChild{"ZenOper", &zen.ZenOper})
    zen.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range zen.Trace {
        zen.EntityData.Children.Append(types.GetSegmentPath(zen.Trace[i]), types.YChild{"Trace", zen.Trace[i]})
    }
    zen.EntityData.Leafs = types.NewOrderedMap()

    zen.EntityData.YListKeys = []string {}

    return &(zen.EntityData)
}

// Controller_Zen_ZenOper
type Controller_Zen_ZenOper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Zen_ZenOper_ZenLocation.
    ZenLocation []*Controller_Zen_ZenOper_ZenLocation
}

func (zenOper *Controller_Zen_ZenOper) GetEntityData() *types.CommonEntityData {
    zenOper.EntityData.YFilter = zenOper.YFilter
    zenOper.EntityData.YangName = "zen_oper"
    zenOper.EntityData.BundleName = "cisco_ios_xr"
    zenOper.EntityData.ParentYangName = "zen"
    zenOper.EntityData.SegmentPath = "zen_oper"
    zenOper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenOper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenOper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenOper.EntityData.Children = types.NewOrderedMap()
    zenOper.EntityData.Children.Append("zen_location", types.YChild{"ZenLocation", nil})
    for i := range zenOper.ZenLocation {
        zenOper.EntityData.Children.Append(types.GetSegmentPath(zenOper.ZenLocation[i]), types.YChild{"ZenLocation", zenOper.ZenLocation[i]})
    }
    zenOper.EntityData.Leafs = types.NewOrderedMap()

    zenOper.EntityData.YListKeys = []string {}

    return &(zenOper.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation
type Controller_Zen_ZenOper_ZenLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ZenLocation interface{}

    // The type is string.
    ZenPciBaseAddress interface{}

    // The type is string.
    ZenPciDevVendorId interface{}

    // The type is string.
    ZenPciDevDeviceId interface{}

    // The type is string.
    ZenHpDesc interface{}

    // The type is string.
    ZenHandle interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenMsi interface{}

    // The type is string.
    ZenIrq interface{}

    // The type is string.
    ZenRegs interface{}

    // The type is string.
    ZenTrace interface{}

    // The type is string.
    ZenLevm interface{}

    // The type is string.
    ZenSensorPollTimerTree interface{}

    // The type is string.
    ZenSensorPollTimer interface{}

    // The type is string.
    ZenSensorData interface{}

    // The type is bool. The default value is false.
    ZenSim interface{}

    // The type is bool. The default value is false.
    ZenDebug interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenSlotNum interface{}

    // The type is string.
    ZenPmHdl interface{}

    // The type is string.
    ZenHdl interface{}

    // The type is string.
    ZenCccHdl interface{}

    // The type is string.
    ZenPlatformLocalHdl interface{}

    // The type is string.
    ZenCduiSrvrHdl interface{}

    
    ZenTempSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault

    
    ZenVoltSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault

    
    ZenCurrSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault
}

func (zenLocation *Controller_Zen_ZenOper_ZenLocation) GetEntityData() *types.CommonEntityData {
    zenLocation.EntityData.YFilter = zenLocation.YFilter
    zenLocation.EntityData.YangName = "zen_location"
    zenLocation.EntityData.BundleName = "cisco_ios_xr"
    zenLocation.EntityData.ParentYangName = "zen_oper"
    zenLocation.EntityData.SegmentPath = "zen_location" + types.AddKeyToken(zenLocation.ZenLocation, "zen_location")
    zenLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenLocation.EntityData.Children = types.NewOrderedMap()
    zenLocation.EntityData.Children.Append("zen_temp_sensor_default", types.YChild{"ZenTempSensorDefault", &zenLocation.ZenTempSensorDefault})
    zenLocation.EntityData.Children.Append("zen_volt_sensor_default", types.YChild{"ZenVoltSensorDefault", &zenLocation.ZenVoltSensorDefault})
    zenLocation.EntityData.Children.Append("zen_curr_sensor_default", types.YChild{"ZenCurrSensorDefault", &zenLocation.ZenCurrSensorDefault})
    zenLocation.EntityData.Leafs = types.NewOrderedMap()
    zenLocation.EntityData.Leafs.Append("zen_location", types.YLeaf{"ZenLocation", zenLocation.ZenLocation})
    zenLocation.EntityData.Leafs.Append("zen_pci_base_address", types.YLeaf{"ZenPciBaseAddress", zenLocation.ZenPciBaseAddress})
    zenLocation.EntityData.Leafs.Append("zen_pci_dev_vendor_id", types.YLeaf{"ZenPciDevVendorId", zenLocation.ZenPciDevVendorId})
    zenLocation.EntityData.Leafs.Append("zen_pci_dev_device_id", types.YLeaf{"ZenPciDevDeviceId", zenLocation.ZenPciDevDeviceId})
    zenLocation.EntityData.Leafs.Append("zen_hp_desc", types.YLeaf{"ZenHpDesc", zenLocation.ZenHpDesc})
    zenLocation.EntityData.Leafs.Append("zen_handle", types.YLeaf{"ZenHandle", zenLocation.ZenHandle})
    zenLocation.EntityData.Leafs.Append("zen_msi", types.YLeaf{"ZenMsi", zenLocation.ZenMsi})
    zenLocation.EntityData.Leafs.Append("zen_irq", types.YLeaf{"ZenIrq", zenLocation.ZenIrq})
    zenLocation.EntityData.Leafs.Append("zen_regs", types.YLeaf{"ZenRegs", zenLocation.ZenRegs})
    zenLocation.EntityData.Leafs.Append("zen_trace", types.YLeaf{"ZenTrace", zenLocation.ZenTrace})
    zenLocation.EntityData.Leafs.Append("zen_levm", types.YLeaf{"ZenLevm", zenLocation.ZenLevm})
    zenLocation.EntityData.Leafs.Append("zen_sensor_poll_timer_tree", types.YLeaf{"ZenSensorPollTimerTree", zenLocation.ZenSensorPollTimerTree})
    zenLocation.EntityData.Leafs.Append("zen_sensor_poll_timer", types.YLeaf{"ZenSensorPollTimer", zenLocation.ZenSensorPollTimer})
    zenLocation.EntityData.Leafs.Append("zen_sensor_data", types.YLeaf{"ZenSensorData", zenLocation.ZenSensorData})
    zenLocation.EntityData.Leafs.Append("zen_sim", types.YLeaf{"ZenSim", zenLocation.ZenSim})
    zenLocation.EntityData.Leafs.Append("zen_debug", types.YLeaf{"ZenDebug", zenLocation.ZenDebug})
    zenLocation.EntityData.Leafs.Append("zen_card_type", types.YLeaf{"ZenCardType", zenLocation.ZenCardType})
    zenLocation.EntityData.Leafs.Append("zen_slot_num", types.YLeaf{"ZenSlotNum", zenLocation.ZenSlotNum})
    zenLocation.EntityData.Leafs.Append("zen_pm_hdl", types.YLeaf{"ZenPmHdl", zenLocation.ZenPmHdl})
    zenLocation.EntityData.Leafs.Append("zen_hdl", types.YLeaf{"ZenHdl", zenLocation.ZenHdl})
    zenLocation.EntityData.Leafs.Append("zen_ccc_hdl", types.YLeaf{"ZenCccHdl", zenLocation.ZenCccHdl})
    zenLocation.EntityData.Leafs.Append("zen_platform_local_hdl", types.YLeaf{"ZenPlatformLocalHdl", zenLocation.ZenPlatformLocalHdl})
    zenLocation.EntityData.Leafs.Append("zen_cdui_srvr_hdl", types.YLeaf{"ZenCduiSrvrHdl", zenLocation.ZenCduiSrvrHdl})

    zenLocation.EntityData.YListKeys = []string {"ZenLocation"}

    return &(zenLocation.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenTempSensorData Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData
}

func (zenTempSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault) GetEntityData() *types.CommonEntityData {
    zenTempSensorDefault.EntityData.YFilter = zenTempSensorDefault.YFilter
    zenTempSensorDefault.EntityData.YangName = "zen_temp_sensor_default"
    zenTempSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensorDefault.EntityData.ParentYangName = "zen_location"
    zenTempSensorDefault.EntityData.SegmentPath = "zen_temp_sensor_default"
    zenTempSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensorDefault.EntityData.Children = types.NewOrderedMap()
    zenTempSensorDefault.EntityData.Children.Append("zen_temp_sensor_data", types.YChild{"ZenTempSensorData", &zenTempSensorDefault.ZenTempSensorData})
    zenTempSensorDefault.EntityData.Leafs = types.NewOrderedMap()

    zenTempSensorDefault.EntityData.YListKeys = []string {}

    return &(zenTempSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor.
    ZenTempSensor []*Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor
}

func (zenTempSensorData *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData) GetEntityData() *types.CommonEntityData {
    zenTempSensorData.EntityData.YFilter = zenTempSensorData.YFilter
    zenTempSensorData.EntityData.YangName = "zen_temp_sensor_data"
    zenTempSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensorData.EntityData.ParentYangName = "zen_temp_sensor_default"
    zenTempSensorData.EntityData.SegmentPath = "zen_temp_sensor_data"
    zenTempSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensorData.EntityData.Children = types.NewOrderedMap()
    zenTempSensorData.EntityData.Children.Append("zen_temp_sensor", types.YChild{"ZenTempSensor", nil})
    for i := range zenTempSensorData.ZenTempSensor {
        zenTempSensorData.EntityData.Children.Append(types.GetSegmentPath(zenTempSensorData.ZenTempSensor[i]), types.YChild{"ZenTempSensor", zenTempSensorData.ZenTempSensor[i]})
    }
    zenTempSensorData.EntityData.Leafs = types.NewOrderedMap()

    zenTempSensorData.EntityData.YListKeys = []string {}

    return &(zenTempSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-4].
    ZenTempSensor interface{}

    // The type is string.
    ZenTempSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempLastValue interface{}

    // The type is bool. The default value is false.
    ZenTempSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempNum1secIntervals interface{}
}

func (zenTempSensor *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor) GetEntityData() *types.CommonEntityData {
    zenTempSensor.EntityData.YFilter = zenTempSensor.YFilter
    zenTempSensor.EntityData.YangName = "zen_temp_sensor"
    zenTempSensor.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensor.EntityData.ParentYangName = "zen_temp_sensor_data"
    zenTempSensor.EntityData.SegmentPath = "zen_temp_sensor" + types.AddKeyToken(zenTempSensor.ZenTempSensor, "zen_temp_sensor")
    zenTempSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensor.EntityData.Children = types.NewOrderedMap()
    zenTempSensor.EntityData.Leafs = types.NewOrderedMap()
    zenTempSensor.EntityData.Leafs.Append("zen_temp_sensor", types.YLeaf{"ZenTempSensor", zenTempSensor.ZenTempSensor})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_sensor_id", types.YLeaf{"ZenTempSensorId", zenTempSensor.ZenTempSensorId})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_dev_addr", types.YLeaf{"ZenTempDevAddr", zenTempSensor.ZenTempDevAddr})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_poll_intvl", types.YLeaf{"ZenTempPollIntvl", zenTempSensor.ZenTempPollIntvl})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_delta", types.YLeaf{"ZenTempDelta", zenTempSensor.ZenTempDelta})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_raw_data", types.YLeaf{"ZenTempRawData", zenTempSensor.ZenTempRawData})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_sensor_value", types.YLeaf{"ZenTempSensorValue", zenTempSensor.ZenTempSensorValue})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_unit", types.YLeaf{"ZenTempUnit", zenTempSensor.ZenTempUnit})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_last_value", types.YLeaf{"ZenTempLastValue", zenTempSensor.ZenTempLastValue})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_send_update", types.YLeaf{"ZenTempSendUpdate", zenTempSensor.ZenTempSendUpdate})
    zenTempSensor.EntityData.Leafs.Append("zen_temp_num_1sec_intervals", types.YLeaf{"ZenTempNum1secIntervals", zenTempSensor.ZenTempNum1secIntervals})

    zenTempSensor.EntityData.YListKeys = []string {"ZenTempSensor"}

    return &(zenTempSensor.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenVoltSensorData Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData
}

func (zenVoltSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault) GetEntityData() *types.CommonEntityData {
    zenVoltSensorDefault.EntityData.YFilter = zenVoltSensorDefault.YFilter
    zenVoltSensorDefault.EntityData.YangName = "zen_volt_sensor_default"
    zenVoltSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensorDefault.EntityData.ParentYangName = "zen_location"
    zenVoltSensorDefault.EntityData.SegmentPath = "zen_volt_sensor_default"
    zenVoltSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensorDefault.EntityData.Children = types.NewOrderedMap()
    zenVoltSensorDefault.EntityData.Children.Append("zen_volt_sensor_data", types.YChild{"ZenVoltSensorData", &zenVoltSensorDefault.ZenVoltSensorData})
    zenVoltSensorDefault.EntityData.Leafs = types.NewOrderedMap()

    zenVoltSensorDefault.EntityData.YListKeys = []string {}

    return &(zenVoltSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor.
    ZenVoltSensor []*Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor
}

func (zenVoltSensorData *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData) GetEntityData() *types.CommonEntityData {
    zenVoltSensorData.EntityData.YFilter = zenVoltSensorData.YFilter
    zenVoltSensorData.EntityData.YangName = "zen_volt_sensor_data"
    zenVoltSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensorData.EntityData.ParentYangName = "zen_volt_sensor_default"
    zenVoltSensorData.EntityData.SegmentPath = "zen_volt_sensor_data"
    zenVoltSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensorData.EntityData.Children = types.NewOrderedMap()
    zenVoltSensorData.EntityData.Children.Append("zen_volt_sensor", types.YChild{"ZenVoltSensor", nil})
    for i := range zenVoltSensorData.ZenVoltSensor {
        zenVoltSensorData.EntityData.Children.Append(types.GetSegmentPath(zenVoltSensorData.ZenVoltSensor[i]), types.YChild{"ZenVoltSensor", zenVoltSensorData.ZenVoltSensor[i]})
    }
    zenVoltSensorData.EntityData.Leafs = types.NewOrderedMap()

    zenVoltSensorData.EntityData.YListKeys = []string {}

    return &(zenVoltSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..17.
    ZenVoltSensor interface{}

    // The type is string.
    ZenVoltSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltLastValue interface{}

    // The type is bool. The default value is false.
    ZenVoltSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltNum1secIntervals interface{}
}

func (zenVoltSensor *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor) GetEntityData() *types.CommonEntityData {
    zenVoltSensor.EntityData.YFilter = zenVoltSensor.YFilter
    zenVoltSensor.EntityData.YangName = "zen_volt_sensor"
    zenVoltSensor.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensor.EntityData.ParentYangName = "zen_volt_sensor_data"
    zenVoltSensor.EntityData.SegmentPath = "zen_volt_sensor" + types.AddKeyToken(zenVoltSensor.ZenVoltSensor, "zen_volt_sensor")
    zenVoltSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensor.EntityData.Children = types.NewOrderedMap()
    zenVoltSensor.EntityData.Leafs = types.NewOrderedMap()
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_sensor", types.YLeaf{"ZenVoltSensor", zenVoltSensor.ZenVoltSensor})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_sensor_id", types.YLeaf{"ZenVoltSensorId", zenVoltSensor.ZenVoltSensorId})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_dev_addr", types.YLeaf{"ZenVoltDevAddr", zenVoltSensor.ZenVoltDevAddr})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_poll_intvl", types.YLeaf{"ZenVoltPollIntvl", zenVoltSensor.ZenVoltPollIntvl})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_delta", types.YLeaf{"ZenVoltDelta", zenVoltSensor.ZenVoltDelta})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_raw_data", types.YLeaf{"ZenVoltRawData", zenVoltSensor.ZenVoltRawData})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_sensor_value", types.YLeaf{"ZenVoltSensorValue", zenVoltSensor.ZenVoltSensorValue})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_unit", types.YLeaf{"ZenVoltUnit", zenVoltSensor.ZenVoltUnit})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_last_value", types.YLeaf{"ZenVoltLastValue", zenVoltSensor.ZenVoltLastValue})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_send_update", types.YLeaf{"ZenVoltSendUpdate", zenVoltSensor.ZenVoltSendUpdate})
    zenVoltSensor.EntityData.Leafs.Append("zen_volt_num_1sec_intervals", types.YLeaf{"ZenVoltNum1secIntervals", zenVoltSensor.ZenVoltNum1secIntervals})

    zenVoltSensor.EntityData.YListKeys = []string {"ZenVoltSensor"}

    return &(zenVoltSensor.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenCurrSensorData Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData
}

func (zenCurrSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault) GetEntityData() *types.CommonEntityData {
    zenCurrSensorDefault.EntityData.YFilter = zenCurrSensorDefault.YFilter
    zenCurrSensorDefault.EntityData.YangName = "zen_curr_sensor_default"
    zenCurrSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensorDefault.EntityData.ParentYangName = "zen_location"
    zenCurrSensorDefault.EntityData.SegmentPath = "zen_curr_sensor_default"
    zenCurrSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensorDefault.EntityData.Children = types.NewOrderedMap()
    zenCurrSensorDefault.EntityData.Children.Append("zen_curr_sensor_data", types.YChild{"ZenCurrSensorData", &zenCurrSensorDefault.ZenCurrSensorData})
    zenCurrSensorDefault.EntityData.Leafs = types.NewOrderedMap()

    zenCurrSensorDefault.EntityData.YListKeys = []string {}

    return &(zenCurrSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor.
    ZenCurrSensor []*Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor
}

func (zenCurrSensorData *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData) GetEntityData() *types.CommonEntityData {
    zenCurrSensorData.EntityData.YFilter = zenCurrSensorData.YFilter
    zenCurrSensorData.EntityData.YangName = "zen_curr_sensor_data"
    zenCurrSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensorData.EntityData.ParentYangName = "zen_curr_sensor_default"
    zenCurrSensorData.EntityData.SegmentPath = "zen_curr_sensor_data"
    zenCurrSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensorData.EntityData.Children = types.NewOrderedMap()
    zenCurrSensorData.EntityData.Children.Append("zen_curr_sensor", types.YChild{"ZenCurrSensor", nil})
    for i := range zenCurrSensorData.ZenCurrSensor {
        zenCurrSensorData.EntityData.Children.Append(types.GetSegmentPath(zenCurrSensorData.ZenCurrSensor[i]), types.YChild{"ZenCurrSensor", zenCurrSensorData.ZenCurrSensor[i]})
    }
    zenCurrSensorData.EntityData.Leafs = types.NewOrderedMap()

    zenCurrSensorData.EntityData.YListKeys = []string {}

    return &(zenCurrSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: all|[0-8].
    ZenCurrSensor interface{}

    // The type is string.
    ZenCurrSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrLastValue interface{}

    // The type is bool. The default value is false.
    ZenCurrSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrNum1secIntervals interface{}
}

func (zenCurrSensor *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor) GetEntityData() *types.CommonEntityData {
    zenCurrSensor.EntityData.YFilter = zenCurrSensor.YFilter
    zenCurrSensor.EntityData.YangName = "zen_curr_sensor"
    zenCurrSensor.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensor.EntityData.ParentYangName = "zen_curr_sensor_data"
    zenCurrSensor.EntityData.SegmentPath = "zen_curr_sensor" + types.AddKeyToken(zenCurrSensor.ZenCurrSensor, "zen_curr_sensor")
    zenCurrSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensor.EntityData.Children = types.NewOrderedMap()
    zenCurrSensor.EntityData.Leafs = types.NewOrderedMap()
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_sensor", types.YLeaf{"ZenCurrSensor", zenCurrSensor.ZenCurrSensor})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_sensor_id", types.YLeaf{"ZenCurrSensorId", zenCurrSensor.ZenCurrSensorId})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_dev_addr", types.YLeaf{"ZenCurrDevAddr", zenCurrSensor.ZenCurrDevAddr})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_poll_intvl", types.YLeaf{"ZenCurrPollIntvl", zenCurrSensor.ZenCurrPollIntvl})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_delta", types.YLeaf{"ZenCurrDelta", zenCurrSensor.ZenCurrDelta})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_raw_data", types.YLeaf{"ZenCurrRawData", zenCurrSensor.ZenCurrRawData})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_sensor_value", types.YLeaf{"ZenCurrSensorValue", zenCurrSensor.ZenCurrSensorValue})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_unit", types.YLeaf{"ZenCurrUnit", zenCurrSensor.ZenCurrUnit})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_last_value", types.YLeaf{"ZenCurrLastValue", zenCurrSensor.ZenCurrLastValue})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_send_update", types.YLeaf{"ZenCurrSendUpdate", zenCurrSensor.ZenCurrSendUpdate})
    zenCurrSensor.EntityData.Leafs.Append("zen_curr_num_1sec_intervals", types.YLeaf{"ZenCurrNum1secIntervals", zenCurrSensor.ZenCurrNum1secIntervals})

    zenCurrSensor.EntityData.YListKeys = []string {"ZenCurrSensor"}

    return &(zenCurrSensor.EntityData)
}

// Controller_Zen_Trace
// show traceable processes
type Controller_Zen_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Zen_Trace_Location.
    Location []*Controller_Zen_Trace_Location
}

func (trace *Controller_Zen_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "zen"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Zen_Trace_Location
type Controller_Zen_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_Zen_Trace_Location_AllOptions.
    AllOptions []*Controller_Zen_Trace_Location_AllOptions
}

func (location *Controller_Zen_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Zen_Trace_Location_AllOptions
type Controller_Zen_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of Controller_Zen_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Zen_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Zen_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Zen_Trace_Location_AllOptions_TraceBlocks
type Controller_Zen_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Zen_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_CccDriver
type Controller_CccDriver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of Controller_CccDriver_Trace.
    Trace []*Controller_CccDriver_Trace

    
    Bootflash Controller_CccDriver_Bootflash

    
    Inventory Controller_CccDriver_Inventory

    
    Power Controller_CccDriver_Power

    
    ResetHistory Controller_CccDriver_ResetHistory

    
    Register Controller_CccDriver_Register

    
    Ejector Controller_CccDriver_Ejector

    
    I2cDev Controller_CccDriver_I2cDev

    
    Ethernet Controller_CccDriver_Ethernet

    
    EventHistory Controller_CccDriver_EventHistory

    
    OirHistory Controller_CccDriver_OirHistory

    
    NotifHistory Controller_CccDriver_NotifHistory

    
    Slave Controller_CccDriver_Slave

    
    Action Controller_CccDriver_Action
}

func (cccDriver *Controller_CccDriver) GetEntityData() *types.CommonEntityData {
    cccDriver.EntityData.YFilter = cccDriver.YFilter
    cccDriver.EntityData.YangName = "ccc_driver"
    cccDriver.EntityData.BundleName = "cisco_ios_xr"
    cccDriver.EntityData.ParentYangName = "controller"
    cccDriver.EntityData.SegmentPath = "ccc_driver"
    cccDriver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccDriver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccDriver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccDriver.EntityData.Children = types.NewOrderedMap()
    cccDriver.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range cccDriver.Trace {
        cccDriver.EntityData.Children.Append(types.GetSegmentPath(cccDriver.Trace[i]), types.YChild{"Trace", cccDriver.Trace[i]})
    }
    cccDriver.EntityData.Children.Append("bootflash", types.YChild{"Bootflash", &cccDriver.Bootflash})
    cccDriver.EntityData.Children.Append("inventory", types.YChild{"Inventory", &cccDriver.Inventory})
    cccDriver.EntityData.Children.Append("power", types.YChild{"Power", &cccDriver.Power})
    cccDriver.EntityData.Children.Append("reset-history", types.YChild{"ResetHistory", &cccDriver.ResetHistory})
    cccDriver.EntityData.Children.Append("register", types.YChild{"Register", &cccDriver.Register})
    cccDriver.EntityData.Children.Append("ejector", types.YChild{"Ejector", &cccDriver.Ejector})
    cccDriver.EntityData.Children.Append("i2c-dev", types.YChild{"I2cDev", &cccDriver.I2cDev})
    cccDriver.EntityData.Children.Append("ethernet", types.YChild{"Ethernet", &cccDriver.Ethernet})
    cccDriver.EntityData.Children.Append("event-history", types.YChild{"EventHistory", &cccDriver.EventHistory})
    cccDriver.EntityData.Children.Append("oir-history", types.YChild{"OirHistory", &cccDriver.OirHistory})
    cccDriver.EntityData.Children.Append("notif-history", types.YChild{"NotifHistory", &cccDriver.NotifHistory})
    cccDriver.EntityData.Children.Append("slave", types.YChild{"Slave", &cccDriver.Slave})
    cccDriver.EntityData.Children.Append("action", types.YChild{"Action", &cccDriver.Action})
    cccDriver.EntityData.Leafs = types.NewOrderedMap()

    cccDriver.EntityData.YListKeys = []string {}

    return &(cccDriver.EntityData)
}

// Controller_CccDriver_Trace
// show traceable processes
type Controller_CccDriver_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_CccDriver_Trace_Location.
    Location []*Controller_CccDriver_Trace_Location
}

func (trace *Controller_CccDriver_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "ccc_driver"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_CccDriver_Trace_Location
type Controller_CccDriver_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_CccDriver_Trace_Location_AllOptions.
    AllOptions []*Controller_CccDriver_Trace_Location_AllOptions
}

func (location *Controller_CccDriver_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_CccDriver_Trace_Location_AllOptions
type Controller_CccDriver_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_CccDriver_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks
type Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_CccDriver_Bootflash
type Controller_CccDriver_Bootflash struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_CccDriver_Bootflash_Info

    
    Status Controller_CccDriver_Bootflash_Status

    
    CreStatus Controller_CccDriver_Bootflash_CreStatus
}

func (bootflash *Controller_CccDriver_Bootflash) GetEntityData() *types.CommonEntityData {
    bootflash.EntityData.YFilter = bootflash.YFilter
    bootflash.EntityData.YangName = "bootflash"
    bootflash.EntityData.BundleName = "cisco_ios_xr"
    bootflash.EntityData.ParentYangName = "ccc_driver"
    bootflash.EntityData.SegmentPath = "bootflash"
    bootflash.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bootflash.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bootflash.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bootflash.EntityData.Children = types.NewOrderedMap()
    bootflash.EntityData.Children.Append("info", types.YChild{"Info", &bootflash.Info})
    bootflash.EntityData.Children.Append("status", types.YChild{"Status", &bootflash.Status})
    bootflash.EntityData.Children.Append("cre_status", types.YChild{"CreStatus", &bootflash.CreStatus})
    bootflash.EntityData.Leafs = types.NewOrderedMap()

    bootflash.EntityData.YListKeys = []string {}

    return &(bootflash.EntityData)
}

// Controller_CccDriver_Bootflash_Info
type Controller_CccDriver_Bootflash_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_Info_Location.
    Location []*Controller_CccDriver_Bootflash_Info_Location
}

func (info *Controller_CccDriver_Bootflash_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "bootflash"
    info.EntityData.SegmentPath = "info"
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = types.NewOrderedMap()
    info.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range info.Location {
        info.EntityData.Children.Append(types.GetSegmentPath(info.Location[i]), types.YChild{"Location", info.Location[i]})
    }
    info.EntityData.Leafs = types.NewOrderedMap()

    info.EntityData.YListKeys = []string {}

    return &(info.EntityData)
}

// Controller_CccDriver_Bootflash_Info_Location
type Controller_CccDriver_Bootflash_Info_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfInfo Controller_CccDriver_Bootflash_Info_Location_BfInfo
}

func (location *Controller_CccDriver_Bootflash_Info_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "info"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bf_info", types.YChild{"BfInfo", &location.BfInfo})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_Info_Location_BfInfo
type Controller_CccDriver_Bootflash_Info_Location_BfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfInfoValues []interface{}
}

func (bfInfo *Controller_CccDriver_Bootflash_Info_Location_BfInfo) GetEntityData() *types.CommonEntityData {
    bfInfo.EntityData.YFilter = bfInfo.YFilter
    bfInfo.EntityData.YangName = "bf_info"
    bfInfo.EntityData.BundleName = "cisco_ios_xr"
    bfInfo.EntityData.ParentYangName = "location"
    bfInfo.EntityData.SegmentPath = "bf_info"
    bfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfInfo.EntityData.Children = types.NewOrderedMap()
    bfInfo.EntityData.Leafs = types.NewOrderedMap()
    bfInfo.EntityData.Leafs.Append("bf_info_values", types.YLeaf{"BfInfoValues", bfInfo.BfInfoValues})

    bfInfo.EntityData.YListKeys = []string {}

    return &(bfInfo.EntityData)
}

// Controller_CccDriver_Bootflash_Status
type Controller_CccDriver_Bootflash_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_Status_Location.
    Location []*Controller_CccDriver_Bootflash_Status_Location
}

func (status *Controller_CccDriver_Bootflash_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "bootflash"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range status.Location {
        status.EntityData.Children.Append(types.GetSegmentPath(status.Location[i]), types.YChild{"Location", status.Location[i]})
    }
    status.EntityData.Leafs = types.NewOrderedMap()

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Controller_CccDriver_Bootflash_Status_Location
type Controller_CccDriver_Bootflash_Status_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfStatus Controller_CccDriver_Bootflash_Status_Location_BfStatus
}

func (location *Controller_CccDriver_Bootflash_Status_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "status"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bf_status", types.YChild{"BfStatus", &location.BfStatus})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_Status_Location_BfStatus
type Controller_CccDriver_Bootflash_Status_Location_BfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfStatusValues []interface{}
}

func (bfStatus *Controller_CccDriver_Bootflash_Status_Location_BfStatus) GetEntityData() *types.CommonEntityData {
    bfStatus.EntityData.YFilter = bfStatus.YFilter
    bfStatus.EntityData.YangName = "bf_status"
    bfStatus.EntityData.BundleName = "cisco_ios_xr"
    bfStatus.EntityData.ParentYangName = "location"
    bfStatus.EntityData.SegmentPath = "bf_status"
    bfStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfStatus.EntityData.Children = types.NewOrderedMap()
    bfStatus.EntityData.Leafs = types.NewOrderedMap()
    bfStatus.EntityData.Leafs.Append("bf_status_values", types.YLeaf{"BfStatusValues", bfStatus.BfStatusValues})

    bfStatus.EntityData.YListKeys = []string {}

    return &(bfStatus.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus
type Controller_CccDriver_Bootflash_CreStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_CreStatus_Location.
    Location []*Controller_CccDriver_Bootflash_CreStatus_Location
}

func (creStatus *Controller_CccDriver_Bootflash_CreStatus) GetEntityData() *types.CommonEntityData {
    creStatus.EntityData.YFilter = creStatus.YFilter
    creStatus.EntityData.YangName = "cre_status"
    creStatus.EntityData.BundleName = "cisco_ios_xr"
    creStatus.EntityData.ParentYangName = "bootflash"
    creStatus.EntityData.SegmentPath = "cre_status"
    creStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    creStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    creStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    creStatus.EntityData.Children = types.NewOrderedMap()
    creStatus.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range creStatus.Location {
        creStatus.EntityData.Children.Append(types.GetSegmentPath(creStatus.Location[i]), types.YChild{"Location", creStatus.Location[i]})
    }
    creStatus.EntityData.Leafs = types.NewOrderedMap()

    creStatus.EntityData.YListKeys = []string {}

    return &(creStatus.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus_Location
type Controller_CccDriver_Bootflash_CreStatus_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfStatus Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus
}

func (location *Controller_CccDriver_Bootflash_CreStatus_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "cre_status"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("bf_status", types.YChild{"BfStatus", &location.BfStatus})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus
type Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfStatusValues []interface{}
}

func (bfStatus *Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus) GetEntityData() *types.CommonEntityData {
    bfStatus.EntityData.YFilter = bfStatus.YFilter
    bfStatus.EntityData.YangName = "bf_status"
    bfStatus.EntityData.BundleName = "cisco_ios_xr"
    bfStatus.EntityData.ParentYangName = "location"
    bfStatus.EntityData.SegmentPath = "bf_status"
    bfStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfStatus.EntityData.Children = types.NewOrderedMap()
    bfStatus.EntityData.Leafs = types.NewOrderedMap()
    bfStatus.EntityData.Leafs.Append("bf_status_values", types.YLeaf{"BfStatusValues", bfStatus.BfStatusValues})

    bfStatus.EntityData.YListKeys = []string {}

    return &(bfStatus.EntityData)
}

// Controller_CccDriver_Inventory
type Controller_CccDriver_Inventory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_CccDriver_Inventory_Summary

    
    Version Controller_CccDriver_Inventory_Version

    
    Status Controller_CccDriver_Inventory_Status

    
    Detail Controller_CccDriver_Inventory_Detail
}

func (inventory *Controller_CccDriver_Inventory) GetEntityData() *types.CommonEntityData {
    inventory.EntityData.YFilter = inventory.YFilter
    inventory.EntityData.YangName = "inventory"
    inventory.EntityData.BundleName = "cisco_ios_xr"
    inventory.EntityData.ParentYangName = "ccc_driver"
    inventory.EntityData.SegmentPath = "inventory"
    inventory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inventory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inventory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inventory.EntityData.Children = types.NewOrderedMap()
    inventory.EntityData.Children.Append("summary", types.YChild{"Summary", &inventory.Summary})
    inventory.EntityData.Children.Append("version", types.YChild{"Version", &inventory.Version})
    inventory.EntityData.Children.Append("status", types.YChild{"Status", &inventory.Status})
    inventory.EntityData.Children.Append("detail", types.YChild{"Detail", &inventory.Detail})
    inventory.EntityData.Leafs = types.NewOrderedMap()

    inventory.EntityData.YListKeys = []string {}

    return &(inventory.EntityData)
}

// Controller_CccDriver_Inventory_Summary
type Controller_CccDriver_Inventory_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Summary_CccInvSummary.
    CccInvSummary []*Controller_CccDriver_Inventory_Summary_CccInvSummary
}

func (summary *Controller_CccDriver_Inventory_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "inventory"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("ccc_inv_summary", types.YChild{"CccInvSummary", nil})
    for i := range summary.CccInvSummary {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.CccInvSummary[i]), types.YChild{"CccInvSummary", summary.CccInvSummary[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_CccDriver_Inventory_Summary_CccInvSummary
type Controller_CccDriver_Inventory_Summary_CccInvSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    // The type is string.
    CccInvPIDString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccInvSlotNumber interface{}

    // The type is string.
    CccInvSerialNumber interface{}

    // The type is string.
    CccInvHwVersion interface{}

    // The type is string.
    CccInvCardState interface{}
}

func (cccInvSummary *Controller_CccDriver_Inventory_Summary_CccInvSummary) GetEntityData() *types.CommonEntityData {
    cccInvSummary.EntityData.YFilter = cccInvSummary.YFilter
    cccInvSummary.EntityData.YangName = "ccc_inv_summary"
    cccInvSummary.EntityData.BundleName = "cisco_ios_xr"
    cccInvSummary.EntityData.ParentYangName = "summary"
    cccInvSummary.EntityData.SegmentPath = "ccc_inv_summary" + types.AddKeyToken(cccInvSummary.Location, "location")
    cccInvSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvSummary.EntityData.Children = types.NewOrderedMap()
    cccInvSummary.EntityData.Leafs = types.NewOrderedMap()
    cccInvSummary.EntityData.Leafs.Append("location", types.YLeaf{"Location", cccInvSummary.Location})
    cccInvSummary.EntityData.Leafs.Append("ccc_inv_PID_string", types.YLeaf{"CccInvPIDString", cccInvSummary.CccInvPIDString})
    cccInvSummary.EntityData.Leafs.Append("ccc_inv_slot_number", types.YLeaf{"CccInvSlotNumber", cccInvSummary.CccInvSlotNumber})
    cccInvSummary.EntityData.Leafs.Append("ccc_inv_serial_number", types.YLeaf{"CccInvSerialNumber", cccInvSummary.CccInvSerialNumber})
    cccInvSummary.EntityData.Leafs.Append("ccc_inv_hw_version", types.YLeaf{"CccInvHwVersion", cccInvSummary.CccInvHwVersion})
    cccInvSummary.EntityData.Leafs.Append("ccc_inv_card_state", types.YLeaf{"CccInvCardState", cccInvSummary.CccInvCardState})

    cccInvSummary.EntityData.YListKeys = []string {"Location"}

    return &(cccInvSummary.EntityData)
}

// Controller_CccDriver_Inventory_Version
type Controller_CccDriver_Inventory_Version struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Version_CccInvVersion.
    CccInvVersion []*Controller_CccDriver_Inventory_Version_CccInvVersion
}

func (version *Controller_CccDriver_Inventory_Version) GetEntityData() *types.CommonEntityData {
    version.EntityData.YFilter = version.YFilter
    version.EntityData.YangName = "version"
    version.EntityData.BundleName = "cisco_ios_xr"
    version.EntityData.ParentYangName = "inventory"
    version.EntityData.SegmentPath = "version"
    version.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    version.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    version.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    version.EntityData.Children = types.NewOrderedMap()
    version.EntityData.Children.Append("ccc_inv_version", types.YChild{"CccInvVersion", nil})
    for i := range version.CccInvVersion {
        version.EntityData.Children.Append(types.GetSegmentPath(version.CccInvVersion[i]), types.YChild{"CccInvVersion", version.CccInvVersion[i]})
    }
    version.EntityData.Leafs = types.NewOrderedMap()

    version.EntityData.YListKeys = []string {}

    return &(version.EntityData)
}

// Controller_CccDriver_Inventory_Version_CccInvVersion
type Controller_CccDriver_Inventory_Version_CccInvVersion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    // The type is string.
    CccInvPIDString interface{}

    // The type is string.
    CccInvCccVersion interface{}

    // The type is string.
    CccInvFPGAVersion interface{}

    // The type is string.
    CccInvPonVersion interface{}

    // The type is string.
    CccInvSwitchVersion interface{}
}

func (cccInvVersion *Controller_CccDriver_Inventory_Version_CccInvVersion) GetEntityData() *types.CommonEntityData {
    cccInvVersion.EntityData.YFilter = cccInvVersion.YFilter
    cccInvVersion.EntityData.YangName = "ccc_inv_version"
    cccInvVersion.EntityData.BundleName = "cisco_ios_xr"
    cccInvVersion.EntityData.ParentYangName = "version"
    cccInvVersion.EntityData.SegmentPath = "ccc_inv_version" + types.AddKeyToken(cccInvVersion.Location, "location")
    cccInvVersion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvVersion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvVersion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvVersion.EntityData.Children = types.NewOrderedMap()
    cccInvVersion.EntityData.Leafs = types.NewOrderedMap()
    cccInvVersion.EntityData.Leafs.Append("location", types.YLeaf{"Location", cccInvVersion.Location})
    cccInvVersion.EntityData.Leafs.Append("ccc_inv_PID_string", types.YLeaf{"CccInvPIDString", cccInvVersion.CccInvPIDString})
    cccInvVersion.EntityData.Leafs.Append("ccc_inv_ccc_version", types.YLeaf{"CccInvCccVersion", cccInvVersion.CccInvCccVersion})
    cccInvVersion.EntityData.Leafs.Append("ccc_inv_FPGA_version", types.YLeaf{"CccInvFPGAVersion", cccInvVersion.CccInvFPGAVersion})
    cccInvVersion.EntityData.Leafs.Append("ccc_inv_pon_version", types.YLeaf{"CccInvPonVersion", cccInvVersion.CccInvPonVersion})
    cccInvVersion.EntityData.Leafs.Append("ccc_inv_switch_version", types.YLeaf{"CccInvSwitchVersion", cccInvVersion.CccInvSwitchVersion})

    cccInvVersion.EntityData.YListKeys = []string {"Location"}

    return &(cccInvVersion.EntityData)
}

// Controller_CccDriver_Inventory_Status
type Controller_CccDriver_Inventory_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Status_CccInvStatus.
    CccInvStatus []*Controller_CccDriver_Inventory_Status_CccInvStatus
}

func (status *Controller_CccDriver_Inventory_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "inventory"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("ccc_inv_status", types.YChild{"CccInvStatus", nil})
    for i := range status.CccInvStatus {
        status.EntityData.Children.Append(types.GetSegmentPath(status.CccInvStatus[i]), types.YChild{"CccInvStatus", status.CccInvStatus[i]})
    }
    status.EntityData.Leafs = types.NewOrderedMap()

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Controller_CccDriver_Inventory_Status_CccInvStatus
type Controller_CccDriver_Inventory_Status_CccInvStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    
    CccInvStatusList Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList
}

func (cccInvStatus *Controller_CccDriver_Inventory_Status_CccInvStatus) GetEntityData() *types.CommonEntityData {
    cccInvStatus.EntityData.YFilter = cccInvStatus.YFilter
    cccInvStatus.EntityData.YangName = "ccc_inv_status"
    cccInvStatus.EntityData.BundleName = "cisco_ios_xr"
    cccInvStatus.EntityData.ParentYangName = "status"
    cccInvStatus.EntityData.SegmentPath = "ccc_inv_status" + types.AddKeyToken(cccInvStatus.Location, "location")
    cccInvStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvStatus.EntityData.Children = types.NewOrderedMap()
    cccInvStatus.EntityData.Children.Append("ccc_inv_status_list", types.YChild{"CccInvStatusList", &cccInvStatus.CccInvStatusList})
    cccInvStatus.EntityData.Leafs = types.NewOrderedMap()
    cccInvStatus.EntityData.Leafs.Append("location", types.YLeaf{"Location", cccInvStatus.Location})

    cccInvStatus.EntityData.YListKeys = []string {"Location"}

    return &(cccInvStatus.EntityData)
}

// Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList
type Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CccInvStatusValues []interface{}
}

func (cccInvStatusList *Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList) GetEntityData() *types.CommonEntityData {
    cccInvStatusList.EntityData.YFilter = cccInvStatusList.YFilter
    cccInvStatusList.EntityData.YangName = "ccc_inv_status_list"
    cccInvStatusList.EntityData.BundleName = "cisco_ios_xr"
    cccInvStatusList.EntityData.ParentYangName = "ccc_inv_status"
    cccInvStatusList.EntityData.SegmentPath = "ccc_inv_status_list"
    cccInvStatusList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvStatusList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvStatusList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvStatusList.EntityData.Children = types.NewOrderedMap()
    cccInvStatusList.EntityData.Leafs = types.NewOrderedMap()
    cccInvStatusList.EntityData.Leafs.Append("ccc_inv_status_values", types.YLeaf{"CccInvStatusValues", cccInvStatusList.CccInvStatusValues})

    cccInvStatusList.EntityData.YListKeys = []string {}

    return &(cccInvStatusList.EntityData)
}

// Controller_CccDriver_Inventory_Detail
type Controller_CccDriver_Inventory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Detail_CccInvDetail.
    CccInvDetail []*Controller_CccDriver_Inventory_Detail_CccInvDetail
}

func (detail *Controller_CccDriver_Inventory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "inventory"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("ccc_inv_detail", types.YChild{"CccInvDetail", nil})
    for i := range detail.CccInvDetail {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.CccInvDetail[i]), types.YChild{"CccInvDetail", detail.CccInvDetail[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_Inventory_Detail_CccInvDetail
type Controller_CccDriver_Inventory_Detail_CccInvDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CccInvDetailList Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList
}

func (cccInvDetail *Controller_CccDriver_Inventory_Detail_CccInvDetail) GetEntityData() *types.CommonEntityData {
    cccInvDetail.EntityData.YFilter = cccInvDetail.YFilter
    cccInvDetail.EntityData.YangName = "ccc_inv_detail"
    cccInvDetail.EntityData.BundleName = "cisco_ios_xr"
    cccInvDetail.EntityData.ParentYangName = "detail"
    cccInvDetail.EntityData.SegmentPath = "ccc_inv_detail" + types.AddKeyToken(cccInvDetail.Location, "location")
    cccInvDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvDetail.EntityData.Children = types.NewOrderedMap()
    cccInvDetail.EntityData.Children.Append("ccc_inv_detail_list", types.YChild{"CccInvDetailList", &cccInvDetail.CccInvDetailList})
    cccInvDetail.EntityData.Leafs = types.NewOrderedMap()
    cccInvDetail.EntityData.Leafs.Append("location", types.YLeaf{"Location", cccInvDetail.Location})

    cccInvDetail.EntityData.YListKeys = []string {"Location"}

    return &(cccInvDetail.EntityData)
}

// Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList
type Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CccInvDetailValues []interface{}
}

func (cccInvDetailList *Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList) GetEntityData() *types.CommonEntityData {
    cccInvDetailList.EntityData.YFilter = cccInvDetailList.YFilter
    cccInvDetailList.EntityData.YangName = "ccc_inv_detail_list"
    cccInvDetailList.EntityData.BundleName = "cisco_ios_xr"
    cccInvDetailList.EntityData.ParentYangName = "ccc_inv_detail"
    cccInvDetailList.EntityData.SegmentPath = "ccc_inv_detail_list"
    cccInvDetailList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvDetailList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvDetailList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvDetailList.EntityData.Children = types.NewOrderedMap()
    cccInvDetailList.EntityData.Leafs = types.NewOrderedMap()
    cccInvDetailList.EntityData.Leafs.Append("ccc_inv_detail_values", types.YLeaf{"CccInvDetailValues", cccInvDetailList.CccInvDetailValues})

    cccInvDetailList.EntityData.YListKeys = []string {}

    return &(cccInvDetailList.EntityData)
}

// Controller_CccDriver_Power
type Controller_CccDriver_Power struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    MasterAccess Controller_CccDriver_Power_MasterAccess
}

func (power *Controller_CccDriver_Power) GetEntityData() *types.CommonEntityData {
    power.EntityData.YFilter = power.YFilter
    power.EntityData.YangName = "power"
    power.EntityData.BundleName = "cisco_ios_xr"
    power.EntityData.ParentYangName = "ccc_driver"
    power.EntityData.SegmentPath = "power"
    power.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    power.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    power.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    power.EntityData.Children = types.NewOrderedMap()
    power.EntityData.Children.Append("master-access", types.YChild{"MasterAccess", &power.MasterAccess})
    power.EntityData.Leafs = types.NewOrderedMap()

    power.EntityData.YListKeys = []string {}

    return &(power.EntityData)
}

// Controller_CccDriver_Power_MasterAccess
type Controller_CccDriver_Power_MasterAccess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_CccDriver_Power_MasterAccess_Summary

    
    Detail Controller_CccDriver_Power_MasterAccess_Detail
}

func (masterAccess *Controller_CccDriver_Power_MasterAccess) GetEntityData() *types.CommonEntityData {
    masterAccess.EntityData.YFilter = masterAccess.YFilter
    masterAccess.EntityData.YangName = "master-access"
    masterAccess.EntityData.BundleName = "cisco_ios_xr"
    masterAccess.EntityData.ParentYangName = "power"
    masterAccess.EntityData.SegmentPath = "master-access"
    masterAccess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    masterAccess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    masterAccess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    masterAccess.EntityData.Children = types.NewOrderedMap()
    masterAccess.EntityData.Children.Append("summary", types.YChild{"Summary", &masterAccess.Summary})
    masterAccess.EntityData.Children.Append("detail", types.YChild{"Detail", &masterAccess.Detail})
    masterAccess.EntityData.Leafs = types.NewOrderedMap()

    masterAccess.EntityData.YListKeys = []string {}

    return &(masterAccess.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Summary
type Controller_CccDriver_Power_MasterAccess_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary.
    PowerSummary []*Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary
}

func (summary *Controller_CccDriver_Power_MasterAccess_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "master-access"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("power_summary", types.YChild{"PowerSummary", nil})
    for i := range summary.PowerSummary {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.PowerSummary[i]), types.YChild{"PowerSummary", summary.PowerSummary[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary
type Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    CccPowerLocation interface{}

    // The type is string.
    CardType interface{}

    // The type is string.
    PowerState interface{}
}

func (powerSummary *Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary) GetEntityData() *types.CommonEntityData {
    powerSummary.EntityData.YFilter = powerSummary.YFilter
    powerSummary.EntityData.YangName = "power_summary"
    powerSummary.EntityData.BundleName = "cisco_ios_xr"
    powerSummary.EntityData.ParentYangName = "summary"
    powerSummary.EntityData.SegmentPath = "power_summary" + types.AddKeyToken(powerSummary.CccPowerLocation, "ccc_power_location")
    powerSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    powerSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    powerSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    powerSummary.EntityData.Children = types.NewOrderedMap()
    powerSummary.EntityData.Leafs = types.NewOrderedMap()
    powerSummary.EntityData.Leafs.Append("ccc_power_location", types.YLeaf{"CccPowerLocation", powerSummary.CccPowerLocation})
    powerSummary.EntityData.Leafs.Append("card_type", types.YLeaf{"CardType", powerSummary.CardType})
    powerSummary.EntityData.Leafs.Append("power_state", types.YLeaf{"PowerState", powerSummary.PowerState})

    powerSummary.EntityData.YListKeys = []string {"CccPowerLocation"}

    return &(powerSummary.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail
type Controller_CccDriver_Power_MasterAccess_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Power_MasterAccess_Detail_Location.
    Location []*Controller_CccDriver_Power_MasterAccess_Detail_Location
}

func (detail *Controller_CccDriver_Power_MasterAccess_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "master-access"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail_Location
type Controller_CccDriver_Power_MasterAccess_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    PowerDetails Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails
}

func (location *Controller_CccDriver_Power_MasterAccess_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("power_details", types.YChild{"PowerDetails", &location.PowerDetails})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails
type Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    PowerDetailsValues []interface{}
}

func (powerDetails *Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails) GetEntityData() *types.CommonEntityData {
    powerDetails.EntityData.YFilter = powerDetails.YFilter
    powerDetails.EntityData.YangName = "power_details"
    powerDetails.EntityData.BundleName = "cisco_ios_xr"
    powerDetails.EntityData.ParentYangName = "location"
    powerDetails.EntityData.SegmentPath = "power_details"
    powerDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    powerDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    powerDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    powerDetails.EntityData.Children = types.NewOrderedMap()
    powerDetails.EntityData.Leafs = types.NewOrderedMap()
    powerDetails.EntityData.Leafs.Append("power_details_values", types.YLeaf{"PowerDetailsValues", powerDetails.PowerDetailsValues})

    powerDetails.EntityData.YListKeys = []string {}

    return &(powerDetails.EntityData)
}

// Controller_CccDriver_ResetHistory
type Controller_CccDriver_ResetHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Onchip Controller_CccDriver_ResetHistory_Onchip

    
    Onboard Controller_CccDriver_ResetHistory_Onboard
}

func (resetHistory *Controller_CccDriver_ResetHistory) GetEntityData() *types.CommonEntityData {
    resetHistory.EntityData.YFilter = resetHistory.YFilter
    resetHistory.EntityData.YangName = "reset-history"
    resetHistory.EntityData.BundleName = "cisco_ios_xr"
    resetHistory.EntityData.ParentYangName = "ccc_driver"
    resetHistory.EntityData.SegmentPath = "reset-history"
    resetHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resetHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resetHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resetHistory.EntityData.Children = types.NewOrderedMap()
    resetHistory.EntityData.Children.Append("onchip", types.YChild{"Onchip", &resetHistory.Onchip})
    resetHistory.EntityData.Children.Append("onboard", types.YChild{"Onboard", &resetHistory.Onboard})
    resetHistory.EntityData.Leafs = types.NewOrderedMap()

    resetHistory.EntityData.YListKeys = []string {}

    return &(resetHistory.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip
type Controller_CccDriver_ResetHistory_Onchip struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_ResetHistory_Onchip_Location.
    Location []*Controller_CccDriver_ResetHistory_Onchip_Location
}

func (onchip *Controller_CccDriver_ResetHistory_Onchip) GetEntityData() *types.CommonEntityData {
    onchip.EntityData.YFilter = onchip.YFilter
    onchip.EntityData.YangName = "onchip"
    onchip.EntityData.BundleName = "cisco_ios_xr"
    onchip.EntityData.ParentYangName = "reset-history"
    onchip.EntityData.SegmentPath = "onchip"
    onchip.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    onchip.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    onchip.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    onchip.EntityData.Children = types.NewOrderedMap()
    onchip.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range onchip.Location {
        onchip.EntityData.Children.Append(types.GetSegmentPath(onchip.Location[i]), types.YChild{"Location", onchip.Location[i]})
    }
    onchip.EntityData.Leafs = types.NewOrderedMap()

    onchip.EntityData.YListKeys = []string {}

    return &(onchip.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip_Location
type Controller_CccDriver_ResetHistory_Onchip_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Loc interface{}

    // The type is string.
    CccResetTimeofday interface{}

    // The type is string.
    CccResetUptime interface{}

    // The type is interface{} with range: 0..4294967295.
    CccHwResetCount interface{}

    // The type is slice of
    // Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry.
    CccResetEntry []*Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry
}

func (location *Controller_CccDriver_ResetHistory_Onchip_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "onchip"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Loc, "loc")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("ccc_reset_entry", types.YChild{"CccResetEntry", nil})
    for i := range location.CccResetEntry {
        location.EntityData.Children.Append(types.GetSegmentPath(location.CccResetEntry[i]), types.YChild{"CccResetEntry", location.CccResetEntry[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc", types.YLeaf{"Loc", location.Loc})
    location.EntityData.Leafs.Append("ccc_reset_timeofday", types.YLeaf{"CccResetTimeofday", location.CccResetTimeofday})
    location.EntityData.Leafs.Append("ccc_reset_uptime", types.YLeaf{"CccResetUptime", location.CccResetUptime})
    location.EntityData.Leafs.Append("ccc_hw_reset_count", types.YLeaf{"CccHwResetCount", location.CccHwResetCount})

    location.EntityData.YListKeys = []string {"Loc"}

    return &(location.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry
type Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CccResetEntry interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPos interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetIdx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord0 interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPidx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSor interface{}

    // The type is string.
    CccResetSorString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetCmd interface{}

    // The type is string.
    CccResetCmdString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord1 interface{}

    // The type is string.
    CccResetDate interface{}
}

func (cccResetEntry *Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry) GetEntityData() *types.CommonEntityData {
    cccResetEntry.EntityData.YFilter = cccResetEntry.YFilter
    cccResetEntry.EntityData.YangName = "ccc_reset_entry"
    cccResetEntry.EntityData.BundleName = "cisco_ios_xr"
    cccResetEntry.EntityData.ParentYangName = "location"
    cccResetEntry.EntityData.SegmentPath = "ccc_reset_entry" + types.AddKeyToken(cccResetEntry.CccResetEntry, "ccc_reset_entry")
    cccResetEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccResetEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccResetEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccResetEntry.EntityData.Children = types.NewOrderedMap()
    cccResetEntry.EntityData.Leafs = types.NewOrderedMap()
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_entry", types.YLeaf{"CccResetEntry", cccResetEntry.CccResetEntry})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_pos", types.YLeaf{"CccResetPos", cccResetEntry.CccResetPos})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_idx", types.YLeaf{"CccResetIdx", cccResetEntry.CccResetIdx})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_word0", types.YLeaf{"CccResetWord0", cccResetEntry.CccResetWord0})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_pidx", types.YLeaf{"CccResetPidx", cccResetEntry.CccResetPidx})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_sor", types.YLeaf{"CccResetSor", cccResetEntry.CccResetSor})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_sor_string", types.YLeaf{"CccResetSorString", cccResetEntry.CccResetSorString})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_cmd", types.YLeaf{"CccResetCmd", cccResetEntry.CccResetCmd})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_cmd_string", types.YLeaf{"CccResetCmdString", cccResetEntry.CccResetCmdString})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_hrm", types.YLeaf{"CccResetHrm", cccResetEntry.CccResetHrm})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_srm", types.YLeaf{"CccResetSrm", cccResetEntry.CccResetSrm})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_hr", types.YLeaf{"CccResetHr", cccResetEntry.CccResetHr})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_sr", types.YLeaf{"CccResetSr", cccResetEntry.CccResetSr})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_word1", types.YLeaf{"CccResetWord1", cccResetEntry.CccResetWord1})
    cccResetEntry.EntityData.Leafs.Append("ccc_reset_date", types.YLeaf{"CccResetDate", cccResetEntry.CccResetDate})

    cccResetEntry.EntityData.YListKeys = []string {"CccResetEntry"}

    return &(cccResetEntry.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard
type Controller_CccDriver_ResetHistory_Onboard struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_ResetHistory_Onboard_Location.
    Location []*Controller_CccDriver_ResetHistory_Onboard_Location
}

func (onboard *Controller_CccDriver_ResetHistory_Onboard) GetEntityData() *types.CommonEntityData {
    onboard.EntityData.YFilter = onboard.YFilter
    onboard.EntityData.YangName = "onboard"
    onboard.EntityData.BundleName = "cisco_ios_xr"
    onboard.EntityData.ParentYangName = "reset-history"
    onboard.EntityData.SegmentPath = "onboard"
    onboard.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    onboard.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    onboard.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    onboard.EntityData.Children = types.NewOrderedMap()
    onboard.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range onboard.Location {
        onboard.EntityData.Children.Append(types.GetSegmentPath(onboard.Location[i]), types.YChild{"Location", onboard.Location[i]})
    }
    onboard.EntityData.Leafs = types.NewOrderedMap()

    onboard.EntityData.YListKeys = []string {}

    return &(onboard.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard_Location
type Controller_CccDriver_ResetHistory_Onboard_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Loc interface{}

    // The type is string.
    CccResetScratchSig interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetScratchVersion interface{}

    // The type is string.
    CccResetHistorySig interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHistoryCount interface{}

    // The type is slice of
    // Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry.
    CccResetOnboardEntry []*Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry
}

func (location *Controller_CccDriver_ResetHistory_Onboard_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "onboard"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Loc, "loc")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("ccc_reset_onboard_entry", types.YChild{"CccResetOnboardEntry", nil})
    for i := range location.CccResetOnboardEntry {
        location.EntityData.Children.Append(types.GetSegmentPath(location.CccResetOnboardEntry[i]), types.YChild{"CccResetOnboardEntry", location.CccResetOnboardEntry[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("loc", types.YLeaf{"Loc", location.Loc})
    location.EntityData.Leafs.Append("ccc_reset_scratch_sig", types.YLeaf{"CccResetScratchSig", location.CccResetScratchSig})
    location.EntityData.Leafs.Append("ccc_reset_scratch_version", types.YLeaf{"CccResetScratchVersion", location.CccResetScratchVersion})
    location.EntityData.Leafs.Append("ccc_reset_history_sig", types.YLeaf{"CccResetHistorySig", location.CccResetHistorySig})
    location.EntityData.Leafs.Append("ccc_reset_history_count", types.YLeaf{"CccResetHistoryCount", location.CccResetHistoryCount})

    location.EntityData.YListKeys = []string {"Loc"}

    return &(location.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry
type Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CccResetOnboardEntry interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPos interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetIdx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord0 interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPidx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSor interface{}

    // The type is string.
    CccResetSorString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetCmd interface{}

    // The type is string.
    CccResetCmdString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord1 interface{}

    // The type is string.
    CccResetDate interface{}
}

func (cccResetOnboardEntry *Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry) GetEntityData() *types.CommonEntityData {
    cccResetOnboardEntry.EntityData.YFilter = cccResetOnboardEntry.YFilter
    cccResetOnboardEntry.EntityData.YangName = "ccc_reset_onboard_entry"
    cccResetOnboardEntry.EntityData.BundleName = "cisco_ios_xr"
    cccResetOnboardEntry.EntityData.ParentYangName = "location"
    cccResetOnboardEntry.EntityData.SegmentPath = "ccc_reset_onboard_entry" + types.AddKeyToken(cccResetOnboardEntry.CccResetOnboardEntry, "ccc_reset_onboard_entry")
    cccResetOnboardEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccResetOnboardEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccResetOnboardEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccResetOnboardEntry.EntityData.Children = types.NewOrderedMap()
    cccResetOnboardEntry.EntityData.Leafs = types.NewOrderedMap()
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_onboard_entry", types.YLeaf{"CccResetOnboardEntry", cccResetOnboardEntry.CccResetOnboardEntry})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_pos", types.YLeaf{"CccResetPos", cccResetOnboardEntry.CccResetPos})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_idx", types.YLeaf{"CccResetIdx", cccResetOnboardEntry.CccResetIdx})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_word0", types.YLeaf{"CccResetWord0", cccResetOnboardEntry.CccResetWord0})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_pidx", types.YLeaf{"CccResetPidx", cccResetOnboardEntry.CccResetPidx})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_sor", types.YLeaf{"CccResetSor", cccResetOnboardEntry.CccResetSor})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_sor_string", types.YLeaf{"CccResetSorString", cccResetOnboardEntry.CccResetSorString})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_cmd", types.YLeaf{"CccResetCmd", cccResetOnboardEntry.CccResetCmd})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_cmd_string", types.YLeaf{"CccResetCmdString", cccResetOnboardEntry.CccResetCmdString})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_hrm", types.YLeaf{"CccResetHrm", cccResetOnboardEntry.CccResetHrm})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_srm", types.YLeaf{"CccResetSrm", cccResetOnboardEntry.CccResetSrm})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_hr", types.YLeaf{"CccResetHr", cccResetOnboardEntry.CccResetHr})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_sr", types.YLeaf{"CccResetSr", cccResetOnboardEntry.CccResetSr})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_word1", types.YLeaf{"CccResetWord1", cccResetOnboardEntry.CccResetWord1})
    cccResetOnboardEntry.EntityData.Leafs.Append("ccc_reset_date", types.YLeaf{"CccResetDate", cccResetOnboardEntry.CccResetDate})

    cccResetOnboardEntry.EntityData.YListKeys = []string {"CccResetOnboardEntry"}

    return &(cccResetOnboardEntry.EntityData)
}

// Controller_CccDriver_Register
type Controller_CccDriver_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Register_RegisterLocation.
    RegisterLocation []*Controller_CccDriver_Register_RegisterLocation
}

func (register *Controller_CccDriver_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "ccc_driver"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = types.NewOrderedMap()
    register.EntityData.Children.Append("register_location", types.YChild{"RegisterLocation", nil})
    for i := range register.RegisterLocation {
        register.EntityData.Children.Append(types.GetSegmentPath(register.RegisterLocation[i]), types.YChild{"RegisterLocation", register.RegisterLocation[i]})
    }
    register.EntityData.Leafs = types.NewOrderedMap()

    register.EntityData.YListKeys = []string {}

    return &(register.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation
type Controller_CccDriver_Register_RegisterLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    RegisterLocation interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber.
    CccBlockNumber []*Controller_CccDriver_Register_RegisterLocation_CccBlockNumber

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccOffset.
    CccOffset []*Controller_CccDriver_Register_RegisterLocation_CccOffset

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress.
    CccAddress []*Controller_CccDriver_Register_RegisterLocation_CccAddress
}

func (registerLocation *Controller_CccDriver_Register_RegisterLocation) GetEntityData() *types.CommonEntityData {
    registerLocation.EntityData.YFilter = registerLocation.YFilter
    registerLocation.EntityData.YangName = "register_location"
    registerLocation.EntityData.BundleName = "cisco_ios_xr"
    registerLocation.EntityData.ParentYangName = "register"
    registerLocation.EntityData.SegmentPath = "register_location" + types.AddKeyToken(registerLocation.RegisterLocation, "register_location")
    registerLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerLocation.EntityData.Children = types.NewOrderedMap()
    registerLocation.EntityData.Children.Append("ccc_block_number", types.YChild{"CccBlockNumber", nil})
    for i := range registerLocation.CccBlockNumber {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.CccBlockNumber[i]), types.YChild{"CccBlockNumber", registerLocation.CccBlockNumber[i]})
    }
    registerLocation.EntityData.Children.Append("ccc_offset", types.YChild{"CccOffset", nil})
    for i := range registerLocation.CccOffset {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.CccOffset[i]), types.YChild{"CccOffset", registerLocation.CccOffset[i]})
    }
    registerLocation.EntityData.Children.Append("ccc_address", types.YChild{"CccAddress", nil})
    for i := range registerLocation.CccAddress {
        registerLocation.EntityData.Children.Append(types.GetSegmentPath(registerLocation.CccAddress[i]), types.YChild{"CccAddress", registerLocation.CccAddress[i]})
    }
    registerLocation.EntityData.Leafs = types.NewOrderedMap()
    registerLocation.EntityData.Leafs.Append("register_location", types.YLeaf{"RegisterLocation", registerLocation.RegisterLocation})

    registerLocation.EntityData.YListKeys = []string {"RegisterLocation"}

    return &(registerLocation.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    CccBlockNum interface{}

    // The type is string.
    BlockLocation interface{}

    // The type is string.
    CccBlockNm interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber.
    CccRegisterNumber []*Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber
}

func (cccBlockNumber *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber) GetEntityData() *types.CommonEntityData {
    cccBlockNumber.EntityData.YFilter = cccBlockNumber.YFilter
    cccBlockNumber.EntityData.YangName = "ccc_block_number"
    cccBlockNumber.EntityData.BundleName = "cisco_ios_xr"
    cccBlockNumber.EntityData.ParentYangName = "register_location"
    cccBlockNumber.EntityData.SegmentPath = "ccc_block_number" + types.AddKeyToken(cccBlockNumber.CccBlockNum, "ccc_block_num")
    cccBlockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccBlockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccBlockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccBlockNumber.EntityData.Children = types.NewOrderedMap()
    cccBlockNumber.EntityData.Children.Append("ccc_register_number", types.YChild{"CccRegisterNumber", nil})
    for i := range cccBlockNumber.CccRegisterNumber {
        cccBlockNumber.EntityData.Children.Append(types.GetSegmentPath(cccBlockNumber.CccRegisterNumber[i]), types.YChild{"CccRegisterNumber", cccBlockNumber.CccRegisterNumber[i]})
    }
    cccBlockNumber.EntityData.Leafs = types.NewOrderedMap()
    cccBlockNumber.EntityData.Leafs.Append("ccc_block_num", types.YLeaf{"CccBlockNum", cccBlockNumber.CccBlockNum})
    cccBlockNumber.EntityData.Leafs.Append("block_location", types.YLeaf{"BlockLocation", cccBlockNumber.BlockLocation})
    cccBlockNumber.EntityData.Leafs.Append("ccc_block_nm", types.YLeaf{"CccBlockNm", cccBlockNumber.CccBlockNm})

    cccBlockNumber.EntityData.YListKeys = []string {"CccBlockNum"}

    return &(cccBlockNumber.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // The type is string.
    CccRegisterName interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData.
    CccData []*Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData
}

func (cccRegisterNumber *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber) GetEntityData() *types.CommonEntityData {
    cccRegisterNumber.EntityData.YFilter = cccRegisterNumber.YFilter
    cccRegisterNumber.EntityData.YangName = "ccc_register_number"
    cccRegisterNumber.EntityData.BundleName = "cisco_ios_xr"
    cccRegisterNumber.EntityData.ParentYangName = "ccc_block_number"
    cccRegisterNumber.EntityData.SegmentPath = "ccc_register_number" + types.AddKeyToken(cccRegisterNumber.Index, "index")
    cccRegisterNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegisterNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegisterNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegisterNumber.EntityData.Children = types.NewOrderedMap()
    cccRegisterNumber.EntityData.Children.Append("ccc_data", types.YChild{"CccData", nil})
    for i := range cccRegisterNumber.CccData {
        cccRegisterNumber.EntityData.Children.Append(types.GetSegmentPath(cccRegisterNumber.CccData[i]), types.YChild{"CccData", cccRegisterNumber.CccData[i]})
    }
    cccRegisterNumber.EntityData.Leafs = types.NewOrderedMap()
    cccRegisterNumber.EntityData.Leafs.Append("index", types.YLeaf{"Index", cccRegisterNumber.Index})
    cccRegisterNumber.EntityData.Leafs.Append("ccc_register_name", types.YLeaf{"CccRegisterName", cccRegisterNumber.CccRegisterName})

    cccRegisterNumber.EntityData.YListKeys = []string {"Index"}

    return &(cccRegisterNumber.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (cccData *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData) GetEntityData() *types.CommonEntityData {
    cccData.EntityData.YFilter = cccData.YFilter
    cccData.EntityData.YangName = "ccc_data"
    cccData.EntityData.BundleName = "cisco_ios_xr"
    cccData.EntityData.ParentYangName = "ccc_register_number"
    cccData.EntityData.SegmentPath = "ccc_data"
    cccData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccData.EntityData.Children = types.NewOrderedMap()
    cccData.EntityData.Leafs = types.NewOrderedMap()
    cccData.EntityData.Leafs.Append("name", types.YLeaf{"Name", cccData.Name})
    cccData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", cccData.Offset})
    cccData.EntityData.Leafs.Append("value", types.YLeaf{"Value", cccData.Value})

    cccData.EntityData.YListKeys = []string {}

    return &(cccData.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccOffset
type Controller_CccDriver_Register_RegisterLocation_CccOffset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    HexOffset interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData.
    CccRegOffsetData []*Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData
}

func (cccOffset *Controller_CccDriver_Register_RegisterLocation_CccOffset) GetEntityData() *types.CommonEntityData {
    cccOffset.EntityData.YFilter = cccOffset.YFilter
    cccOffset.EntityData.YangName = "ccc_offset"
    cccOffset.EntityData.BundleName = "cisco_ios_xr"
    cccOffset.EntityData.ParentYangName = "register_location"
    cccOffset.EntityData.SegmentPath = "ccc_offset" + types.AddKeyToken(cccOffset.HexOffset, "hex_offset")
    cccOffset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccOffset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccOffset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccOffset.EntityData.Children = types.NewOrderedMap()
    cccOffset.EntityData.Children.Append("ccc_reg_offset_data", types.YChild{"CccRegOffsetData", nil})
    for i := range cccOffset.CccRegOffsetData {
        cccOffset.EntityData.Children.Append(types.GetSegmentPath(cccOffset.CccRegOffsetData[i]), types.YChild{"CccRegOffsetData", cccOffset.CccRegOffsetData[i]})
    }
    cccOffset.EntityData.Leafs = types.NewOrderedMap()
    cccOffset.EntityData.Leafs.Append("hex_offset", types.YLeaf{"HexOffset", cccOffset.HexOffset})

    cccOffset.EntityData.YListKeys = []string {"HexOffset"}

    return &(cccOffset.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData
type Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    CccRegOffAddr interface{}

    // The type is string.
    RegOffValue interface{}
}

func (cccRegOffsetData *Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData) GetEntityData() *types.CommonEntityData {
    cccRegOffsetData.EntityData.YFilter = cccRegOffsetData.YFilter
    cccRegOffsetData.EntityData.YangName = "ccc_reg_offset_data"
    cccRegOffsetData.EntityData.BundleName = "cisco_ios_xr"
    cccRegOffsetData.EntityData.ParentYangName = "ccc_offset"
    cccRegOffsetData.EntityData.SegmentPath = "ccc_reg_offset_data"
    cccRegOffsetData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegOffsetData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegOffsetData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegOffsetData.EntityData.Children = types.NewOrderedMap()
    cccRegOffsetData.EntityData.Leafs = types.NewOrderedMap()
    cccRegOffsetData.EntityData.Leafs.Append("ccc_reg_off_addr", types.YLeaf{"CccRegOffAddr", cccRegOffsetData.CccRegOffAddr})
    cccRegOffsetData.EntityData.Leafs.Append("reg_off_value", types.YLeaf{"RegOffValue", cccRegOffsetData.RegOffValue})

    cccRegOffsetData.EntityData.YListKeys = []string {}

    return &(cccRegOffsetData.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress
type Controller_CccDriver_Register_RegisterLocation_CccAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    StartHexAddr interface{}

    // This attribute is a key. The type is string.
    EndHexAddr interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList.
    CccRegRangeAddrList []*Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList
}

func (cccAddress *Controller_CccDriver_Register_RegisterLocation_CccAddress) GetEntityData() *types.CommonEntityData {
    cccAddress.EntityData.YFilter = cccAddress.YFilter
    cccAddress.EntityData.YangName = "ccc_address"
    cccAddress.EntityData.BundleName = "cisco_ios_xr"
    cccAddress.EntityData.ParentYangName = "register_location"
    cccAddress.EntityData.SegmentPath = "ccc_address" + types.AddKeyToken(cccAddress.StartHexAddr, "start_hex_addr") + types.AddKeyToken(cccAddress.EndHexAddr, "end_hex_addr")
    cccAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccAddress.EntityData.Children = types.NewOrderedMap()
    cccAddress.EntityData.Children.Append("ccc_reg_range_addr_list", types.YChild{"CccRegRangeAddrList", nil})
    for i := range cccAddress.CccRegRangeAddrList {
        cccAddress.EntityData.Children.Append(types.GetSegmentPath(cccAddress.CccRegRangeAddrList[i]), types.YChild{"CccRegRangeAddrList", cccAddress.CccRegRangeAddrList[i]})
    }
    cccAddress.EntityData.Leafs = types.NewOrderedMap()
    cccAddress.EntityData.Leafs.Append("start_hex_addr", types.YLeaf{"StartHexAddr", cccAddress.StartHexAddr})
    cccAddress.EntityData.Leafs.Append("end_hex_addr", types.YLeaf{"EndHexAddr", cccAddress.EndHexAddr})

    cccAddress.EntityData.YListKeys = []string {"StartHexAddr", "EndHexAddr"}

    return &(cccAddress.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList
type Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    CccRegRangeAddr interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData.
    CccRegData []*Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData
}

func (cccRegRangeAddrList *Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList) GetEntityData() *types.CommonEntityData {
    cccRegRangeAddrList.EntityData.YFilter = cccRegRangeAddrList.YFilter
    cccRegRangeAddrList.EntityData.YangName = "ccc_reg_range_addr_list"
    cccRegRangeAddrList.EntityData.BundleName = "cisco_ios_xr"
    cccRegRangeAddrList.EntityData.ParentYangName = "ccc_address"
    cccRegRangeAddrList.EntityData.SegmentPath = "ccc_reg_range_addr_list" + types.AddKeyToken(cccRegRangeAddrList.CccRegRangeAddr, "ccc_reg_range_addr")
    cccRegRangeAddrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegRangeAddrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegRangeAddrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegRangeAddrList.EntityData.Children = types.NewOrderedMap()
    cccRegRangeAddrList.EntityData.Children.Append("ccc_reg_data", types.YChild{"CccRegData", nil})
    for i := range cccRegRangeAddrList.CccRegData {
        cccRegRangeAddrList.EntityData.Children.Append(types.GetSegmentPath(cccRegRangeAddrList.CccRegData[i]), types.YChild{"CccRegData", cccRegRangeAddrList.CccRegData[i]})
    }
    cccRegRangeAddrList.EntityData.Leafs = types.NewOrderedMap()
    cccRegRangeAddrList.EntityData.Leafs.Append("ccc_reg_range_addr", types.YLeaf{"CccRegRangeAddr", cccRegRangeAddrList.CccRegRangeAddr})

    cccRegRangeAddrList.EntityData.YListKeys = []string {"CccRegRangeAddr"}

    return &(cccRegRangeAddrList.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData
type Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    CccRegAddr interface{}

    // The type is string.
    RegValue interface{}
}

func (cccRegData *Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData) GetEntityData() *types.CommonEntityData {
    cccRegData.EntityData.YFilter = cccRegData.YFilter
    cccRegData.EntityData.YangName = "ccc_reg_data"
    cccRegData.EntityData.BundleName = "cisco_ios_xr"
    cccRegData.EntityData.ParentYangName = "ccc_reg_range_addr_list"
    cccRegData.EntityData.SegmentPath = "ccc_reg_data"
    cccRegData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegData.EntityData.Children = types.NewOrderedMap()
    cccRegData.EntityData.Leafs = types.NewOrderedMap()
    cccRegData.EntityData.Leafs.Append("ccc_reg_addr", types.YLeaf{"CccRegAddr", cccRegData.CccRegAddr})
    cccRegData.EntityData.Leafs.Append("reg_value", types.YLeaf{"RegValue", cccRegData.RegValue})

    cccRegData.EntityData.YListKeys = []string {}

    return &(cccRegData.EntityData)
}

// Controller_CccDriver_Ejector
type Controller_CccDriver_Ejector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Status Controller_CccDriver_Ejector_Status
}

func (ejector *Controller_CccDriver_Ejector) GetEntityData() *types.CommonEntityData {
    ejector.EntityData.YFilter = ejector.YFilter
    ejector.EntityData.YangName = "ejector"
    ejector.EntityData.BundleName = "cisco_ios_xr"
    ejector.EntityData.ParentYangName = "ccc_driver"
    ejector.EntityData.SegmentPath = "ejector"
    ejector.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ejector.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ejector.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ejector.EntityData.Children = types.NewOrderedMap()
    ejector.EntityData.Children.Append("status", types.YChild{"Status", &ejector.Status})
    ejector.EntityData.Leafs = types.NewOrderedMap()

    ejector.EntityData.YListKeys = []string {}

    return &(ejector.EntityData)
}

// Controller_CccDriver_Ejector_Status
type Controller_CccDriver_Ejector_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Ejector_Status_CccEjectorStatus.
    CccEjectorStatus []*Controller_CccDriver_Ejector_Status_CccEjectorStatus
}

func (status *Controller_CccDriver_Ejector_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "ejector"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("ccc_ejector_status", types.YChild{"CccEjectorStatus", nil})
    for i := range status.CccEjectorStatus {
        status.EntityData.Children.Append(types.GetSegmentPath(status.CccEjectorStatus[i]), types.YChild{"CccEjectorStatus", status.CccEjectorStatus[i]})
    }
    status.EntityData.Leafs = types.NewOrderedMap()

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Controller_CccDriver_Ejector_Status_CccEjectorStatus
type Controller_CccDriver_Ejector_Status_CccEjectorStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    // The type is bool. The default value is false.
    CccIsFcCardType interface{}

    // The type is bool. The default value is false.
    CccIsLcCardType interface{}

    // The type is bool. The default value is false.
    CccIsRpScCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcPlatform interface{}

    // The type is string.
    CccEjcBoardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcCardSlot interface{}

    // The type is string.
    CccEjcCardVersion interface{}

    // The type is string.
    CccEjcBoardVersion interface{}

    // The type is string.
    CccEjcHwVersion interface{}

    // The type is string.
    CccEjcCoreVersion interface{}

    // The type is string.
    CccEjcPonVersion interface{}

    // The type is string.
    CccEjcRpSupported interface{}

    // The type is string.
    CccEjcEnable interface{}

    // The type is string.
    CccEjcStatus interface{}

    // The type is string.
    CccEjcRpPexCsr interface{}

    // The type is string.
    CccEjcGpLive interface{}

    // The type is string.
    CccEjcGpStatus interface{}

    // The type is string.
    CccEjcFcPexCsr interface{}

    // The type is string.
    CccEjcFcEjectorSupport interface{}

    // The type is string.
    CccEjcLcPexCsr interface{}

    // The type is string.
    CccEjcLcEjectorSupport interface{}
}

func (cccEjectorStatus *Controller_CccDriver_Ejector_Status_CccEjectorStatus) GetEntityData() *types.CommonEntityData {
    cccEjectorStatus.EntityData.YFilter = cccEjectorStatus.YFilter
    cccEjectorStatus.EntityData.YangName = "ccc_ejector_status"
    cccEjectorStatus.EntityData.BundleName = "cisco_ios_xr"
    cccEjectorStatus.EntityData.ParentYangName = "status"
    cccEjectorStatus.EntityData.SegmentPath = "ccc_ejector_status" + types.AddKeyToken(cccEjectorStatus.Location, "location")
    cccEjectorStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccEjectorStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccEjectorStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccEjectorStatus.EntityData.Children = types.NewOrderedMap()
    cccEjectorStatus.EntityData.Leafs = types.NewOrderedMap()
    cccEjectorStatus.EntityData.Leafs.Append("location", types.YLeaf{"Location", cccEjectorStatus.Location})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_is_fc_card_type", types.YLeaf{"CccIsFcCardType", cccEjectorStatus.CccIsFcCardType})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_is_lc_card_type", types.YLeaf{"CccIsLcCardType", cccEjectorStatus.CccIsLcCardType})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_is_rp_sc_card_type", types.YLeaf{"CccIsRpScCardType", cccEjectorStatus.CccIsRpScCardType})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_card_type", types.YLeaf{"CccEjcCardType", cccEjectorStatus.CccEjcCardType})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_platform", types.YLeaf{"CccEjcPlatform", cccEjectorStatus.CccEjcPlatform})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_board_type", types.YLeaf{"CccEjcBoardType", cccEjectorStatus.CccEjcBoardType})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_card_slot", types.YLeaf{"CccEjcCardSlot", cccEjectorStatus.CccEjcCardSlot})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_card_version", types.YLeaf{"CccEjcCardVersion", cccEjectorStatus.CccEjcCardVersion})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_board_version", types.YLeaf{"CccEjcBoardVersion", cccEjectorStatus.CccEjcBoardVersion})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_hw_version", types.YLeaf{"CccEjcHwVersion", cccEjectorStatus.CccEjcHwVersion})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_core_version", types.YLeaf{"CccEjcCoreVersion", cccEjectorStatus.CccEjcCoreVersion})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_pon_version", types.YLeaf{"CccEjcPonVersion", cccEjectorStatus.CccEjcPonVersion})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_rp_supported", types.YLeaf{"CccEjcRpSupported", cccEjectorStatus.CccEjcRpSupported})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_enable", types.YLeaf{"CccEjcEnable", cccEjectorStatus.CccEjcEnable})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_status", types.YLeaf{"CccEjcStatus", cccEjectorStatus.CccEjcStatus})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_rp_pex_csr", types.YLeaf{"CccEjcRpPexCsr", cccEjectorStatus.CccEjcRpPexCsr})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_gp_live", types.YLeaf{"CccEjcGpLive", cccEjectorStatus.CccEjcGpLive})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_gp_status", types.YLeaf{"CccEjcGpStatus", cccEjectorStatus.CccEjcGpStatus})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_fc_pex_csr", types.YLeaf{"CccEjcFcPexCsr", cccEjectorStatus.CccEjcFcPexCsr})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_fc_ejector_support", types.YLeaf{"CccEjcFcEjectorSupport", cccEjectorStatus.CccEjcFcEjectorSupport})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_lc_pex_csr", types.YLeaf{"CccEjcLcPexCsr", cccEjectorStatus.CccEjcLcPexCsr})
    cccEjectorStatus.EntityData.Leafs.Append("ccc_ejc_lc_ejector_support", types.YLeaf{"CccEjcLcEjectorSupport", cccEjectorStatus.CccEjcLcEjectorSupport})

    cccEjectorStatus.EntityData.YListKeys = []string {"Location"}

    return &(cccEjectorStatus.EntityData)
}

// Controller_CccDriver_I2cDev
type Controller_CccDriver_I2cDev struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CpuComplex Controller_CccDriver_I2cDev_CpuComplex

    
    Ioexpander Controller_CccDriver_I2cDev_Ioexpander
}

func (i2cDev *Controller_CccDriver_I2cDev) GetEntityData() *types.CommonEntityData {
    i2cDev.EntityData.YFilter = i2cDev.YFilter
    i2cDev.EntityData.YangName = "i2c-dev"
    i2cDev.EntityData.BundleName = "cisco_ios_xr"
    i2cDev.EntityData.ParentYangName = "ccc_driver"
    i2cDev.EntityData.SegmentPath = "i2c-dev"
    i2cDev.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    i2cDev.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    i2cDev.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    i2cDev.EntityData.Children = types.NewOrderedMap()
    i2cDev.EntityData.Children.Append("cpu-complex", types.YChild{"CpuComplex", &i2cDev.CpuComplex})
    i2cDev.EntityData.Children.Append("ioexpander", types.YChild{"Ioexpander", &i2cDev.Ioexpander})
    i2cDev.EntityData.Leafs = types.NewOrderedMap()

    i2cDev.EntityData.YListKeys = []string {}

    return &(i2cDev.EntityData)
}

// Controller_CccDriver_I2cDev_CpuComplex
type Controller_CccDriver_I2cDev_CpuComplex struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_I2cDev_CpuComplex_Location.
    Location []*Controller_CccDriver_I2cDev_CpuComplex_Location
}

func (cpuComplex *Controller_CccDriver_I2cDev_CpuComplex) GetEntityData() *types.CommonEntityData {
    cpuComplex.EntityData.YFilter = cpuComplex.YFilter
    cpuComplex.EntityData.YangName = "cpu-complex"
    cpuComplex.EntityData.BundleName = "cisco_ios_xr"
    cpuComplex.EntityData.ParentYangName = "i2c-dev"
    cpuComplex.EntityData.SegmentPath = "cpu-complex"
    cpuComplex.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpuComplex.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpuComplex.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpuComplex.EntityData.Children = types.NewOrderedMap()
    cpuComplex.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range cpuComplex.Location {
        cpuComplex.EntityData.Children.Append(types.GetSegmentPath(cpuComplex.Location[i]), types.YChild{"Location", cpuComplex.Location[i]})
    }
    cpuComplex.EntityData.Leafs = types.NewOrderedMap()

    cpuComplex.EntityData.YListKeys = []string {}

    return &(cpuComplex.EntityData)
}

// Controller_CccDriver_I2cDev_CpuComplex_Location
type Controller_CccDriver_I2cDev_CpuComplex_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CpuComplexDetail Controller_CccDriver_I2cDev_CpuComplex_Location_CpuComplexDetail
}

func (location *Controller_CccDriver_I2cDev_CpuComplex_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "cpu-complex"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("cpu_complex_detail", types.YChild{"CpuComplexDetail", &location.CpuComplexDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_I2cDev_CpuComplex_Location_CpuComplexDetail
type Controller_CccDriver_I2cDev_CpuComplex_Location_CpuComplexDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CpuComplexValues []interface{}
}

func (cpuComplexDetail *Controller_CccDriver_I2cDev_CpuComplex_Location_CpuComplexDetail) GetEntityData() *types.CommonEntityData {
    cpuComplexDetail.EntityData.YFilter = cpuComplexDetail.YFilter
    cpuComplexDetail.EntityData.YangName = "cpu_complex_detail"
    cpuComplexDetail.EntityData.BundleName = "cisco_ios_xr"
    cpuComplexDetail.EntityData.ParentYangName = "location"
    cpuComplexDetail.EntityData.SegmentPath = "cpu_complex_detail"
    cpuComplexDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpuComplexDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpuComplexDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpuComplexDetail.EntityData.Children = types.NewOrderedMap()
    cpuComplexDetail.EntityData.Leafs = types.NewOrderedMap()
    cpuComplexDetail.EntityData.Leafs.Append("cpu_complex_values", types.YLeaf{"CpuComplexValues", cpuComplexDetail.CpuComplexValues})

    cpuComplexDetail.EntityData.YListKeys = []string {}

    return &(cpuComplexDetail.EntityData)
}

// Controller_CccDriver_I2cDev_Ioexpander
type Controller_CccDriver_I2cDev_Ioexpander struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_I2cDev_Ioexpander_Location.
    Location []*Controller_CccDriver_I2cDev_Ioexpander_Location
}

func (ioexpander *Controller_CccDriver_I2cDev_Ioexpander) GetEntityData() *types.CommonEntityData {
    ioexpander.EntityData.YFilter = ioexpander.YFilter
    ioexpander.EntityData.YangName = "ioexpander"
    ioexpander.EntityData.BundleName = "cisco_ios_xr"
    ioexpander.EntityData.ParentYangName = "i2c-dev"
    ioexpander.EntityData.SegmentPath = "ioexpander"
    ioexpander.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ioexpander.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ioexpander.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ioexpander.EntityData.Children = types.NewOrderedMap()
    ioexpander.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range ioexpander.Location {
        ioexpander.EntityData.Children.Append(types.GetSegmentPath(ioexpander.Location[i]), types.YChild{"Location", ioexpander.Location[i]})
    }
    ioexpander.EntityData.Leafs = types.NewOrderedMap()

    ioexpander.EntityData.YListKeys = []string {}

    return &(ioexpander.EntityData)
}

// Controller_CccDriver_I2cDev_Ioexpander_Location
type Controller_CccDriver_I2cDev_Ioexpander_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    IoExpVal Controller_CccDriver_I2cDev_Ioexpander_Location_IoExpVal
}

func (location *Controller_CccDriver_I2cDev_Ioexpander_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ioexpander"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("io_exp_val", types.YChild{"IoExpVal", &location.IoExpVal})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_I2cDev_Ioexpander_Location_IoExpVal
type Controller_CccDriver_I2cDev_Ioexpander_Location_IoExpVal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    IoExpDetails []interface{}
}

func (ioExpVal *Controller_CccDriver_I2cDev_Ioexpander_Location_IoExpVal) GetEntityData() *types.CommonEntityData {
    ioExpVal.EntityData.YFilter = ioExpVal.YFilter
    ioExpVal.EntityData.YangName = "io_exp_val"
    ioExpVal.EntityData.BundleName = "cisco_ios_xr"
    ioExpVal.EntityData.ParentYangName = "location"
    ioExpVal.EntityData.SegmentPath = "io_exp_val"
    ioExpVal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ioExpVal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ioExpVal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ioExpVal.EntityData.Children = types.NewOrderedMap()
    ioExpVal.EntityData.Leafs = types.NewOrderedMap()
    ioExpVal.EntityData.Leafs.Append("io_exp_details", types.YLeaf{"IoExpDetails", ioExpVal.IoExpDetails})

    ioExpVal.EntityData.YListKeys = []string {}

    return &(ioExpVal.EntityData)
}

// Controller_CccDriver_Ethernet
type Controller_CccDriver_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    EthernetStatus Controller_CccDriver_Ethernet_EthernetStatus

    
    EthernetCounters Controller_CccDriver_Ethernet_EthernetCounters
}

func (ethernet *Controller_CccDriver_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "ccc_driver"
    ethernet.EntityData.SegmentPath = "ethernet"
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = types.NewOrderedMap()
    ethernet.EntityData.Children.Append("ethernet_status", types.YChild{"EthernetStatus", &ethernet.EthernetStatus})
    ethernet.EntityData.Children.Append("ethernet_counters", types.YChild{"EthernetCounters", &ethernet.EthernetCounters})
    ethernet.EntityData.Leafs = types.NewOrderedMap()

    ethernet.EntityData.YListKeys = []string {}

    return &(ethernet.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus
type Controller_CccDriver_Ethernet_EthernetStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Ethernet_EthernetStatus_Location.
    Location []*Controller_CccDriver_Ethernet_EthernetStatus_Location
}

func (ethernetStatus *Controller_CccDriver_Ethernet_EthernetStatus) GetEntityData() *types.CommonEntityData {
    ethernetStatus.EntityData.YFilter = ethernetStatus.YFilter
    ethernetStatus.EntityData.YangName = "ethernet_status"
    ethernetStatus.EntityData.BundleName = "cisco_ios_xr"
    ethernetStatus.EntityData.ParentYangName = "ethernet"
    ethernetStatus.EntityData.SegmentPath = "ethernet_status"
    ethernetStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetStatus.EntityData.Children = types.NewOrderedMap()
    ethernetStatus.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range ethernetStatus.Location {
        ethernetStatus.EntityData.Children.Append(types.GetSegmentPath(ethernetStatus.Location[i]), types.YChild{"Location", ethernetStatus.Location[i]})
    }
    ethernetStatus.EntityData.Leafs = types.NewOrderedMap()

    ethernetStatus.EntityData.YListKeys = []string {}

    return &(ethernetStatus.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus_Location
type Controller_CccDriver_Ethernet_EthernetStatus_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    EthernetStatus Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus
}

func (location *Controller_CccDriver_Ethernet_EthernetStatus_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ethernet_status"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("ethernet_status", types.YChild{"EthernetStatus", &location.EthernetStatus})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus
type Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    EthernetStatusValues []interface{}
}

func (ethernetStatus *Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus) GetEntityData() *types.CommonEntityData {
    ethernetStatus.EntityData.YFilter = ethernetStatus.YFilter
    ethernetStatus.EntityData.YangName = "ethernet_status"
    ethernetStatus.EntityData.BundleName = "cisco_ios_xr"
    ethernetStatus.EntityData.ParentYangName = "location"
    ethernetStatus.EntityData.SegmentPath = "ethernet_status"
    ethernetStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetStatus.EntityData.Children = types.NewOrderedMap()
    ethernetStatus.EntityData.Leafs = types.NewOrderedMap()
    ethernetStatus.EntityData.Leafs.Append("ethernet_status_values", types.YLeaf{"EthernetStatusValues", ethernetStatus.EthernetStatusValues})

    ethernetStatus.EntityData.YListKeys = []string {}

    return &(ethernetStatus.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters
type Controller_CccDriver_Ethernet_EthernetCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Ethernet_EthernetCounters_Location.
    Location []*Controller_CccDriver_Ethernet_EthernetCounters_Location
}

func (ethernetCounters *Controller_CccDriver_Ethernet_EthernetCounters) GetEntityData() *types.CommonEntityData {
    ethernetCounters.EntityData.YFilter = ethernetCounters.YFilter
    ethernetCounters.EntityData.YangName = "ethernet_counters"
    ethernetCounters.EntityData.BundleName = "cisco_ios_xr"
    ethernetCounters.EntityData.ParentYangName = "ethernet"
    ethernetCounters.EntityData.SegmentPath = "ethernet_counters"
    ethernetCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetCounters.EntityData.Children = types.NewOrderedMap()
    ethernetCounters.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range ethernetCounters.Location {
        ethernetCounters.EntityData.Children.Append(types.GetSegmentPath(ethernetCounters.Location[i]), types.YChild{"Location", ethernetCounters.Location[i]})
    }
    ethernetCounters.EntityData.Leafs = types.NewOrderedMap()

    ethernetCounters.EntityData.YListKeys = []string {}

    return &(ethernetCounters.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters_Location
type Controller_CccDriver_Ethernet_EthernetCounters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    EthernetCounters Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters
}

func (location *Controller_CccDriver_Ethernet_EthernetCounters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ethernet_counters"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("ethernet_counters", types.YChild{"EthernetCounters", &location.EthernetCounters})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters
type Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    EthernetCounterValues []interface{}
}

func (ethernetCounters *Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters) GetEntityData() *types.CommonEntityData {
    ethernetCounters.EntityData.YFilter = ethernetCounters.YFilter
    ethernetCounters.EntityData.YangName = "ethernet_counters"
    ethernetCounters.EntityData.BundleName = "cisco_ios_xr"
    ethernetCounters.EntityData.ParentYangName = "location"
    ethernetCounters.EntityData.SegmentPath = "ethernet_counters"
    ethernetCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetCounters.EntityData.Children = types.NewOrderedMap()
    ethernetCounters.EntityData.Leafs = types.NewOrderedMap()
    ethernetCounters.EntityData.Leafs.Append("ethernet_counter_values", types.YLeaf{"EthernetCounterValues", ethernetCounters.EthernetCounterValues})

    ethernetCounters.EntityData.YListKeys = []string {}

    return &(ethernetCounters.EntityData)
}

// Controller_CccDriver_EventHistory
type Controller_CccDriver_EventHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_EventHistory_Brief

    
    Detail Controller_CccDriver_EventHistory_Detail
}

func (eventHistory *Controller_CccDriver_EventHistory) GetEntityData() *types.CommonEntityData {
    eventHistory.EntityData.YFilter = eventHistory.YFilter
    eventHistory.EntityData.YangName = "event-history"
    eventHistory.EntityData.BundleName = "cisco_ios_xr"
    eventHistory.EntityData.ParentYangName = "ccc_driver"
    eventHistory.EntityData.SegmentPath = "event-history"
    eventHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventHistory.EntityData.Children = types.NewOrderedMap()
    eventHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &eventHistory.Brief})
    eventHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &eventHistory.Detail})
    eventHistory.EntityData.Leafs = types.NewOrderedMap()

    eventHistory.EntityData.YListKeys = []string {}

    return &(eventHistory.EntityData)
}

// Controller_CccDriver_EventHistory_Brief
type Controller_CccDriver_EventHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_EventHistory_Brief_Location.
    Location []*Controller_CccDriver_EventHistory_Brief_Location
}

func (brief *Controller_CccDriver_EventHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "event-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CccDriver_EventHistory_Brief_Location
type Controller_CccDriver_EventHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistBrief Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief
}

func (location *Controller_CccDriver_EventHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_brief", types.YChild{"CardEventHistBrief", &location.CardEventHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief
type Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistBriefValues []interface{}
}

func (cardEventHistBrief *Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief) GetEntityData() *types.CommonEntityData {
    cardEventHistBrief.EntityData.YFilter = cardEventHistBrief.YFilter
    cardEventHistBrief.EntityData.YangName = "card_event_hist_brief"
    cardEventHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistBrief.EntityData.ParentYangName = "location"
    cardEventHistBrief.EntityData.SegmentPath = "card_event_hist_brief"
    cardEventHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistBrief.EntityData.Children = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs.Append("card_event_hist_brief_values", types.YLeaf{"CardEventHistBriefValues", cardEventHistBrief.CardEventHistBriefValues})

    cardEventHistBrief.EntityData.YListKeys = []string {}

    return &(cardEventHistBrief.EntityData)
}

// Controller_CccDriver_EventHistory_Detail
type Controller_CccDriver_EventHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_EventHistory_Detail_Location.
    Location []*Controller_CccDriver_EventHistory_Detail_Location
}

func (detail *Controller_CccDriver_EventHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "event-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_EventHistory_Detail_Location
type Controller_CccDriver_EventHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistDetail Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail
}

func (location *Controller_CccDriver_EventHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_detail", types.YChild{"CardEventHistDetail", &location.CardEventHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail
type Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistDetailValues []interface{}
}

func (cardEventHistDetail *Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail) GetEntityData() *types.CommonEntityData {
    cardEventHistDetail.EntityData.YFilter = cardEventHistDetail.YFilter
    cardEventHistDetail.EntityData.YangName = "card_event_hist_detail"
    cardEventHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistDetail.EntityData.ParentYangName = "location"
    cardEventHistDetail.EntityData.SegmentPath = "card_event_hist_detail"
    cardEventHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistDetail.EntityData.Children = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs.Append("card_event_hist_detail_values", types.YLeaf{"CardEventHistDetailValues", cardEventHistDetail.CardEventHistDetailValues})

    cardEventHistDetail.EntityData.YListKeys = []string {}

    return &(cardEventHistDetail.EntityData)
}

// Controller_CccDriver_OirHistory
type Controller_CccDriver_OirHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_OirHistory_Rack.
    Rack []*Controller_CccDriver_OirHistory_Rack
}

func (oirHistory *Controller_CccDriver_OirHistory) GetEntityData() *types.CommonEntityData {
    oirHistory.EntityData.YFilter = oirHistory.YFilter
    oirHistory.EntityData.YangName = "oir-history"
    oirHistory.EntityData.BundleName = "cisco_ios_xr"
    oirHistory.EntityData.ParentYangName = "ccc_driver"
    oirHistory.EntityData.SegmentPath = "oir-history"
    oirHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oirHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oirHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oirHistory.EntityData.Children = types.NewOrderedMap()
    oirHistory.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range oirHistory.Rack {
        oirHistory.EntityData.Children.Append(types.GetSegmentPath(oirHistory.Rack[i]), types.YChild{"Rack", oirHistory.Rack[i]})
    }
    oirHistory.EntityData.Leafs = types.NewOrderedMap()

    oirHistory.EntityData.YListKeys = []string {}

    return &(oirHistory.EntityData)
}

// Controller_CccDriver_OirHistory_Rack
type Controller_CccDriver_OirHistory_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Rack interface{}

    
    CardOirHist Controller_CccDriver_OirHistory_Rack_CardOirHist
}

func (rack *Controller_CccDriver_OirHistory_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "oir-history"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.Rack, "rack")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("card_oir_hist", types.YChild{"CardOirHist", &rack.CardOirHist})
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", rack.Rack})

    rack.EntityData.YListKeys = []string {"Rack"}

    return &(rack.EntityData)
}

// Controller_CccDriver_OirHistory_Rack_CardOirHist
type Controller_CccDriver_OirHistory_Rack_CardOirHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardOirEvents []interface{}
}

func (cardOirHist *Controller_CccDriver_OirHistory_Rack_CardOirHist) GetEntityData() *types.CommonEntityData {
    cardOirHist.EntityData.YFilter = cardOirHist.YFilter
    cardOirHist.EntityData.YangName = "card_oir_hist"
    cardOirHist.EntityData.BundleName = "cisco_ios_xr"
    cardOirHist.EntityData.ParentYangName = "rack"
    cardOirHist.EntityData.SegmentPath = "card_oir_hist"
    cardOirHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardOirHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardOirHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardOirHist.EntityData.Children = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs.Append("card_oir_events", types.YLeaf{"CardOirEvents", cardOirHist.CardOirEvents})

    cardOirHist.EntityData.YListKeys = []string {}

    return &(cardOirHist.EntityData)
}

// Controller_CccDriver_NotifHistory
type Controller_CccDriver_NotifHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_NotifHistory_Brief

    
    Detail Controller_CccDriver_NotifHistory_Detail
}

func (notifHistory *Controller_CccDriver_NotifHistory) GetEntityData() *types.CommonEntityData {
    notifHistory.EntityData.YFilter = notifHistory.YFilter
    notifHistory.EntityData.YangName = "notif-history"
    notifHistory.EntityData.BundleName = "cisco_ios_xr"
    notifHistory.EntityData.ParentYangName = "ccc_driver"
    notifHistory.EntityData.SegmentPath = "notif-history"
    notifHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifHistory.EntityData.Children = types.NewOrderedMap()
    notifHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &notifHistory.Brief})
    notifHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &notifHistory.Detail})
    notifHistory.EntityData.Leafs = types.NewOrderedMap()

    notifHistory.EntityData.YListKeys = []string {}

    return &(notifHistory.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief
type Controller_CccDriver_NotifHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_NotifHistory_Brief_Location.
    Location []*Controller_CccDriver_NotifHistory_Brief_Location
}

func (brief *Controller_CccDriver_NotifHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "notif-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief_Location
type Controller_CccDriver_NotifHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistBrief Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief
}

func (location *Controller_CccDriver_NotifHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_brief", types.YChild{"CardNotifHistBrief", &location.CardNotifHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief
type Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistBriefValues []interface{}
}

func (cardNotifHistBrief *Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief) GetEntityData() *types.CommonEntityData {
    cardNotifHistBrief.EntityData.YFilter = cardNotifHistBrief.YFilter
    cardNotifHistBrief.EntityData.YangName = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistBrief.EntityData.ParentYangName = "location"
    cardNotifHistBrief.EntityData.SegmentPath = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistBrief.EntityData.Children = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs.Append("card_notif_hist_brief_values", types.YLeaf{"CardNotifHistBriefValues", cardNotifHistBrief.CardNotifHistBriefValues})

    cardNotifHistBrief.EntityData.YListKeys = []string {}

    return &(cardNotifHistBrief.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail
type Controller_CccDriver_NotifHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_NotifHistory_Detail_Location.
    Location []*Controller_CccDriver_NotifHistory_Detail_Location
}

func (detail *Controller_CccDriver_NotifHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "notif-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail_Location
type Controller_CccDriver_NotifHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistDetail Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail
}

func (location *Controller_CccDriver_NotifHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_detail", types.YChild{"CardNotifHistDetail", &location.CardNotifHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail
type Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistDetailValues []interface{}
}

func (cardNotifHistDetail *Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail) GetEntityData() *types.CommonEntityData {
    cardNotifHistDetail.EntityData.YFilter = cardNotifHistDetail.YFilter
    cardNotifHistDetail.EntityData.YangName = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistDetail.EntityData.ParentYangName = "location"
    cardNotifHistDetail.EntityData.SegmentPath = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistDetail.EntityData.Children = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs.Append("card_notif_hist_detail_values", types.YLeaf{"CardNotifHistDetailValues", cardNotifHistDetail.CardNotifHistDetailValues})

    cardNotifHistDetail.EntityData.YListKeys = []string {}

    return &(cardNotifHistDetail.EntityData)
}

// Controller_CccDriver_Slave
type Controller_CccDriver_Slave struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    EventHistory Controller_CccDriver_Slave_EventHistory

    
    NotifHistory Controller_CccDriver_Slave_NotifHistory

    
    OirHistory Controller_CccDriver_Slave_OirHistory
}

func (slave *Controller_CccDriver_Slave) GetEntityData() *types.CommonEntityData {
    slave.EntityData.YFilter = slave.YFilter
    slave.EntityData.YangName = "slave"
    slave.EntityData.BundleName = "cisco_ios_xr"
    slave.EntityData.ParentYangName = "ccc_driver"
    slave.EntityData.SegmentPath = "slave"
    slave.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slave.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slave.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slave.EntityData.Children = types.NewOrderedMap()
    slave.EntityData.Children.Append("event-history", types.YChild{"EventHistory", &slave.EventHistory})
    slave.EntityData.Children.Append("notif-history", types.YChild{"NotifHistory", &slave.NotifHistory})
    slave.EntityData.Children.Append("oir-history", types.YChild{"OirHistory", &slave.OirHistory})
    slave.EntityData.Leafs = types.NewOrderedMap()

    slave.EntityData.YListKeys = []string {}

    return &(slave.EntityData)
}

// Controller_CccDriver_Slave_EventHistory
type Controller_CccDriver_Slave_EventHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_Slave_EventHistory_Brief

    
    Detail Controller_CccDriver_Slave_EventHistory_Detail
}

func (eventHistory *Controller_CccDriver_Slave_EventHistory) GetEntityData() *types.CommonEntityData {
    eventHistory.EntityData.YFilter = eventHistory.YFilter
    eventHistory.EntityData.YangName = "event-history"
    eventHistory.EntityData.BundleName = "cisco_ios_xr"
    eventHistory.EntityData.ParentYangName = "slave"
    eventHistory.EntityData.SegmentPath = "event-history"
    eventHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventHistory.EntityData.Children = types.NewOrderedMap()
    eventHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &eventHistory.Brief})
    eventHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &eventHistory.Detail})
    eventHistory.EntityData.Leafs = types.NewOrderedMap()

    eventHistory.EntityData.YListKeys = []string {}

    return &(eventHistory.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief
type Controller_CccDriver_Slave_EventHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_EventHistory_Brief_Location.
    Location []*Controller_CccDriver_Slave_EventHistory_Brief_Location
}

func (brief *Controller_CccDriver_Slave_EventHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "event-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief_Location
type Controller_CccDriver_Slave_EventHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistBrief Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief
}

func (location *Controller_CccDriver_Slave_EventHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_brief", types.YChild{"CardEventHistBrief", &location.CardEventHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief
type Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistBriefValues []interface{}
}

func (cardEventHistBrief *Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief) GetEntityData() *types.CommonEntityData {
    cardEventHistBrief.EntityData.YFilter = cardEventHistBrief.YFilter
    cardEventHistBrief.EntityData.YangName = "card_event_hist_brief"
    cardEventHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistBrief.EntityData.ParentYangName = "location"
    cardEventHistBrief.EntityData.SegmentPath = "card_event_hist_brief"
    cardEventHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistBrief.EntityData.Children = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistBrief.EntityData.Leafs.Append("card_event_hist_brief_values", types.YLeaf{"CardEventHistBriefValues", cardEventHistBrief.CardEventHistBriefValues})

    cardEventHistBrief.EntityData.YListKeys = []string {}

    return &(cardEventHistBrief.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail
type Controller_CccDriver_Slave_EventHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_EventHistory_Detail_Location.
    Location []*Controller_CccDriver_Slave_EventHistory_Detail_Location
}

func (detail *Controller_CccDriver_Slave_EventHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "event-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail_Location
type Controller_CccDriver_Slave_EventHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistDetail Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail
}

func (location *Controller_CccDriver_Slave_EventHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_event_hist_detail", types.YChild{"CardEventHistDetail", &location.CardEventHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail
type Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistDetailValues []interface{}
}

func (cardEventHistDetail *Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail) GetEntityData() *types.CommonEntityData {
    cardEventHistDetail.EntityData.YFilter = cardEventHistDetail.YFilter
    cardEventHistDetail.EntityData.YangName = "card_event_hist_detail"
    cardEventHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistDetail.EntityData.ParentYangName = "location"
    cardEventHistDetail.EntityData.SegmentPath = "card_event_hist_detail"
    cardEventHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistDetail.EntityData.Children = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardEventHistDetail.EntityData.Leafs.Append("card_event_hist_detail_values", types.YLeaf{"CardEventHistDetailValues", cardEventHistDetail.CardEventHistDetailValues})

    cardEventHistDetail.EntityData.YListKeys = []string {}

    return &(cardEventHistDetail.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory
type Controller_CccDriver_Slave_NotifHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_Slave_NotifHistory_Brief

    
    Detail Controller_CccDriver_Slave_NotifHistory_Detail
}

func (notifHistory *Controller_CccDriver_Slave_NotifHistory) GetEntityData() *types.CommonEntityData {
    notifHistory.EntityData.YFilter = notifHistory.YFilter
    notifHistory.EntityData.YangName = "notif-history"
    notifHistory.EntityData.BundleName = "cisco_ios_xr"
    notifHistory.EntityData.ParentYangName = "slave"
    notifHistory.EntityData.SegmentPath = "notif-history"
    notifHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifHistory.EntityData.Children = types.NewOrderedMap()
    notifHistory.EntityData.Children.Append("brief", types.YChild{"Brief", &notifHistory.Brief})
    notifHistory.EntityData.Children.Append("detail", types.YChild{"Detail", &notifHistory.Detail})
    notifHistory.EntityData.Leafs = types.NewOrderedMap()

    notifHistory.EntityData.YListKeys = []string {}

    return &(notifHistory.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief
type Controller_CccDriver_Slave_NotifHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_NotifHistory_Brief_Location.
    Location []*Controller_CccDriver_Slave_NotifHistory_Brief_Location
}

func (brief *Controller_CccDriver_Slave_NotifHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "notif-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range brief.Location {
        brief.EntityData.Children.Append(types.GetSegmentPath(brief.Location[i]), types.YChild{"Location", brief.Location[i]})
    }
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief_Location
type Controller_CccDriver_Slave_NotifHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistBrief Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief
}

func (location *Controller_CccDriver_Slave_NotifHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_brief", types.YChild{"CardNotifHistBrief", &location.CardNotifHistBrief})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief
type Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistBriefValues []interface{}
}

func (cardNotifHistBrief *Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief) GetEntityData() *types.CommonEntityData {
    cardNotifHistBrief.EntityData.YFilter = cardNotifHistBrief.YFilter
    cardNotifHistBrief.EntityData.YangName = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistBrief.EntityData.ParentYangName = "location"
    cardNotifHistBrief.EntityData.SegmentPath = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistBrief.EntityData.Children = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistBrief.EntityData.Leafs.Append("card_notif_hist_brief_values", types.YLeaf{"CardNotifHistBriefValues", cardNotifHistBrief.CardNotifHistBriefValues})

    cardNotifHistBrief.EntityData.YListKeys = []string {}

    return &(cardNotifHistBrief.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail
type Controller_CccDriver_Slave_NotifHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_NotifHistory_Detail_Location.
    Location []*Controller_CccDriver_Slave_NotifHistory_Detail_Location
}

func (detail *Controller_CccDriver_Slave_NotifHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "notif-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail_Location
type Controller_CccDriver_Slave_NotifHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistDetail Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail
}

func (location *Controller_CccDriver_Slave_NotifHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("card_notif_hist_detail", types.YChild{"CardNotifHistDetail", &location.CardNotifHistDetail})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail
type Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistDetailValues []interface{}
}

func (cardNotifHistDetail *Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail) GetEntityData() *types.CommonEntityData {
    cardNotifHistDetail.EntityData.YFilter = cardNotifHistDetail.YFilter
    cardNotifHistDetail.EntityData.YangName = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistDetail.EntityData.ParentYangName = "location"
    cardNotifHistDetail.EntityData.SegmentPath = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistDetail.EntityData.Children = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs = types.NewOrderedMap()
    cardNotifHistDetail.EntityData.Leafs.Append("card_notif_hist_detail_values", types.YLeaf{"CardNotifHistDetailValues", cardNotifHistDetail.CardNotifHistDetailValues})

    cardNotifHistDetail.EntityData.YListKeys = []string {}

    return &(cardNotifHistDetail.EntityData)
}

// Controller_CccDriver_Slave_OirHistory
type Controller_CccDriver_Slave_OirHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Slave_OirHistory_Rack.
    Rack []*Controller_CccDriver_Slave_OirHistory_Rack
}

func (oirHistory *Controller_CccDriver_Slave_OirHistory) GetEntityData() *types.CommonEntityData {
    oirHistory.EntityData.YFilter = oirHistory.YFilter
    oirHistory.EntityData.YangName = "oir-history"
    oirHistory.EntityData.BundleName = "cisco_ios_xr"
    oirHistory.EntityData.ParentYangName = "slave"
    oirHistory.EntityData.SegmentPath = "oir-history"
    oirHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oirHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oirHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oirHistory.EntityData.Children = types.NewOrderedMap()
    oirHistory.EntityData.Children.Append("rack", types.YChild{"Rack", nil})
    for i := range oirHistory.Rack {
        oirHistory.EntityData.Children.Append(types.GetSegmentPath(oirHistory.Rack[i]), types.YChild{"Rack", oirHistory.Rack[i]})
    }
    oirHistory.EntityData.Leafs = types.NewOrderedMap()

    oirHistory.EntityData.YListKeys = []string {}

    return &(oirHistory.EntityData)
}

// Controller_CccDriver_Slave_OirHistory_Rack
type Controller_CccDriver_Slave_OirHistory_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Rack interface{}

    
    CardOirHist Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist
}

func (rack *Controller_CccDriver_Slave_OirHistory_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "oir-history"
    rack.EntityData.SegmentPath = "rack" + types.AddKeyToken(rack.Rack, "rack")
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = types.NewOrderedMap()
    rack.EntityData.Children.Append("card_oir_hist", types.YChild{"CardOirHist", &rack.CardOirHist})
    rack.EntityData.Leafs = types.NewOrderedMap()
    rack.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", rack.Rack})

    rack.EntityData.YListKeys = []string {"Rack"}

    return &(rack.EntityData)
}

// Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist
type Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardOirEvents []interface{}
}

func (cardOirHist *Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist) GetEntityData() *types.CommonEntityData {
    cardOirHist.EntityData.YFilter = cardOirHist.YFilter
    cardOirHist.EntityData.YangName = "card_oir_hist"
    cardOirHist.EntityData.BundleName = "cisco_ios_xr"
    cardOirHist.EntityData.ParentYangName = "rack"
    cardOirHist.EntityData.SegmentPath = "card_oir_hist"
    cardOirHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardOirHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardOirHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardOirHist.EntityData.Children = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs = types.NewOrderedMap()
    cardOirHist.EntityData.Leafs.Append("card_oir_events", types.YLeaf{"CardOirEvents", cardOirHist.CardOirEvents})

    cardOirHist.EntityData.YListKeys = []string {}

    return &(cardOirHist.EntityData)
}

// Controller_CccDriver_Action
type Controller_CccDriver_Action struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Register Controller_CccDriver_Action_Register
}

func (action *Controller_CccDriver_Action) GetEntityData() *types.CommonEntityData {
    action.EntityData.YFilter = action.YFilter
    action.EntityData.YangName = "action"
    action.EntityData.BundleName = "cisco_ios_xr"
    action.EntityData.ParentYangName = "ccc_driver"
    action.EntityData.SegmentPath = "action"
    action.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    action.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    action.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    action.EntityData.Children = types.NewOrderedMap()
    action.EntityData.Children.Append("register", types.YChild{"Register", &action.Register})
    action.EntityData.Leafs = types.NewOrderedMap()

    action.EntityData.YListKeys = []string {}

    return &(action.EntityData)
}

// Controller_CccDriver_Action_Register
type Controller_CccDriver_Action_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Action_Register_Location.
    Location []*Controller_CccDriver_Action_Register_Location
}

func (register *Controller_CccDriver_Action_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "action"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = types.NewOrderedMap()
    register.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range register.Location {
        register.EntityData.Children.Append(types.GetSegmentPath(register.Location[i]), types.YChild{"Location", register.Location[i]})
    }
    register.EntityData.Leafs = types.NewOrderedMap()

    register.EntityData.YListKeys = []string {}

    return &(register.EntityData)
}

// Controller_CccDriver_Action_Register_Location
type Controller_CccDriver_Action_Register_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}
}

func (location *Controller_CccDriver_Action_Register_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Location, "location")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location", types.YLeaf{"Location", location.Location})

    location.EntityData.YListKeys = []string {"Location"}

    return &(location.EntityData)
}

// Controller_Switch
type Controller_Switch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Control Ethernet switch operational data.
    Oper Controller_Switch_Oper
}

func (self *Controller_Switch) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "switch"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "controller"
    self.EntityData.SegmentPath = "switch"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("oper", types.YChild{"Oper", &self.Oper})
    self.EntityData.Leafs = types.NewOrderedMap()

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Controller_Switch_Oper
// Control Ethernet switch operational data.
type Controller_Switch_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Reachable Controller_Switch_Oper_Reachable

    
    Summary Controller_Switch_Oper_Summary

    
    Statistics Controller_Switch_Oper_Statistics

    
    Serdes Controller_Switch_Oper_Serdes

    
    Mac Controller_Switch_Oper_Mac

    
    Bridge Controller_Switch_Oper_Bridge

    
    Fdb Controller_Switch_Oper_Fdb

    
    Vlan Controller_Switch_Oper_Vlan

    
    Sdr Controller_Switch_Oper_Sdr

    
    Sfp Controller_Switch_Oper_Sfp

    // MLAP switch data.
    Mlap Controller_Switch_Oper_Mlap

    
    SwitchDebugCont Controller_Switch_Oper_SwitchDebugCont

    
    Esd Controller_Switch_Oper_Esd

    
    MgmtAgent Controller_Switch_Oper_MgmtAgent

    
    PortState Controller_Switch_Oper_PortState

    
    Trunk Controller_Switch_Oper_Trunk
}

func (oper *Controller_Switch_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "switch"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = types.NewOrderedMap()
    oper.EntityData.Children.Append("reachable", types.YChild{"Reachable", &oper.Reachable})
    oper.EntityData.Children.Append("summary", types.YChild{"Summary", &oper.Summary})
    oper.EntityData.Children.Append("statistics", types.YChild{"Statistics", &oper.Statistics})
    oper.EntityData.Children.Append("serdes", types.YChild{"Serdes", &oper.Serdes})
    oper.EntityData.Children.Append("mac", types.YChild{"Mac", &oper.Mac})
    oper.EntityData.Children.Append("bridge", types.YChild{"Bridge", &oper.Bridge})
    oper.EntityData.Children.Append("fdb", types.YChild{"Fdb", &oper.Fdb})
    oper.EntityData.Children.Append("vlan", types.YChild{"Vlan", &oper.Vlan})
    oper.EntityData.Children.Append("sdr", types.YChild{"Sdr", &oper.Sdr})
    oper.EntityData.Children.Append("sfp", types.YChild{"Sfp", &oper.Sfp})
    oper.EntityData.Children.Append("mlap", types.YChild{"Mlap", &oper.Mlap})
    oper.EntityData.Children.Append("switch-debug-cont", types.YChild{"SwitchDebugCont", &oper.SwitchDebugCont})
    oper.EntityData.Children.Append("esd", types.YChild{"Esd", &oper.Esd})
    oper.EntityData.Children.Append("mgmt-agent", types.YChild{"MgmtAgent", &oper.MgmtAgent})
    oper.EntityData.Children.Append("port-state", types.YChild{"PortState", &oper.PortState})
    oper.EntityData.Children.Append("trunk", types.YChild{"Trunk", &oper.Trunk})
    oper.EntityData.Leafs = types.NewOrderedMap()

    oper.EntityData.YListKeys = []string {}

    return &(oper.EntityData)
}

// Controller_Switch_Oper_Reachable
type Controller_Switch_Oper_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Reachable_Location.
    Location []*Controller_Switch_Oper_Reachable_Location
}

func (reachable *Controller_Switch_Oper_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "oper"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = types.NewOrderedMap()
    reachable.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range reachable.Location {
        reachable.EntityData.Children.Append(types.GetSegmentPath(reachable.Location[i]), types.YChild{"Location", reachable.Location[i]})
    }
    reachable.EntityData.Leafs = types.NewOrderedMap()

    reachable.EntityData.YListKeys = []string {}

    return &(reachable.EntityData)
}

// Controller_Switch_Oper_Reachable_Location
type Controller_Switch_Oper_Reachable_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}
}

func (location *Controller_Switch_Oper_Reachable_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "reachable"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Summary
type Controller_Switch_Oper_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Summary_Location.
    Location []*Controller_Switch_Oper_Summary_Location
}

func (summary *Controller_Switch_Oper_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "oper"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range summary.Location {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Location[i]), types.YChild{"Location", summary.Location[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Switch_Oper_Summary_Location
type Controller_Switch_Oper_Summary_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of Controller_Switch_Oper_Summary_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Summary_Location_PortIter
}

func (location *Controller_Switch_Oper_Summary_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", location.SerialNum})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Summary_Location_PortIter
type Controller_Switch_Oper_Summary_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Indicates the port speed in bits per second. The type is string.
    PortSpeed interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Summary_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})
    portIter.EntityData.Leafs.Append("phys-state", types.YLeaf{"PhysState", portIter.PhysState})
    portIter.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", portIter.AdminState})
    portIter.EntityData.Leafs.Append("port-speed", types.YLeaf{"PortSpeed", portIter.PortSpeed})
    portIter.EntityData.Leafs.Append("protocol-state", types.YLeaf{"ProtocolState", portIter.ProtocolState})
    portIter.EntityData.Leafs.Append("forwarding", types.YLeaf{"Forwarding", portIter.Forwarding})
    portIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", portIter.ConnectsTo})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics
type Controller_Switch_Oper_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SummaryStatistics Controller_Switch_Oper_Statistics_SummaryStatistics

    
    Detail Controller_Switch_Oper_Statistics_Detail
}

func (statistics *Controller_Switch_Oper_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "oper"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("summary-statistics", types.YChild{"SummaryStatistics", &statistics.SummaryStatistics})
    statistics.EntityData.Children.Append("detail", types.YChild{"Detail", &statistics.Detail})
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics
type Controller_Switch_Oper_Statistics_SummaryStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Statistics_SummaryStatistics_Location.
    Location []*Controller_Switch_Oper_Statistics_SummaryStatistics_Location
}

func (summaryStatistics *Controller_Switch_Oper_Statistics_SummaryStatistics) GetEntityData() *types.CommonEntityData {
    summaryStatistics.EntityData.YFilter = summaryStatistics.YFilter
    summaryStatistics.EntityData.YangName = "summary-statistics"
    summaryStatistics.EntityData.BundleName = "cisco_ios_xr"
    summaryStatistics.EntityData.ParentYangName = "statistics"
    summaryStatistics.EntityData.SegmentPath = "summary-statistics"
    summaryStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryStatistics.EntityData.Children = types.NewOrderedMap()
    summaryStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range summaryStatistics.Location {
        summaryStatistics.EntityData.Children.Append(types.GetSegmentPath(summaryStatistics.Location[i]), types.YChild{"Location", summaryStatistics.Location[i]})
    }
    summaryStatistics.EntityData.Leafs = types.NewOrderedMap()

    summaryStatistics.EntityData.YListKeys = []string {}

    return &(summaryStatistics.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics_Location
type Controller_Switch_Oper_Statistics_SummaryStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Statistics_SummaryStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", location.SerialNum})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter
type Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Physical port state changes. The type is interface{} with range:
    // 0..4294967295.
    StateChanges interface{}

    // Packets transmitted on this switch port. The type is interface{} with
    // range: 0..18446744073709551615.
    SwSumTxPackets interface{}

    // Indicates the port speed in bits per second. The type is interface{} with
    // range: 0..18446744073709551615.
    SwSumRxPackets interface{}

    // Indicates the number of transmitted packets that had an error or were
    // dropped by the policer. The type is interface{} with range:
    // 0..18446744073709551615.
    SwSumTxDropsErrors interface{}

    // Indicates the number of received packets that had an error or were dropped
    // by the policer. The type is interface{} with range:
    // 0..18446744073709551615.
    SwSumRxDropsErrors interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})
    portIter.EntityData.Leafs.Append("phys-state", types.YLeaf{"PhysState", portIter.PhysState})
    portIter.EntityData.Leafs.Append("state-changes", types.YLeaf{"StateChanges", portIter.StateChanges})
    portIter.EntityData.Leafs.Append("sw-sum-tx-packets", types.YLeaf{"SwSumTxPackets", portIter.SwSumTxPackets})
    portIter.EntityData.Leafs.Append("sw-sum-rx-packets", types.YLeaf{"SwSumRxPackets", portIter.SwSumRxPackets})
    portIter.EntityData.Leafs.Append("sw-sum-tx-drops-errors", types.YLeaf{"SwSumTxDropsErrors", portIter.SwSumTxDropsErrors})
    portIter.EntityData.Leafs.Append("sw-sum-rx-drops-errors", types.YLeaf{"SwSumRxDropsErrors", portIter.SwSumRxDropsErrors})
    portIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", portIter.ConnectsTo})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail
type Controller_Switch_Oper_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Statistics_Detail_Location.
    Location []*Controller_Switch_Oper_Statistics_Detail_Location
}

func (detail *Controller_Switch_Oper_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location
type Controller_Switch_Oper_Statistics_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Statistics_Detail_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Statistics_Detail_Location_PortIter
}

func (location *Controller_Switch_Oper_Statistics_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location_PortIter
type Controller_Switch_Oper_Statistics_Detail_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Indicates the port speed in bits per second. The type is string.
    PortSpeed interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}

    
    Counters Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters
}

func (portIter *Controller_Switch_Oper_Statistics_Detail_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("counters", types.YChild{"Counters", &portIter.Counters})
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})
    portIter.EntityData.Leafs.Append("phys-state", types.YLeaf{"PhysState", portIter.PhysState})
    portIter.EntityData.Leafs.Append("port-speed", types.YLeaf{"PortSpeed", portIter.PortSpeed})
    portIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", portIter.ConnectsTo})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters
type Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxUcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxMcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFlowControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxGoodOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBadOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFifoOverrun interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxUndersize interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFragments interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxOversize interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxJabber interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBadCrc interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxCollisions interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxPolicingDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxUcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxMcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxBcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxFlowControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxGoodOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxDeferred interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxFifoUnrun interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxMultCollision interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxExcessCollision interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxLateCollisions interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxPolicingDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxqDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets64 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets65127 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets128255 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets256511 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets5121023 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets1024Max interface{}
}

func (counters *Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "port-iter"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("sw-det-rx-ucast-packets", types.YLeaf{"SwDetRxUcastPackets", counters.SwDetRxUcastPackets})
    counters.EntityData.Leafs.Append("sw-det-rx-mcast-packets", types.YLeaf{"SwDetRxMcastPackets", counters.SwDetRxMcastPackets})
    counters.EntityData.Leafs.Append("sw-det-rx-bcast-packets", types.YLeaf{"SwDetRxBcastPackets", counters.SwDetRxBcastPackets})
    counters.EntityData.Leafs.Append("sw-det-rx-flow-control", types.YLeaf{"SwDetRxFlowControl", counters.SwDetRxFlowControl})
    counters.EntityData.Leafs.Append("sw-det-rx-good-octets", types.YLeaf{"SwDetRxGoodOctets", counters.SwDetRxGoodOctets})
    counters.EntityData.Leafs.Append("sw-det-rx-bad-octets", types.YLeaf{"SwDetRxBadOctets", counters.SwDetRxBadOctets})
    counters.EntityData.Leafs.Append("sw-det-rx-fifo-overrun", types.YLeaf{"SwDetRxFifoOverrun", counters.SwDetRxFifoOverrun})
    counters.EntityData.Leafs.Append("sw-det-rx-undersize", types.YLeaf{"SwDetRxUndersize", counters.SwDetRxUndersize})
    counters.EntityData.Leafs.Append("sw-det-rx-fragments", types.YLeaf{"SwDetRxFragments", counters.SwDetRxFragments})
    counters.EntityData.Leafs.Append("sw-det-rx-oversize", types.YLeaf{"SwDetRxOversize", counters.SwDetRxOversize})
    counters.EntityData.Leafs.Append("sw-det-rx-jabber", types.YLeaf{"SwDetRxJabber", counters.SwDetRxJabber})
    counters.EntityData.Leafs.Append("sw-det-rx-errors", types.YLeaf{"SwDetRxErrors", counters.SwDetRxErrors})
    counters.EntityData.Leafs.Append("sw-det-rx-bad-crc", types.YLeaf{"SwDetRxBadCrc", counters.SwDetRxBadCrc})
    counters.EntityData.Leafs.Append("sw-det-rx-collisions", types.YLeaf{"SwDetRxCollisions", counters.SwDetRxCollisions})
    counters.EntityData.Leafs.Append("sw-det-rx-policing-drops", types.YLeaf{"SwDetRxPolicingDrops", counters.SwDetRxPolicingDrops})
    counters.EntityData.Leafs.Append("sw-det-tx-ucast-packets", types.YLeaf{"SwDetTxUcastPackets", counters.SwDetTxUcastPackets})
    counters.EntityData.Leafs.Append("sw-det-tx-mcast-packets", types.YLeaf{"SwDetTxMcastPackets", counters.SwDetTxMcastPackets})
    counters.EntityData.Leafs.Append("sw-det-tx-bcast-packets", types.YLeaf{"SwDetTxBcastPackets", counters.SwDetTxBcastPackets})
    counters.EntityData.Leafs.Append("sw-det-tx-flow-control", types.YLeaf{"SwDetTxFlowControl", counters.SwDetTxFlowControl})
    counters.EntityData.Leafs.Append("sw-det-tx-good-octets", types.YLeaf{"SwDetTxGoodOctets", counters.SwDetTxGoodOctets})
    counters.EntityData.Leafs.Append("sw-det-tx-deferred", types.YLeaf{"SwDetTxDeferred", counters.SwDetTxDeferred})
    counters.EntityData.Leafs.Append("sw-det-tx-fifo-unrun", types.YLeaf{"SwDetTxFifoUnrun", counters.SwDetTxFifoUnrun})
    counters.EntityData.Leafs.Append("sw-det-tx-mult-collision", types.YLeaf{"SwDetTxMultCollision", counters.SwDetTxMultCollision})
    counters.EntityData.Leafs.Append("sw-det-tx-excess-collision", types.YLeaf{"SwDetTxExcessCollision", counters.SwDetTxExcessCollision})
    counters.EntityData.Leafs.Append("sw-det-tx-late-collisions", types.YLeaf{"SwDetTxLateCollisions", counters.SwDetTxLateCollisions})
    counters.EntityData.Leafs.Append("sw-det-tx-policing-drops", types.YLeaf{"SwDetTxPolicingDrops", counters.SwDetTxPolicingDrops})
    counters.EntityData.Leafs.Append("sw-det-txq-drops", types.YLeaf{"SwDetTxqDrops", counters.SwDetTxqDrops})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-64", types.YLeaf{"SwDetRxtxPackets64", counters.SwDetRxtxPackets64})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-65-127", types.YLeaf{"SwDetRxtxPackets65127", counters.SwDetRxtxPackets65127})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-128-255", types.YLeaf{"SwDetRxtxPackets128255", counters.SwDetRxtxPackets128255})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-256-511", types.YLeaf{"SwDetRxtxPackets256511", counters.SwDetRxtxPackets256511})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-512-1023", types.YLeaf{"SwDetRxtxPackets5121023", counters.SwDetRxtxPackets5121023})
    counters.EntityData.Leafs.Append("sw-det-rxtx-packets-1024-max", types.YLeaf{"SwDetRxtxPackets1024Max", counters.SwDetRxtxPackets1024Max})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Controller_Switch_Oper_Serdes
type Controller_Switch_Oper_Serdes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SerdesStatistics Controller_Switch_Oper_Serdes_SerdesStatistics
}

func (serdes *Controller_Switch_Oper_Serdes) GetEntityData() *types.CommonEntityData {
    serdes.EntityData.YFilter = serdes.YFilter
    serdes.EntityData.YangName = "serdes"
    serdes.EntityData.BundleName = "cisco_ios_xr"
    serdes.EntityData.ParentYangName = "oper"
    serdes.EntityData.SegmentPath = "serdes"
    serdes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdes.EntityData.Children = types.NewOrderedMap()
    serdes.EntityData.Children.Append("serdes-statistics", types.YChild{"SerdesStatistics", &serdes.SerdesStatistics})
    serdes.EntityData.Leafs = types.NewOrderedMap()

    serdes.EntityData.YListKeys = []string {}

    return &(serdes.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics
type Controller_Switch_Oper_Serdes_SerdesStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location.
    Location []*Controller_Switch_Oper_Serdes_SerdesStatistics_Location
}

func (serdesStatistics *Controller_Switch_Oper_Serdes_SerdesStatistics) GetEntityData() *types.CommonEntityData {
    serdesStatistics.EntityData.YFilter = serdesStatistics.YFilter
    serdesStatistics.EntityData.YangName = "serdes-statistics"
    serdesStatistics.EntityData.BundleName = "cisco_ios_xr"
    serdesStatistics.EntityData.ParentYangName = "serdes"
    serdesStatistics.EntityData.SegmentPath = "serdes-statistics"
    serdesStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdesStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdesStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdesStatistics.EntityData.Children = types.NewOrderedMap()
    serdesStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range serdesStatistics.Location {
        serdesStatistics.EntityData.Children.Append(types.GetSegmentPath(serdesStatistics.Location[i]), types.YChild{"Location", serdesStatistics.Location[i]})
    }
    serdesStatistics.EntityData.Leafs = types.NewOrderedMap()

    serdesStatistics.EntityData.YListKeys = []string {}

    return &(serdesStatistics.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch Serdes information for.
    // The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Serdes_SerdesStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "serdes-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry.
    SerdesEntry []*Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry
}

func (portIter *Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("serdes-entry", types.YChild{"SerdesEntry", nil})
    for i := range portIter.SerdesEntry {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.SerdesEntry[i]), types.YChild{"SerdesEntry", portIter.SerdesEntry[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Id interface{}

    // The type is string.
    BaseReg interface{}

    // The type is string.
    Desc interface{}

    // The type is string.
    Lane0 interface{}

    // The type is string.
    Lane1 interface{}

    // The type is string.
    Lane2 interface{}

    // The type is string.
    Lane3 interface{}
}

func (serdesEntry *Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry) GetEntityData() *types.CommonEntityData {
    serdesEntry.EntityData.YFilter = serdesEntry.YFilter
    serdesEntry.EntityData.YangName = "serdes-entry"
    serdesEntry.EntityData.BundleName = "cisco_ios_xr"
    serdesEntry.EntityData.ParentYangName = "port-iter"
    serdesEntry.EntityData.SegmentPath = "serdes-entry" + types.AddKeyToken(serdesEntry.Id, "id")
    serdesEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdesEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdesEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdesEntry.EntityData.Children = types.NewOrderedMap()
    serdesEntry.EntityData.Leafs = types.NewOrderedMap()
    serdesEntry.EntityData.Leafs.Append("id", types.YLeaf{"Id", serdesEntry.Id})
    serdesEntry.EntityData.Leafs.Append("base-reg", types.YLeaf{"BaseReg", serdesEntry.BaseReg})
    serdesEntry.EntityData.Leafs.Append("desc", types.YLeaf{"Desc", serdesEntry.Desc})
    serdesEntry.EntityData.Leafs.Append("lane-0", types.YLeaf{"Lane0", serdesEntry.Lane0})
    serdesEntry.EntityData.Leafs.Append("lane-1", types.YLeaf{"Lane1", serdesEntry.Lane1})
    serdesEntry.EntityData.Leafs.Append("lane-2", types.YLeaf{"Lane2", serdesEntry.Lane2})
    serdesEntry.EntityData.Leafs.Append("lane-3", types.YLeaf{"Lane3", serdesEntry.Lane3})

    serdesEntry.EntityData.YListKeys = []string {"Id"}

    return &(serdesEntry.EntityData)
}

// Controller_Switch_Oper_Mac
type Controller_Switch_Oper_Mac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    MacStatistics Controller_Switch_Oper_Mac_MacStatistics
}

func (mac *Controller_Switch_Oper_Mac) GetEntityData() *types.CommonEntityData {
    mac.EntityData.YFilter = mac.YFilter
    mac.EntityData.YangName = "mac"
    mac.EntityData.BundleName = "cisco_ios_xr"
    mac.EntityData.ParentYangName = "oper"
    mac.EntityData.SegmentPath = "mac"
    mac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mac.EntityData.Children = types.NewOrderedMap()
    mac.EntityData.Children.Append("mac-statistics", types.YChild{"MacStatistics", &mac.MacStatistics})
    mac.EntityData.Leafs = types.NewOrderedMap()

    mac.EntityData.YListKeys = []string {}

    return &(mac.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics
type Controller_Switch_Oper_Mac_MacStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mac_MacStatistics_Location.
    Location []*Controller_Switch_Oper_Mac_MacStatistics_Location
}

func (macStatistics *Controller_Switch_Oper_Mac_MacStatistics) GetEntityData() *types.CommonEntityData {
    macStatistics.EntityData.YFilter = macStatistics.YFilter
    macStatistics.EntityData.YangName = "mac-statistics"
    macStatistics.EntityData.BundleName = "cisco_ios_xr"
    macStatistics.EntityData.ParentYangName = "mac"
    macStatistics.EntityData.SegmentPath = "mac-statistics"
    macStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macStatistics.EntityData.Children = types.NewOrderedMap()
    macStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range macStatistics.Location {
        macStatistics.EntityData.Children.Append(types.GetSegmentPath(macStatistics.Location[i]), types.YChild{"Location", macStatistics.Location[i]})
    }
    macStatistics.EntityData.Leafs = types.NewOrderedMap()

    macStatistics.EntityData.YListKeys = []string {}

    return &(macStatistics.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location
type Controller_Switch_Oper_Mac_MacStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch MAC information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Mac_MacStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "mac-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter
type Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry.
    MacEntry []*Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry
}

func (portIter *Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("mac-entry", types.YChild{"MacEntry", nil})
    for i := range portIter.MacEntry {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.MacEntry[i]), types.YChild{"MacEntry", portIter.MacEntry[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry
type Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Id interface{}

    // The type is string.
    BaseReg interface{}

    // The type is string.
    Desc interface{}

    // The type is string.
    Value interface{}
}

func (macEntry *Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry) GetEntityData() *types.CommonEntityData {
    macEntry.EntityData.YFilter = macEntry.YFilter
    macEntry.EntityData.YangName = "mac-entry"
    macEntry.EntityData.BundleName = "cisco_ios_xr"
    macEntry.EntityData.ParentYangName = "port-iter"
    macEntry.EntityData.SegmentPath = "mac-entry" + types.AddKeyToken(macEntry.Id, "id")
    macEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macEntry.EntityData.Children = types.NewOrderedMap()
    macEntry.EntityData.Leafs = types.NewOrderedMap()
    macEntry.EntityData.Leafs.Append("id", types.YLeaf{"Id", macEntry.Id})
    macEntry.EntityData.Leafs.Append("base-reg", types.YLeaf{"BaseReg", macEntry.BaseReg})
    macEntry.EntityData.Leafs.Append("desc", types.YLeaf{"Desc", macEntry.Desc})
    macEntry.EntityData.Leafs.Append("value", types.YLeaf{"Value", macEntry.Value})

    macEntry.EntityData.YListKeys = []string {"Id"}

    return &(macEntry.EntityData)
}

// Controller_Switch_Oper_Bridge
type Controller_Switch_Oper_Bridge struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Statistics Controller_Switch_Oper_Bridge_Statistics
}

func (bridge *Controller_Switch_Oper_Bridge) GetEntityData() *types.CommonEntityData {
    bridge.EntityData.YFilter = bridge.YFilter
    bridge.EntityData.YangName = "bridge"
    bridge.EntityData.BundleName = "cisco_ios_xr"
    bridge.EntityData.ParentYangName = "oper"
    bridge.EntityData.SegmentPath = "bridge"
    bridge.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bridge.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bridge.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bridge.EntityData.Children = types.NewOrderedMap()
    bridge.EntityData.Children.Append("statistics", types.YChild{"Statistics", &bridge.Statistics})
    bridge.EntityData.Leafs = types.NewOrderedMap()

    bridge.EntityData.YListKeys = []string {}

    return &(bridge.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics
type Controller_Switch_Oper_Bridge_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Bridge_Statistics_Location.
    Location []*Controller_Switch_Oper_Bridge_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Bridge_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "bridge"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range statistics.Location {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Location[i]), types.YChild{"Location", statistics.Location[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location
type Controller_Switch_Oper_Bridge_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId.
    IngressSetId []*Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId

    // The type is slice of
    // Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId.
    EgressSetId []*Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId
}

func (location *Controller_Switch_Oper_Bridge_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("ingress-set-id", types.YChild{"IngressSetId", nil})
    for i := range location.IngressSetId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.IngressSetId[i]), types.YChild{"IngressSetId", location.IngressSetId[i]})
    }
    location.EntityData.Children.Append("egress-set-id", types.YChild{"EgressSetId", nil})
    for i := range location.EgressSetId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.EgressSetId[i]), types.YChild{"EgressSetId", location.EgressSetId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId
type Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IngressSet interface{}

    // The type is string.
    IngressSetName interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressVlanDiscards interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressSecurityDiscards interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressOtherDiscards interface{}
}

func (ingressSetId *Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId) GetEntityData() *types.CommonEntityData {
    ingressSetId.EntityData.YFilter = ingressSetId.YFilter
    ingressSetId.EntityData.YangName = "ingress-set-id"
    ingressSetId.EntityData.BundleName = "cisco_ios_xr"
    ingressSetId.EntityData.ParentYangName = "location"
    ingressSetId.EntityData.SegmentPath = "ingress-set-id" + types.AddKeyToken(ingressSetId.IngressSet, "ingress-set")
    ingressSetId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingressSetId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingressSetId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingressSetId.EntityData.Children = types.NewOrderedMap()
    ingressSetId.EntityData.Leafs = types.NewOrderedMap()
    ingressSetId.EntityData.Leafs.Append("ingress-set", types.YLeaf{"IngressSet", ingressSetId.IngressSet})
    ingressSetId.EntityData.Leafs.Append("ingress-set-name", types.YLeaf{"IngressSetName", ingressSetId.IngressSetName})
    ingressSetId.EntityData.Leafs.Append("ingress-frames", types.YLeaf{"IngressFrames", ingressSetId.IngressFrames})
    ingressSetId.EntityData.Leafs.Append("ingress-vlan-discards", types.YLeaf{"IngressVlanDiscards", ingressSetId.IngressVlanDiscards})
    ingressSetId.EntityData.Leafs.Append("ingress-security-discards", types.YLeaf{"IngressSecurityDiscards", ingressSetId.IngressSecurityDiscards})
    ingressSetId.EntityData.Leafs.Append("ingress-other-discards", types.YLeaf{"IngressOtherDiscards", ingressSetId.IngressOtherDiscards})

    ingressSetId.EntityData.YListKeys = []string {"IngressSet"}

    return &(ingressSetId.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId
type Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    EgressSet interface{}

    // The type is string.
    EgressSetName interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressUcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressMcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressBcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressDiscardedFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressTxqCongestion interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressCtrlPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressOtherDrops interface{}
}

func (egressSetId *Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId) GetEntityData() *types.CommonEntityData {
    egressSetId.EntityData.YFilter = egressSetId.YFilter
    egressSetId.EntityData.YangName = "egress-set-id"
    egressSetId.EntityData.BundleName = "cisco_ios_xr"
    egressSetId.EntityData.ParentYangName = "location"
    egressSetId.EntityData.SegmentPath = "egress-set-id" + types.AddKeyToken(egressSetId.EgressSet, "egress-set")
    egressSetId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egressSetId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egressSetId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egressSetId.EntityData.Children = types.NewOrderedMap()
    egressSetId.EntityData.Leafs = types.NewOrderedMap()
    egressSetId.EntityData.Leafs.Append("egress-set", types.YLeaf{"EgressSet", egressSetId.EgressSet})
    egressSetId.EntityData.Leafs.Append("egress-set-name", types.YLeaf{"EgressSetName", egressSetId.EgressSetName})
    egressSetId.EntityData.Leafs.Append("egress-ucast-frames", types.YLeaf{"EgressUcastFrames", egressSetId.EgressUcastFrames})
    egressSetId.EntityData.Leafs.Append("egress-mcast-frames", types.YLeaf{"EgressMcastFrames", egressSetId.EgressMcastFrames})
    egressSetId.EntityData.Leafs.Append("egress-bcast-frames", types.YLeaf{"EgressBcastFrames", egressSetId.EgressBcastFrames})
    egressSetId.EntityData.Leafs.Append("egress-discarded-frames", types.YLeaf{"EgressDiscardedFrames", egressSetId.EgressDiscardedFrames})
    egressSetId.EntityData.Leafs.Append("egress-txq-congestion", types.YLeaf{"EgressTxqCongestion", egressSetId.EgressTxqCongestion})
    egressSetId.EntityData.Leafs.Append("egress-ctrl-packets", types.YLeaf{"EgressCtrlPackets", egressSetId.EgressCtrlPackets})
    egressSetId.EntityData.Leafs.Append("egress-other-drops", types.YLeaf{"EgressOtherDrops", egressSetId.EgressOtherDrops})

    egressSetId.EntityData.YListKeys = []string {"EgressSet"}

    return &(egressSetId.EntityData)
}

// Controller_Switch_Oper_Fdb
type Controller_Switch_Oper_Fdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Vlan Controller_Switch_Oper_Fdb_Vlan

    
    Mac Controller_Switch_Oper_Fdb_Mac

    
    Port Controller_Switch_Oper_Fdb_Port

    
    Statistics Controller_Switch_Oper_Fdb_Statistics

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_SwitchFdbCommon
}

func (fdb *Controller_Switch_Oper_Fdb) GetEntityData() *types.CommonEntityData {
    fdb.EntityData.YFilter = fdb.YFilter
    fdb.EntityData.YangName = "fdb"
    fdb.EntityData.BundleName = "cisco_ios_xr"
    fdb.EntityData.ParentYangName = "oper"
    fdb.EntityData.SegmentPath = "fdb"
    fdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdb.EntityData.Children = types.NewOrderedMap()
    fdb.EntityData.Children.Append("vlan", types.YChild{"Vlan", &fdb.Vlan})
    fdb.EntityData.Children.Append("mac", types.YChild{"Mac", &fdb.Mac})
    fdb.EntityData.Children.Append("port", types.YChild{"Port", &fdb.Port})
    fdb.EntityData.Children.Append("statistics", types.YChild{"Statistics", &fdb.Statistics})
    fdb.EntityData.Children.Append("switch-fdb-common", types.YChild{"SwitchFdbCommon", &fdb.SwitchFdbCommon})
    fdb.EntityData.Leafs = types.NewOrderedMap()

    fdb.EntityData.YListKeys = []string {}

    return &(fdb.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan
type Controller_Switch_Oper_Fdb_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Vlan_VlanIter.
    VlanIter []*Controller_Switch_Oper_Fdb_Vlan_VlanIter
}

func (vlan *Controller_Switch_Oper_Fdb_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "cisco_ios_xr"
    vlan.EntityData.ParentYangName = "fdb"
    vlan.EntityData.SegmentPath = "vlan"
    vlan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlan.EntityData.Children = types.NewOrderedMap()
    vlan.EntityData.Children.Append("vlan-iter", types.YChild{"VlanIter", nil})
    for i := range vlan.VlanIter {
        vlan.EntityData.Children.Append(types.GetSegmentPath(vlan.VlanIter[i]), types.YChild{"VlanIter", vlan.VlanIter[i]})
    }
    vlan.EntityData.Leafs = types.NewOrderedMap()

    vlan.EntityData.YListKeys = []string {}

    return &(vlan.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter
type Controller_Switch_Oper_Fdb_Vlan_VlanIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon
}

func (vlanIter *Controller_Switch_Oper_Fdb_Vlan_VlanIter) GetEntityData() *types.CommonEntityData {
    vlanIter.EntityData.YFilter = vlanIter.YFilter
    vlanIter.EntityData.YangName = "vlan-iter"
    vlanIter.EntityData.BundleName = "cisco_ios_xr"
    vlanIter.EntityData.ParentYangName = "vlan"
    vlanIter.EntityData.SegmentPath = "vlan-iter" + types.AddKeyToken(vlanIter.Vlan, "vlan")
    vlanIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanIter.EntityData.Children = types.NewOrderedMap()
    vlanIter.EntityData.Children.Append("switch-fdb-common", types.YChild{"SwitchFdbCommon", &vlanIter.SwitchFdbCommon})
    vlanIter.EntityData.Leafs = types.NewOrderedMap()
    vlanIter.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanIter.Vlan})

    vlanIter.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location.
    Location []*Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "vlan-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = types.NewOrderedMap()
    switchFdbCommon.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children.Append(types.GetSegmentPath(switchFdbCommon.Location[i]), types.YChild{"Location", switchFdbCommon.Location[i]})
    }
    switchFdbCommon.EntityData.Leafs = types.NewOrderedMap()

    switchFdbCommon.EntityData.YListKeys = []string {}

    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("fdb-block", types.YChild{"FdbBlock", &location.FdbBlock})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", location.NumEntries})
    location.EntityData.Leafs.Append("has-trunk-entry", types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry})
    location.EntityData.Leafs.Append("trunk-entry-message", types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []*Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = types.NewOrderedMap()
    fdbBlock.EntityData.Children.Append("fdb-entry", types.YChild{"FdbEntry", nil})
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children.Append(types.GetSegmentPath(fdbBlock.FdbEntry[i]), types.YChild{"FdbEntry", fdbBlock.FdbEntry[i]})
    }
    fdbBlock.EntityData.Leafs = types.NewOrderedMap()

    fdbBlock.EntityData.YListKeys = []string {}

    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + types.AddKeyToken(fdbEntry.FdbIndex, "fdb-index")
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs.Append("fdb-index", types.YLeaf{"FdbIndex", fdbEntry.FdbIndex})
    fdbEntry.EntityData.Leafs.Append("fdb-mac-addr", types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan", types.YLeaf{"FdbVlan", fdbEntry.FdbVlan})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan-hex", types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex})
    fdbEntry.EntityData.Leafs.Append("fdb-port", types.YLeaf{"FdbPort", fdbEntry.FdbPort})
    fdbEntry.EntityData.Leafs.Append("fdb-trap-entry", types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-static-entry", types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-synced-cores", types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores})

    fdbEntry.EntityData.YListKeys = []string {"FdbIndex"}

    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac
type Controller_Switch_Oper_Fdb_Mac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Mac_MacIter.
    MacIter []*Controller_Switch_Oper_Fdb_Mac_MacIter
}

func (mac *Controller_Switch_Oper_Fdb_Mac) GetEntityData() *types.CommonEntityData {
    mac.EntityData.YFilter = mac.YFilter
    mac.EntityData.YangName = "mac"
    mac.EntityData.BundleName = "cisco_ios_xr"
    mac.EntityData.ParentYangName = "fdb"
    mac.EntityData.SegmentPath = "mac"
    mac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mac.EntityData.Children = types.NewOrderedMap()
    mac.EntityData.Children.Append("mac-iter", types.YChild{"MacIter", nil})
    for i := range mac.MacIter {
        mac.EntityData.Children.Append(types.GetSegmentPath(mac.MacIter[i]), types.YChild{"MacIter", mac.MacIter[i]})
    }
    mac.EntityData.Leafs = types.NewOrderedMap()

    mac.EntityData.YListKeys = []string {}

    return &(mac.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter
type Controller_Switch_Oper_Fdb_Mac_MacIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Mac interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon
}

func (macIter *Controller_Switch_Oper_Fdb_Mac_MacIter) GetEntityData() *types.CommonEntityData {
    macIter.EntityData.YFilter = macIter.YFilter
    macIter.EntityData.YangName = "mac-iter"
    macIter.EntityData.BundleName = "cisco_ios_xr"
    macIter.EntityData.ParentYangName = "mac"
    macIter.EntityData.SegmentPath = "mac-iter" + types.AddKeyToken(macIter.Mac, "mac")
    macIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macIter.EntityData.Children = types.NewOrderedMap()
    macIter.EntityData.Children.Append("switch-fdb-common", types.YChild{"SwitchFdbCommon", &macIter.SwitchFdbCommon})
    macIter.EntityData.Leafs = types.NewOrderedMap()
    macIter.EntityData.Leafs.Append("mac", types.YLeaf{"Mac", macIter.Mac})

    macIter.EntityData.YListKeys = []string {"Mac"}

    return &(macIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location.
    Location []*Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "mac-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = types.NewOrderedMap()
    switchFdbCommon.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children.Append(types.GetSegmentPath(switchFdbCommon.Location[i]), types.YChild{"Location", switchFdbCommon.Location[i]})
    }
    switchFdbCommon.EntityData.Leafs = types.NewOrderedMap()

    switchFdbCommon.EntityData.YListKeys = []string {}

    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("fdb-block", types.YChild{"FdbBlock", &location.FdbBlock})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", location.NumEntries})
    location.EntityData.Leafs.Append("has-trunk-entry", types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry})
    location.EntityData.Leafs.Append("trunk-entry-message", types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []*Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = types.NewOrderedMap()
    fdbBlock.EntityData.Children.Append("fdb-entry", types.YChild{"FdbEntry", nil})
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children.Append(types.GetSegmentPath(fdbBlock.FdbEntry[i]), types.YChild{"FdbEntry", fdbBlock.FdbEntry[i]})
    }
    fdbBlock.EntityData.Leafs = types.NewOrderedMap()

    fdbBlock.EntityData.YListKeys = []string {}

    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + types.AddKeyToken(fdbEntry.FdbIndex, "fdb-index")
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs.Append("fdb-index", types.YLeaf{"FdbIndex", fdbEntry.FdbIndex})
    fdbEntry.EntityData.Leafs.Append("fdb-mac-addr", types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan", types.YLeaf{"FdbVlan", fdbEntry.FdbVlan})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan-hex", types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex})
    fdbEntry.EntityData.Leafs.Append("fdb-port", types.YLeaf{"FdbPort", fdbEntry.FdbPort})
    fdbEntry.EntityData.Leafs.Append("fdb-trap-entry", types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-static-entry", types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-synced-cores", types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores})

    fdbEntry.EntityData.YListKeys = []string {"FdbIndex"}

    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Port
type Controller_Switch_Oper_Fdb_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Port_PortIter.
    PortIter []*Controller_Switch_Oper_Fdb_Port_PortIter
}

func (port *Controller_Switch_Oper_Fdb_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "fdb"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = types.NewOrderedMap()
    port.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range port.PortIter {
        port.EntityData.Children.Append(types.GetSegmentPath(port.PortIter[i]), types.YChild{"PortIter", port.PortIter[i]})
    }
    port.EntityData.Leafs = types.NewOrderedMap()

    port.EntityData.YListKeys = []string {}

    return &(port.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter
type Controller_Switch_Oper_Fdb_Port_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port used for filtering. The type is
    // interface{} with range: 0..127.
    Port interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon
}

func (portIter *Controller_Switch_Oper_Fdb_Port_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "port"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("switch-fdb-common", types.YChild{"SwitchFdbCommon", &portIter.SwitchFdbCommon})
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location.
    Location []*Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "port-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = types.NewOrderedMap()
    switchFdbCommon.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children.Append(types.GetSegmentPath(switchFdbCommon.Location[i]), types.YChild{"Location", switchFdbCommon.Location[i]})
    }
    switchFdbCommon.EntityData.Leafs = types.NewOrderedMap()

    switchFdbCommon.EntityData.YListKeys = []string {}

    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("fdb-block", types.YChild{"FdbBlock", &location.FdbBlock})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", location.NumEntries})
    location.EntityData.Leafs.Append("has-trunk-entry", types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry})
    location.EntityData.Leafs.Append("trunk-entry-message", types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []*Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = types.NewOrderedMap()
    fdbBlock.EntityData.Children.Append("fdb-entry", types.YChild{"FdbEntry", nil})
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children.Append(types.GetSegmentPath(fdbBlock.FdbEntry[i]), types.YChild{"FdbEntry", fdbBlock.FdbEntry[i]})
    }
    fdbBlock.EntityData.Leafs = types.NewOrderedMap()

    fdbBlock.EntityData.YListKeys = []string {}

    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + types.AddKeyToken(fdbEntry.FdbIndex, "fdb-index")
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs.Append("fdb-index", types.YLeaf{"FdbIndex", fdbEntry.FdbIndex})
    fdbEntry.EntityData.Leafs.Append("fdb-mac-addr", types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan", types.YLeaf{"FdbVlan", fdbEntry.FdbVlan})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan-hex", types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex})
    fdbEntry.EntityData.Leafs.Append("fdb-port", types.YLeaf{"FdbPort", fdbEntry.FdbPort})
    fdbEntry.EntityData.Leafs.Append("fdb-trap-entry", types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-static-entry", types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-synced-cores", types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores})

    fdbEntry.EntityData.YListKeys = []string {"FdbIndex"}

    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics
type Controller_Switch_Oper_Fdb_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Statistics_Location.
    Location []*Controller_Switch_Oper_Fdb_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Fdb_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fdb"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range statistics.Location {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Location[i]), types.YChild{"Location", statistics.Location[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location
type Controller_Switch_Oper_Fdb_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    CounterInfo Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo

    // The type is slice of Controller_Switch_Oper_Fdb_Statistics_Location_CoreId.
    CoreId []*Controller_Switch_Oper_Fdb_Statistics_Location_CoreId
}

func (location *Controller_Switch_Oper_Fdb_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("counter-info", types.YChild{"CounterInfo", &location.CounterInfo})
    location.EntityData.Children.Append("core-id", types.YChild{"CoreId", nil})
    for i := range location.CoreId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.CoreId[i]), types.YChild{"CoreId", location.CoreId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo
type Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    FdbShadowEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMaxShadowEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMaxHashChain interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesAdded interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesDeleted interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesUpdated interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbFlushes interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbNewAddresses interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAgedUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbTransplantUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbForwardingUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressInsertErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdateErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMemoryErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAllocationErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdatesQueued interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbAddressQueueFull interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbForwardingUpdatesQueued interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbForwardingQueueFull interface{}
}

func (counterInfo *Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo) GetEntityData() *types.CommonEntityData {
    counterInfo.EntityData.YFilter = counterInfo.YFilter
    counterInfo.EntityData.YangName = "counter-info"
    counterInfo.EntityData.BundleName = "cisco_ios_xr"
    counterInfo.EntityData.ParentYangName = "location"
    counterInfo.EntityData.SegmentPath = "counter-info"
    counterInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counterInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counterInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counterInfo.EntityData.Children = types.NewOrderedMap()
    counterInfo.EntityData.Leafs = types.NewOrderedMap()
    counterInfo.EntityData.Leafs.Append("fdb-shadow-entries", types.YLeaf{"FdbShadowEntries", counterInfo.FdbShadowEntries})
    counterInfo.EntityData.Leafs.Append("fdb-max-shadow-entries", types.YLeaf{"FdbMaxShadowEntries", counterInfo.FdbMaxShadowEntries})
    counterInfo.EntityData.Leafs.Append("fdb-max-hash-chain", types.YLeaf{"FdbMaxHashChain", counterInfo.FdbMaxHashChain})
    counterInfo.EntityData.Leafs.Append("fdb-entries-added", types.YLeaf{"FdbEntriesAdded", counterInfo.FdbEntriesAdded})
    counterInfo.EntityData.Leafs.Append("fdb-entries-deleted", types.YLeaf{"FdbEntriesDeleted", counterInfo.FdbEntriesDeleted})
    counterInfo.EntityData.Leafs.Append("fdb-entries-updated", types.YLeaf{"FdbEntriesUpdated", counterInfo.FdbEntriesUpdated})
    counterInfo.EntityData.Leafs.Append("fdb-flushes", types.YLeaf{"FdbFlushes", counterInfo.FdbFlushes})
    counterInfo.EntityData.Leafs.Append("fdb-address-updates", types.YLeaf{"FdbAddressUpdates", counterInfo.FdbAddressUpdates})
    counterInfo.EntityData.Leafs.Append("fdb-new-addresses", types.YLeaf{"FdbNewAddresses", counterInfo.FdbNewAddresses})
    counterInfo.EntityData.Leafs.Append("fdb-aged-updates", types.YLeaf{"FdbAgedUpdates", counterInfo.FdbAgedUpdates})
    counterInfo.EntityData.Leafs.Append("fdb-transplant-updates", types.YLeaf{"FdbTransplantUpdates", counterInfo.FdbTransplantUpdates})
    counterInfo.EntityData.Leafs.Append("fdb-forwarding-updates", types.YLeaf{"FdbForwardingUpdates", counterInfo.FdbForwardingUpdates})
    counterInfo.EntityData.Leafs.Append("fdb-address-insert-errors", types.YLeaf{"FdbAddressInsertErrors", counterInfo.FdbAddressInsertErrors})
    counterInfo.EntityData.Leafs.Append("fdb-address-update-errors", types.YLeaf{"FdbAddressUpdateErrors", counterInfo.FdbAddressUpdateErrors})
    counterInfo.EntityData.Leafs.Append("fdb-memory-errors", types.YLeaf{"FdbMemoryErrors", counterInfo.FdbMemoryErrors})
    counterInfo.EntityData.Leafs.Append("fdb-allocation-errors", types.YLeaf{"FdbAllocationErrors", counterInfo.FdbAllocationErrors})
    counterInfo.EntityData.Leafs.Append("fdb-address-updates-queued", types.YLeaf{"FdbAddressUpdatesQueued", counterInfo.FdbAddressUpdatesQueued})
    counterInfo.EntityData.Leafs.Append("fdb-address-queue-full", types.YLeaf{"FdbAddressQueueFull", counterInfo.FdbAddressQueueFull})
    counterInfo.EntityData.Leafs.Append("fdb-forwarding-updates-queued", types.YLeaf{"FdbForwardingUpdatesQueued", counterInfo.FdbForwardingUpdatesQueued})
    counterInfo.EntityData.Leafs.Append("fdb-forwarding-queue-full", types.YLeaf{"FdbForwardingQueueFull", counterInfo.FdbForwardingQueueFull})

    counterInfo.EntityData.YListKeys = []string {}

    return &(counterInfo.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location_CoreId
type Controller_Switch_Oper_Fdb_Statistics_Location_CoreId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Core interface{}

    // The type is interface{} with range: 0..4294967295.
    CoreEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    CoreStaticEntries interface{}
}

func (coreId *Controller_Switch_Oper_Fdb_Statistics_Location_CoreId) GetEntityData() *types.CommonEntityData {
    coreId.EntityData.YFilter = coreId.YFilter
    coreId.EntityData.YangName = "core-id"
    coreId.EntityData.BundleName = "cisco_ios_xr"
    coreId.EntityData.ParentYangName = "location"
    coreId.EntityData.SegmentPath = "core-id" + types.AddKeyToken(coreId.Core, "core")
    coreId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    coreId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    coreId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    coreId.EntityData.Children = types.NewOrderedMap()
    coreId.EntityData.Leafs = types.NewOrderedMap()
    coreId.EntityData.Leafs.Append("core", types.YLeaf{"Core", coreId.Core})
    coreId.EntityData.Leafs.Append("core-entries", types.YLeaf{"CoreEntries", coreId.CoreEntries})
    coreId.EntityData.Leafs.Append("core-static-entries", types.YLeaf{"CoreStaticEntries", coreId.CoreStaticEntries})

    coreId.EntityData.YListKeys = []string {"Core"}

    return &(coreId.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location.
    Location []*Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "fdb"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = types.NewOrderedMap()
    switchFdbCommon.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children.Append(types.GetSegmentPath(switchFdbCommon.Location[i]), types.YChild{"Location", switchFdbCommon.Location[i]})
    }
    switchFdbCommon.EntityData.Leafs = types.NewOrderedMap()

    switchFdbCommon.EntityData.YListKeys = []string {}

    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("fdb-block", types.YChild{"FdbBlock", &location.FdbBlock})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("num-entries", types.YLeaf{"NumEntries", location.NumEntries})
    location.EntityData.Leafs.Append("has-trunk-entry", types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry})
    location.EntityData.Leafs.Append("trunk-entry-message", types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []*Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = types.NewOrderedMap()
    fdbBlock.EntityData.Children.Append("fdb-entry", types.YChild{"FdbEntry", nil})
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children.Append(types.GetSegmentPath(fdbBlock.FdbEntry[i]), types.YChild{"FdbEntry", fdbBlock.FdbEntry[i]})
    }
    fdbBlock.EntityData.Leafs = types.NewOrderedMap()

    fdbBlock.EntityData.YListKeys = []string {}

    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + types.AddKeyToken(fdbEntry.FdbIndex, "fdb-index")
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs = types.NewOrderedMap()
    fdbEntry.EntityData.Leafs.Append("fdb-index", types.YLeaf{"FdbIndex", fdbEntry.FdbIndex})
    fdbEntry.EntityData.Leafs.Append("fdb-mac-addr", types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan", types.YLeaf{"FdbVlan", fdbEntry.FdbVlan})
    fdbEntry.EntityData.Leafs.Append("fdb-vlan-hex", types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex})
    fdbEntry.EntityData.Leafs.Append("fdb-port", types.YLeaf{"FdbPort", fdbEntry.FdbPort})
    fdbEntry.EntityData.Leafs.Append("fdb-trap-entry", types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-static-entry", types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry})
    fdbEntry.EntityData.Leafs.Append("fdb-synced-cores", types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores})

    fdbEntry.EntityData.YListKeys = []string {"FdbIndex"}

    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Vlan
type Controller_Switch_Oper_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rules Controller_Switch_Oper_Vlan_Rules

    
    Information Controller_Switch_Oper_Vlan_Information

    
    VlanDetail Controller_Switch_Oper_Vlan_VlanDetail

    
    Membership Controller_Switch_Oper_Vlan_Membership
}

func (vlan *Controller_Switch_Oper_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "cisco_ios_xr"
    vlan.EntityData.ParentYangName = "oper"
    vlan.EntityData.SegmentPath = "vlan"
    vlan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlan.EntityData.Children = types.NewOrderedMap()
    vlan.EntityData.Children.Append("rules", types.YChild{"Rules", &vlan.Rules})
    vlan.EntityData.Children.Append("information", types.YChild{"Information", &vlan.Information})
    vlan.EntityData.Children.Append("vlan-detail", types.YChild{"VlanDetail", &vlan.VlanDetail})
    vlan.EntityData.Children.Append("membership", types.YChild{"Membership", &vlan.Membership})
    vlan.EntityData.Leafs = types.NewOrderedMap()

    vlan.EntityData.YListKeys = []string {}

    return &(vlan.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules
type Controller_Switch_Oper_Vlan_Rules struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Rules_Location.
    Location []*Controller_Switch_Oper_Vlan_Rules_Location
}

func (rules *Controller_Switch_Oper_Vlan_Rules) GetEntityData() *types.CommonEntityData {
    rules.EntityData.YFilter = rules.YFilter
    rules.EntityData.YangName = "rules"
    rules.EntityData.BundleName = "cisco_ios_xr"
    rules.EntityData.ParentYangName = "vlan"
    rules.EntityData.SegmentPath = "rules"
    rules.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rules.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rules.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rules.EntityData.Children = types.NewOrderedMap()
    rules.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range rules.Location {
        rules.EntityData.Children.Append(types.GetSegmentPath(rules.Location[i]), types.YChild{"Location", rules.Location[i]})
    }
    rules.EntityData.Leafs = types.NewOrderedMap()

    rules.EntityData.YListKeys = []string {}

    return &(rules.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location
type Controller_Switch_Oper_Vlan_Rules_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // VLAN configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_Vlan_Rules_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Vlan_Rules_Location_PortIter
}

func (location *Controller_Switch_Oper_Vlan_Rules_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "rules"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId.
    VlanId []*Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId
}

func (portIter *Controller_Switch_Oper_Vlan_Rules_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("vlan-id", types.YChild{"VlanId", nil})
    for i := range portIter.VlanId {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.VlanId[i]), types.YChild{"VlanId", portIter.VlanId[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This VLAN represents a VLAN membership for this
    // switch port. Multiple rules may exist to support this VLAN. The type is
    // interface{} with range: 0..4095.
    Vlan interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId.
    RuleId []*Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId
}

func (vlanId *Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "port-iter"
    vlanId.EntityData.SegmentPath = "vlan-id" + types.AddKeyToken(vlanId.Vlan, "vlan")
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = types.NewOrderedMap()
    vlanId.EntityData.Children.Append("rule-id", types.YChild{"RuleId", nil})
    for i := range vlanId.RuleId {
        vlanId.EntityData.Children.Append(types.GetSegmentPath(vlanId.RuleId[i]), types.YChild{"RuleId", vlanId.RuleId[i]})
    }
    vlanId.EntityData.Leafs = types.NewOrderedMap()
    vlanId.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanId.Vlan})

    vlanId.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet direction this rule applies to. The type is SwitchDataDirectionEnum.
    Direction interface{}

    // The type is SwitchTableTypeEnum.
    MatchTable interface{}

    // The type is SwitchMatchTypeEnum.
    MatchType interface{}

    // The type is interface{} with range: 0..4095.
    MatchVlanId interface{}

    // The type is SwitchActionTypeEnum.
    Action interface{}

    // The type is interface{} with range: 0..4095.
    ActionVlanId interface{}
}

func (ruleId *Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId) GetEntityData() *types.CommonEntityData {
    ruleId.EntityData.YFilter = ruleId.YFilter
    ruleId.EntityData.YangName = "rule-id"
    ruleId.EntityData.BundleName = "cisco_ios_xr"
    ruleId.EntityData.ParentYangName = "vlan-id"
    ruleId.EntityData.SegmentPath = "rule-id"
    ruleId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ruleId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ruleId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ruleId.EntityData.Children = types.NewOrderedMap()
    ruleId.EntityData.Leafs = types.NewOrderedMap()
    ruleId.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", ruleId.Direction})
    ruleId.EntityData.Leafs.Append("match-table", types.YLeaf{"MatchTable", ruleId.MatchTable})
    ruleId.EntityData.Leafs.Append("match-type", types.YLeaf{"MatchType", ruleId.MatchType})
    ruleId.EntityData.Leafs.Append("match-vlan-id", types.YLeaf{"MatchVlanId", ruleId.MatchVlanId})
    ruleId.EntityData.Leafs.Append("action", types.YLeaf{"Action", ruleId.Action})
    ruleId.EntityData.Leafs.Append("action-vlan-id", types.YLeaf{"ActionVlanId", ruleId.ActionVlanId})

    ruleId.EntityData.YListKeys = []string {}

    return &(ruleId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information
type Controller_Switch_Oper_Vlan_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Information_Location.
    Location []*Controller_Switch_Oper_Vlan_Information_Location

    
    Summary Controller_Switch_Oper_Vlan_Information_Summary
}

func (information *Controller_Switch_Oper_Vlan_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "vlan"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range information.Location {
        information.EntityData.Children.Append(types.GetSegmentPath(information.Location[i]), types.YChild{"Location", information.Location[i]})
    }
    information.EntityData.Children.Append("summary", types.YChild{"Summary", &information.Summary})
    information.EntityData.Leafs = types.NewOrderedMap()

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location
type Controller_Switch_Oper_Vlan_Information_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch VLAN information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Location_SdrId.
    SdrId []*Controller_Switch_Oper_Vlan_Information_Location_SdrId
}

func (location *Controller_Switch_Oper_Vlan_Information_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "information"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range location.SdrId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.SdrId[i]), types.YChild{"SdrId", location.SdrId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", location.SerialNum})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location_SdrId
type Controller_Switch_Oper_Vlan_Information_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId.
    VlanId []*Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId
}

func (sdrId *Controller_Switch_Oper_Vlan_Information_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("vlan-id", types.YChild{"VlanId", nil})
    for i := range sdrId.VlanId {
        sdrId.EntityData.Children.Append(types.GetSegmentPath(sdrId.VlanId[i]), types.YChild{"VlanId", sdrId.VlanId[i]})
    }
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})
    sdrId.EntityData.Leafs.Append("esd-sdr-name", types.YLeaf{"EsdSdrName", sdrId.EsdSdrName})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId
type Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId_Vlan
    VlanHex interface{}

    // The type is string.
    VlanUse interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "sdr-id"
    vlanId.EntityData.SegmentPath = "vlan-id" + types.AddKeyToken(vlanId.Vlan, "vlan")
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = types.NewOrderedMap()
    vlanId.EntityData.Leafs = types.NewOrderedMap()
    vlanId.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanId.Vlan})
    vlanId.EntityData.Leafs.Append("vlan-hex", types.YLeaf{"VlanHex", vlanId.VlanHex})
    vlanId.EntityData.Leafs.Append("vlan-use", types.YLeaf{"VlanUse", vlanId.VlanUse})

    vlanId.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary
type Controller_Switch_Oper_Vlan_Information_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Information_Summary_SdrId.
    SdrId []*Controller_Switch_Oper_Vlan_Information_Summary_SdrId
}

func (summary *Controller_Switch_Oper_Vlan_Information_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "information"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range summary.SdrId {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.SdrId[i]), types.YChild{"SdrId", summary.SdrId[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary_SdrId
type Controller_Switch_Oper_Vlan_Information_Summary_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId.
    VlanId []*Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId
}

func (sdrId *Controller_Switch_Oper_Vlan_Information_Summary_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "summary"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("vlan-id", types.YChild{"VlanId", nil})
    for i := range sdrId.VlanId {
        sdrId.EntityData.Children.Append(types.GetSegmentPath(sdrId.VlanId[i]), types.YChild{"VlanId", sdrId.VlanId[i]})
    }
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})
    sdrId.EntityData.Leafs.Append("esd-sdr-name", types.YLeaf{"EsdSdrName", sdrId.EsdSdrName})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId
type Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId_Vlan
    VlanHex interface{}

    // The type is string.
    VlanUse interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "sdr-id"
    vlanId.EntityData.SegmentPath = "vlan-id" + types.AddKeyToken(vlanId.Vlan, "vlan")
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = types.NewOrderedMap()
    vlanId.EntityData.Leafs = types.NewOrderedMap()
    vlanId.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanId.Vlan})
    vlanId.EntityData.Leafs.Append("vlan-hex", types.YLeaf{"VlanHex", vlanId.VlanHex})
    vlanId.EntityData.Leafs.Append("vlan-use", types.YLeaf{"VlanUse", vlanId.VlanUse})

    vlanId.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail
type Controller_Switch_Oper_Vlan_VlanDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_VlanDetail_VlanId.
    VlanId []*Controller_Switch_Oper_Vlan_VlanDetail_VlanId
}

func (vlanDetail *Controller_Switch_Oper_Vlan_VlanDetail) GetEntityData() *types.CommonEntityData {
    vlanDetail.EntityData.YFilter = vlanDetail.YFilter
    vlanDetail.EntityData.YangName = "vlan-detail"
    vlanDetail.EntityData.BundleName = "cisco_ios_xr"
    vlanDetail.EntityData.ParentYangName = "vlan"
    vlanDetail.EntityData.SegmentPath = "vlan-detail"
    vlanDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanDetail.EntityData.Children = types.NewOrderedMap()
    vlanDetail.EntityData.Children.Append("vlan-id", types.YChild{"VlanId", nil})
    for i := range vlanDetail.VlanId {
        vlanDetail.EntityData.Children.Append(types.GetSegmentPath(vlanDetail.VlanId[i]), types.YChild{"VlanId", vlanDetail.VlanId[i]})
    }
    vlanDetail.EntityData.Leafs = types.NewOrderedMap()

    vlanDetail.EntityData.YListKeys = []string {}

    return &(vlanDetail.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    
    Rules Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules
}

func (vlanId *Controller_Switch_Oper_Vlan_VlanDetail_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "vlan-detail"
    vlanId.EntityData.SegmentPath = "vlan-id" + types.AddKeyToken(vlanId.Vlan, "vlan")
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = types.NewOrderedMap()
    vlanId.EntityData.Children.Append("rules", types.YChild{"Rules", &vlanId.Rules})
    vlanId.EntityData.Leafs = types.NewOrderedMap()
    vlanId.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanId.Vlan})

    vlanId.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location.
    Location []*Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location
}

func (rules *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules) GetEntityData() *types.CommonEntityData {
    rules.EntityData.YFilter = rules.YFilter
    rules.EntityData.YangName = "rules"
    rules.EntityData.BundleName = "cisco_ios_xr"
    rules.EntityData.ParentYangName = "vlan-id"
    rules.EntityData.SegmentPath = "rules"
    rules.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rules.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rules.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rules.EntityData.Children = types.NewOrderedMap()
    rules.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range rules.Location {
        rules.EntityData.Children.Append(types.GetSegmentPath(rules.Location[i]), types.YChild{"Location", rules.Location[i]})
    }
    rules.EntityData.Leafs = types.NewOrderedMap()

    rules.EntityData.YListKeys = []string {}

    return &(rules.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter
}

func (location *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "rules"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId.
    RuleId []*Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId
}

func (portIter *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("rule-id", types.YChild{"RuleId", nil})
    for i := range portIter.RuleId {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.RuleId[i]), types.YChild{"RuleId", portIter.RuleId[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet direction this rule applies to. The type is SwitchDataDirectionEnum.
    Direction interface{}

    // The type is SwitchTableTypeEnum.
    MatchTable interface{}

    // The type is SwitchMatchTypeEnum.
    MatchType interface{}

    // The type is interface{} with range: 0..4095.
    MatchVlanId interface{}

    // The type is SwitchActionTypeEnum.
    Action interface{}

    // The type is interface{} with range: 0..4095.
    ActionVlanId interface{}
}

func (ruleId *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId) GetEntityData() *types.CommonEntityData {
    ruleId.EntityData.YFilter = ruleId.YFilter
    ruleId.EntityData.YangName = "rule-id"
    ruleId.EntityData.BundleName = "cisco_ios_xr"
    ruleId.EntityData.ParentYangName = "port-iter"
    ruleId.EntityData.SegmentPath = "rule-id"
    ruleId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ruleId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ruleId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ruleId.EntityData.Children = types.NewOrderedMap()
    ruleId.EntityData.Leafs = types.NewOrderedMap()
    ruleId.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", ruleId.Direction})
    ruleId.EntityData.Leafs.Append("match-table", types.YLeaf{"MatchTable", ruleId.MatchTable})
    ruleId.EntityData.Leafs.Append("match-type", types.YLeaf{"MatchType", ruleId.MatchType})
    ruleId.EntityData.Leafs.Append("match-vlan-id", types.YLeaf{"MatchVlanId", ruleId.MatchVlanId})
    ruleId.EntityData.Leafs.Append("action", types.YLeaf{"Action", ruleId.Action})
    ruleId.EntityData.Leafs.Append("action-vlan-id", types.YLeaf{"ActionVlanId", ruleId.ActionVlanId})

    ruleId.EntityData.YListKeys = []string {}

    return &(ruleId.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership
type Controller_Switch_Oper_Vlan_Membership struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Membership_Location.
    Location []*Controller_Switch_Oper_Vlan_Membership_Location
}

func (membership *Controller_Switch_Oper_Vlan_Membership) GetEntityData() *types.CommonEntityData {
    membership.EntityData.YFilter = membership.YFilter
    membership.EntityData.YangName = "membership"
    membership.EntityData.BundleName = "cisco_ios_xr"
    membership.EntityData.ParentYangName = "vlan"
    membership.EntityData.SegmentPath = "membership"
    membership.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    membership.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    membership.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    membership.EntityData.Children = types.NewOrderedMap()
    membership.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range membership.Location {
        membership.EntityData.Children.Append(types.GetSegmentPath(membership.Location[i]), types.YChild{"Location", membership.Location[i]})
    }
    membership.EntityData.Leafs = types.NewOrderedMap()

    membership.EntityData.YListKeys = []string {}

    return &(membership.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership_Location
type Controller_Switch_Oper_Vlan_Membership_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // VLAN configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Membership_Location_VlanId.
    VlanId []*Controller_Switch_Oper_Vlan_Membership_Location_VlanId
}

func (location *Controller_Switch_Oper_Vlan_Membership_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "membership"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("vlan-id", types.YChild{"VlanId", nil})
    for i := range location.VlanId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.VlanId[i]), types.YChild{"VlanId", location.VlanId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership_Location_VlanId
type Controller_Switch_Oper_Vlan_Membership_Location_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Membership_Location_VlanId_Vlan
    VlanHex interface{}

    // The type is slice of interface{} with range: 0..255.
    Port []interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Membership_Location_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "location"
    vlanId.EntityData.SegmentPath = "vlan-id" + types.AddKeyToken(vlanId.Vlan, "vlan")
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = types.NewOrderedMap()
    vlanId.EntityData.Leafs = types.NewOrderedMap()
    vlanId.EntityData.Leafs.Append("vlan", types.YLeaf{"Vlan", vlanId.Vlan})
    vlanId.EntityData.Leafs.Append("vlan-hex", types.YLeaf{"VlanHex", vlanId.VlanHex})
    vlanId.EntityData.Leafs.Append("port", types.YLeaf{"Port", vlanId.Port})

    vlanId.EntityData.YListKeys = []string {"Vlan"}

    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Sdr
type Controller_Switch_Oper_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    PortStatistics Controller_Switch_Oper_Sdr_PortStatistics

    
    GlobalStatistics Controller_Switch_Oper_Sdr_GlobalStatistics

    
    Policers Controller_Switch_Oper_Sdr_Policers

    
    SdrDetail Controller_Switch_Oper_Sdr_SdrDetail
}

func (sdr *Controller_Switch_Oper_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "oper"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = types.NewOrderedMap()
    sdr.EntityData.Children.Append("port-statistics", types.YChild{"PortStatistics", &sdr.PortStatistics})
    sdr.EntityData.Children.Append("global-statistics", types.YChild{"GlobalStatistics", &sdr.GlobalStatistics})
    sdr.EntityData.Children.Append("policers", types.YChild{"Policers", &sdr.Policers})
    sdr.EntityData.Children.Append("sdr-detail", types.YChild{"SdrDetail", &sdr.SdrDetail})
    sdr.EntityData.Leafs = types.NewOrderedMap()

    sdr.EntityData.YListKeys = []string {}

    return &(sdr.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics
type Controller_Switch_Oper_Sdr_PortStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_PortStatistics_Location.
    Location []*Controller_Switch_Oper_Sdr_PortStatistics_Location
}

func (portStatistics *Controller_Switch_Oper_Sdr_PortStatistics) GetEntityData() *types.CommonEntityData {
    portStatistics.EntityData.YFilter = portStatistics.YFilter
    portStatistics.EntityData.YangName = "port-statistics"
    portStatistics.EntityData.BundleName = "cisco_ios_xr"
    portStatistics.EntityData.ParentYangName = "sdr"
    portStatistics.EntityData.SegmentPath = "port-statistics"
    portStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portStatistics.EntityData.Children = types.NewOrderedMap()
    portStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range portStatistics.Location {
        portStatistics.EntityData.Children.Append(types.GetSegmentPath(portStatistics.Location[i]), types.YChild{"Location", portStatistics.Location[i]})
    }
    portStatistics.EntityData.Leafs = types.NewOrderedMap()

    portStatistics.EntityData.YListKeys = []string {}

    return &(portStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location
type Controller_Switch_Oper_Sdr_PortStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // SDR configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Sdr_PortStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId.
    SdrId []*Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId
}

func (portIter *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range portIter.SdrId {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.SdrId[i]), types.YChild{"SdrId", portIter.SdrId[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId.
    TrafficTypeId []*Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId
}

func (sdrId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "port-iter"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("traffic-type-id", types.YChild{"TrafficTypeId", nil})
    for i := range sdrId.TrafficTypeId {
        sdrId.EntityData.Children.Append(types.GetSegmentPath(sdrId.TrafficTypeId[i]), types.YChild{"TrafficTypeId", sdrId.TrafficTypeId[i]})
    }
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})
    sdrId.EntityData.Leafs.Append("esd-sdr-name", types.YLeaf{"EsdSdrName", sdrId.EsdSdrName})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId.
    DirectionId []*Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "sdr-id"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + types.AddKeyToken(trafficTypeId.TrafficType, "traffic-type")
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = types.NewOrderedMap()
    trafficTypeId.EntityData.Children.Append("direction-id", types.YChild{"DirectionId", nil})
    for i := range trafficTypeId.DirectionId {
        trafficTypeId.EntityData.Children.Append(types.GetSegmentPath(trafficTypeId.DirectionId[i]), types.YChild{"DirectionId", trafficTypeId.DirectionId[i]})
    }
    trafficTypeId.EntityData.Leafs = types.NewOrderedMap()
    trafficTypeId.EntityData.Leafs.Append("traffic-type", types.YLeaf{"TrafficType", trafficTypeId.TrafficType})

    trafficTypeId.EntityData.YListKeys = []string {"TrafficType"}

    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Packet direction this rule applies to. The type is
    // SwitchDataDirectionEnum.
    Direction interface{}

    // Counts packets within the committed information rate for all traffic
    // classes on this SDR. The type is interface{} with range:
    // 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for all traffic classes on this SDR. The type is
    // interface{} with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for all traffic classes on
    // this SDR. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (directionId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId) GetEntityData() *types.CommonEntityData {
    directionId.EntityData.YFilter = directionId.YFilter
    directionId.EntityData.YangName = "direction-id"
    directionId.EntityData.BundleName = "cisco_ios_xr"
    directionId.EntityData.ParentYangName = "traffic-type-id"
    directionId.EntityData.SegmentPath = "direction-id" + types.AddKeyToken(directionId.Direction, "direction")
    directionId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionId.EntityData.Children = types.NewOrderedMap()
    directionId.EntityData.Leafs = types.NewOrderedMap()
    directionId.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", directionId.Direction})
    directionId.EntityData.Leafs.Append("green-packets", types.YLeaf{"GreenPackets", directionId.GreenPackets})
    directionId.EntityData.Leafs.Append("yellow-packets", types.YLeaf{"YellowPackets", directionId.YellowPackets})
    directionId.EntityData.Leafs.Append("red-packets", types.YLeaf{"RedPackets", directionId.RedPackets})

    directionId.EntityData.YListKeys = []string {"Direction"}

    return &(directionId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics
type Controller_Switch_Oper_Sdr_GlobalStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_GlobalStatistics_Location.
    Location []*Controller_Switch_Oper_Sdr_GlobalStatistics_Location
}

func (globalStatistics *Controller_Switch_Oper_Sdr_GlobalStatistics) GetEntityData() *types.CommonEntityData {
    globalStatistics.EntityData.YFilter = globalStatistics.YFilter
    globalStatistics.EntityData.YangName = "global-statistics"
    globalStatistics.EntityData.BundleName = "cisco_ios_xr"
    globalStatistics.EntityData.ParentYangName = "sdr"
    globalStatistics.EntityData.SegmentPath = "global-statistics"
    globalStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalStatistics.EntityData.Children = types.NewOrderedMap()
    globalStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range globalStatistics.Location {
        globalStatistics.EntityData.Children.Append(types.GetSegmentPath(globalStatistics.Location[i]), types.YChild{"Location", globalStatistics.Location[i]})
    }
    globalStatistics.EntityData.Leafs = types.NewOrderedMap()

    globalStatistics.EntityData.YListKeys = []string {}

    return &(globalStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // SDR configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId.
    SdrId []*Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId
}

func (location *Controller_Switch_Oper_Sdr_GlobalStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "global-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range location.SdrId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.SdrId[i]), types.YChild{"SdrId", location.SdrId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId.
    TrafficTypeId []*Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId
}

func (sdrId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("traffic-type-id", types.YChild{"TrafficTypeId", nil})
    for i := range sdrId.TrafficTypeId {
        sdrId.EntityData.Children.Append(types.GetSegmentPath(sdrId.TrafficTypeId[i]), types.YChild{"TrafficTypeId", sdrId.TrafficTypeId[i]})
    }
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})
    sdrId.EntityData.Leafs.Append("esd-sdr-name", types.YLeaf{"EsdSdrName", sdrId.EsdSdrName})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId.
    TrafficClassId []*Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "sdr-id"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + types.AddKeyToken(trafficTypeId.TrafficType, "traffic-type")
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = types.NewOrderedMap()
    trafficTypeId.EntityData.Children.Append("traffic-class-id", types.YChild{"TrafficClassId", nil})
    for i := range trafficTypeId.TrafficClassId {
        trafficTypeId.EntityData.Children.Append(types.GetSegmentPath(trafficTypeId.TrafficClassId[i]), types.YChild{"TrafficClassId", trafficTypeId.TrafficClassId[i]})
    }
    trafficTypeId.EntityData.Leafs = types.NewOrderedMap()
    trafficTypeId.EntityData.Leafs.Append("traffic-type", types.YLeaf{"TrafficType", trafficTypeId.TrafficType})

    trafficTypeId.EntityData.YListKeys = []string {"TrafficType"}

    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Traffic class (0->7) for these statistics. The
    // type is interface{} with range: -1..7.
    Tc interface{}

    // Counts packets within the committed information rate for a traffic class on
    // this VLAN. The type is interface{} with range: 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for a traffic class on this VLAN. The type is interface{}
    // with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for a traffic class on
    // this VLAN. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (trafficClassId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId) GetEntityData() *types.CommonEntityData {
    trafficClassId.EntityData.YFilter = trafficClassId.YFilter
    trafficClassId.EntityData.YangName = "traffic-class-id"
    trafficClassId.EntityData.BundleName = "cisco_ios_xr"
    trafficClassId.EntityData.ParentYangName = "traffic-type-id"
    trafficClassId.EntityData.SegmentPath = "traffic-class-id" + types.AddKeyToken(trafficClassId.Tc, "tc")
    trafficClassId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficClassId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficClassId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficClassId.EntityData.Children = types.NewOrderedMap()
    trafficClassId.EntityData.Leafs = types.NewOrderedMap()
    trafficClassId.EntityData.Leafs.Append("tc", types.YLeaf{"Tc", trafficClassId.Tc})
    trafficClassId.EntityData.Leafs.Append("green-packets", types.YLeaf{"GreenPackets", trafficClassId.GreenPackets})
    trafficClassId.EntityData.Leafs.Append("yellow-packets", types.YLeaf{"YellowPackets", trafficClassId.YellowPackets})
    trafficClassId.EntityData.Leafs.Append("red-packets", types.YLeaf{"RedPackets", trafficClassId.RedPackets})

    trafficClassId.EntityData.YListKeys = []string {"Tc"}

    return &(trafficClassId.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers
type Controller_Switch_Oper_Sdr_Policers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_Policers_Location.
    Location []*Controller_Switch_Oper_Sdr_Policers_Location
}

func (policers *Controller_Switch_Oper_Sdr_Policers) GetEntityData() *types.CommonEntityData {
    policers.EntityData.YFilter = policers.YFilter
    policers.EntityData.YangName = "policers"
    policers.EntityData.BundleName = "cisco_ios_xr"
    policers.EntityData.ParentYangName = "sdr"
    policers.EntityData.SegmentPath = "policers"
    policers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policers.EntityData.Children = types.NewOrderedMap()
    policers.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range policers.Location {
        policers.EntityData.Children.Append(types.GetSegmentPath(policers.Location[i]), types.YChild{"Location", policers.Location[i]})
    }
    policers.EntityData.Leafs = types.NewOrderedMap()

    policers.EntityData.YListKeys = []string {}

    return &(policers.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location
type Controller_Switch_Oper_Sdr_Policers_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    EsdPolicerStatus Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus

    // The type is slice of Controller_Switch_Oper_Sdr_Policers_Location_SdrId.
    SdrId []*Controller_Switch_Oper_Sdr_Policers_Location_SdrId
}

func (location *Controller_Switch_Oper_Sdr_Policers_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "policers"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("esd-policer-status", types.YChild{"EsdPolicerStatus", &location.EsdPolicerStatus})
    location.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range location.SdrId {
        location.EntityData.Children.Append(types.GetSegmentPath(location.SdrId[i]), types.YChild{"SdrId", location.SdrId[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus
type Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    IndentGroup Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup
}

func (esdPolicerStatus *Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus) GetEntityData() *types.CommonEntityData {
    esdPolicerStatus.EntityData.YFilter = esdPolicerStatus.YFilter
    esdPolicerStatus.EntityData.YangName = "esd-policer-status"
    esdPolicerStatus.EntityData.BundleName = "cisco_ios_xr"
    esdPolicerStatus.EntityData.ParentYangName = "location"
    esdPolicerStatus.EntityData.SegmentPath = "esd-policer-status"
    esdPolicerStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdPolicerStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdPolicerStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdPolicerStatus.EntityData.Children = types.NewOrderedMap()
    esdPolicerStatus.EntityData.Children.Append("indent-group", types.YChild{"IndentGroup", &esdPolicerStatus.IndentGroup})
    esdPolicerStatus.EntityData.Leafs = types.NewOrderedMap()

    esdPolicerStatus.EntityData.YListKeys = []string {}

    return &(esdPolicerStatus.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup
type Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchYesNoEnum.
    EsdPortPolicingEnabled interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortCommittedBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortPeakBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortPolicerMru interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdGlobalPolicingEnabled interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalCommittedBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalPeakBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalPolicerMru interface{}
}

func (indentGroup *Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup) GetEntityData() *types.CommonEntityData {
    indentGroup.EntityData.YFilter = indentGroup.YFilter
    indentGroup.EntityData.YangName = "indent-group"
    indentGroup.EntityData.BundleName = "cisco_ios_xr"
    indentGroup.EntityData.ParentYangName = "esd-policer-status"
    indentGroup.EntityData.SegmentPath = "indent-group"
    indentGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    indentGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    indentGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    indentGroup.EntityData.Children = types.NewOrderedMap()
    indentGroup.EntityData.Leafs = types.NewOrderedMap()
    indentGroup.EntityData.Leafs.Append("esd-port-policing-enabled", types.YLeaf{"EsdPortPolicingEnabled", indentGroup.EsdPortPolicingEnabled})
    indentGroup.EntityData.Leafs.Append("esd-port-committed-burst-size", types.YLeaf{"EsdPortCommittedBurstSize", indentGroup.EsdPortCommittedBurstSize})
    indentGroup.EntityData.Leafs.Append("esd-port-peak-burst-size", types.YLeaf{"EsdPortPeakBurstSize", indentGroup.EsdPortPeakBurstSize})
    indentGroup.EntityData.Leafs.Append("esd-port-policer-mru", types.YLeaf{"EsdPortPolicerMru", indentGroup.EsdPortPolicerMru})
    indentGroup.EntityData.Leafs.Append("esd-global-policing-enabled", types.YLeaf{"EsdGlobalPolicingEnabled", indentGroup.EsdGlobalPolicingEnabled})
    indentGroup.EntityData.Leafs.Append("esd-global-committed-burst-size", types.YLeaf{"EsdGlobalCommittedBurstSize", indentGroup.EsdGlobalCommittedBurstSize})
    indentGroup.EntityData.Leafs.Append("esd-global-peak-burst-size", types.YLeaf{"EsdGlobalPeakBurstSize", indentGroup.EsdGlobalPeakBurstSize})
    indentGroup.EntityData.Leafs.Append("esd-global-policer-mru", types.YLeaf{"EsdGlobalPolicerMru", indentGroup.EsdGlobalPolicerMru})

    indentGroup.EntityData.YListKeys = []string {}

    return &(indentGroup.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_SdrId
type Controller_Switch_Oper_Sdr_Policers_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCir interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrPir interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter.
    EsdSdrCosTypeIter []*Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter
}

func (sdrId *Controller_Switch_Oper_Sdr_Policers_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("esd-sdr-cos-type-iter", types.YChild{"EsdSdrCosTypeIter", nil})
    for i := range sdrId.EsdSdrCosTypeIter {
        sdrId.EntityData.Children.Append(types.GetSegmentPath(sdrId.EsdSdrCosTypeIter[i]), types.YChild{"EsdSdrCosTypeIter", sdrId.EsdSdrCosTypeIter[i]})
    }
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})
    sdrId.EntityData.Leafs.Append("esd-sdr-name", types.YLeaf{"EsdSdrName", sdrId.EsdSdrName})
    sdrId.EntityData.Leafs.Append("esd-sdr-cir", types.YLeaf{"EsdSdrCir", sdrId.EsdSdrCir})
    sdrId.EntityData.Leafs.Append("esd-sdr-pir", types.YLeaf{"EsdSdrPir", sdrId.EsdSdrPir})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter
type Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdCirEirType.
    EsdSdrCosType interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos0 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos1 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos2 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos3 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos4 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos5 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos6 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos7 interface{}
}

func (esdSdrCosTypeIter *Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter) GetEntityData() *types.CommonEntityData {
    esdSdrCosTypeIter.EntityData.YFilter = esdSdrCosTypeIter.YFilter
    esdSdrCosTypeIter.EntityData.YangName = "esd-sdr-cos-type-iter"
    esdSdrCosTypeIter.EntityData.BundleName = "cisco_ios_xr"
    esdSdrCosTypeIter.EntityData.ParentYangName = "sdr-id"
    esdSdrCosTypeIter.EntityData.SegmentPath = "esd-sdr-cos-type-iter" + types.AddKeyToken(esdSdrCosTypeIter.EsdSdrCosType, "esd-sdr-cos-type")
    esdSdrCosTypeIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdSdrCosTypeIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdSdrCosTypeIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdSdrCosTypeIter.EntityData.Children = types.NewOrderedMap()
    esdSdrCosTypeIter.EntityData.Leafs = types.NewOrderedMap()
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-type", types.YLeaf{"EsdSdrCosType", esdSdrCosTypeIter.EsdSdrCosType})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-0", types.YLeaf{"EsdSdrCos0", esdSdrCosTypeIter.EsdSdrCos0})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-1", types.YLeaf{"EsdSdrCos1", esdSdrCosTypeIter.EsdSdrCos1})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-2", types.YLeaf{"EsdSdrCos2", esdSdrCosTypeIter.EsdSdrCos2})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-3", types.YLeaf{"EsdSdrCos3", esdSdrCosTypeIter.EsdSdrCos3})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-4", types.YLeaf{"EsdSdrCos4", esdSdrCosTypeIter.EsdSdrCos4})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-5", types.YLeaf{"EsdSdrCos5", esdSdrCosTypeIter.EsdSdrCos5})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-6", types.YLeaf{"EsdSdrCos6", esdSdrCosTypeIter.EsdSdrCos6})
    esdSdrCosTypeIter.EntityData.Leafs.Append("esd-sdr-cos-7", types.YLeaf{"EsdSdrCos7", esdSdrCosTypeIter.EsdSdrCos7})

    esdSdrCosTypeIter.EntityData.YListKeys = []string {"EsdSdrCosType"}

    return &(esdSdrCosTypeIter.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail
type Controller_Switch_Oper_Sdr_SdrDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_SdrDetail_SdrId.
    SdrId []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId
}

func (sdrDetail *Controller_Switch_Oper_Sdr_SdrDetail) GetEntityData() *types.CommonEntityData {
    sdrDetail.EntityData.YFilter = sdrDetail.YFilter
    sdrDetail.EntityData.YangName = "sdr-detail"
    sdrDetail.EntityData.BundleName = "cisco_ios_xr"
    sdrDetail.EntityData.ParentYangName = "sdr"
    sdrDetail.EntityData.SegmentPath = "sdr-detail"
    sdrDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrDetail.EntityData.Children = types.NewOrderedMap()
    sdrDetail.EntityData.Children.Append("sdr-id", types.YChild{"SdrId", nil})
    for i := range sdrDetail.SdrId {
        sdrDetail.EntityData.Children.Append(types.GetSegmentPath(sdrDetail.SdrId[i]), types.YChild{"SdrId", sdrDetail.SdrId[i]})
    }
    sdrDetail.EntityData.Leafs = types.NewOrderedMap()

    sdrDetail.EntityData.YListKeys = []string {}

    return &(sdrDetail.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    
    PortStatistics Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics
}

func (sdrId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "sdr-detail"
    sdrId.EntityData.SegmentPath = "sdr-id" + types.AddKeyToken(sdrId.Sdr, "sdr")
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = types.NewOrderedMap()
    sdrId.EntityData.Children.Append("port-statistics", types.YChild{"PortStatistics", &sdrId.PortStatistics})
    sdrId.EntityData.Leafs = types.NewOrderedMap()
    sdrId.EntityData.Leafs.Append("sdr", types.YLeaf{"Sdr", sdrId.Sdr})

    sdrId.EntityData.YListKeys = []string {"Sdr"}

    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location.
    Location []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location
}

func (portStatistics *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics) GetEntityData() *types.CommonEntityData {
    portStatistics.EntityData.YFilter = portStatistics.YFilter
    portStatistics.EntityData.YangName = "port-statistics"
    portStatistics.EntityData.BundleName = "cisco_ios_xr"
    portStatistics.EntityData.ParentYangName = "sdr-id"
    portStatistics.EntityData.SegmentPath = "port-statistics"
    portStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portStatistics.EntityData.Children = types.NewOrderedMap()
    portStatistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range portStatistics.Location {
        portStatistics.EntityData.Children.Append(types.GetSegmentPath(portStatistics.Location[i]), types.YChild{"Location", portStatistics.Location[i]})
    }
    portStatistics.EntityData.Leafs = types.NewOrderedMap()

    portStatistics.EntityData.YListKeys = []string {}

    return &(portStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId.
    TrafficTypeId []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId
}

func (portIter *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("traffic-type-id", types.YChild{"TrafficTypeId", nil})
    for i := range portIter.TrafficTypeId {
        portIter.EntityData.Children.Append(types.GetSegmentPath(portIter.TrafficTypeId[i]), types.YChild{"TrafficTypeId", portIter.TrafficTypeId[i]})
    }
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId.
    DirectionId []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "port-iter"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + types.AddKeyToken(trafficTypeId.TrafficType, "traffic-type")
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = types.NewOrderedMap()
    trafficTypeId.EntityData.Children.Append("direction-id", types.YChild{"DirectionId", nil})
    for i := range trafficTypeId.DirectionId {
        trafficTypeId.EntityData.Children.Append(types.GetSegmentPath(trafficTypeId.DirectionId[i]), types.YChild{"DirectionId", trafficTypeId.DirectionId[i]})
    }
    trafficTypeId.EntityData.Leafs = types.NewOrderedMap()
    trafficTypeId.EntityData.Leafs.Append("traffic-type", types.YLeaf{"TrafficType", trafficTypeId.TrafficType})

    trafficTypeId.EntityData.YListKeys = []string {"TrafficType"}

    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Packet direction this rule applies to. The type is
    // SwitchDataDirectionEnum.
    Direction interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId.
    TrafficClassId []*Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId
}

func (directionId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId) GetEntityData() *types.CommonEntityData {
    directionId.EntityData.YFilter = directionId.YFilter
    directionId.EntityData.YangName = "direction-id"
    directionId.EntityData.BundleName = "cisco_ios_xr"
    directionId.EntityData.ParentYangName = "traffic-type-id"
    directionId.EntityData.SegmentPath = "direction-id" + types.AddKeyToken(directionId.Direction, "direction")
    directionId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionId.EntityData.Children = types.NewOrderedMap()
    directionId.EntityData.Children.Append("traffic-class-id", types.YChild{"TrafficClassId", nil})
    for i := range directionId.TrafficClassId {
        directionId.EntityData.Children.Append(types.GetSegmentPath(directionId.TrafficClassId[i]), types.YChild{"TrafficClassId", directionId.TrafficClassId[i]})
    }
    directionId.EntityData.Leafs = types.NewOrderedMap()
    directionId.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", directionId.Direction})

    directionId.EntityData.YListKeys = []string {"Direction"}

    return &(directionId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Traffic class (0->7) for these statistics. The
    // type is interface{} with range: -1..7.
    Tc interface{}

    // Counts packets within the committed information rate for a traffic class on
    // this VLAN. The type is interface{} with range: 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for a traffic class on this VLAN. The type is interface{}
    // with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for a traffic class on
    // this VLAN. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (trafficClassId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId) GetEntityData() *types.CommonEntityData {
    trafficClassId.EntityData.YFilter = trafficClassId.YFilter
    trafficClassId.EntityData.YangName = "traffic-class-id"
    trafficClassId.EntityData.BundleName = "cisco_ios_xr"
    trafficClassId.EntityData.ParentYangName = "direction-id"
    trafficClassId.EntityData.SegmentPath = "traffic-class-id" + types.AddKeyToken(trafficClassId.Tc, "tc")
    trafficClassId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficClassId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficClassId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficClassId.EntityData.Children = types.NewOrderedMap()
    trafficClassId.EntityData.Leafs = types.NewOrderedMap()
    trafficClassId.EntityData.Leafs.Append("tc", types.YLeaf{"Tc", trafficClassId.Tc})
    trafficClassId.EntityData.Leafs.Append("green-packets", types.YLeaf{"GreenPackets", trafficClassId.GreenPackets})
    trafficClassId.EntityData.Leafs.Append("yellow-packets", types.YLeaf{"YellowPackets", trafficClassId.YellowPackets})
    trafficClassId.EntityData.Leafs.Append("red-packets", types.YLeaf{"RedPackets", trafficClassId.RedPackets})

    trafficClassId.EntityData.YListKeys = []string {"Tc"}

    return &(trafficClassId.EntityData)
}

// Controller_Switch_Oper_Sfp
type Controller_Switch_Oper_Sfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_Switch_Oper_Sfp_Summary

    
    Detail Controller_Switch_Oper_Sfp_Detail
}

func (sfp *Controller_Switch_Oper_Sfp) GetEntityData() *types.CommonEntityData {
    sfp.EntityData.YFilter = sfp.YFilter
    sfp.EntityData.YangName = "sfp"
    sfp.EntityData.BundleName = "cisco_ios_xr"
    sfp.EntityData.ParentYangName = "oper"
    sfp.EntityData.SegmentPath = "sfp"
    sfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfp.EntityData.Children = types.NewOrderedMap()
    sfp.EntityData.Children.Append("summary", types.YChild{"Summary", &sfp.Summary})
    sfp.EntityData.Children.Append("detail", types.YChild{"Detail", &sfp.Detail})
    sfp.EntityData.Leafs = types.NewOrderedMap()

    sfp.EntityData.YListKeys = []string {}

    return &(sfp.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary
type Controller_Switch_Oper_Sfp_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sfp_Summary_Location.
    Location []*Controller_Switch_Oper_Sfp_Summary_Location
}

func (summary *Controller_Switch_Oper_Sfp_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "sfp"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range summary.Location {
        summary.EntityData.Children.Append(types.GetSegmentPath(summary.Location[i]), types.YChild{"Location", summary.Location[i]})
    }
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary_Location
type Controller_Switch_Oper_Sfp_Summary_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter.
    SfpPortIter []*Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter
}

func (location *Controller_Switch_Oper_Sfp_Summary_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("sfp-port-iter", types.YChild{"SfpPortIter", nil})
    for i := range location.SfpPortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.SfpPortIter[i]), types.YChild{"SfpPortIter", location.SfpPortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter
type Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    SfpPort interface{}

    // The type is EsdmaSwitchSfpInsertedEnum.
    SfpInserted interface{}

    // The type is EsdmaSwitchSfpControllerEnum.
    SfpController interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpType interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (sfpPortIter *Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter) GetEntityData() *types.CommonEntityData {
    sfpPortIter.EntityData.YFilter = sfpPortIter.YFilter
    sfpPortIter.EntityData.YangName = "sfp-port-iter"
    sfpPortIter.EntityData.BundleName = "cisco_ios_xr"
    sfpPortIter.EntityData.ParentYangName = "location"
    sfpPortIter.EntityData.SegmentPath = "sfp-port-iter" + types.AddKeyToken(sfpPortIter.SfpPort, "sfp-port")
    sfpPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortIter.EntityData.Children = types.NewOrderedMap()
    sfpPortIter.EntityData.Leafs = types.NewOrderedMap()
    sfpPortIter.EntityData.Leafs.Append("sfp-port", types.YLeaf{"SfpPort", sfpPortIter.SfpPort})
    sfpPortIter.EntityData.Leafs.Append("sfp-inserted", types.YLeaf{"SfpInserted", sfpPortIter.SfpInserted})
    sfpPortIter.EntityData.Leafs.Append("sfp-controller", types.YLeaf{"SfpController", sfpPortIter.SfpController})
    sfpPortIter.EntityData.Leafs.Append("sfp-type", types.YLeaf{"SfpType", sfpPortIter.SfpType})
    sfpPortIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", sfpPortIter.ConnectsTo})

    sfpPortIter.EntityData.YListKeys = []string {"SfpPort"}

    return &(sfpPortIter.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail
type Controller_Switch_Oper_Sfp_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sfp_Detail_Location.
    Location []*Controller_Switch_Oper_Sfp_Detail_Location
}

func (detail *Controller_Switch_Oper_Sfp_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "sfp"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location
type Controller_Switch_Oper_Sfp_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter.
    SfpPortIter []*Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter
}

func (location *Controller_Switch_Oper_Sfp_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("sfp-port-iter", types.YChild{"SfpPortIter", nil})
    for i := range location.SfpPortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.SfpPortIter[i]), types.YChild{"SfpPortIter", location.SfpPortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    SfpPort interface{}

    // The type is EsdmaSwitchSfpInsertedEnum.
    SfpInserted interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpType interface{}

    
    SfpDetails Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails

    
    QsfpDetails Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails
}

func (sfpPortIter *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter) GetEntityData() *types.CommonEntityData {
    sfpPortIter.EntityData.YFilter = sfpPortIter.YFilter
    sfpPortIter.EntityData.YangName = "sfp-port-iter"
    sfpPortIter.EntityData.BundleName = "cisco_ios_xr"
    sfpPortIter.EntityData.ParentYangName = "location"
    sfpPortIter.EntityData.SegmentPath = "sfp-port-iter" + types.AddKeyToken(sfpPortIter.SfpPort, "sfp-port")
    sfpPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortIter.EntityData.Children = types.NewOrderedMap()
    sfpPortIter.EntityData.Children.Append("sfp-details", types.YChild{"SfpDetails", &sfpPortIter.SfpDetails})
    sfpPortIter.EntityData.Children.Append("qsfp-details", types.YChild{"QsfpDetails", &sfpPortIter.QsfpDetails})
    sfpPortIter.EntityData.Leafs = types.NewOrderedMap()
    sfpPortIter.EntityData.Leafs.Append("sfp-port", types.YLeaf{"SfpPort", sfpPortIter.SfpPort})
    sfpPortIter.EntityData.Leafs.Append("sfp-inserted", types.YLeaf{"SfpInserted", sfpPortIter.SfpInserted})
    sfpPortIter.EntityData.Leafs.Append("sfp-type", types.YLeaf{"SfpType", sfpPortIter.SfpType})

    sfpPortIter.EntityData.YListKeys = []string {"SfpPort"}

    return &(sfpPortIter.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SfpPortDetail Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail

    
    SfpMsaData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData

    
    SfpDiagAnalogInfo Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo

    
    SfpDiagData1 Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1

    
    SfpDiagUserInfo Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo

    
    SfpDiagData2 Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2
}

func (sfpDetails *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails) GetEntityData() *types.CommonEntityData {
    sfpDetails.EntityData.YFilter = sfpDetails.YFilter
    sfpDetails.EntityData.YangName = "sfp-details"
    sfpDetails.EntityData.BundleName = "cisco_ios_xr"
    sfpDetails.EntityData.ParentYangName = "sfp-port-iter"
    sfpDetails.EntityData.SegmentPath = "sfp-details"
    sfpDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDetails.EntityData.Children = types.NewOrderedMap()
    sfpDetails.EntityData.Children.Append("sfp-port-detail", types.YChild{"SfpPortDetail", &sfpDetails.SfpPortDetail})
    sfpDetails.EntityData.Children.Append("sfp-msa-data", types.YChild{"SfpMsaData", &sfpDetails.SfpMsaData})
    sfpDetails.EntityData.Children.Append("sfp-diag-analog-info", types.YChild{"SfpDiagAnalogInfo", &sfpDetails.SfpDiagAnalogInfo})
    sfpDetails.EntityData.Children.Append("sfp-diag-data1", types.YChild{"SfpDiagData1", &sfpDetails.SfpDiagData1})
    sfpDetails.EntityData.Children.Append("sfp-diag-user-info", types.YChild{"SfpDiagUserInfo", &sfpDetails.SfpDiagUserInfo})
    sfpDetails.EntityData.Children.Append("sfp-diag-data2", types.YChild{"SfpDiagData2", &sfpDetails.SfpDiagData2})
    sfpDetails.EntityData.Leafs = types.NewOrderedMap()

    sfpDetails.EntityData.YListKeys = []string {}

    return &(sfpDetails.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchSfpTranceiverTypeEnum.
    SfpTranceiverType interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpTranceiverCode interface{}

    // The type is EsdmaSfpEncodingEnum.
    SfpEncoding interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpBitRate interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach9uFiberKM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach9uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach50uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach625uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReachCopperM interface{}

    // The type is string.
    SfpVendorName interface{}

    // The type is string.
    SfpVendorOui interface{}

    // The type is string.
    SfpVendorPartNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLaserWavelength interface{}

    // The type is map[string]bool.
    SfpOptions interface{}

    // The type is string.
    SfpVendorSerialNum interface{}

    // The type is string.
    SfpDataCode interface{}

    // The type is map[string]bool.
    SfpDiagMonitoring interface{}

    // The type is map[string]bool.
    SfpEnhancedOptions interface{}
}

func (sfpPortDetail *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail) GetEntityData() *types.CommonEntityData {
    sfpPortDetail.EntityData.YFilter = sfpPortDetail.YFilter
    sfpPortDetail.EntityData.YangName = "sfp-port-detail"
    sfpPortDetail.EntityData.BundleName = "cisco_ios_xr"
    sfpPortDetail.EntityData.ParentYangName = "sfp-details"
    sfpPortDetail.EntityData.SegmentPath = "sfp-port-detail"
    sfpPortDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortDetail.EntityData.Children = types.NewOrderedMap()
    sfpPortDetail.EntityData.Leafs = types.NewOrderedMap()
    sfpPortDetail.EntityData.Leafs.Append("sfp-tranceiver-type", types.YLeaf{"SfpTranceiverType", sfpPortDetail.SfpTranceiverType})
    sfpPortDetail.EntityData.Leafs.Append("sfp-tranceiver-code", types.YLeaf{"SfpTranceiverCode", sfpPortDetail.SfpTranceiverCode})
    sfpPortDetail.EntityData.Leafs.Append("sfp-encoding", types.YLeaf{"SfpEncoding", sfpPortDetail.SfpEncoding})
    sfpPortDetail.EntityData.Leafs.Append("sfp-bit-rate", types.YLeaf{"SfpBitRate", sfpPortDetail.SfpBitRate})
    sfpPortDetail.EntityData.Leafs.Append("sfp-link-reach-9u-fiber_KM", types.YLeaf{"SfpLinkReach9uFiberKM", sfpPortDetail.SfpLinkReach9uFiberKM})
    sfpPortDetail.EntityData.Leafs.Append("sfp-link-reach-9u-fiber_M", types.YLeaf{"SfpLinkReach9uFiberM", sfpPortDetail.SfpLinkReach9uFiberM})
    sfpPortDetail.EntityData.Leafs.Append("sfp-link-reach-50u-fiber_M", types.YLeaf{"SfpLinkReach50uFiberM", sfpPortDetail.SfpLinkReach50uFiberM})
    sfpPortDetail.EntityData.Leafs.Append("sfp-link-reach-62_5u-fiber_M", types.YLeaf{"SfpLinkReach625uFiberM", sfpPortDetail.SfpLinkReach625uFiberM})
    sfpPortDetail.EntityData.Leafs.Append("sfp-link-reach-copper_M", types.YLeaf{"SfpLinkReachCopperM", sfpPortDetail.SfpLinkReachCopperM})
    sfpPortDetail.EntityData.Leafs.Append("sfp-vendor-name", types.YLeaf{"SfpVendorName", sfpPortDetail.SfpVendorName})
    sfpPortDetail.EntityData.Leafs.Append("sfp-vendor-oui", types.YLeaf{"SfpVendorOui", sfpPortDetail.SfpVendorOui})
    sfpPortDetail.EntityData.Leafs.Append("sfp-vendor-part-num", types.YLeaf{"SfpVendorPartNum", sfpPortDetail.SfpVendorPartNum})
    sfpPortDetail.EntityData.Leafs.Append("sfp-laser-wavelength", types.YLeaf{"SfpLaserWavelength", sfpPortDetail.SfpLaserWavelength})
    sfpPortDetail.EntityData.Leafs.Append("sfp-options", types.YLeaf{"SfpOptions", sfpPortDetail.SfpOptions})
    sfpPortDetail.EntityData.Leafs.Append("sfp-vendor-serial-num", types.YLeaf{"SfpVendorSerialNum", sfpPortDetail.SfpVendorSerialNum})
    sfpPortDetail.EntityData.Leafs.Append("sfp-data-code", types.YLeaf{"SfpDataCode", sfpPortDetail.SfpDataCode})
    sfpPortDetail.EntityData.Leafs.Append("sfp-diag-monitoring", types.YLeaf{"SfpDiagMonitoring", sfpPortDetail.SfpDiagMonitoring})
    sfpPortDetail.EntityData.Leafs.Append("sfp-enhanced-options", types.YLeaf{"SfpEnhancedOptions", sfpPortDetail.SfpEnhancedOptions})

    sfpPortDetail.EntityData.YListKeys = []string {}

    return &(sfpPortDetail.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpMsa0x00 interface{}

    // The type is string.
    SfpMsa0x10 interface{}

    // The type is string.
    SfpMsa0x20 interface{}

    // The type is string.
    SfpMsa0x30 interface{}

    // The type is string.
    SfpMsa0x40 interface{}

    // The type is string.
    SfpMsa0x50 interface{}
}

func (sfpMsaData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData) GetEntityData() *types.CommonEntityData {
    sfpMsaData.EntityData.YFilter = sfpMsaData.YFilter
    sfpMsaData.EntityData.YangName = "sfp-msa-data"
    sfpMsaData.EntityData.BundleName = "cisco_ios_xr"
    sfpMsaData.EntityData.ParentYangName = "sfp-details"
    sfpMsaData.EntityData.SegmentPath = "sfp-msa-data"
    sfpMsaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpMsaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpMsaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpMsaData.EntityData.Children = types.NewOrderedMap()
    sfpMsaData.EntityData.Leafs = types.NewOrderedMap()
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x00", types.YLeaf{"SfpMsa0x00", sfpMsaData.SfpMsa0x00})
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x10", types.YLeaf{"SfpMsa0x10", sfpMsaData.SfpMsa0x10})
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x20", types.YLeaf{"SfpMsa0x20", sfpMsaData.SfpMsa0x20})
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x30", types.YLeaf{"SfpMsa0x30", sfpMsaData.SfpMsa0x30})
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x40", types.YLeaf{"SfpMsa0x40", sfpMsaData.SfpMsa0x40})
    sfpMsaData.EntityData.Leafs.Append("sfp-msa-0x50", types.YLeaf{"SfpMsa0x50", sfpMsaData.SfpMsa0x50})

    sfpMsaData.EntityData.YListKeys = []string {}

    return &(sfpMsaData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Thresholds Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds

    
    RealTimeData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData
}

func (sfpDiagAnalogInfo *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo) GetEntityData() *types.CommonEntityData {
    sfpDiagAnalogInfo.EntityData.YFilter = sfpDiagAnalogInfo.YFilter
    sfpDiagAnalogInfo.EntityData.YangName = "sfp-diag-analog-info"
    sfpDiagAnalogInfo.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagAnalogInfo.EntityData.ParentYangName = "sfp-details"
    sfpDiagAnalogInfo.EntityData.SegmentPath = "sfp-diag-analog-info"
    sfpDiagAnalogInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagAnalogInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagAnalogInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagAnalogInfo.EntityData.Children = types.NewOrderedMap()
    sfpDiagAnalogInfo.EntityData.Children.Append("Thresholds", types.YChild{"Thresholds", &sfpDiagAnalogInfo.Thresholds})
    sfpDiagAnalogInfo.EntityData.Children.Append("Real-Time-Data", types.YChild{"RealTimeData", &sfpDiagAnalogInfo.RealTimeData})
    sfpDiagAnalogInfo.EntityData.Leafs = types.NewOrderedMap()

    sfpDiagAnalogInfo.EntityData.YListKeys = []string {}

    return &(sfpDiagAnalogInfo.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Temperature Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature

    
    Voltage Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage

    
    Bias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias

    
    TxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower

    
    RxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower
}

func (thresholds *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds) GetEntityData() *types.CommonEntityData {
    thresholds.EntityData.YFilter = thresholds.YFilter
    thresholds.EntityData.YangName = "Thresholds"
    thresholds.EntityData.BundleName = "cisco_ios_xr"
    thresholds.EntityData.ParentYangName = "sfp-diag-analog-info"
    thresholds.EntityData.SegmentPath = "Thresholds"
    thresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholds.EntityData.Children = types.NewOrderedMap()
    thresholds.EntityData.Children.Append("Temperature", types.YChild{"Temperature", &thresholds.Temperature})
    thresholds.EntityData.Children.Append("Voltage", types.YChild{"Voltage", &thresholds.Voltage})
    thresholds.EntityData.Children.Append("Bias", types.YChild{"Bias", &thresholds.Bias})
    thresholds.EntityData.Children.Append("Tx-Power", types.YChild{"TxPower", &thresholds.TxPower})
    thresholds.EntityData.Children.Append("Rx-Power", types.YChild{"RxPower", &thresholds.RxPower})
    thresholds.EntityData.Leafs = types.NewOrderedMap()

    thresholds.EntityData.YListKeys = []string {}

    return &(thresholds.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    TempAlarmHigh interface{}

    // The type is string.
    TempWarningHigh interface{}

    // The type is string.
    TempWarningLow interface{}

    // The type is string.
    TempAlarmLow interface{}
}

func (temperature *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature) GetEntityData() *types.CommonEntityData {
    temperature.EntityData.YFilter = temperature.YFilter
    temperature.EntityData.YangName = "Temperature"
    temperature.EntityData.BundleName = "cisco_ios_xr"
    temperature.EntityData.ParentYangName = "Thresholds"
    temperature.EntityData.SegmentPath = "Temperature"
    temperature.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    temperature.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    temperature.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    temperature.EntityData.Children = types.NewOrderedMap()
    temperature.EntityData.Leafs = types.NewOrderedMap()
    temperature.EntityData.Leafs.Append("temp-alarm-high", types.YLeaf{"TempAlarmHigh", temperature.TempAlarmHigh})
    temperature.EntityData.Leafs.Append("temp-warning-high", types.YLeaf{"TempWarningHigh", temperature.TempWarningHigh})
    temperature.EntityData.Leafs.Append("temp-warning-low", types.YLeaf{"TempWarningLow", temperature.TempWarningLow})
    temperature.EntityData.Leafs.Append("temp-alarm-low", types.YLeaf{"TempAlarmLow", temperature.TempAlarmLow})

    temperature.EntityData.YListKeys = []string {}

    return &(temperature.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    VoltAlarmHigh interface{}

    // The type is string.
    VoltWarningHigh interface{}

    // The type is string.
    VoltWarningLow interface{}

    // The type is string.
    VoltAlarmLow interface{}
}

func (voltage *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage) GetEntityData() *types.CommonEntityData {
    voltage.EntityData.YFilter = voltage.YFilter
    voltage.EntityData.YangName = "Voltage"
    voltage.EntityData.BundleName = "cisco_ios_xr"
    voltage.EntityData.ParentYangName = "Thresholds"
    voltage.EntityData.SegmentPath = "Voltage"
    voltage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    voltage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    voltage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    voltage.EntityData.Children = types.NewOrderedMap()
    voltage.EntityData.Leafs = types.NewOrderedMap()
    voltage.EntityData.Leafs.Append("volt-alarm-high", types.YLeaf{"VoltAlarmHigh", voltage.VoltAlarmHigh})
    voltage.EntityData.Leafs.Append("volt-warning-high", types.YLeaf{"VoltWarningHigh", voltage.VoltWarningHigh})
    voltage.EntityData.Leafs.Append("volt-warning-low", types.YLeaf{"VoltWarningLow", voltage.VoltWarningLow})
    voltage.EntityData.Leafs.Append("volt-alarm-low", types.YLeaf{"VoltAlarmLow", voltage.VoltAlarmLow})

    voltage.EntityData.YListKeys = []string {}

    return &(voltage.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    BiasAlarmHigh interface{}

    // The type is string.
    BiasWarningHigh interface{}

    // The type is string.
    BiasWarningLow interface{}

    // The type is string.
    BiasAlarmLow interface{}
}

func (bias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias) GetEntityData() *types.CommonEntityData {
    bias.EntityData.YFilter = bias.YFilter
    bias.EntityData.YangName = "Bias"
    bias.EntityData.BundleName = "cisco_ios_xr"
    bias.EntityData.ParentYangName = "Thresholds"
    bias.EntityData.SegmentPath = "Bias"
    bias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bias.EntityData.Children = types.NewOrderedMap()
    bias.EntityData.Leafs = types.NewOrderedMap()
    bias.EntityData.Leafs.Append("bias-alarm-high", types.YLeaf{"BiasAlarmHigh", bias.BiasAlarmHigh})
    bias.EntityData.Leafs.Append("bias-warning-high", types.YLeaf{"BiasWarningHigh", bias.BiasWarningHigh})
    bias.EntityData.Leafs.Append("bias-warning-low", types.YLeaf{"BiasWarningLow", bias.BiasWarningLow})
    bias.EntityData.Leafs.Append("bias-alarm-low", types.YLeaf{"BiasAlarmLow", bias.BiasAlarmLow})

    bias.EntityData.YListKeys = []string {}

    return &(bias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    TxPowerAlarmHigh interface{}

    // The type is string.
    TxPowerWarningHigh interface{}

    // The type is string.
    TxPowerWarningLow interface{}

    // The type is string.
    TxPowerAlarmLow interface{}
}

func (txPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower) GetEntityData() *types.CommonEntityData {
    txPower.EntityData.YFilter = txPower.YFilter
    txPower.EntityData.YangName = "Tx-Power"
    txPower.EntityData.BundleName = "cisco_ios_xr"
    txPower.EntityData.ParentYangName = "Thresholds"
    txPower.EntityData.SegmentPath = "Tx-Power"
    txPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txPower.EntityData.Children = types.NewOrderedMap()
    txPower.EntityData.Leafs = types.NewOrderedMap()
    txPower.EntityData.Leafs.Append("tx-power-alarm-high", types.YLeaf{"TxPowerAlarmHigh", txPower.TxPowerAlarmHigh})
    txPower.EntityData.Leafs.Append("tx-power-warning-high", types.YLeaf{"TxPowerWarningHigh", txPower.TxPowerWarningHigh})
    txPower.EntityData.Leafs.Append("tx-power-warning-low", types.YLeaf{"TxPowerWarningLow", txPower.TxPowerWarningLow})
    txPower.EntityData.Leafs.Append("tx-power-alarm-low", types.YLeaf{"TxPowerAlarmLow", txPower.TxPowerAlarmLow})

    txPower.EntityData.YListKeys = []string {}

    return &(txPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    RxPowerAlarmHigh interface{}

    // The type is string.
    RxPowerWarningHigh interface{}

    // The type is string.
    RxPowerWarningLow interface{}

    // The type is string.
    RxPowerAlarmLow interface{}
}

func (rxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower) GetEntityData() *types.CommonEntityData {
    rxPower.EntityData.YFilter = rxPower.YFilter
    rxPower.EntityData.YangName = "Rx-Power"
    rxPower.EntityData.BundleName = "cisco_ios_xr"
    rxPower.EntityData.ParentYangName = "Thresholds"
    rxPower.EntityData.SegmentPath = "Rx-Power"
    rxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxPower.EntityData.Children = types.NewOrderedMap()
    rxPower.EntityData.Leafs = types.NewOrderedMap()
    rxPower.EntityData.Leafs.Append("rx-power-alarm-high", types.YLeaf{"RxPowerAlarmHigh", rxPower.RxPowerAlarmHigh})
    rxPower.EntityData.Leafs.Append("rx-power-warning-high", types.YLeaf{"RxPowerWarningHigh", rxPower.RxPowerWarningHigh})
    rxPower.EntityData.Leafs.Append("rx-power-warning-low", types.YLeaf{"RxPowerWarningLow", rxPower.RxPowerWarningLow})
    rxPower.EntityData.Leafs.Append("rx-power-alarm-low", types.YLeaf{"RxPowerAlarmLow", rxPower.RxPowerAlarmLow})

    rxPower.EntityData.YListKeys = []string {}

    return &(rxPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Current Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current
}

func (realTimeData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData) GetEntityData() *types.CommonEntityData {
    realTimeData.EntityData.YFilter = realTimeData.YFilter
    realTimeData.EntityData.YangName = "Real-Time-Data"
    realTimeData.EntityData.BundleName = "cisco_ios_xr"
    realTimeData.EntityData.ParentYangName = "sfp-diag-analog-info"
    realTimeData.EntityData.SegmentPath = "Real-Time-Data"
    realTimeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    realTimeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    realTimeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    realTimeData.EntityData.Children = types.NewOrderedMap()
    realTimeData.EntityData.Children.Append("Current", types.YChild{"Current", &realTimeData.Current})
    realTimeData.EntityData.Leafs = types.NewOrderedMap()

    realTimeData.EntityData.YListKeys = []string {}

    return &(realTimeData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    CurTemperature interface{}

    // The type is string.
    CurVoltage interface{}

    // The type is string.
    CurBias interface{}

    // The type is string.
    CurTxPower interface{}

    // The type is string.
    CurRxPower interface{}

    // The type is map[string]bool.
    OptionalStatusControl interface{}
}

func (current *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current) GetEntityData() *types.CommonEntityData {
    current.EntityData.YFilter = current.YFilter
    current.EntityData.YangName = "Current"
    current.EntityData.BundleName = "cisco_ios_xr"
    current.EntityData.ParentYangName = "Real-Time-Data"
    current.EntityData.SegmentPath = "Current"
    current.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    current.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    current.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    current.EntityData.Children = types.NewOrderedMap()
    current.EntityData.Leafs = types.NewOrderedMap()
    current.EntityData.Leafs.Append("cur-temperature", types.YLeaf{"CurTemperature", current.CurTemperature})
    current.EntityData.Leafs.Append("cur-voltage", types.YLeaf{"CurVoltage", current.CurVoltage})
    current.EntityData.Leafs.Append("cur-bias", types.YLeaf{"CurBias", current.CurBias})
    current.EntityData.Leafs.Append("cur-tx-power", types.YLeaf{"CurTxPower", current.CurTxPower})
    current.EntityData.Leafs.Append("cur-rx-power", types.YLeaf{"CurRxPower", current.CurRxPower})
    current.EntityData.Leafs.Append("optional-status-control", types.YLeaf{"OptionalStatusControl", current.OptionalStatusControl})

    current.EntityData.YListKeys = []string {}

    return &(current.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    OpticalSfpDiag Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag
}

func (sfpDiagData1 *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1) GetEntityData() *types.CommonEntityData {
    sfpDiagData1.EntityData.YFilter = sfpDiagData1.YFilter
    sfpDiagData1.EntityData.YangName = "sfp-diag-data1"
    sfpDiagData1.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagData1.EntityData.ParentYangName = "sfp-details"
    sfpDiagData1.EntityData.SegmentPath = "sfp-diag-data1"
    sfpDiagData1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagData1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagData1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagData1.EntityData.Children = types.NewOrderedMap()
    sfpDiagData1.EntityData.Children.Append("optical-sfp-diag", types.YChild{"OpticalSfpDiag", &sfpDiagData1.OpticalSfpDiag})
    sfpDiagData1.EntityData.Leafs = types.NewOrderedMap()

    sfpDiagData1.EntityData.YListKeys = []string {}

    return &(sfpDiagData1.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpDiag0x00 interface{}

    // The type is string.
    SfpDiag0x10 interface{}

    // The type is string.
    SfpDiag0x20 interface{}

    // The type is string.
    SfpDiag0x30 interface{}

    // The type is string.
    SfpDiag0x40 interface{}

    // The type is string.
    SfpDiag0x50 interface{}

    // The type is string.
    SfpDiag0x60 interface{}

    // The type is string.
    SfpDiag0x70 interface{}
}

func (opticalSfpDiag *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag) GetEntityData() *types.CommonEntityData {
    opticalSfpDiag.EntityData.YFilter = opticalSfpDiag.YFilter
    opticalSfpDiag.EntityData.YangName = "optical-sfp-diag"
    opticalSfpDiag.EntityData.BundleName = "cisco_ios_xr"
    opticalSfpDiag.EntityData.ParentYangName = "sfp-diag-data1"
    opticalSfpDiag.EntityData.SegmentPath = "optical-sfp-diag"
    opticalSfpDiag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalSfpDiag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalSfpDiag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalSfpDiag.EntityData.Children = types.NewOrderedMap()
    opticalSfpDiag.EntityData.Leafs = types.NewOrderedMap()
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x00", types.YLeaf{"SfpDiag0x00", opticalSfpDiag.SfpDiag0x00})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x10", types.YLeaf{"SfpDiag0x10", opticalSfpDiag.SfpDiag0x10})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x20", types.YLeaf{"SfpDiag0x20", opticalSfpDiag.SfpDiag0x20})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x30", types.YLeaf{"SfpDiag0x30", opticalSfpDiag.SfpDiag0x30})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x40", types.YLeaf{"SfpDiag0x40", opticalSfpDiag.SfpDiag0x40})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x50", types.YLeaf{"SfpDiag0x50", opticalSfpDiag.SfpDiag0x50})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x60", types.YLeaf{"SfpDiag0x60", opticalSfpDiag.SfpDiag0x60})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x70", types.YLeaf{"SfpDiag0x70", opticalSfpDiag.SfpDiag0x70})

    opticalSfpDiag.EntityData.YListKeys = []string {}

    return &(opticalSfpDiag.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CiscoData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData
}

func (sfpDiagUserInfo *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo) GetEntityData() *types.CommonEntityData {
    sfpDiagUserInfo.EntityData.YFilter = sfpDiagUserInfo.YFilter
    sfpDiagUserInfo.EntityData.YangName = "sfp-diag-user-info"
    sfpDiagUserInfo.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagUserInfo.EntityData.ParentYangName = "sfp-details"
    sfpDiagUserInfo.EntityData.SegmentPath = "sfp-diag-user-info"
    sfpDiagUserInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagUserInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagUserInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagUserInfo.EntityData.Children = types.NewOrderedMap()
    sfpDiagUserInfo.EntityData.Children.Append("cisco-data", types.YChild{"CiscoData", &sfpDiagUserInfo.CiscoData})
    sfpDiagUserInfo.EntityData.Leafs = types.NewOrderedMap()

    sfpDiagUserInfo.EntityData.YListKeys = []string {}

    return &(sfpDiagUserInfo.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    CiscoCleiCode interface{}

    // The type is string.
    CiscoPartNumber interface{}

    // The type is interface{} with range: -128..127.
    CiscoMinTemperature interface{}

    // The type is interface{} with range: -128..127.
    CiscoMaxTemperature interface{}

    // The type is string.
    CiscoProductId interface{}
}

func (ciscoData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData) GetEntityData() *types.CommonEntityData {
    ciscoData.EntityData.YFilter = ciscoData.YFilter
    ciscoData.EntityData.YangName = "cisco-data"
    ciscoData.EntityData.BundleName = "cisco_ios_xr"
    ciscoData.EntityData.ParentYangName = "sfp-diag-user-info"
    ciscoData.EntityData.SegmentPath = "cisco-data"
    ciscoData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoData.EntityData.Children = types.NewOrderedMap()
    ciscoData.EntityData.Leafs = types.NewOrderedMap()
    ciscoData.EntityData.Leafs.Append("cisco-clei-code", types.YLeaf{"CiscoCleiCode", ciscoData.CiscoCleiCode})
    ciscoData.EntityData.Leafs.Append("cisco-part-number", types.YLeaf{"CiscoPartNumber", ciscoData.CiscoPartNumber})
    ciscoData.EntityData.Leafs.Append("cisco-min-temperature", types.YLeaf{"CiscoMinTemperature", ciscoData.CiscoMinTemperature})
    ciscoData.EntityData.Leafs.Append("cisco-max-temperature", types.YLeaf{"CiscoMaxTemperature", ciscoData.CiscoMaxTemperature})
    ciscoData.EntityData.Leafs.Append("cisco-product-id", types.YLeaf{"CiscoProductId", ciscoData.CiscoProductId})

    ciscoData.EntityData.YListKeys = []string {}

    return &(ciscoData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    OpticalSfpDiag Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag
}

func (sfpDiagData2 *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2) GetEntityData() *types.CommonEntityData {
    sfpDiagData2.EntityData.YFilter = sfpDiagData2.YFilter
    sfpDiagData2.EntityData.YangName = "sfp-diag-data2"
    sfpDiagData2.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagData2.EntityData.ParentYangName = "sfp-details"
    sfpDiagData2.EntityData.SegmentPath = "sfp-diag-data2"
    sfpDiagData2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagData2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagData2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagData2.EntityData.Children = types.NewOrderedMap()
    sfpDiagData2.EntityData.Children.Append("optical-sfp-diag", types.YChild{"OpticalSfpDiag", &sfpDiagData2.OpticalSfpDiag})
    sfpDiagData2.EntityData.Leafs = types.NewOrderedMap()

    sfpDiagData2.EntityData.YListKeys = []string {}

    return &(sfpDiagData2.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpDiag0x80 interface{}

    // The type is string.
    SfpDiag0x90 interface{}

    // The type is string.
    SfpDiag0xA0 interface{}

    // The type is string.
    SfpDiag0xB0 interface{}

    // The type is string.
    SfpDiag0xC0 interface{}

    // The type is string.
    SfpDiag0xD0 interface{}

    // The type is string.
    SfpDiag0xE0 interface{}

    // The type is string.
    SfpDiag0xF0 interface{}
}

func (opticalSfpDiag *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag) GetEntityData() *types.CommonEntityData {
    opticalSfpDiag.EntityData.YFilter = opticalSfpDiag.YFilter
    opticalSfpDiag.EntityData.YangName = "optical-sfp-diag"
    opticalSfpDiag.EntityData.BundleName = "cisco_ios_xr"
    opticalSfpDiag.EntityData.ParentYangName = "sfp-diag-data2"
    opticalSfpDiag.EntityData.SegmentPath = "optical-sfp-diag"
    opticalSfpDiag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalSfpDiag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalSfpDiag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalSfpDiag.EntityData.Children = types.NewOrderedMap()
    opticalSfpDiag.EntityData.Leafs = types.NewOrderedMap()
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x80", types.YLeaf{"SfpDiag0x80", opticalSfpDiag.SfpDiag0x80})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0x90", types.YLeaf{"SfpDiag0x90", opticalSfpDiag.SfpDiag0x90})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xA0", types.YLeaf{"SfpDiag0xA0", opticalSfpDiag.SfpDiag0xA0})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xB0", types.YLeaf{"SfpDiag0xB0", opticalSfpDiag.SfpDiag0xB0})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xC0", types.YLeaf{"SfpDiag0xC0", opticalSfpDiag.SfpDiag0xC0})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xD0", types.YLeaf{"SfpDiag0xD0", opticalSfpDiag.SfpDiag0xD0})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xE0", types.YLeaf{"SfpDiag0xE0", opticalSfpDiag.SfpDiag0xE0})
    opticalSfpDiag.EntityData.Leafs.Append("sfp-diag-0xF0", types.YLeaf{"SfpDiag0xF0", opticalSfpDiag.SfpDiag0xF0})

    opticalSfpDiag.EntityData.YListKeys = []string {}

    return &(opticalSfpDiag.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpPageA0Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data

    
    QsfpPageA00Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data

    
    QsfpPageA03Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data
}

func (qsfpDetails *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails) GetEntityData() *types.CommonEntityData {
    qsfpDetails.EntityData.YFilter = qsfpDetails.YFilter
    qsfpDetails.EntityData.YangName = "qsfp-details"
    qsfpDetails.EntityData.BundleName = "cisco_ios_xr"
    qsfpDetails.EntityData.ParentYangName = "sfp-port-iter"
    qsfpDetails.EntityData.SegmentPath = "qsfp-details"
    qsfpDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpDetails.EntityData.Children = types.NewOrderedMap()
    qsfpDetails.EntityData.Children.Append("qsfp_page_A0_data", types.YChild{"QsfpPageA0Data", &qsfpDetails.QsfpPageA0Data})
    qsfpDetails.EntityData.Children.Append("qsfp_page_A0_0_data", types.YChild{"QsfpPageA00Data", &qsfpDetails.QsfpPageA00Data})
    qsfpDetails.EntityData.Children.Append("qsfp_page_A0_3_data", types.YChild{"QsfpPageA03Data", &qsfpDetails.QsfpPageA03Data})
    qsfpDetails.EntityData.Leafs = types.NewOrderedMap()

    qsfpDetails.EntityData.YListKeys = []string {}

    return &(qsfpDetails.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpRealTimeData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData

    
    QsfpRealTimeStatusFlags Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags
}

func (qsfpPageA0Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA0Data.EntityData.YFilter = qsfpPageA0Data.YFilter
    qsfpPageA0Data.EntityData.YangName = "qsfp_page_A0_data"
    qsfpPageA0Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA0Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA0Data.EntityData.SegmentPath = "qsfp_page_A0_data"
    qsfpPageA0Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA0Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA0Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA0Data.EntityData.Children = types.NewOrderedMap()
    qsfpPageA0Data.EntityData.Children.Append("qsfp-real-time-data", types.YChild{"QsfpRealTimeData", &qsfpPageA0Data.QsfpRealTimeData})
    qsfpPageA0Data.EntityData.Children.Append("qsfp-real-time-status-flags", types.YChild{"QsfpRealTimeStatusFlags", &qsfpPageA0Data.QsfpRealTimeStatusFlags})
    qsfpPageA0Data.EntityData.Leafs = types.NewOrderedMap()

    qsfpPageA0Data.EntityData.YListKeys = []string {}

    return &(qsfpPageA0Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpTempVolt Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt

    
    QsfpTxChannelBias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias

    
    QsfpTxOutputPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower

    
    QsfpRxInputPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower
}

func (qsfpRealTimeData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeData.EntityData.YFilter = qsfpRealTimeData.YFilter
    qsfpRealTimeData.EntityData.YangName = "qsfp-real-time-data"
    qsfpRealTimeData.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeData.EntityData.ParentYangName = "qsfp_page_A0_data"
    qsfpRealTimeData.EntityData.SegmentPath = "qsfp-real-time-data"
    qsfpRealTimeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeData.EntityData.Children = types.NewOrderedMap()
    qsfpRealTimeData.EntityData.Children.Append("qsfp-temp-volt", types.YChild{"QsfpTempVolt", &qsfpRealTimeData.QsfpTempVolt})
    qsfpRealTimeData.EntityData.Children.Append("qsfp-tx-channel-bias", types.YChild{"QsfpTxChannelBias", &qsfpRealTimeData.QsfpTxChannelBias})
    qsfpRealTimeData.EntityData.Children.Append("qsfp-tx-output-power", types.YChild{"QsfpTxOutputPower", &qsfpRealTimeData.QsfpTxOutputPower})
    qsfpRealTimeData.EntityData.Children.Append("qsfp-rx-input-power", types.YChild{"QsfpRxInputPower", &qsfpRealTimeData.QsfpRxInputPower})
    qsfpRealTimeData.EntityData.Leafs = types.NewOrderedMap()

    qsfpRealTimeData.EntityData.YListKeys = []string {}

    return &(qsfpRealTimeData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ModuleMonitorTemperature interface{}

    // The type is string.
    ModuleMonitorVoltage interface{}
}

func (qsfpTempVolt *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt) GetEntityData() *types.CommonEntityData {
    qsfpTempVolt.EntityData.YFilter = qsfpTempVolt.YFilter
    qsfpTempVolt.EntityData.YangName = "qsfp-temp-volt"
    qsfpTempVolt.EntityData.BundleName = "cisco_ios_xr"
    qsfpTempVolt.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTempVolt.EntityData.SegmentPath = "qsfp-temp-volt"
    qsfpTempVolt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTempVolt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTempVolt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTempVolt.EntityData.Children = types.NewOrderedMap()
    qsfpTempVolt.EntityData.Leafs = types.NewOrderedMap()
    qsfpTempVolt.EntityData.Leafs.Append("module-monitor-temperature", types.YLeaf{"ModuleMonitorTemperature", qsfpTempVolt.ModuleMonitorTemperature})
    qsfpTempVolt.EntityData.Leafs.Append("module-monitor-voltage", types.YLeaf{"ModuleMonitorVoltage", qsfpTempVolt.ModuleMonitorVoltage})

    qsfpTempVolt.EntityData.YListKeys = []string {}

    return &(qsfpTempVolt.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorTx1Bias interface{}

    // The type is string.
    ChannelMonitorTx2Bias interface{}

    // The type is string.
    ChannelMonitorTx3Bias interface{}

    // The type is string.
    ChannelMonitorTx4Bias interface{}
}

func (qsfpTxChannelBias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias) GetEntityData() *types.CommonEntityData {
    qsfpTxChannelBias.EntityData.YFilter = qsfpTxChannelBias.YFilter
    qsfpTxChannelBias.EntityData.YangName = "qsfp-tx-channel-bias"
    qsfpTxChannelBias.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxChannelBias.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTxChannelBias.EntityData.SegmentPath = "qsfp-tx-channel-bias"
    qsfpTxChannelBias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxChannelBias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxChannelBias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxChannelBias.EntityData.Children = types.NewOrderedMap()
    qsfpTxChannelBias.EntityData.Leafs = types.NewOrderedMap()
    qsfpTxChannelBias.EntityData.Leafs.Append("channel-monitor-Tx1-Bias", types.YLeaf{"ChannelMonitorTx1Bias", qsfpTxChannelBias.ChannelMonitorTx1Bias})
    qsfpTxChannelBias.EntityData.Leafs.Append("channel-monitor-Tx2-Bias", types.YLeaf{"ChannelMonitorTx2Bias", qsfpTxChannelBias.ChannelMonitorTx2Bias})
    qsfpTxChannelBias.EntityData.Leafs.Append("channel-monitor-Tx3-Bias", types.YLeaf{"ChannelMonitorTx3Bias", qsfpTxChannelBias.ChannelMonitorTx3Bias})
    qsfpTxChannelBias.EntityData.Leafs.Append("channel-monitor-Tx4-Bias", types.YLeaf{"ChannelMonitorTx4Bias", qsfpTxChannelBias.ChannelMonitorTx4Bias})

    qsfpTxChannelBias.EntityData.YListKeys = []string {}

    return &(qsfpTxChannelBias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorTx1Power interface{}

    // The type is string.
    ChannelMonitorTx2Power interface{}

    // The type is string.
    ChannelMonitorTx3Power interface{}

    // The type is string.
    ChannelMonitorTx4Power interface{}
}

func (qsfpTxOutputPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower) GetEntityData() *types.CommonEntityData {
    qsfpTxOutputPower.EntityData.YFilter = qsfpTxOutputPower.YFilter
    qsfpTxOutputPower.EntityData.YangName = "qsfp-tx-output-power"
    qsfpTxOutputPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxOutputPower.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTxOutputPower.EntityData.SegmentPath = "qsfp-tx-output-power"
    qsfpTxOutputPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxOutputPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxOutputPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxOutputPower.EntityData.Children = types.NewOrderedMap()
    qsfpTxOutputPower.EntityData.Leafs = types.NewOrderedMap()
    qsfpTxOutputPower.EntityData.Leafs.Append("channel-monitor-Tx1-Power", types.YLeaf{"ChannelMonitorTx1Power", qsfpTxOutputPower.ChannelMonitorTx1Power})
    qsfpTxOutputPower.EntityData.Leafs.Append("channel-monitor-Tx2-Power", types.YLeaf{"ChannelMonitorTx2Power", qsfpTxOutputPower.ChannelMonitorTx2Power})
    qsfpTxOutputPower.EntityData.Leafs.Append("channel-monitor-Tx3-Power", types.YLeaf{"ChannelMonitorTx3Power", qsfpTxOutputPower.ChannelMonitorTx3Power})
    qsfpTxOutputPower.EntityData.Leafs.Append("channel-monitor-Tx4-Power", types.YLeaf{"ChannelMonitorTx4Power", qsfpTxOutputPower.ChannelMonitorTx4Power})

    qsfpTxOutputPower.EntityData.YListKeys = []string {}

    return &(qsfpTxOutputPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorRx1Power interface{}

    // The type is string.
    ChannelMonitorRx2Power interface{}

    // The type is string.
    ChannelMonitorRx3Power interface{}

    // The type is string.
    ChannelMonitorRx4Power interface{}
}

func (qsfpRxInputPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower) GetEntityData() *types.CommonEntityData {
    qsfpRxInputPower.EntityData.YFilter = qsfpRxInputPower.YFilter
    qsfpRxInputPower.EntityData.YangName = "qsfp-rx-input-power"
    qsfpRxInputPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpRxInputPower.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpRxInputPower.EntityData.SegmentPath = "qsfp-rx-input-power"
    qsfpRxInputPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRxInputPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRxInputPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRxInputPower.EntityData.Children = types.NewOrderedMap()
    qsfpRxInputPower.EntityData.Leafs = types.NewOrderedMap()
    qsfpRxInputPower.EntityData.Leafs.Append("channel-monitor-Rx1-Power", types.YLeaf{"ChannelMonitorRx1Power", qsfpRxInputPower.ChannelMonitorRx1Power})
    qsfpRxInputPower.EntityData.Leafs.Append("channel-monitor-Rx2-Power", types.YLeaf{"ChannelMonitorRx2Power", qsfpRxInputPower.ChannelMonitorRx2Power})
    qsfpRxInputPower.EntityData.Leafs.Append("channel-monitor-Rx3-Power", types.YLeaf{"ChannelMonitorRx3Power", qsfpRxInputPower.ChannelMonitorRx3Power})
    qsfpRxInputPower.EntityData.Leafs.Append("channel-monitor-Rx4-Power", types.YLeaf{"ChannelMonitorRx4Power", qsfpRxInputPower.ChannelMonitorRx4Power})

    qsfpRxInputPower.EntityData.YListKeys = []string {}

    return &(qsfpRxInputPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpRealTimeStatus Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus

    
    QsfpRealTimeInterruptFlags Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags
}

func (qsfpRealTimeStatusFlags *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeStatusFlags.EntityData.YFilter = qsfpRealTimeStatusFlags.YFilter
    qsfpRealTimeStatusFlags.EntityData.YangName = "qsfp-real-time-status-flags"
    qsfpRealTimeStatusFlags.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeStatusFlags.EntityData.ParentYangName = "qsfp_page_A0_data"
    qsfpRealTimeStatusFlags.EntityData.SegmentPath = "qsfp-real-time-status-flags"
    qsfpRealTimeStatusFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeStatusFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeStatusFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeStatusFlags.EntityData.Children = types.NewOrderedMap()
    qsfpRealTimeStatusFlags.EntityData.Children.Append("qsfp-real-time-status", types.YChild{"QsfpRealTimeStatus", &qsfpRealTimeStatusFlags.QsfpRealTimeStatus})
    qsfpRealTimeStatusFlags.EntityData.Children.Append("qsfp-real-time-interrupt-flags", types.YChild{"QsfpRealTimeInterruptFlags", &qsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags})
    qsfpRealTimeStatusFlags.EntityData.Leafs = types.NewOrderedMap()

    qsfpRealTimeStatusFlags.EntityData.YListKeys = []string {}

    return &(qsfpRealTimeStatusFlags.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpPageSelect interface{}

    // Status Indicator. The type is map[string]bool.
    QsfpStatus interface{}
}

func (qsfpRealTimeStatus *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeStatus.EntityData.YFilter = qsfpRealTimeStatus.YFilter
    qsfpRealTimeStatus.EntityData.YangName = "qsfp-real-time-status"
    qsfpRealTimeStatus.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeStatus.EntityData.ParentYangName = "qsfp-real-time-status-flags"
    qsfpRealTimeStatus.EntityData.SegmentPath = "qsfp-real-time-status"
    qsfpRealTimeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeStatus.EntityData.Children = types.NewOrderedMap()
    qsfpRealTimeStatus.EntityData.Leafs = types.NewOrderedMap()
    qsfpRealTimeStatus.EntityData.Leafs.Append("qsfp-page-select", types.YLeaf{"QsfpPageSelect", qsfpRealTimeStatus.QsfpPageSelect})
    qsfpRealTimeStatus.EntityData.Leafs.Append("qsfp-status", types.YLeaf{"QsfpStatus", qsfpRealTimeStatus.QsfpStatus})

    qsfpRealTimeStatus.EntityData.YListKeys = []string {}

    return &(qsfpRealTimeStatus.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interrupt Flag for TX/RX LOS Indicator. The type is map[string]bool.
    QsfpIntFlagsLOSIndicator interface{}

    // Interrupt Flag for TX Fault Indicator. The type is map[string]bool.
    QsfpIntFlagsFaultIndicator interface{}

    // Interrupt Flag for high/low alarm/warning temperature Indicator. The type
    // is map[string]bool.
    QsfpIntFlagsTemperatureIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Voltage Indicator. The type is
    // map[string]bool.
    QsfpIntFlagsSupplyVoltageIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Rx Power in Channel 1/2/3/4
    // Indicator. The type is map[string]bool.
    QsfpIntFlagsRxPowerIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Tx Bias in Channel 1/2/3/4
    // Indicator. The type is map[string]bool.
    QsfpIntFlagsTxBiasIndicator interface{}
}

func (qsfpRealTimeInterruptFlags *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeInterruptFlags.EntityData.YFilter = qsfpRealTimeInterruptFlags.YFilter
    qsfpRealTimeInterruptFlags.EntityData.YangName = "qsfp-real-time-interrupt-flags"
    qsfpRealTimeInterruptFlags.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeInterruptFlags.EntityData.ParentYangName = "qsfp-real-time-status-flags"
    qsfpRealTimeInterruptFlags.EntityData.SegmentPath = "qsfp-real-time-interrupt-flags"
    qsfpRealTimeInterruptFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeInterruptFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeInterruptFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeInterruptFlags.EntityData.Children = types.NewOrderedMap()
    qsfpRealTimeInterruptFlags.EntityData.Leafs = types.NewOrderedMap()
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-LOS-Indicator", types.YLeaf{"QsfpIntFlagsLOSIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsLOSIndicator})
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-Fault-Indicator", types.YLeaf{"QsfpIntFlagsFaultIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsFaultIndicator})
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-Temperature-Indicator", types.YLeaf{"QsfpIntFlagsTemperatureIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsTemperatureIndicator})
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-Supply-Voltage-Indicator", types.YLeaf{"QsfpIntFlagsSupplyVoltageIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsSupplyVoltageIndicator})
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-Rx-Power-Indicator", types.YLeaf{"QsfpIntFlagsRxPowerIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsRxPowerIndicator})
    qsfpRealTimeInterruptFlags.EntityData.Leafs.Append("qsfp-int-flags-Tx-Bias-Indicator", types.YLeaf{"QsfpIntFlagsTxBiasIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsTxBiasIndicator})

    qsfpRealTimeInterruptFlags.EntityData.YListKeys = []string {}

    return &(qsfpRealTimeInterruptFlags.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchSfpTranceiverTypeEnum.
    QsfpIdentifier interface{}

    // The type is EsdmaQsfpTransceiverEnum.
    QsfpTransceiver interface{}

    // The type is string.
    QsfpExtendedTransceiver interface{}

    // The type is EsdmaSfpEncodingEnum.
    QsfpEncoding interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpBitRate interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthStandardSMFiberKM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOM350uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOM250uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOM1625uFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthCopperCableAssemblyFiberM interface{}

    // The type is string.
    QsfpDeviceTech interface{}

    // The type is string.
    QsfpVendorName interface{}

    // The type is string.
    QsfpVendorOui interface{}

    // The type is string.
    QsfpVendorPartNum interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLaserWavelength interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpWavelengthTolerance interface{}

    // The type is string.
    QsfpMaxCaseTemperature interface{}

    // Option value for Rx amplitude . The type is map[string]bool.
    QsfpOptionValueRxAmplitude interface{}

    // Options Implemented in the QSFP Module. The type is map[string]bool.
    QsfpOptionValuesIndicator interface{}

    // The type is string.
    QsfpVendorSerialNum interface{}

    // The type is string.
    QsfpDateCode interface{}

    // The type is map[string]bool.
    QsfpDiagMonitoringType interface{}
}

func (qsfpPageA00Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA00Data.EntityData.YFilter = qsfpPageA00Data.YFilter
    qsfpPageA00Data.EntityData.YangName = "qsfp_page_A0_0_data"
    qsfpPageA00Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA00Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA00Data.EntityData.SegmentPath = "qsfp_page_A0_0_data"
    qsfpPageA00Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA00Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA00Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA00Data.EntityData.Children = types.NewOrderedMap()
    qsfpPageA00Data.EntityData.Leafs = types.NewOrderedMap()
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-identifier", types.YLeaf{"QsfpIdentifier", qsfpPageA00Data.QsfpIdentifier})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-transceiver", types.YLeaf{"QsfpTransceiver", qsfpPageA00Data.QsfpTransceiver})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-extended-transceiver", types.YLeaf{"QsfpExtendedTransceiver", qsfpPageA00Data.QsfpExtendedTransceiver})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-encoding", types.YLeaf{"QsfpEncoding", qsfpPageA00Data.QsfpEncoding})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-bit-rate", types.YLeaf{"QsfpBitRate", qsfpPageA00Data.QsfpBitRate})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-link-length-standard-SM-fiber_KM", types.YLeaf{"QsfpLinkLengthStandardSMFiberKM", qsfpPageA00Data.QsfpLinkLengthStandardSMFiberKM})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-link-length-OM3-50u-fiber_M", types.YLeaf{"QsfpLinkLengthOM350uFiberM", qsfpPageA00Data.QsfpLinkLengthOM350uFiberM})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-link-length-OM2-50u-fiber_M", types.YLeaf{"QsfpLinkLengthOM250uFiberM", qsfpPageA00Data.QsfpLinkLengthOM250uFiberM})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-link-length-OM1-62_5u-fiber_M", types.YLeaf{"QsfpLinkLengthOM1625uFiberM", qsfpPageA00Data.QsfpLinkLengthOM1625uFiberM})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-link-length-Copper-Cable-Assembly-fiber_M", types.YLeaf{"QsfpLinkLengthCopperCableAssemblyFiberM", qsfpPageA00Data.QsfpLinkLengthCopperCableAssemblyFiberM})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-device-tech", types.YLeaf{"QsfpDeviceTech", qsfpPageA00Data.QsfpDeviceTech})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-vendor-name", types.YLeaf{"QsfpVendorName", qsfpPageA00Data.QsfpVendorName})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-vendor-oui", types.YLeaf{"QsfpVendorOui", qsfpPageA00Data.QsfpVendorOui})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-vendor-part-num", types.YLeaf{"QsfpVendorPartNum", qsfpPageA00Data.QsfpVendorPartNum})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-laser-wavelength", types.YLeaf{"QsfpLaserWavelength", qsfpPageA00Data.QsfpLaserWavelength})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-wavelength_tolerance", types.YLeaf{"QsfpWavelengthTolerance", qsfpPageA00Data.QsfpWavelengthTolerance})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-max-case-temperature", types.YLeaf{"QsfpMaxCaseTemperature", qsfpPageA00Data.QsfpMaxCaseTemperature})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-option-value-Rx-amplitude", types.YLeaf{"QsfpOptionValueRxAmplitude", qsfpPageA00Data.QsfpOptionValueRxAmplitude})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-option-values-Indicator", types.YLeaf{"QsfpOptionValuesIndicator", qsfpPageA00Data.QsfpOptionValuesIndicator})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-vendor-serial-num", types.YLeaf{"QsfpVendorSerialNum", qsfpPageA00Data.QsfpVendorSerialNum})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-date-code", types.YLeaf{"QsfpDateCode", qsfpPageA00Data.QsfpDateCode})
    qsfpPageA00Data.EntityData.Leafs.Append("qsfp-diag-monitoring-type", types.YLeaf{"QsfpDiagMonitoringType", qsfpPageA00Data.QsfpDiagMonitoringType})

    qsfpPageA00Data.EntityData.YListKeys = []string {}

    return &(qsfpPageA00Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpTemperature Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature

    
    QsfpVoltage Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage

    
    QsfpTxBias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias

    
    QsfpTxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower

    
    QsfpRxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower
}

func (qsfpPageA03Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA03Data.EntityData.YFilter = qsfpPageA03Data.YFilter
    qsfpPageA03Data.EntityData.YangName = "qsfp_page_A0_3_data"
    qsfpPageA03Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA03Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA03Data.EntityData.SegmentPath = "qsfp_page_A0_3_data"
    qsfpPageA03Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA03Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA03Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA03Data.EntityData.Children = types.NewOrderedMap()
    qsfpPageA03Data.EntityData.Children.Append("qsfp-temperature", types.YChild{"QsfpTemperature", &qsfpPageA03Data.QsfpTemperature})
    qsfpPageA03Data.EntityData.Children.Append("qsfp-voltage", types.YChild{"QsfpVoltage", &qsfpPageA03Data.QsfpVoltage})
    qsfpPageA03Data.EntityData.Children.Append("qsfp-tx-bias", types.YChild{"QsfpTxBias", &qsfpPageA03Data.QsfpTxBias})
    qsfpPageA03Data.EntityData.Children.Append("qsfp-tx-power", types.YChild{"QsfpTxPower", &qsfpPageA03Data.QsfpTxPower})
    qsfpPageA03Data.EntityData.Children.Append("qsfp-rx-power", types.YChild{"QsfpRxPower", &qsfpPageA03Data.QsfpRxPower})
    qsfpPageA03Data.EntityData.Leafs = types.NewOrderedMap()

    qsfpPageA03Data.EntityData.YListKeys = []string {}

    return &(qsfpPageA03Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTempAlarmHigh interface{}

    // The type is string.
    QsfpTempWarningHigh interface{}

    // The type is string.
    QsfpTempWarningLow interface{}

    // The type is string.
    QsfpTempAlarmLow interface{}
}

func (qsfpTemperature *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature) GetEntityData() *types.CommonEntityData {
    qsfpTemperature.EntityData.YFilter = qsfpTemperature.YFilter
    qsfpTemperature.EntityData.YangName = "qsfp-temperature"
    qsfpTemperature.EntityData.BundleName = "cisco_ios_xr"
    qsfpTemperature.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTemperature.EntityData.SegmentPath = "qsfp-temperature"
    qsfpTemperature.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTemperature.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTemperature.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTemperature.EntityData.Children = types.NewOrderedMap()
    qsfpTemperature.EntityData.Leafs = types.NewOrderedMap()
    qsfpTemperature.EntityData.Leafs.Append("qsfp-temp-alarm-high", types.YLeaf{"QsfpTempAlarmHigh", qsfpTemperature.QsfpTempAlarmHigh})
    qsfpTemperature.EntityData.Leafs.Append("qsfp-temp-warning-high", types.YLeaf{"QsfpTempWarningHigh", qsfpTemperature.QsfpTempWarningHigh})
    qsfpTemperature.EntityData.Leafs.Append("qsfp-temp-warning-low", types.YLeaf{"QsfpTempWarningLow", qsfpTemperature.QsfpTempWarningLow})
    qsfpTemperature.EntityData.Leafs.Append("qsfp-temp-alarm-low", types.YLeaf{"QsfpTempAlarmLow", qsfpTemperature.QsfpTempAlarmLow})

    qsfpTemperature.EntityData.YListKeys = []string {}

    return &(qsfpTemperature.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpVoltAlarmHigh interface{}

    // The type is string.
    QsfpVoltWarningHigh interface{}

    // The type is string.
    QsfpVoltWarningLow interface{}

    // The type is string.
    QsfpVoltAlarmLow interface{}
}

func (qsfpVoltage *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage) GetEntityData() *types.CommonEntityData {
    qsfpVoltage.EntityData.YFilter = qsfpVoltage.YFilter
    qsfpVoltage.EntityData.YangName = "qsfp-voltage"
    qsfpVoltage.EntityData.BundleName = "cisco_ios_xr"
    qsfpVoltage.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpVoltage.EntityData.SegmentPath = "qsfp-voltage"
    qsfpVoltage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpVoltage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpVoltage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpVoltage.EntityData.Children = types.NewOrderedMap()
    qsfpVoltage.EntityData.Leafs = types.NewOrderedMap()
    qsfpVoltage.EntityData.Leafs.Append("qsfp-volt-alarm-high", types.YLeaf{"QsfpVoltAlarmHigh", qsfpVoltage.QsfpVoltAlarmHigh})
    qsfpVoltage.EntityData.Leafs.Append("qsfp-volt-warning-high", types.YLeaf{"QsfpVoltWarningHigh", qsfpVoltage.QsfpVoltWarningHigh})
    qsfpVoltage.EntityData.Leafs.Append("qsfp-volt-warning-low", types.YLeaf{"QsfpVoltWarningLow", qsfpVoltage.QsfpVoltWarningLow})
    qsfpVoltage.EntityData.Leafs.Append("qsfp-volt-alarm-low", types.YLeaf{"QsfpVoltAlarmLow", qsfpVoltage.QsfpVoltAlarmLow})

    qsfpVoltage.EntityData.YListKeys = []string {}

    return &(qsfpVoltage.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTxBiasAlarmHigh interface{}

    // The type is string.
    QsfpTxBiasWarningHigh interface{}

    // The type is string.
    QsfpTxBiasWarningLow interface{}

    // The type is string.
    QsfpTxBiasAlarmLow interface{}
}

func (qsfpTxBias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias) GetEntityData() *types.CommonEntityData {
    qsfpTxBias.EntityData.YFilter = qsfpTxBias.YFilter
    qsfpTxBias.EntityData.YangName = "qsfp-tx-bias"
    qsfpTxBias.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxBias.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTxBias.EntityData.SegmentPath = "qsfp-tx-bias"
    qsfpTxBias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxBias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxBias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxBias.EntityData.Children = types.NewOrderedMap()
    qsfpTxBias.EntityData.Leafs = types.NewOrderedMap()
    qsfpTxBias.EntityData.Leafs.Append("qsfp-tx-bias-alarm-high", types.YLeaf{"QsfpTxBiasAlarmHigh", qsfpTxBias.QsfpTxBiasAlarmHigh})
    qsfpTxBias.EntityData.Leafs.Append("qsfp-tx-bias-warning-high", types.YLeaf{"QsfpTxBiasWarningHigh", qsfpTxBias.QsfpTxBiasWarningHigh})
    qsfpTxBias.EntityData.Leafs.Append("qsfp-tx-bias-warning-low", types.YLeaf{"QsfpTxBiasWarningLow", qsfpTxBias.QsfpTxBiasWarningLow})
    qsfpTxBias.EntityData.Leafs.Append("qsfp-tx-bias-alarm-low", types.YLeaf{"QsfpTxBiasAlarmLow", qsfpTxBias.QsfpTxBiasAlarmLow})

    qsfpTxBias.EntityData.YListKeys = []string {}

    return &(qsfpTxBias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTxPowerAlarmHigh interface{}

    // The type is string.
    QsfpTxPowerWarningHigh interface{}

    // The type is string.
    QsfpTxPowerWarningLow interface{}

    // The type is string.
    QsfpTxPowerAlarmLow interface{}
}

func (qsfpTxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower) GetEntityData() *types.CommonEntityData {
    qsfpTxPower.EntityData.YFilter = qsfpTxPower.YFilter
    qsfpTxPower.EntityData.YangName = "qsfp-tx-power"
    qsfpTxPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxPower.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTxPower.EntityData.SegmentPath = "qsfp-tx-power"
    qsfpTxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxPower.EntityData.Children = types.NewOrderedMap()
    qsfpTxPower.EntityData.Leafs = types.NewOrderedMap()
    qsfpTxPower.EntityData.Leafs.Append("qsfp-tx-power-alarm-high", types.YLeaf{"QsfpTxPowerAlarmHigh", qsfpTxPower.QsfpTxPowerAlarmHigh})
    qsfpTxPower.EntityData.Leafs.Append("qsfp-tx-power-warning-high", types.YLeaf{"QsfpTxPowerWarningHigh", qsfpTxPower.QsfpTxPowerWarningHigh})
    qsfpTxPower.EntityData.Leafs.Append("qsfp-tx-power-warning-low", types.YLeaf{"QsfpTxPowerWarningLow", qsfpTxPower.QsfpTxPowerWarningLow})
    qsfpTxPower.EntityData.Leafs.Append("qsfp-tx-power-alarm-low", types.YLeaf{"QsfpTxPowerAlarmLow", qsfpTxPower.QsfpTxPowerAlarmLow})

    qsfpTxPower.EntityData.YListKeys = []string {}

    return &(qsfpTxPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpRxPowerAlarmHigh interface{}

    // The type is string.
    QsfpRxPowerWarningHigh interface{}

    // The type is string.
    QsfpRxPowerWarningLow interface{}

    // The type is string.
    QsfpRxPowerAlarmLow interface{}
}

func (qsfpRxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower) GetEntityData() *types.CommonEntityData {
    qsfpRxPower.EntityData.YFilter = qsfpRxPower.YFilter
    qsfpRxPower.EntityData.YangName = "qsfp-rx-power"
    qsfpRxPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpRxPower.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpRxPower.EntityData.SegmentPath = "qsfp-rx-power"
    qsfpRxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRxPower.EntityData.Children = types.NewOrderedMap()
    qsfpRxPower.EntityData.Leafs = types.NewOrderedMap()
    qsfpRxPower.EntityData.Leafs.Append("qsfp-rx-power-alarm-high", types.YLeaf{"QsfpRxPowerAlarmHigh", qsfpRxPower.QsfpRxPowerAlarmHigh})
    qsfpRxPower.EntityData.Leafs.Append("qsfp-rx-power-warning-high", types.YLeaf{"QsfpRxPowerWarningHigh", qsfpRxPower.QsfpRxPowerWarningHigh})
    qsfpRxPower.EntityData.Leafs.Append("qsfp-rx-power-warning-low", types.YLeaf{"QsfpRxPowerWarningLow", qsfpRxPower.QsfpRxPowerWarningLow})
    qsfpRxPower.EntityData.Leafs.Append("qsfp-rx-power-alarm-low", types.YLeaf{"QsfpRxPowerAlarmLow", qsfpRxPower.QsfpRxPowerAlarmLow})

    qsfpRxPower.EntityData.YListKeys = []string {}

    return &(qsfpRxPower.EntityData)
}

// Controller_Switch_Oper_Mlap
// MLAP switch data
type Controller_Switch_Oper_Mlap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Reachable Controller_Switch_Oper_Mlap_Reachable

    
    Detail Controller_Switch_Oper_Mlap_Detail

    
    Statistics Controller_Switch_Oper_Mlap_Statistics

    
    SummaryData Controller_Switch_Oper_Mlap_SummaryData

    
    Debug Controller_Switch_Oper_Mlap_Debug

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_Mlap_Trace.
    Trace []*Controller_Switch_Oper_Mlap_Trace
}

func (mlap *Controller_Switch_Oper_Mlap) GetEntityData() *types.CommonEntityData {
    mlap.EntityData.YFilter = mlap.YFilter
    mlap.EntityData.YangName = "mlap"
    mlap.EntityData.BundleName = "cisco_ios_xr"
    mlap.EntityData.ParentYangName = "oper"
    mlap.EntityData.SegmentPath = "mlap"
    mlap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlap.EntityData.Children = types.NewOrderedMap()
    mlap.EntityData.Children.Append("reachable", types.YChild{"Reachable", &mlap.Reachable})
    mlap.EntityData.Children.Append("detail", types.YChild{"Detail", &mlap.Detail})
    mlap.EntityData.Children.Append("statistics", types.YChild{"Statistics", &mlap.Statistics})
    mlap.EntityData.Children.Append("summary-data", types.YChild{"SummaryData", &mlap.SummaryData})
    mlap.EntityData.Children.Append("debug", types.YChild{"Debug", &mlap.Debug})
    mlap.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range mlap.Trace {
        mlap.EntityData.Children.Append(types.GetSegmentPath(mlap.Trace[i]), types.YChild{"Trace", mlap.Trace[i]})
    }
    mlap.EntityData.Leafs = types.NewOrderedMap()

    mlap.EntityData.YListKeys = []string {}

    return &(mlap.EntityData)
}

// Controller_Switch_Oper_Mlap_Reachable
type Controller_Switch_Oper_Mlap_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Reachable_Location.
    Location []*Controller_Switch_Oper_Mlap_Reachable_Location
}

func (reachable *Controller_Switch_Oper_Mlap_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "mlap"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = types.NewOrderedMap()
    reachable.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range reachable.Location {
        reachable.EntityData.Children.Append(types.GetSegmentPath(reachable.Location[i]), types.YChild{"Location", reachable.Location[i]})
    }
    reachable.EntityData.Leafs = types.NewOrderedMap()

    reachable.EntityData.YListKeys = []string {}

    return &(reachable.EntityData)
}

// Controller_Switch_Oper_Mlap_Reachable_Location
type Controller_Switch_Oper_Mlap_Reachable_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}
}

func (location *Controller_Switch_Oper_Mlap_Reachable_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "reachable"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail
type Controller_Switch_Oper_Mlap_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Detail_Location.
    Location []*Controller_Switch_Oper_Mlap_Detail_Location
}

func (detail *Controller_Switch_Oper_Mlap_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mlap"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = types.NewOrderedMap()
    detail.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range detail.Location {
        detail.EntityData.Children.Append(types.GetSegmentPath(detail.Location[i]), types.YChild{"Location", detail.Location[i]})
    }
    detail.EntityData.Leafs = types.NewOrderedMap()

    detail.EntityData.YListKeys = []string {}

    return &(detail.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location
type Controller_Switch_Oper_Mlap_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Detail_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Mlap_Detail_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    
    GenData Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData

    
    MlapInternalDetails Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails

    
    MlapExternalDetails Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails
}

func (portIter *Controller_Switch_Oper_Mlap_Detail_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Children.Append("gen-data", types.YChild{"GenData", &portIter.GenData})
    portIter.EntityData.Children.Append("mlap-internal-details", types.YChild{"MlapInternalDetails", &portIter.MlapInternalDetails})
    portIter.EntityData.Children.Append("mlap-external-details", types.YChild{"MlapExternalDetails", &portIter.MlapExternalDetails})
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack serial number. The type is string.
    SerialNum interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates whether the internal or external MLAP protocol is active on this
    // port. The type is MlapProtocolEnum.
    MlapProtocol interface{}

    // Number of protocol packets sent. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktSent interface{}

    // Number of protocol packets received. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktRecv interface{}

    // Number of set-active-VLAN requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsSent interface{}

    // Number of set-active-VLAN responses. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsRecv interface{}

    // Number of protocol packet send errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSendError interface{}

    // Number of protocol packet receive errors. The type is interface{} with
    // range: 0..18446744073709551615.
    ProtocolRecvError interface{}

    // Number of state changes. The type is interface{} with range: 0..4294967295.
    ProtocolStateChanges interface{}
}

func (genData *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData) GetEntityData() *types.CommonEntityData {
    genData.EntityData.YFilter = genData.YFilter
    genData.EntityData.YangName = "gen-data"
    genData.EntityData.BundleName = "cisco_ios_xr"
    genData.EntityData.ParentYangName = "port-iter"
    genData.EntityData.SegmentPath = "gen-data"
    genData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genData.EntityData.Children = types.NewOrderedMap()
    genData.EntityData.Leafs = types.NewOrderedMap()
    genData.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", genData.SerialNum})
    genData.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", genData.ConnectsTo})
    genData.EntityData.Leafs.Append("phys-state", types.YLeaf{"PhysState", genData.PhysState})
    genData.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", genData.AdminState})
    genData.EntityData.Leafs.Append("protocol-state", types.YLeaf{"ProtocolState", genData.ProtocolState})
    genData.EntityData.Leafs.Append("forwarding", types.YLeaf{"Forwarding", genData.Forwarding})
    genData.EntityData.Leafs.Append("mlap-protocol", types.YLeaf{"MlapProtocol", genData.MlapProtocol})
    genData.EntityData.Leafs.Append("protocol-pkt-sent", types.YLeaf{"ProtocolPktSent", genData.ProtocolPktSent})
    genData.EntityData.Leafs.Append("protocol-pkt-recv", types.YLeaf{"ProtocolPktRecv", genData.ProtocolPktRecv})
    genData.EntityData.Leafs.Append("protocol-set-color-pkts-sent", types.YLeaf{"ProtocolSetColorPktsSent", genData.ProtocolSetColorPktsSent})
    genData.EntityData.Leafs.Append("protocol-set-color-pkts-recv", types.YLeaf{"ProtocolSetColorPktsRecv", genData.ProtocolSetColorPktsRecv})
    genData.EntityData.Leafs.Append("protocol-send-error", types.YLeaf{"ProtocolSendError", genData.ProtocolSendError})
    genData.EntityData.Leafs.Append("protocol-recv-error", types.YLeaf{"ProtocolRecvError", genData.ProtocolRecvError})
    genData.EntityData.Leafs.Append("protocol-state-changes", types.YLeaf{"ProtocolStateChanges", genData.ProtocolStateChanges})

    genData.EntityData.YListKeys = []string {}

    return &(genData.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info
}

func (mlapInternalDetails *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails) GetEntityData() *types.CommonEntityData {
    mlapInternalDetails.EntityData.YFilter = mlapInternalDetails.YFilter
    mlapInternalDetails.EntityData.YangName = "mlap-internal-details"
    mlapInternalDetails.EntityData.BundleName = "cisco_ios_xr"
    mlapInternalDetails.EntityData.ParentYangName = "port-iter"
    mlapInternalDetails.EntityData.SegmentPath = "mlap-internal-details"
    mlapInternalDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapInternalDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapInternalDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapInternalDetails.EntityData.Children = types.NewOrderedMap()
    mlapInternalDetails.EntityData.Children.Append("info", types.YChild{"Info", &mlapInternalDetails.Info})
    mlapInternalDetails.EntityData.Leafs = types.NewOrderedMap()

    mlapInternalDetails.EntityData.YListKeys = []string {}

    return &(mlapInternalDetails.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates which switch data path the port belongs to. The type is EsdmaCpu.
    PortOwner interface{}

    // Indicates which switch is currently mastering chassis data. The type is
    // EsdmaCpu.
    CurrentActiveOwner interface{}

    // Peer's port MLAP protocol flags. The type is map[string]bool.
    MlapPeerFlags interface{}

    // Time intervals peer has not updated information. The type is interface{}
    // with range: 0..4294967295.
    MlapPeerIdleCount interface{}

    // My port active mask view. The type is interface{} with range:
    // 0..18446744073709551615.
    MyConnectionActiveMask interface{}

    // Peer's port active mask view. The type is interface{} with range:
    // 0..18446744073709551615.
    PeerConnectionActiveMask interface{}

    // Indicates the high-level card type this switch port is peering with. The
    // type is MlapEpType.
    EndpointCardType interface{}

    // MAC addess of device of the protocol peer for this switch port. The type is
    // string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    EndpointMacAddress interface{}
}

func (info *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "mlap-internal-details"
    info.EntityData.SegmentPath = "info"
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = types.NewOrderedMap()
    info.EntityData.Leafs = types.NewOrderedMap()
    info.EntityData.Leafs.Append("port-owner", types.YLeaf{"PortOwner", info.PortOwner})
    info.EntityData.Leafs.Append("current-active-owner", types.YLeaf{"CurrentActiveOwner", info.CurrentActiveOwner})
    info.EntityData.Leafs.Append("mlap-peer-flags", types.YLeaf{"MlapPeerFlags", info.MlapPeerFlags})
    info.EntityData.Leafs.Append("mlap-peer-idle-count", types.YLeaf{"MlapPeerIdleCount", info.MlapPeerIdleCount})
    info.EntityData.Leafs.Append("my-connection-active-mask", types.YLeaf{"MyConnectionActiveMask", info.MyConnectionActiveMask})
    info.EntityData.Leafs.Append("peer-connection-active-mask", types.YLeaf{"PeerConnectionActiveMask", info.PeerConnectionActiveMask})
    info.EntityData.Leafs.Append("endpoint-card-type", types.YLeaf{"EndpointCardType", info.EndpointCardType})
    info.EntityData.Leafs.Append("endpoint-mac-address", types.YLeaf{"EndpointMacAddress", info.EndpointMacAddress})

    info.EntityData.YListKeys = []string {}

    return &(info.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MLAP state information from this port's perspective.
    LocalStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation

    // MLAP state information from peer port's perspective.
    PeerStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation

    // MLAP state information for peer's other uplink perspective (RP/SC only).
    PeerOtherLinkStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation
}

func (mlapExternalDetails *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails) GetEntityData() *types.CommonEntityData {
    mlapExternalDetails.EntityData.YFilter = mlapExternalDetails.YFilter
    mlapExternalDetails.EntityData.YangName = "mlap-external-details"
    mlapExternalDetails.EntityData.BundleName = "cisco_ios_xr"
    mlapExternalDetails.EntityData.ParentYangName = "port-iter"
    mlapExternalDetails.EntityData.SegmentPath = "mlap-external-details"
    mlapExternalDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapExternalDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapExternalDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapExternalDetails.EntityData.Children = types.NewOrderedMap()
    mlapExternalDetails.EntityData.Children.Append("local-state-information", types.YChild{"LocalStateInformation", &mlapExternalDetails.LocalStateInformation})
    mlapExternalDetails.EntityData.Children.Append("peer-state-information", types.YChild{"PeerStateInformation", &mlapExternalDetails.PeerStateInformation})
    mlapExternalDetails.EntityData.Children.Append("peer-other-link-state-information", types.YChild{"PeerOtherLinkStateInformation", &mlapExternalDetails.PeerOtherLinkStateInformation})
    mlapExternalDetails.EntityData.Leafs = types.NewOrderedMap()

    mlapExternalDetails.EntityData.YListKeys = []string {}

    return &(mlapExternalDetails.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation
// MLAP state information from this port's perspective
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (localStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation) GetEntityData() *types.CommonEntityData {
    localStateInformation.EntityData.YFilter = localStateInformation.YFilter
    localStateInformation.EntityData.YangName = "local-state-information"
    localStateInformation.EntityData.BundleName = "cisco_ios_xr"
    localStateInformation.EntityData.ParentYangName = "mlap-external-details"
    localStateInformation.EntityData.SegmentPath = "local-state-information"
    localStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localStateInformation.EntityData.Children = types.NewOrderedMap()
    localStateInformation.EntityData.Leafs = types.NewOrderedMap()
    localStateInformation.EntityData.Leafs.Append("valid", types.YLeaf{"Valid", localStateInformation.Valid})
    localStateInformation.EntityData.Leafs.Append("chassis-type", types.YLeaf{"ChassisType", localStateInformation.ChassisType})
    localStateInformation.EntityData.Leafs.Append("endpoint-type", types.YLeaf{"EndpointType", localStateInformation.EndpointType})
    localStateInformation.EntityData.Leafs.Append("endpoint-slot-number", types.YLeaf{"EndpointSlotNumber", localStateInformation.EndpointSlotNumber})
    localStateInformation.EntityData.Leafs.Append("endpoint-switch-number", types.YLeaf{"EndpointSwitchNumber", localStateInformation.EndpointSwitchNumber})
    localStateInformation.EntityData.Leafs.Append("endpoint-switch-port-number", types.YLeaf{"EndpointSwitchPortNumber", localStateInformation.EndpointSwitchPortNumber})
    localStateInformation.EntityData.Leafs.Append("endpoint-chassis-serial-number", types.YLeaf{"EndpointChassisSerialNumber", localStateInformation.EndpointChassisSerialNumber})
    localStateInformation.EntityData.Leafs.Append("mlap-state", types.YLeaf{"MlapState", localStateInformation.MlapState})
    localStateInformation.EntityData.Leafs.Append("inter-fcc_sw-port", types.YLeaf{"InterFccSwPort", localStateInformation.InterFccSwPort})
    localStateInformation.EntityData.Leafs.Append("fcc_sw-indirectly-reachable", types.YLeaf{"FccSwIndirectlyReachable", localStateInformation.FccSwIndirectlyReachable})

    localStateInformation.EntityData.YListKeys = []string {}

    return &(localStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation
// MLAP state information from peer port's perspective
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (peerStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation) GetEntityData() *types.CommonEntityData {
    peerStateInformation.EntityData.YFilter = peerStateInformation.YFilter
    peerStateInformation.EntityData.YangName = "peer-state-information"
    peerStateInformation.EntityData.BundleName = "cisco_ios_xr"
    peerStateInformation.EntityData.ParentYangName = "mlap-external-details"
    peerStateInformation.EntityData.SegmentPath = "peer-state-information"
    peerStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerStateInformation.EntityData.Children = types.NewOrderedMap()
    peerStateInformation.EntityData.Leafs = types.NewOrderedMap()
    peerStateInformation.EntityData.Leafs.Append("valid", types.YLeaf{"Valid", peerStateInformation.Valid})
    peerStateInformation.EntityData.Leafs.Append("chassis-type", types.YLeaf{"ChassisType", peerStateInformation.ChassisType})
    peerStateInformation.EntityData.Leafs.Append("endpoint-type", types.YLeaf{"EndpointType", peerStateInformation.EndpointType})
    peerStateInformation.EntityData.Leafs.Append("endpoint-slot-number", types.YLeaf{"EndpointSlotNumber", peerStateInformation.EndpointSlotNumber})
    peerStateInformation.EntityData.Leafs.Append("endpoint-switch-number", types.YLeaf{"EndpointSwitchNumber", peerStateInformation.EndpointSwitchNumber})
    peerStateInformation.EntityData.Leafs.Append("endpoint-switch-port-number", types.YLeaf{"EndpointSwitchPortNumber", peerStateInformation.EndpointSwitchPortNumber})
    peerStateInformation.EntityData.Leafs.Append("endpoint-chassis-serial-number", types.YLeaf{"EndpointChassisSerialNumber", peerStateInformation.EndpointChassisSerialNumber})
    peerStateInformation.EntityData.Leafs.Append("mlap-state", types.YLeaf{"MlapState", peerStateInformation.MlapState})
    peerStateInformation.EntityData.Leafs.Append("inter-fcc_sw-port", types.YLeaf{"InterFccSwPort", peerStateInformation.InterFccSwPort})
    peerStateInformation.EntityData.Leafs.Append("fcc_sw-indirectly-reachable", types.YLeaf{"FccSwIndirectlyReachable", peerStateInformation.FccSwIndirectlyReachable})

    peerStateInformation.EntityData.YListKeys = []string {}

    return &(peerStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation
// MLAP state information for peer's other uplink perspective (RP/SC only)
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (peerOtherLinkStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation) GetEntityData() *types.CommonEntityData {
    peerOtherLinkStateInformation.EntityData.YFilter = peerOtherLinkStateInformation.YFilter
    peerOtherLinkStateInformation.EntityData.YangName = "peer-other-link-state-information"
    peerOtherLinkStateInformation.EntityData.BundleName = "cisco_ios_xr"
    peerOtherLinkStateInformation.EntityData.ParentYangName = "mlap-external-details"
    peerOtherLinkStateInformation.EntityData.SegmentPath = "peer-other-link-state-information"
    peerOtherLinkStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerOtherLinkStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerOtherLinkStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerOtherLinkStateInformation.EntityData.Children = types.NewOrderedMap()
    peerOtherLinkStateInformation.EntityData.Leafs = types.NewOrderedMap()
    peerOtherLinkStateInformation.EntityData.Leafs.Append("valid", types.YLeaf{"Valid", peerOtherLinkStateInformation.Valid})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("chassis-type", types.YLeaf{"ChassisType", peerOtherLinkStateInformation.ChassisType})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("endpoint-type", types.YLeaf{"EndpointType", peerOtherLinkStateInformation.EndpointType})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("endpoint-slot-number", types.YLeaf{"EndpointSlotNumber", peerOtherLinkStateInformation.EndpointSlotNumber})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("endpoint-switch-number", types.YLeaf{"EndpointSwitchNumber", peerOtherLinkStateInformation.EndpointSwitchNumber})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("endpoint-switch-port-number", types.YLeaf{"EndpointSwitchPortNumber", peerOtherLinkStateInformation.EndpointSwitchPortNumber})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("endpoint-chassis-serial-number", types.YLeaf{"EndpointChassisSerialNumber", peerOtherLinkStateInformation.EndpointChassisSerialNumber})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("mlap-state", types.YLeaf{"MlapState", peerOtherLinkStateInformation.MlapState})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("inter-fcc_sw-port", types.YLeaf{"InterFccSwPort", peerOtherLinkStateInformation.InterFccSwPort})
    peerOtherLinkStateInformation.EntityData.Leafs.Append("fcc_sw-indirectly-reachable", types.YLeaf{"FccSwIndirectlyReachable", peerOtherLinkStateInformation.FccSwIndirectlyReachable})

    peerOtherLinkStateInformation.EntityData.YListKeys = []string {}

    return &(peerOtherLinkStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics
type Controller_Switch_Oper_Mlap_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Statistics_Location.
    Location []*Controller_Switch_Oper_Mlap_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Mlap_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "mlap"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range statistics.Location {
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Location[i]), types.YChild{"Location", statistics.Location[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics_Location
type Controller_Switch_Oper_Mlap_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_Statistics_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Mlap_Statistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", location.SerialNum})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics_Location_PortIter
type Controller_Switch_Oper_Mlap_Statistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Number of state changes. The type is interface{} with range: 0..4294967295.
    ProtocolStateChanges interface{}

    // Number of protocol packets sent. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktSent interface{}

    // Number of protocol packets received. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktRecv interface{}

    // Number of set-active-VLAN requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsSent interface{}

    // Number of set-active-VLAN responses. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsRecv interface{}

    // Number of protocol packet send errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSendError interface{}

    // Number of protocol packet receive errors. The type is interface{} with
    // range: 0..18446744073709551615.
    ProtocolRecvError interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Mlap_Statistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})
    portIter.EntityData.Leafs.Append("protocol-state", types.YLeaf{"ProtocolState", portIter.ProtocolState})
    portIter.EntityData.Leafs.Append("protocol-state-changes", types.YLeaf{"ProtocolStateChanges", portIter.ProtocolStateChanges})
    portIter.EntityData.Leafs.Append("protocol-pkt-sent", types.YLeaf{"ProtocolPktSent", portIter.ProtocolPktSent})
    portIter.EntityData.Leafs.Append("protocol-pkt-recv", types.YLeaf{"ProtocolPktRecv", portIter.ProtocolPktRecv})
    portIter.EntityData.Leafs.Append("protocol-set-color-pkts-sent", types.YLeaf{"ProtocolSetColorPktsSent", portIter.ProtocolSetColorPktsSent})
    portIter.EntityData.Leafs.Append("protocol-set-color-pkts-recv", types.YLeaf{"ProtocolSetColorPktsRecv", portIter.ProtocolSetColorPktsRecv})
    portIter.EntityData.Leafs.Append("protocol-send-error", types.YLeaf{"ProtocolSendError", portIter.ProtocolSendError})
    portIter.EntityData.Leafs.Append("protocol-recv-error", types.YLeaf{"ProtocolRecvError", portIter.ProtocolRecvError})
    portIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", portIter.ConnectsTo})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData
type Controller_Switch_Oper_Mlap_SummaryData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_SummaryData_Location.
    Location []*Controller_Switch_Oper_Mlap_SummaryData_Location
}

func (summaryData *Controller_Switch_Oper_Mlap_SummaryData) GetEntityData() *types.CommonEntityData {
    summaryData.EntityData.YFilter = summaryData.YFilter
    summaryData.EntityData.YangName = "summary-data"
    summaryData.EntityData.BundleName = "cisco_ios_xr"
    summaryData.EntityData.ParentYangName = "mlap"
    summaryData.EntityData.SegmentPath = "summary-data"
    summaryData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryData.EntityData.Children = types.NewOrderedMap()
    summaryData.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range summaryData.Location {
        summaryData.EntityData.Children.Append(types.GetSegmentPath(summaryData.Location[i]), types.YChild{"Location", summaryData.Location[i]})
    }
    summaryData.EntityData.Leafs = types.NewOrderedMap()

    summaryData.EntityData.YListKeys = []string {}

    return &(summaryData.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData_Location
type Controller_Switch_Oper_Mlap_SummaryData_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter.
    PortIter []*Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_SummaryData_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary-data"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("serial-num", types.YLeaf{"SerialNum", location.SerialNum})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter
type Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates whether the internal or external MLAP protocol is active on this
    // port. The type is MlapProtocolEnum.
    MlapProtocol interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})
    portIter.EntityData.Leafs.Append("phys-state", types.YLeaf{"PhysState", portIter.PhysState})
    portIter.EntityData.Leafs.Append("admin-state", types.YLeaf{"AdminState", portIter.AdminState})
    portIter.EntityData.Leafs.Append("protocol-state", types.YLeaf{"ProtocolState", portIter.ProtocolState})
    portIter.EntityData.Leafs.Append("forwarding", types.YLeaf{"Forwarding", portIter.Forwarding})
    portIter.EntityData.Leafs.Append("mlap-protocol", types.YLeaf{"MlapProtocol", portIter.MlapProtocol})
    portIter.EntityData.Leafs.Append("connects-to", types.YLeaf{"ConnectsTo", portIter.ConnectsTo})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug
type Controller_Switch_Oper_Mlap_Debug struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Counters Controller_Switch_Oper_Mlap_Debug_Counters
}

func (debug *Controller_Switch_Oper_Mlap_Debug) GetEntityData() *types.CommonEntityData {
    debug.EntityData.YFilter = debug.YFilter
    debug.EntityData.YangName = "debug"
    debug.EntityData.BundleName = "cisco_ios_xr"
    debug.EntityData.ParentYangName = "mlap"
    debug.EntityData.SegmentPath = "debug"
    debug.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    debug.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    debug.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    debug.EntityData.Children = types.NewOrderedMap()
    debug.EntityData.Children.Append("counters", types.YChild{"Counters", &debug.Counters})
    debug.EntityData.Leafs = types.NewOrderedMap()

    debug.EntityData.YListKeys = []string {}

    return &(debug.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters
type Controller_Switch_Oper_Mlap_Debug_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Debug_Counters_Location.
    Location []*Controller_Switch_Oper_Mlap_Debug_Counters_Location
}

func (counters *Controller_Switch_Oper_Mlap_Debug_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "debug"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range counters.Location {
        counters.EntityData.Children.Append(types.GetSegmentPath(counters.Location[i]), types.YChild{"Location", counters.Location[i]})
    }
    counters.EntityData.Leafs = types.NewOrderedMap()

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters_Location
type Controller_Switch_Oper_Mlap_Debug_Counters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    Counters Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters
}

func (location *Controller_Switch_Oper_Mlap_Debug_Counters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "counters"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("counters", types.YChild{"Counters", &location.Counters})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters
type Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    EvalAllLinksCalled interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TimerEventQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPacketEventQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EvalAllLinksQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    LinkStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AdminStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    FwdStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CurrentFifoDepth interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    MaxFifoDepth interface{}

    // The type is interface{} with range: 0..4294967295.
    VlanColorChanges interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentMlapTimeoutMsInterval interface{}

    // The type is bool.
    AgingDebugEnabled interface{}

    // The type is MlapTraceVerbosity.
    TraceVerbosity interface{}
}

func (counters *Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "location"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("eval-all-links-called", types.YLeaf{"EvalAllLinksCalled", counters.EvalAllLinksCalled})
    counters.EntityData.Leafs.Append("timer-event-queued", types.YLeaf{"TimerEventQueued", counters.TimerEventQueued})
    counters.EntityData.Leafs.Append("rx-packet-event-queued", types.YLeaf{"RxPacketEventQueued", counters.RxPacketEventQueued})
    counters.EntityData.Leafs.Append("eval-all-links-queued", types.YLeaf{"EvalAllLinksQueued", counters.EvalAllLinksQueued})
    counters.EntityData.Leafs.Append("link-status-queued", types.YLeaf{"LinkStatusQueued", counters.LinkStatusQueued})
    counters.EntityData.Leafs.Append("admin-status-queued", types.YLeaf{"AdminStatusQueued", counters.AdminStatusQueued})
    counters.EntityData.Leafs.Append("fwd-status-queued", types.YLeaf{"FwdStatusQueued", counters.FwdStatusQueued})
    counters.EntityData.Leafs.Append("current-fifo-depth", types.YLeaf{"CurrentFifoDepth", counters.CurrentFifoDepth})
    counters.EntityData.Leafs.Append("max-fifo-depth", types.YLeaf{"MaxFifoDepth", counters.MaxFifoDepth})
    counters.EntityData.Leafs.Append("vlan-color-changes", types.YLeaf{"VlanColorChanges", counters.VlanColorChanges})
    counters.EntityData.Leafs.Append("current-mlap-timeout-ms-interval", types.YLeaf{"CurrentMlapTimeoutMsInterval", counters.CurrentMlapTimeoutMsInterval})
    counters.EntityData.Leafs.Append("aging-debug-enabled", types.YLeaf{"AgingDebugEnabled", counters.AgingDebugEnabled})
    counters.EntityData.Leafs.Append("trace-verbosity", types.YLeaf{"TraceVerbosity", counters.TraceVerbosity})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace
// show traceable processes
type Controller_Switch_Oper_Mlap_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Trace_Location.
    Location []*Controller_Switch_Oper_Mlap_Trace_Location
}

func (trace *Controller_Switch_Oper_Mlap_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "mlap"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location
type Controller_Switch_Oper_Mlap_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Trace_Location_AllOptions.
    AllOptions []*Controller_Switch_Oper_Mlap_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_Mlap_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location_AllOptions
type Controller_Switch_Oper_Mlap_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_Mlap_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont
type Controller_Switch_Oper_SwitchDebugCont struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Debug Controller_Switch_Oper_SwitchDebugCont_Debug
}

func (switchDebugCont *Controller_Switch_Oper_SwitchDebugCont) GetEntityData() *types.CommonEntityData {
    switchDebugCont.EntityData.YFilter = switchDebugCont.YFilter
    switchDebugCont.EntityData.YangName = "switch-debug-cont"
    switchDebugCont.EntityData.BundleName = "cisco_ios_xr"
    switchDebugCont.EntityData.ParentYangName = "oper"
    switchDebugCont.EntityData.SegmentPath = "switch-debug-cont"
    switchDebugCont.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchDebugCont.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchDebugCont.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchDebugCont.EntityData.Children = types.NewOrderedMap()
    switchDebugCont.EntityData.Children.Append("debug", types.YChild{"Debug", &switchDebugCont.Debug})
    switchDebugCont.EntityData.Leafs = types.NewOrderedMap()

    switchDebugCont.EntityData.YListKeys = []string {}

    return &(switchDebugCont.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug
type Controller_Switch_Oper_SwitchDebugCont_Debug struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Counters Controller_Switch_Oper_SwitchDebugCont_Debug_Counters
}

func (debug *Controller_Switch_Oper_SwitchDebugCont_Debug) GetEntityData() *types.CommonEntityData {
    debug.EntityData.YFilter = debug.YFilter
    debug.EntityData.YangName = "debug"
    debug.EntityData.BundleName = "cisco_ios_xr"
    debug.EntityData.ParentYangName = "switch-debug-cont"
    debug.EntityData.SegmentPath = "debug"
    debug.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    debug.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    debug.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    debug.EntityData.Children = types.NewOrderedMap()
    debug.EntityData.Children.Append("counters", types.YChild{"Counters", &debug.Counters})
    debug.EntityData.Leafs = types.NewOrderedMap()

    debug.EntityData.YListKeys = []string {}

    return &(debug.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location.
    Location []*Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location
}

func (counters *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "debug"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range counters.Location {
        counters.EntityData.Children.Append(types.GetSegmentPath(counters.Location[i]), types.YChild{"Location", counters.Location[i]})
    }
    counters.EntityData.Leafs = types.NewOrderedMap()

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    Counters Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters
}

func (location *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "counters"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("counters", types.YChild{"Counters", &location.Counters})
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is bool.
    PhyPollingEnabled interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxThreadWdogCnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxThreadWdogCnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskLockLongestWaitTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskLockLongestWaitEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskLockLongestHeldTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskLockLongestHeldEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskUnlockLongestWaitTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskUnlockLongestWaitEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaMaxRxDequeuedPerInt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaRxPacketsDequeued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaRxPacketDequeueErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketsQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketsCompleted interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketNoMsgErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketMsgTooBigErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketNoBufferErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketQueueErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketCompletionErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaMaxTxFreedPerInt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxBufAllocCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxBufFreeCount interface{}

    // The type is slice of
    // Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_SwitchCore.
    SwitchCore []*Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_SwitchCore
}

func (counters *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "location"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Children.Append("switch-core", types.YChild{"SwitchCore", nil})
    for i := range counters.SwitchCore {
        counters.EntityData.Children.Append(types.GetSegmentPath(counters.SwitchCore[i]), types.YChild{"SwitchCore", counters.SwitchCore[i]})
    }
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("phy-polling-enabled", types.YLeaf{"PhyPollingEnabled", counters.PhyPollingEnabled})
    counters.EntityData.Leafs.Append("tx-thread-wdog-cnt", types.YLeaf{"TxThreadWdogCnt", counters.TxThreadWdogCnt})
    counters.EntityData.Leafs.Append("rx-thread-wdog-cnt", types.YLeaf{"RxThreadWdogCnt", counters.RxThreadWdogCnt})
    counters.EntityData.Leafs.Append("task-lock-longest-wait-time", types.YLeaf{"TaskLockLongestWaitTime", counters.TaskLockLongestWaitTime})
    counters.EntityData.Leafs.Append("task-lock-longest-wait-event", types.YLeaf{"TaskLockLongestWaitEvent", counters.TaskLockLongestWaitEvent})
    counters.EntityData.Leafs.Append("task-lock-longest-held-time", types.YLeaf{"TaskLockLongestHeldTime", counters.TaskLockLongestHeldTime})
    counters.EntityData.Leafs.Append("task-lock-longest-held-event", types.YLeaf{"TaskLockLongestHeldEvent", counters.TaskLockLongestHeldEvent})
    counters.EntityData.Leafs.Append("task-unlock-longest-wait-time", types.YLeaf{"TaskUnlockLongestWaitTime", counters.TaskUnlockLongestWaitTime})
    counters.EntityData.Leafs.Append("task-unlock-longest-wait-event", types.YLeaf{"TaskUnlockLongestWaitEvent", counters.TaskUnlockLongestWaitEvent})
    counters.EntityData.Leafs.Append("dma-max-rx-dequeued-per-int", types.YLeaf{"DmaMaxRxDequeuedPerInt", counters.DmaMaxRxDequeuedPerInt})
    counters.EntityData.Leafs.Append("dma-rx-packets-dequeued", types.YLeaf{"DmaRxPacketsDequeued", counters.DmaRxPacketsDequeued})
    counters.EntityData.Leafs.Append("dma-rx-packet-dequeue-errors", types.YLeaf{"DmaRxPacketDequeueErrors", counters.DmaRxPacketDequeueErrors})
    counters.EntityData.Leafs.Append("dma-tx-packets-queued", types.YLeaf{"DmaTxPacketsQueued", counters.DmaTxPacketsQueued})
    counters.EntityData.Leafs.Append("dma-tx-packets-completed", types.YLeaf{"DmaTxPacketsCompleted", counters.DmaTxPacketsCompleted})
    counters.EntityData.Leafs.Append("dma-tx-packet-no-msg-errors", types.YLeaf{"DmaTxPacketNoMsgErrors", counters.DmaTxPacketNoMsgErrors})
    counters.EntityData.Leafs.Append("dma-tx-packet-msg-too-big-errors", types.YLeaf{"DmaTxPacketMsgTooBigErrors", counters.DmaTxPacketMsgTooBigErrors})
    counters.EntityData.Leafs.Append("dma-tx-packet-no-buffer-errors", types.YLeaf{"DmaTxPacketNoBufferErrors", counters.DmaTxPacketNoBufferErrors})
    counters.EntityData.Leafs.Append("dma-tx-packet-queue-errors", types.YLeaf{"DmaTxPacketQueueErrors", counters.DmaTxPacketQueueErrors})
    counters.EntityData.Leafs.Append("dma-tx-packet-completion-errors", types.YLeaf{"DmaTxPacketCompletionErrors", counters.DmaTxPacketCompletionErrors})
    counters.EntityData.Leafs.Append("dma-max-tx-freed-per-int", types.YLeaf{"DmaMaxTxFreedPerInt", counters.DmaMaxTxFreedPerInt})
    counters.EntityData.Leafs.Append("dma-tx-buf-alloc-count", types.YLeaf{"DmaTxBufAllocCount", counters.DmaTxBufAllocCount})
    counters.EntityData.Leafs.Append("dma-tx-buf-free-count", types.YLeaf{"DmaTxBufFreeCount", counters.DmaTxBufFreeCount})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_SwitchCore
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_SwitchCore struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Core interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    MsiCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AerCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    HpCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    WdogCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskLockLongestWaitTime interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskLockLongestHeldTime interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskUnlockLongestWaitTime interface{}
}

func (switchCore *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_SwitchCore) GetEntityData() *types.CommonEntityData {
    switchCore.EntityData.YFilter = switchCore.YFilter
    switchCore.EntityData.YangName = "switch-core"
    switchCore.EntityData.BundleName = "cisco_ios_xr"
    switchCore.EntityData.ParentYangName = "counters"
    switchCore.EntityData.SegmentPath = "switch-core" + types.AddKeyToken(switchCore.Core, "core")
    switchCore.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchCore.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchCore.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchCore.EntityData.Children = types.NewOrderedMap()
    switchCore.EntityData.Leafs = types.NewOrderedMap()
    switchCore.EntityData.Leafs.Append("core", types.YLeaf{"Core", switchCore.Core})
    switchCore.EntityData.Leafs.Append("msi-count", types.YLeaf{"MsiCount", switchCore.MsiCount})
    switchCore.EntityData.Leafs.Append("aer-count", types.YLeaf{"AerCount", switchCore.AerCount})
    switchCore.EntityData.Leafs.Append("hp-count", types.YLeaf{"HpCount", switchCore.HpCount})
    switchCore.EntityData.Leafs.Append("wdog-count", types.YLeaf{"WdogCount", switchCore.WdogCount})
    switchCore.EntityData.Leafs.Append("core-task-lock-longest-wait-time", types.YLeaf{"CoreTaskLockLongestWaitTime", switchCore.CoreTaskLockLongestWaitTime})
    switchCore.EntityData.Leafs.Append("core-task-lock-longest-held-time", types.YLeaf{"CoreTaskLockLongestHeldTime", switchCore.CoreTaskLockLongestHeldTime})
    switchCore.EntityData.Leafs.Append("core-task-unlock-longest-wait-time", types.YLeaf{"CoreTaskUnlockLongestWaitTime", switchCore.CoreTaskUnlockLongestWaitTime})

    switchCore.EntityData.YListKeys = []string {"Core"}

    return &(switchCore.EntityData)
}

// Controller_Switch_Oper_Esd
type Controller_Switch_Oper_Esd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable process instance names. The type is slice of
    // Controller_Switch_Oper_Esd_Instance.
    Instance []*Controller_Switch_Oper_Esd_Instance
}

func (esd *Controller_Switch_Oper_Esd) GetEntityData() *types.CommonEntityData {
    esd.EntityData.YFilter = esd.YFilter
    esd.EntityData.YangName = "esd"
    esd.EntityData.BundleName = "cisco_ios_xr"
    esd.EntityData.ParentYangName = "oper"
    esd.EntityData.SegmentPath = "esd"
    esd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esd.EntityData.Children = types.NewOrderedMap()
    esd.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range esd.Instance {
        esd.EntityData.Children.Append(types.GetSegmentPath(esd.Instance[i]), types.YChild{"Instance", esd.Instance[i]})
    }
    esd.EntityData.Leafs = types.NewOrderedMap()

    esd.EntityData.YListKeys = []string {}

    return &(esd.EntityData)
}

// Controller_Switch_Oper_Esd_Instance
// show traceable process instance names
type Controller_Switch_Oper_Esd_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ProcessName interface{}

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace.
    Trace []*Controller_Switch_Oper_Esd_Instance_Trace
}

func (instance *Controller_Switch_Oper_Esd_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "esd"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.ProcessName, "process_name")
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range instance.Trace {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.Trace[i]), types.YChild{"Trace", instance.Trace[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("process_name", types.YLeaf{"ProcessName", instance.ProcessName})

    instance.EntityData.YListKeys = []string {"ProcessName"}

    return &(instance.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace
// show traceable processes
type Controller_Switch_Oper_Esd_Instance_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_Esd_Instance_Trace_Location.
    Location []*Controller_Switch_Oper_Esd_Instance_Trace_Location
}

func (trace *Controller_Switch_Oper_Esd_Instance_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "instance"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location
type Controller_Switch_Oper_Esd_Instance_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions.
    AllOptions []*Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_Esd_Instance_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions
type Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_MgmtAgent
type Controller_Switch_Oper_MgmtAgent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Esdma Controller_Switch_Oper_MgmtAgent_Esdma

    
    Connections Controller_Switch_Oper_MgmtAgent_Connections
}

func (mgmtAgent *Controller_Switch_Oper_MgmtAgent) GetEntityData() *types.CommonEntityData {
    mgmtAgent.EntityData.YFilter = mgmtAgent.YFilter
    mgmtAgent.EntityData.YangName = "mgmt-agent"
    mgmtAgent.EntityData.BundleName = "cisco_ios_xr"
    mgmtAgent.EntityData.ParentYangName = "oper"
    mgmtAgent.EntityData.SegmentPath = "mgmt-agent"
    mgmtAgent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mgmtAgent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mgmtAgent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mgmtAgent.EntityData.Children = types.NewOrderedMap()
    mgmtAgent.EntityData.Children.Append("esdma", types.YChild{"Esdma", &mgmtAgent.Esdma})
    mgmtAgent.EntityData.Children.Append("connections", types.YChild{"Connections", &mgmtAgent.Connections})
    mgmtAgent.EntityData.Leafs = types.NewOrderedMap()

    mgmtAgent.EntityData.YListKeys = []string {}

    return &(mgmtAgent.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma
type Controller_Switch_Oper_MgmtAgent_Esdma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace.
    Trace []*Controller_Switch_Oper_MgmtAgent_Esdma_Trace
}

func (esdma *Controller_Switch_Oper_MgmtAgent_Esdma) GetEntityData() *types.CommonEntityData {
    esdma.EntityData.YFilter = esdma.YFilter
    esdma.EntityData.YangName = "esdma"
    esdma.EntityData.BundleName = "cisco_ios_xr"
    esdma.EntityData.ParentYangName = "mgmt-agent"
    esdma.EntityData.SegmentPath = "esdma"
    esdma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdma.EntityData.Children = types.NewOrderedMap()
    esdma.EntityData.Children.Append("trace", types.YChild{"Trace", nil})
    for i := range esdma.Trace {
        esdma.EntityData.Children.Append(types.GetSegmentPath(esdma.Trace[i]), types.YChild{"Trace", esdma.Trace[i]})
    }
    esdma.EntityData.Leafs = types.NewOrderedMap()

    esdma.EntityData.YListKeys = []string {}

    return &(esdma.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace
// show traceable processes
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location.
    Location []*Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location
}

func (trace *Controller_Switch_Oper_MgmtAgent_Esdma_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "esdma"
    trace.EntityData.SegmentPath = "trace" + types.AddKeyToken(trace.Buffer, "buffer")
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = types.NewOrderedMap()
    trace.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trace.Location {
        trace.EntityData.Children.Append(types.GetSegmentPath(trace.Location[i]), types.YChild{"Location", trace.Location[i]})
    }
    trace.EntityData.Leafs = types.NewOrderedMap()
    trace.EntityData.Leafs.Append("buffer", types.YLeaf{"Buffer", trace.Buffer})

    trace.EntityData.YListKeys = []string {"Buffer"}

    return &(trace.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions.
    AllOptions []*Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.LocationName, "location_name")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("all-options", types.YChild{"AllOptions", nil})
    for i := range location.AllOptions {
        location.EntityData.Children.Append(types.GetSegmentPath(location.AllOptions[i]), types.YChild{"AllOptions", location.AllOptions[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("location_name", types.YLeaf{"LocationName", location.LocationName})

    location.EntityData.YListKeys = []string {"LocationName"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []*Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + types.AddKeyToken(allOptions.Option, "option")
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = types.NewOrderedMap()
    allOptions.EntityData.Children.Append("trace-blocks", types.YChild{"TraceBlocks", nil})
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children.Append(types.GetSegmentPath(allOptions.TraceBlocks[i]), types.YChild{"TraceBlocks", allOptions.TraceBlocks[i]})
    }
    allOptions.EntityData.Leafs = types.NewOrderedMap()
    allOptions.EntityData.Leafs.Append("option", types.YLeaf{"Option", allOptions.Option})

    allOptions.EntityData.YListKeys = []string {"Option"}

    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs = types.NewOrderedMap()
    traceBlocks.EntityData.Leafs.Append("data", types.YLeaf{"Data", traceBlocks.Data})

    traceBlocks.EntityData.YListKeys = []string {}

    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections
type Controller_Switch_Oper_MgmtAgent_Connections struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    SdrNmNumClients interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdClientNumClients interface{}

    // The type is interface{} with range: 0..4294967295.
    MlapClientNumClients interface{}

    
    EsdmaInfo Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId.
    SdrNmClientId []*Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId.
    EsdClientId []*Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId.
    MlapClientId []*Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId
}

func (connections *Controller_Switch_Oper_MgmtAgent_Connections) GetEntityData() *types.CommonEntityData {
    connections.EntityData.YFilter = connections.YFilter
    connections.EntityData.YangName = "connections"
    connections.EntityData.BundleName = "cisco_ios_xr"
    connections.EntityData.ParentYangName = "mgmt-agent"
    connections.EntityData.SegmentPath = "connections"
    connections.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connections.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connections.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connections.EntityData.Children = types.NewOrderedMap()
    connections.EntityData.Children.Append("esdma-info", types.YChild{"EsdmaInfo", &connections.EsdmaInfo})
    connections.EntityData.Children.Append("sdr-nm-client-id", types.YChild{"SdrNmClientId", nil})
    for i := range connections.SdrNmClientId {
        connections.EntityData.Children.Append(types.GetSegmentPath(connections.SdrNmClientId[i]), types.YChild{"SdrNmClientId", connections.SdrNmClientId[i]})
    }
    connections.EntityData.Children.Append("esd-client-id", types.YChild{"EsdClientId", nil})
    for i := range connections.EsdClientId {
        connections.EntityData.Children.Append(types.GetSegmentPath(connections.EsdClientId[i]), types.YChild{"EsdClientId", connections.EsdClientId[i]})
    }
    connections.EntityData.Children.Append("mlap-client-id", types.YChild{"MlapClientId", nil})
    for i := range connections.MlapClientId {
        connections.EntityData.Children.Append(types.GetSegmentPath(connections.MlapClientId[i]), types.YChild{"MlapClientId", connections.MlapClientId[i]})
    }
    connections.EntityData.Leafs = types.NewOrderedMap()
    connections.EntityData.Leafs.Append("sdr-nm-num-clients", types.YLeaf{"SdrNmNumClients", connections.SdrNmNumClients})
    connections.EntityData.Leafs.Append("esd-client-num-clients", types.YLeaf{"EsdClientNumClients", connections.EsdClientNumClients})
    connections.EntityData.Leafs.Append("mlap-client-num-clients", types.YLeaf{"MlapClientNumClients", connections.MlapClientNumClients})

    connections.EntityData.YListKeys = []string {}

    return &(connections.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo
type Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ActiveEsdmaAddress interface{}
}

func (esdmaInfo *Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo) GetEntityData() *types.CommonEntityData {
    esdmaInfo.EntityData.YFilter = esdmaInfo.YFilter
    esdmaInfo.EntityData.YangName = "esdma-info"
    esdmaInfo.EntityData.BundleName = "cisco_ios_xr"
    esdmaInfo.EntityData.ParentYangName = "connections"
    esdmaInfo.EntityData.SegmentPath = "esdma-info"
    esdmaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdmaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdmaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdmaInfo.EntityData.Children = types.NewOrderedMap()
    esdmaInfo.EntityData.Leafs = types.NewOrderedMap()
    esdmaInfo.EntityData.Leafs.Append("active-esdma-address", types.YLeaf{"ActiveEsdmaAddress", esdmaInfo.ActiveEsdmaAddress})

    esdmaInfo.EntityData.YListKeys = []string {}

    return &(esdmaInfo.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId
type Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SdrNmIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    SdrNmPortNum interface{}
}

func (sdrNmClientId *Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId) GetEntityData() *types.CommonEntityData {
    sdrNmClientId.EntityData.YFilter = sdrNmClientId.YFilter
    sdrNmClientId.EntityData.YangName = "sdr-nm-client-id"
    sdrNmClientId.EntityData.BundleName = "cisco_ios_xr"
    sdrNmClientId.EntityData.ParentYangName = "connections"
    sdrNmClientId.EntityData.SegmentPath = "sdr-nm-client-id"
    sdrNmClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrNmClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrNmClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrNmClientId.EntityData.Children = types.NewOrderedMap()
    sdrNmClientId.EntityData.Leafs = types.NewOrderedMap()
    sdrNmClientId.EntityData.Leafs.Append("sdr-nm-ip-address", types.YLeaf{"SdrNmIpAddress", sdrNmClientId.SdrNmIpAddress})
    sdrNmClientId.EntityData.Leafs.Append("sdr-nm-port-num", types.YLeaf{"SdrNmPortNum", sdrNmClientId.SdrNmPortNum})

    sdrNmClientId.EntityData.YListKeys = []string {}

    return &(sdrNmClientId.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId
type Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    EsdClientIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    EsdClientPortNum interface{}

    // The type is string.
    EsdClientLocation interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdClientSwitchInfoCached interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdClientSdrInfoCached interface{}
}

func (esdClientId *Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId) GetEntityData() *types.CommonEntityData {
    esdClientId.EntityData.YFilter = esdClientId.YFilter
    esdClientId.EntityData.YangName = "esd-client-id"
    esdClientId.EntityData.BundleName = "cisco_ios_xr"
    esdClientId.EntityData.ParentYangName = "connections"
    esdClientId.EntityData.SegmentPath = "esd-client-id"
    esdClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdClientId.EntityData.Children = types.NewOrderedMap()
    esdClientId.EntityData.Leafs = types.NewOrderedMap()
    esdClientId.EntityData.Leafs.Append("esd-client-ip-address", types.YLeaf{"EsdClientIpAddress", esdClientId.EsdClientIpAddress})
    esdClientId.EntityData.Leafs.Append("esd-client-port-num", types.YLeaf{"EsdClientPortNum", esdClientId.EsdClientPortNum})
    esdClientId.EntityData.Leafs.Append("esd-client-location", types.YLeaf{"EsdClientLocation", esdClientId.EsdClientLocation})
    esdClientId.EntityData.Leafs.Append("esd-client-switch-info-cached", types.YLeaf{"EsdClientSwitchInfoCached", esdClientId.EsdClientSwitchInfoCached})
    esdClientId.EntityData.Leafs.Append("esd-client-sdr-info-cached", types.YLeaf{"EsdClientSdrInfoCached", esdClientId.EsdClientSdrInfoCached})

    esdClientId.EntityData.YListKeys = []string {}

    return &(esdClientId.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId
type Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    MlapClientIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    MlapClientPortNum interface{}

    // The type is string.
    MlapClientLocation interface{}

    // The type is EsdmaSwitchYesNoEnum.
    MlapClientSwitchInfoCached interface{}
}

func (mlapClientId *Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId) GetEntityData() *types.CommonEntityData {
    mlapClientId.EntityData.YFilter = mlapClientId.YFilter
    mlapClientId.EntityData.YangName = "mlap-client-id"
    mlapClientId.EntityData.BundleName = "cisco_ios_xr"
    mlapClientId.EntityData.ParentYangName = "connections"
    mlapClientId.EntityData.SegmentPath = "mlap-client-id"
    mlapClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapClientId.EntityData.Children = types.NewOrderedMap()
    mlapClientId.EntityData.Leafs = types.NewOrderedMap()
    mlapClientId.EntityData.Leafs.Append("mlap-client-ip-address", types.YLeaf{"MlapClientIpAddress", mlapClientId.MlapClientIpAddress})
    mlapClientId.EntityData.Leafs.Append("mlap-client-port-num", types.YLeaf{"MlapClientPortNum", mlapClientId.MlapClientPortNum})
    mlapClientId.EntityData.Leafs.Append("mlap-client-location", types.YLeaf{"MlapClientLocation", mlapClientId.MlapClientLocation})
    mlapClientId.EntityData.Leafs.Append("mlap-client-switch-info-cached", types.YLeaf{"MlapClientSwitchInfoCached", mlapClientId.MlapClientSwitchInfoCached})

    mlapClientId.EntityData.YListKeys = []string {}

    return &(mlapClientId.EntityData)
}

// Controller_Switch_Oper_PortState
type Controller_Switch_Oper_PortState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_PortState_Location.
    Location []*Controller_Switch_Oper_PortState_Location
}

func (portState *Controller_Switch_Oper_PortState) GetEntityData() *types.CommonEntityData {
    portState.EntityData.YFilter = portState.YFilter
    portState.EntityData.YangName = "port-state"
    portState.EntityData.BundleName = "cisco_ios_xr"
    portState.EntityData.ParentYangName = "oper"
    portState.EntityData.SegmentPath = "port-state"
    portState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portState.EntityData.Children = types.NewOrderedMap()
    portState.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range portState.Location {
        portState.EntityData.Children.Append(types.GetSegmentPath(portState.Location[i]), types.YChild{"Location", portState.Location[i]})
    }
    portState.EntityData.Leafs = types.NewOrderedMap()

    portState.EntityData.YListKeys = []string {}

    return &(portState.EntityData)
}

// Controller_Switch_Oper_PortState_Location
type Controller_Switch_Oper_PortState_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_PortState_Location_PortIter.
    PortIter []*Controller_Switch_Oper_PortState_Location_PortIter
}

func (location *Controller_Switch_Oper_PortState_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-state"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("port-iter", types.YChild{"PortIter", nil})
    for i := range location.PortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.PortIter[i]), types.YChild{"PortIter", location.PortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_PortState_Location_PortIter
type Controller_Switch_Oper_PortState_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}
}

func (portIter *Controller_Switch_Oper_PortState_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + types.AddKeyToken(portIter.Port, "port")
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = types.NewOrderedMap()
    portIter.EntityData.Leafs = types.NewOrderedMap()
    portIter.EntityData.Leafs.Append("port", types.YLeaf{"Port", portIter.Port})

    portIter.EntityData.YListKeys = []string {"Port"}

    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Trunk
type Controller_Switch_Oper_Trunk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Trunk_Location.
    Location []*Controller_Switch_Oper_Trunk_Location
}

func (trunk *Controller_Switch_Oper_Trunk) GetEntityData() *types.CommonEntityData {
    trunk.EntityData.YFilter = trunk.YFilter
    trunk.EntityData.YangName = "trunk"
    trunk.EntityData.BundleName = "cisco_ios_xr"
    trunk.EntityData.ParentYangName = "oper"
    trunk.EntityData.SegmentPath = "trunk"
    trunk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trunk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trunk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trunk.EntityData.Children = types.NewOrderedMap()
    trunk.EntityData.Children.Append("location", types.YChild{"Location", nil})
    for i := range trunk.Location {
        trunk.EntityData.Children.Append(types.GetSegmentPath(trunk.Location[i]), types.YChild{"Location", trunk.Location[i]})
    }
    trunk.EntityData.Leafs = types.NewOrderedMap()

    trunk.EntityData.YListKeys = []string {}

    return &(trunk.EntityData)
}

// Controller_Switch_Oper_Trunk_Location
type Controller_Switch_Oper_Trunk_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Rack to display the switch trunk group information
    // for. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to display the switch trunk group information
    // for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type to display the switch trunk group
    // information for. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of member ports in the trunk group. The type is interface{} with
    // range: 0..4294967295.
    TrunkMemberCount interface{}

    // Name of the trunk group. The type is string.
    TrunkName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter.
    TrunkMemberPortIter []*Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter
}

func (location *Controller_Switch_Oper_Trunk_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trunk"
    location.EntityData.SegmentPath = "location" + types.AddKeyToken(location.Rack, "rack") + types.AddKeyToken(location.Card, "card") + types.AddKeyToken(location.SwitchId, "switch-id")
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = types.NewOrderedMap()
    location.EntityData.Children.Append("trunk-member-port-iter", types.YChild{"TrunkMemberPortIter", nil})
    for i := range location.TrunkMemberPortIter {
        location.EntityData.Children.Append(types.GetSegmentPath(location.TrunkMemberPortIter[i]), types.YChild{"TrunkMemberPortIter", location.TrunkMemberPortIter[i]})
    }
    location.EntityData.Leafs = types.NewOrderedMap()
    location.EntityData.Leafs.Append("rack", types.YLeaf{"Rack", location.Rack})
    location.EntityData.Leafs.Append("card", types.YLeaf{"Card", location.Card})
    location.EntityData.Leafs.Append("switch-id", types.YLeaf{"SwitchId", location.SwitchId})
    location.EntityData.Leafs.Append("trunk-member-count", types.YLeaf{"TrunkMemberCount", location.TrunkMemberCount})
    location.EntityData.Leafs.Append("trunk-name", types.YLeaf{"TrunkName", location.TrunkName})

    location.EntityData.YListKeys = []string {"Rack", "Card", "SwitchId"}

    return &(location.EntityData)
}

// Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter
type Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Trunk Member Port. The type is interface{} with
    // range: 0..4294967295.
    TrunkMemberPort interface{}

    // Trunk Member Status. The type is EsdmaTrunkMemberStatus.
    TrunkMemberStatus interface{}
}

func (trunkMemberPortIter *Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter) GetEntityData() *types.CommonEntityData {
    trunkMemberPortIter.EntityData.YFilter = trunkMemberPortIter.YFilter
    trunkMemberPortIter.EntityData.YangName = "trunk-member-port-iter"
    trunkMemberPortIter.EntityData.BundleName = "cisco_ios_xr"
    trunkMemberPortIter.EntityData.ParentYangName = "location"
    trunkMemberPortIter.EntityData.SegmentPath = "trunk-member-port-iter" + types.AddKeyToken(trunkMemberPortIter.TrunkMemberPort, "trunk-member-port")
    trunkMemberPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trunkMemberPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trunkMemberPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trunkMemberPortIter.EntityData.Children = types.NewOrderedMap()
    trunkMemberPortIter.EntityData.Leafs = types.NewOrderedMap()
    trunkMemberPortIter.EntityData.Leafs.Append("trunk-member-port", types.YLeaf{"TrunkMemberPort", trunkMemberPortIter.TrunkMemberPort})
    trunkMemberPortIter.EntityData.Leafs.Append("trunk-member-status", types.YLeaf{"TrunkMemberStatus", trunkMemberPortIter.TrunkMemberStatus})

    trunkMemberPortIter.EntityData.YListKeys = []string {"TrunkMemberPort"}

    return &(trunkMemberPortIter.EntityData)
}

// Controller_FabricAction
type Controller_FabricAction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_FabricAction_Fabric
}

func (fabricAction *Controller_FabricAction) GetEntityData() *types.CommonEntityData {
    fabricAction.EntityData.YFilter = fabricAction.YFilter
    fabricAction.EntityData.YangName = "fabric_action"
    fabricAction.EntityData.BundleName = "cisco_ios_xr"
    fabricAction.EntityData.ParentYangName = "controller"
    fabricAction.EntityData.SegmentPath = "fabric_action"
    fabricAction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabricAction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabricAction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabricAction.EntityData.Children = types.NewOrderedMap()
    fabricAction.EntityData.Children.Append("fabric", types.YChild{"Fabric", &fabricAction.Fabric})
    fabricAction.EntityData.Leafs = types.NewOrderedMap()

    fabricAction.EntityData.YListKeys = []string {}

    return &(fabricAction.EntityData)
}

// Controller_FabricAction_Fabric
// Fabric resource commands
type Controller_FabricAction_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Plane by plane upgrade.
    Ppu Controller_FabricAction_Fabric_Ppu
}

func (fabric *Controller_FabricAction_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "fabric_action"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = types.NewOrderedMap()
    fabric.EntityData.Children.Append("ppu", types.YChild{"Ppu", &fabric.Ppu})
    fabric.EntityData.Leafs = types.NewOrderedMap()

    fabric.EntityData.YListKeys = []string {}

    return &(fabric.EntityData)
}

// Controller_FabricAction_Fabric_Ppu
// Plane by plane upgrade.
type Controller_FabricAction_Fabric_Ppu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ppu *Controller_FabricAction_Fabric_Ppu) GetEntityData() *types.CommonEntityData {
    ppu.EntityData.YFilter = ppu.YFilter
    ppu.EntityData.YangName = "ppu"
    ppu.EntityData.BundleName = "cisco_ios_xr"
    ppu.EntityData.ParentYangName = "fabric"
    ppu.EntityData.SegmentPath = "ppu"
    ppu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ppu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ppu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ppu.EntityData.Children = types.NewOrderedMap()
    ppu.EntityData.Leafs = types.NewOrderedMap()

    ppu.EntityData.YListKeys = []string {}

    return &(ppu.EntityData)
}

