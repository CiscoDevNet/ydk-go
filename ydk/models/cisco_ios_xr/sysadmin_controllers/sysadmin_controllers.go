// This module contains a collection of YANG
// definitions for Cisco IOS-XR SysAdmin configuration.
// 
// This module defines the top level container for
// all hardware devices managed in Sysadmin.
// 
// Copyright(c) 2011-2017 by Cisco Systems, Inc.
// All rights reserved.
package sysadmin_controllers

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package sysadmin_controllers"))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers gaspp}", reflect.TypeOf(Gaspp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:gaspp", reflect.TypeOf(Gaspp{}))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers set}", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:set", reflect.TypeOf(Set{}))
    ydk.RegisterEntity("{http://www.cisco.com/ns/yang/Cisco-IOS-XR-sysadmin-controllers controller}", reflect.TypeOf(Controller{}))
    ydk.RegisterEntity("Cisco-IOS-XR-sysadmin-controllers:controller", reflect.TypeOf(Controller{}))
}

// Gaspp
type Gaspp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Gaspp_Asic.
    Asic []Gaspp_Asic
}

func (gaspp *Gaspp) GetEntityData() *types.CommonEntityData {
    gaspp.EntityData.YFilter = gaspp.YFilter
    gaspp.EntityData.YangName = "gaspp"
    gaspp.EntityData.BundleName = "cisco_ios_xr"
    gaspp.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    gaspp.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:gaspp"
    gaspp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gaspp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gaspp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gaspp.EntityData.Children = make(map[string]types.YChild)
    gaspp.EntityData.Children["asic"] = types.YChild{"Asic", nil}
    for i := range gaspp.Asic {
        gaspp.EntityData.Children[types.GetSegmentPath(&gaspp.Asic[i])] = types.YChild{"Asic", &gaspp.Asic[i]}
    }
    gaspp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gaspp.EntityData)
}

// Gaspp_Asic
type Gaspp_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Gaspp_Asic_Instance.
    Instance []Gaspp_Asic_Instance
}

func (asic *Gaspp_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "gaspp"
    asic.EntityData.SegmentPath = "asic" + "[asic-name='" + fmt.Sprintf("%v", asic.AsicName) + "']"
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = make(map[string]types.YChild)
    asic.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range asic.Instance {
        asic.EntityData.Children[types.GetSegmentPath(&asic.Instance[i])] = types.YChild{"Instance", &asic.Instance[i]}
    }
    asic.EntityData.Leafs = make(map[string]types.YLeaf)
    asic.EntityData.Leafs["asic-name"] = types.YLeaf{"AsicName", asic.AsicName}
    return &(asic.EntityData)
}

// Gaspp_Asic_Instance
type Gaspp_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // The type is string.
    InstanceName interface{}

    // The type is slice of Gaspp_Asic_Instance_Address.
    Address []Gaspp_Asic_Instance_Address

    // The type is slice of Gaspp_Asic_Instance_BlockName.
    BlockName []Gaspp_Asic_Instance_BlockName

    // The type is slice of Gaspp_Asic_Instance_BlockNumber.
    BlockNumber []Gaspp_Asic_Instance_BlockNumber
}

func (instance *Gaspp_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["address"] = types.YChild{"Address", nil}
    for i := range instance.Address {
        instance.EntityData.Children[types.GetSegmentPath(&instance.Address[i])] = types.YChild{"Address", &instance.Address[i]}
    }
    instance.EntityData.Children["block-name"] = types.YChild{"BlockName", nil}
    for i := range instance.BlockName {
        instance.EntityData.Children[types.GetSegmentPath(&instance.BlockName[i])] = types.YChild{"BlockName", &instance.BlockName[i]}
    }
    instance.EntityData.Children["block-number"] = types.YChild{"BlockNumber", nil}
    for i := range instance.BlockNumber {
        instance.EntityData.Children[types.GetSegmentPath(&instance.BlockNumber[i])] = types.YChild{"BlockNumber", &instance.BlockNumber[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", instance.InstanceName}
    return &(instance.EntityData)
}

// Gaspp_Asic_Instance_Address
type Gaspp_Asic_Instance_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Addr interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    Entries interface{}

    // The type is interface{} with range: 0..4294967295. This attribute is
    // mandatory.
    Width interface{}

    // The type is slice of Gaspp_Asic_Instance_Address_Location.
    Location []Gaspp_Asic_Instance_Address_Location
}

func (address *Gaspp_Asic_Instance_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "instance"
    address.EntityData.SegmentPath = "address" + "[addr='" + fmt.Sprintf("%v", address.Addr) + "']" + "[size='" + fmt.Sprintf("%v", address.Size) + "']" + "[entries='" + fmt.Sprintf("%v", address.Entries) + "']"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = make(map[string]types.YChild)
    address.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range address.Location {
        address.EntityData.Children[types.GetSegmentPath(&address.Location[i])] = types.YChild{"Location", &address.Location[i]}
    }
    address.EntityData.Leafs = make(map[string]types.YLeaf)
    address.EntityData.Leafs["addr"] = types.YLeaf{"Addr", address.Addr}
    address.EntityData.Leafs["size"] = types.YLeaf{"Size", address.Size}
    address.EntityData.Leafs["entries"] = types.YLeaf{"Entries", address.Entries}
    address.EntityData.Leafs["width"] = types.YLeaf{"Width", address.Width}
    return &(address.EntityData)
}

// Gaspp_Asic_Instance_Address_Location
type Gaspp_Asic_Instance_Address_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of Gaspp_Asic_Instance_Address_Location_DirectData.
    DirectData []Gaspp_Asic_Instance_Address_Location_DirectData
}

func (location *Gaspp_Asic_Instance_Address_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "address"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["direct_data"] = types.YChild{"DirectData", nil}
    for i := range location.DirectData {
        location.EntityData.Children[types.GetSegmentPath(&location.DirectData[i])] = types.YChild{"DirectData", &location.DirectData[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Gaspp_Asic_Instance_Address_Location_DirectData
type Gaspp_Asic_Instance_Address_Location_DirectData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (directData *Gaspp_Asic_Instance_Address_Location_DirectData) GetEntityData() *types.CommonEntityData {
    directData.EntityData.YFilter = directData.YFilter
    directData.EntityData.YangName = "direct_data"
    directData.EntityData.BundleName = "cisco_ios_xr"
    directData.EntityData.ParentYangName = "location"
    directData.EntityData.SegmentPath = "direct_data"
    directData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directData.EntityData.Children = make(map[string]types.YChild)
    directData.EntityData.Leafs = make(map[string]types.YLeaf)
    directData.EntityData.Leafs["address"] = types.YLeaf{"Address", directData.Address}
    directData.EntityData.Leafs["name"] = types.YLeaf{"Name", directData.Name}
    directData.EntityData.Leafs["value"] = types.YLeaf{"Value", directData.Value}
    directData.EntityData.Leafs["size"] = types.YLeaf{"Size", directData.Size}
    return &(directData.EntityData)
}

// Gaspp_Asic_Instance_BlockName
type Gaspp_Asic_Instance_BlockName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockNm interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockName_RegisterName.
    RegisterName []Gaspp_Asic_Instance_BlockName_RegisterName
}

func (blockName *Gaspp_Asic_Instance_BlockName) GetEntityData() *types.CommonEntityData {
    blockName.EntityData.YFilter = blockName.YFilter
    blockName.EntityData.YangName = "block-name"
    blockName.EntityData.BundleName = "cisco_ios_xr"
    blockName.EntityData.ParentYangName = "instance"
    blockName.EntityData.SegmentPath = "block-name" + "[block-nm='" + fmt.Sprintf("%v", blockName.BlockNm) + "']" + "[block-num='" + fmt.Sprintf("%v", blockName.BlockNum) + "']"
    blockName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockName.EntityData.Children = make(map[string]types.YChild)
    blockName.EntityData.Children["register-name"] = types.YChild{"RegisterName", nil}
    for i := range blockName.RegisterName {
        blockName.EntityData.Children[types.GetSegmentPath(&blockName.RegisterName[i])] = types.YChild{"RegisterName", &blockName.RegisterName[i]}
    }
    blockName.EntityData.Leafs = make(map[string]types.YLeaf)
    blockName.EntityData.Leafs["block-nm"] = types.YLeaf{"BlockNm", blockName.BlockNm}
    blockName.EntityData.Leafs["block-num"] = types.YLeaf{"BlockNum", blockName.BlockNum}
    return &(blockName.EntityData)
}

// Gaspp_Asic_Instance_BlockName_RegisterName
type Gaspp_Asic_Instance_BlockName_RegisterName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockName_RegisterName_Data.
    Data []Gaspp_Asic_Instance_BlockName_RegisterName_Data
}

func (registerName *Gaspp_Asic_Instance_BlockName_RegisterName) GetEntityData() *types.CommonEntityData {
    registerName.EntityData.YFilter = registerName.YFilter
    registerName.EntityData.YangName = "register-name"
    registerName.EntityData.BundleName = "cisco_ios_xr"
    registerName.EntityData.ParentYangName = "block-name"
    registerName.EntityData.SegmentPath = "register-name" + "[name='" + fmt.Sprintf("%v", registerName.Name) + "']"
    registerName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerName.EntityData.Children = make(map[string]types.YChild)
    registerName.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range registerName.Data {
        registerName.EntityData.Children[types.GetSegmentPath(&registerName.Data[i])] = types.YChild{"Data", &registerName.Data[i]}
    }
    registerName.EntityData.Leafs = make(map[string]types.YLeaf)
    registerName.EntityData.Leafs["name"] = types.YLeaf{"Name", registerName.Name}
    registerName.EntityData.Leafs["register"] = types.YLeaf{"Register", registerName.Register}
    return &(registerName.EntityData)
}

// Gaspp_Asic_Instance_BlockName_RegisterName_Data
type Gaspp_Asic_Instance_BlockName_RegisterName_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockName_RegisterName_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "register-name"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber
type Gaspp_Asic_Instance_BlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is string.
    BlockNm interface{}

    // The type is slice of Gaspp_Asic_Instance_BlockNumber_RegisterNumber.
    RegisterNumber []Gaspp_Asic_Instance_BlockNumber_RegisterNumber
}

func (blockNumber *Gaspp_Asic_Instance_BlockNumber) GetEntityData() *types.CommonEntityData {
    blockNumber.EntityData.YFilter = blockNumber.YFilter
    blockNumber.EntityData.YangName = "block-number"
    blockNumber.EntityData.BundleName = "cisco_ios_xr"
    blockNumber.EntityData.ParentYangName = "instance"
    blockNumber.EntityData.SegmentPath = "block-number" + "[block-num='" + fmt.Sprintf("%v", blockNumber.BlockNum) + "']"
    blockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNumber.EntityData.Children = make(map[string]types.YChild)
    blockNumber.EntityData.Children["register-number"] = types.YChild{"RegisterNumber", nil}
    for i := range blockNumber.RegisterNumber {
        blockNumber.EntityData.Children[types.GetSegmentPath(&blockNumber.RegisterNumber[i])] = types.YChild{"RegisterNumber", &blockNumber.RegisterNumber[i]}
    }
    blockNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    blockNumber.EntityData.Leafs["block-num"] = types.YLeaf{"BlockNum", blockNumber.BlockNum}
    blockNumber.EntityData.Leafs["block-nm"] = types.YLeaf{"BlockNm", blockNumber.BlockNm}
    return &(blockNumber.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is string.
    RegisterName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets.
    RegisterOffsets []Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location.
    Location []Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location
}

func (registerNumber *Gaspp_Asic_Instance_BlockNumber_RegisterNumber) GetEntityData() *types.CommonEntityData {
    registerNumber.EntityData.YFilter = registerNumber.YFilter
    registerNumber.EntityData.YangName = "register-number"
    registerNumber.EntityData.BundleName = "cisco_ios_xr"
    registerNumber.EntityData.ParentYangName = "block-number"
    registerNumber.EntityData.SegmentPath = "register-number" + "[register='" + fmt.Sprintf("%v", registerNumber.Register) + "']"
    registerNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerNumber.EntityData.Children = make(map[string]types.YChild)
    registerNumber.EntityData.Children["register-offsets"] = types.YChild{"RegisterOffsets", nil}
    for i := range registerNumber.RegisterOffsets {
        registerNumber.EntityData.Children[types.GetSegmentPath(&registerNumber.RegisterOffsets[i])] = types.YChild{"RegisterOffsets", &registerNumber.RegisterOffsets[i]}
    }
    registerNumber.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range registerNumber.Location {
        registerNumber.EntityData.Children[types.GetSegmentPath(&registerNumber.Location[i])] = types.YChild{"Location", &registerNumber.Location[i]}
    }
    registerNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    registerNumber.EntityData.Leafs["register"] = types.YLeaf{"Register", registerNumber.Register}
    registerNumber.EntityData.Leafs["register-name"] = types.YLeaf{"RegisterName", registerNumber.RegisterName}
    return &(registerNumber.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    RegStart interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumEntries interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location.
    Location []Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
}

func (registerOffsets *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets) GetEntityData() *types.CommonEntityData {
    registerOffsets.EntityData.YFilter = registerOffsets.YFilter
    registerOffsets.EntityData.YangName = "register-offsets"
    registerOffsets.EntityData.BundleName = "cisco_ios_xr"
    registerOffsets.EntityData.ParentYangName = "register-number"
    registerOffsets.EntityData.SegmentPath = "register-offsets" + "[reg-start='" + fmt.Sprintf("%v", registerOffsets.RegStart) + "']" + "[num-entries='" + fmt.Sprintf("%v", registerOffsets.NumEntries) + "']"
    registerOffsets.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerOffsets.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerOffsets.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerOffsets.EntityData.Children = make(map[string]types.YChild)
    registerOffsets.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range registerOffsets.Location {
        registerOffsets.EntityData.Children[types.GetSegmentPath(&registerOffsets.Location[i])] = types.YChild{"Location", &registerOffsets.Location[i]}
    }
    registerOffsets.EntityData.Leafs = make(map[string]types.YLeaf)
    registerOffsets.EntityData.Leafs["reg-start"] = types.YLeaf{"RegStart", registerOffsets.RegStart}
    registerOffsets.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", registerOffsets.NumEntries}
    return &(registerOffsets.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data.
    Data []Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
}

func (location *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-offsets"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range location.Data {
        location.EntityData.Children[types.GetSegmentPath(&location.Data[i])] = types.YChild{"Data", &location.Data[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data.
    Data []Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
}

func (location *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-number"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range location.Data {
        location.EntityData.Children[types.GetSegmentPath(&location.Data[i])] = types.YChild{"Data", &location.Data[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
type Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Gaspp_Asic_Instance_BlockNumber_RegisterNumber_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Set
type Set struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Controller Set_Controller
}

func (set *Set) GetEntityData() *types.CommonEntityData {
    set.EntityData.YFilter = set.YFilter
    set.EntityData.YangName = "set"
    set.EntityData.BundleName = "cisco_ios_xr"
    set.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    set.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:set"
    set.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    set.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    set.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    set.EntityData.Children = make(map[string]types.YChild)
    set.EntityData.Children["controller"] = types.YChild{"Controller", &set.Controller}
    set.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(set.EntityData)
}

// Set_Controller
type Set_Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic.
    Asic []Set_Controller_Asic
}

func (controller *Set_Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "set"
    controller.EntityData.SegmentPath = "controller"
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = make(map[string]types.YChild)
    controller.EntityData.Children["asic"] = types.YChild{"Asic", nil}
    for i := range controller.Asic {
        controller.EntityData.Children[types.GetSegmentPath(&controller.Asic[i])] = types.YChild{"Asic", &controller.Asic[i]}
    }
    controller.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(controller.EntityData)
}

// Set_Controller_Asic
type Set_Controller_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Set_Controller_Asic_Instance.
    Instance []Set_Controller_Asic_Instance
}

func (asic *Set_Controller_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "controller"
    asic.EntityData.SegmentPath = "asic" + "[asic-name='" + fmt.Sprintf("%v", asic.AsicName) + "']"
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = make(map[string]types.YChild)
    asic.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range asic.Instance {
        asic.EntityData.Children[types.GetSegmentPath(&asic.Instance[i])] = types.YChild{"Instance", &asic.Instance[i]}
    }
    asic.EntityData.Leafs = make(map[string]types.YLeaf)
    asic.EntityData.Leafs["asic-name"] = types.YLeaf{"AsicName", asic.AsicName}
    return &(asic.EntityData)
}

// Set_Controller_Asic_Instance
type Set_Controller_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceIds interface{}

    
    FaultInjection Set_Controller_Asic_Instance_FaultInjection
}

func (instance *Set_Controller_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + "[instance-ids='" + fmt.Sprintf("%v", instance.InstanceIds) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["fault-injection"] = types.YChild{"FaultInjection", &instance.FaultInjection}
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-ids"] = types.YLeaf{"InstanceIds", instance.InstanceIds}
    return &(instance.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection
type Set_Controller_Asic_Instance_FaultInjection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Set_Controller_Asic_Instance_FaultInjection_Module.
    Module []Set_Controller_Asic_Instance_FaultInjection_Module
}

func (faultInjection *Set_Controller_Asic_Instance_FaultInjection) GetEntityData() *types.CommonEntityData {
    faultInjection.EntityData.YFilter = faultInjection.YFilter
    faultInjection.EntityData.YangName = "fault-injection"
    faultInjection.EntityData.BundleName = "cisco_ios_xr"
    faultInjection.EntityData.ParentYangName = "instance"
    faultInjection.EntityData.SegmentPath = "fault-injection"
    faultInjection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultInjection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultInjection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultInjection.EntityData.Children = make(map[string]types.YChild)
    faultInjection.EntityData.Children["module"] = types.YChild{"Module", nil}
    for i := range faultInjection.Module {
        faultInjection.EntityData.Children[types.GetSegmentPath(&faultInjection.Module[i])] = types.YChild{"Module", &faultInjection.Module[i]}
    }
    faultInjection.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(faultInjection.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module
type Set_Controller_Asic_Instance_FaultInjection_Module struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ModuleName interface{}

    
    FaultType Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
}

func (module *Set_Controller_Asic_Instance_FaultInjection_Module) GetEntityData() *types.CommonEntityData {
    module.EntityData.YFilter = module.YFilter
    module.EntityData.YangName = "module"
    module.EntityData.BundleName = "cisco_ios_xr"
    module.EntityData.ParentYangName = "fault-injection"
    module.EntityData.SegmentPath = "module" + "[module-name='" + fmt.Sprintf("%v", module.ModuleName) + "']"
    module.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    module.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    module.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    module.EntityData.Children = make(map[string]types.YChild)
    module.EntityData.Children["fault-type"] = types.YChild{"FaultType", &module.FaultType}
    module.EntityData.Leafs = make(map[string]types.YLeaf)
    module.EntityData.Leafs["module-name"] = types.YLeaf{"ModuleName", module.ModuleName}
    return &(module.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ecc Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc

    
    Parity Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity

    
    Other Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
}

func (faultType *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType) GetEntityData() *types.CommonEntityData {
    faultType.EntityData.YFilter = faultType.YFilter
    faultType.EntityData.YangName = "fault-type"
    faultType.EntityData.BundleName = "cisco_ios_xr"
    faultType.EntityData.ParentYangName = "module"
    faultType.EntityData.SegmentPath = "fault-type"
    faultType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    faultType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    faultType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    faultType.EntityData.Children = make(map[string]types.YChild)
    faultType.EntityData.Children["ecc"] = types.YChild{"Ecc", &faultType.Ecc}
    faultType.EntityData.Children["parity"] = types.YChild{"Parity", &faultType.Parity}
    faultType.EntityData.Children["other"] = types.YChild{"Other", &faultType.Other}
    faultType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(faultType.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst.
    BlockNameLst []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
}

func (ecc *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc) GetEntityData() *types.CommonEntityData {
    ecc.EntityData.YFilter = ecc.YFilter
    ecc.EntityData.YangName = "ecc"
    ecc.EntityData.BundleName = "cisco_ios_xr"
    ecc.EntityData.ParentYangName = "fault-type"
    ecc.EntityData.SegmentPath = "ecc"
    ecc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ecc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ecc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ecc.EntityData.Children = make(map[string]types.YChild)
    ecc.EntityData.Children["all"] = types.YChild{"All", &ecc.All}
    ecc.EntityData.Children["block-name-lst"] = types.YChild{"BlockNameLst", nil}
    for i := range ecc.BlockNameLst {
        ecc.EntityData.Children[types.GetSegmentPath(&ecc.BlockNameLst[i])] = types.YChild{"BlockNameLst", &ecc.BlockNameLst[i]}
    }
    ecc.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ecc.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold.
    Threshold []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "ecc"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["threshold"] = types.YChild{"Threshold", nil}
    for i := range all.Threshold {
        all.EntityData.Children[types.GetSegmentPath(&all.Threshold[i])] = types.YChild{"Threshold", &all.Threshold[i]}
    }
    all.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range all.Location {
        all.EntityData.Children[types.GetSegmentPath(&all.Location[i])] = types.YChild{"Location", &all.Location[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + "[num-seconds='" + fmt.Sprintf("%v", threshold.NumSeconds) + "']"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range threshold.Location {
        threshold.EntityData.Children[types.GetSegmentPath(&threshold.Location[i])] = types.YChild{"Location", &threshold.Location[i]}
    }
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", threshold.NumSeconds}
    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "ecc"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + "[block-name='" + fmt.Sprintf("%v", blockNameLst.BlockName) + "']"
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = make(map[string]types.YChild)
    blockNameLst.EntityData.Children["one"] = types.YChild{"One", &blockNameLst.One}
    blockNameLst.EntityData.Children["continuous"] = types.YChild{"Continuous", &blockNameLst.Continuous}
    blockNameLst.EntityData.Children["stop"] = types.YChild{"Stop", &blockNameLst.Stop}
    blockNameLst.EntityData.Leafs = make(map[string]types.YLeaf)
    blockNameLst.EntityData.Leafs["block-name"] = types.YLeaf{"BlockName", blockNameLst.BlockName}
    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = make(map[string]types.YChild)
    one.EntityData.Children["rate"] = types.YChild{"Rate", &one.Rate}
    one.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range one.Location {
        one.EntityData.Children[types.GetSegmentPath(&one.Location[i])] = types.YChild{"Location", &one.Location[i]}
    }
    one.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = make(map[string]types.YChild)
    continuous.EntityData.Children["rate"] = types.YChild{"Rate", &continuous.Rate}
    continuous.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range continuous.Location {
        continuous.EntityData.Children[types.GetSegmentPath(&continuous.Location[i])] = types.YChild{"Location", &continuous.Location[i]}
    }
    continuous.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = make(map[string]types.YChild)
    stop.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range stop.Location {
        stop.EntityData.Children[types.GetSegmentPath(&stop.Location[i])] = types.YChild{"Location", &stop.Location[i]}
    }
    stop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Ecc_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst.
    BlockNameLst []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
}

func (parity *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity) GetEntityData() *types.CommonEntityData {
    parity.EntityData.YFilter = parity.YFilter
    parity.EntityData.YangName = "parity"
    parity.EntityData.BundleName = "cisco_ios_xr"
    parity.EntityData.ParentYangName = "fault-type"
    parity.EntityData.SegmentPath = "parity"
    parity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parity.EntityData.Children = make(map[string]types.YChild)
    parity.EntityData.Children["all"] = types.YChild{"All", &parity.All}
    parity.EntityData.Children["block-name-lst"] = types.YChild{"BlockNameLst", nil}
    for i := range parity.BlockNameLst {
        parity.EntityData.Children[types.GetSegmentPath(&parity.BlockNameLst[i])] = types.YChild{"BlockNameLst", &parity.BlockNameLst[i]}
    }
    parity.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(parity.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold.
    Threshold []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "parity"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["threshold"] = types.YChild{"Threshold", nil}
    for i := range all.Threshold {
        all.EntityData.Children[types.GetSegmentPath(&all.Threshold[i])] = types.YChild{"Threshold", &all.Threshold[i]}
    }
    all.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range all.Location {
        all.EntityData.Children[types.GetSegmentPath(&all.Location[i])] = types.YChild{"Location", &all.Location[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + "[num-seconds='" + fmt.Sprintf("%v", threshold.NumSeconds) + "']"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range threshold.Location {
        threshold.EntityData.Children[types.GetSegmentPath(&threshold.Location[i])] = types.YChild{"Location", &threshold.Location[i]}
    }
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", threshold.NumSeconds}
    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "parity"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + "[block-name='" + fmt.Sprintf("%v", blockNameLst.BlockName) + "']"
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = make(map[string]types.YChild)
    blockNameLst.EntityData.Children["one"] = types.YChild{"One", &blockNameLst.One}
    blockNameLst.EntityData.Children["continuous"] = types.YChild{"Continuous", &blockNameLst.Continuous}
    blockNameLst.EntityData.Children["stop"] = types.YChild{"Stop", &blockNameLst.Stop}
    blockNameLst.EntityData.Leafs = make(map[string]types.YLeaf)
    blockNameLst.EntityData.Leafs["block-name"] = types.YLeaf{"BlockName", blockNameLst.BlockName}
    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = make(map[string]types.YChild)
    one.EntityData.Children["rate"] = types.YChild{"Rate", &one.Rate}
    one.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range one.Location {
        one.EntityData.Children[types.GetSegmentPath(&one.Location[i])] = types.YChild{"Location", &one.Location[i]}
    }
    one.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = make(map[string]types.YChild)
    continuous.EntityData.Children["rate"] = types.YChild{"Rate", &continuous.Rate}
    continuous.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range continuous.Location {
        continuous.EntityData.Children[types.GetSegmentPath(&continuous.Location[i])] = types.YChild{"Location", &continuous.Location[i]}
    }
    continuous.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = make(map[string]types.YChild)
    stop.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range stop.Location {
        stop.EntityData.Children[types.GetSegmentPath(&stop.Location[i])] = types.YChild{"Location", &stop.Location[i]}
    }
    stop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Parity_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst.
    BlockNameLst []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
}

func (other *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other) GetEntityData() *types.CommonEntityData {
    other.EntityData.YFilter = other.YFilter
    other.EntityData.YangName = "other"
    other.EntityData.BundleName = "cisco_ios_xr"
    other.EntityData.ParentYangName = "fault-type"
    other.EntityData.SegmentPath = "other"
    other.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    other.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    other.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    other.EntityData.Children = make(map[string]types.YChild)
    other.EntityData.Children["all"] = types.YChild{"All", &other.All}
    other.EntityData.Children["block-name-lst"] = types.YChild{"BlockNameLst", nil}
    for i := range other.BlockNameLst {
        other.EntityData.Children[types.GetSegmentPath(&other.BlockNameLst[i])] = types.YChild{"BlockNameLst", &other.BlockNameLst[i]}
    }
    other.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(other.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold.
    Threshold []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
}

func (all *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "other"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["threshold"] = types.YChild{"Threshold", nil}
    for i := range all.Threshold {
        all.EntityData.Children[types.GetSegmentPath(&all.Threshold[i])] = types.YChild{"Threshold", &all.Threshold[i]}
    }
    all.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range all.Location {
        all.EntityData.Children[types.GetSegmentPath(&all.Location[i])] = types.YChild{"Location", &all.Location[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
}

func (threshold *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold) GetEntityData() *types.CommonEntityData {
    threshold.EntityData.YFilter = threshold.YFilter
    threshold.EntityData.YangName = "threshold"
    threshold.EntityData.BundleName = "cisco_ios_xr"
    threshold.EntityData.ParentYangName = "all"
    threshold.EntityData.SegmentPath = "threshold" + "[num-seconds='" + fmt.Sprintf("%v", threshold.NumSeconds) + "']"
    threshold.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    threshold.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    threshold.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    threshold.EntityData.Children = make(map[string]types.YChild)
    threshold.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range threshold.Location {
        threshold.EntityData.Children[types.GetSegmentPath(&threshold.Location[i])] = types.YChild{"Location", &threshold.Location[i]}
    }
    threshold.EntityData.Leafs = make(map[string]types.YLeaf)
    threshold.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", threshold.NumSeconds}
    return &(threshold.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Threshold_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "threshold"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_All_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "all"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockName interface{}

    
    One Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One

    
    Continuous Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous

    
    Stop Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
}

func (blockNameLst *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst) GetEntityData() *types.CommonEntityData {
    blockNameLst.EntityData.YFilter = blockNameLst.YFilter
    blockNameLst.EntityData.YangName = "block-name-lst"
    blockNameLst.EntityData.BundleName = "cisco_ios_xr"
    blockNameLst.EntityData.ParentYangName = "other"
    blockNameLst.EntityData.SegmentPath = "block-name-lst" + "[block-name='" + fmt.Sprintf("%v", blockNameLst.BlockName) + "']"
    blockNameLst.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNameLst.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNameLst.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNameLst.EntityData.Children = make(map[string]types.YChild)
    blockNameLst.EntityData.Children["one"] = types.YChild{"One", &blockNameLst.One}
    blockNameLst.EntityData.Children["continuous"] = types.YChild{"Continuous", &blockNameLst.Continuous}
    blockNameLst.EntityData.Children["stop"] = types.YChild{"Stop", &blockNameLst.Stop}
    blockNameLst.EntityData.Leafs = make(map[string]types.YLeaf)
    blockNameLst.EntityData.Leafs["block-name"] = types.YLeaf{"BlockName", blockNameLst.BlockName}
    return &(blockNameLst.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
}

func (one *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One) GetEntityData() *types.CommonEntityData {
    one.EntityData.YFilter = one.YFilter
    one.EntityData.YangName = "one"
    one.EntityData.BundleName = "cisco_ios_xr"
    one.EntityData.ParentYangName = "block-name-lst"
    one.EntityData.SegmentPath = "one"
    one.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    one.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    one.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    one.EntityData.Children = make(map[string]types.YChild)
    one.EntityData.Children["rate"] = types.YChild{"Rate", &one.Rate}
    one.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range one.Location {
        one.EntityData.Children[types.GetSegmentPath(&one.Location[i])] = types.YChild{"Location", &one.Location[i]}
    }
    one.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(one.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "one"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_One_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "one"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rate Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
}

func (continuous *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous) GetEntityData() *types.CommonEntityData {
    continuous.EntityData.YFilter = continuous.YFilter
    continuous.EntityData.YangName = "continuous"
    continuous.EntityData.BundleName = "cisco_ios_xr"
    continuous.EntityData.ParentYangName = "block-name-lst"
    continuous.EntityData.SegmentPath = "continuous"
    continuous.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    continuous.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    continuous.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    continuous.EntityData.Children = make(map[string]types.YChild)
    continuous.EntityData.Children["rate"] = types.YChild{"Rate", &continuous.Rate}
    continuous.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range continuous.Location {
        continuous.EntityData.Children[types.GetSegmentPath(&continuous.Location[i])] = types.YChild{"Location", &continuous.Location[i]}
    }
    continuous.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(continuous.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber.
    ErrorNumber []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
}

func (rate *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate) GetEntityData() *types.CommonEntityData {
    rate.EntityData.YFilter = rate.YFilter
    rate.EntityData.YangName = "rate"
    rate.EntityData.BundleName = "cisco_ios_xr"
    rate.EntityData.ParentYangName = "continuous"
    rate.EntityData.SegmentPath = "rate"
    rate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rate.EntityData.Children = make(map[string]types.YChild)
    rate.EntityData.Children["error-number"] = types.YChild{"ErrorNumber", nil}
    for i := range rate.ErrorNumber {
        rate.EntityData.Children[types.GetSegmentPath(&rate.ErrorNumber[i])] = types.YChild{"ErrorNumber", &rate.ErrorNumber[i]}
    }
    rate.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rate.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumErrs interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration.
    Duration []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
}

func (errorNumber *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber) GetEntityData() *types.CommonEntityData {
    errorNumber.EntityData.YFilter = errorNumber.YFilter
    errorNumber.EntityData.YangName = "error-number"
    errorNumber.EntityData.BundleName = "cisco_ios_xr"
    errorNumber.EntityData.ParentYangName = "rate"
    errorNumber.EntityData.SegmentPath = "error-number" + "[num-errs='" + fmt.Sprintf("%v", errorNumber.NumErrs) + "']"
    errorNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    errorNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    errorNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    errorNumber.EntityData.Children = make(map[string]types.YChild)
    errorNumber.EntityData.Children["duration"] = types.YChild{"Duration", nil}
    for i := range errorNumber.Duration {
        errorNumber.EntityData.Children[types.GetSegmentPath(&errorNumber.Duration[i])] = types.YChild{"Duration", &errorNumber.Duration[i]}
    }
    errorNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    errorNumber.EntityData.Leafs["num-errs"] = types.YLeaf{"NumErrs", errorNumber.NumErrs}
    return &(errorNumber.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumSeconds interface{}

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
}

func (duration *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration) GetEntityData() *types.CommonEntityData {
    duration.EntityData.YFilter = duration.YFilter
    duration.EntityData.YangName = "duration"
    duration.EntityData.BundleName = "cisco_ios_xr"
    duration.EntityData.ParentYangName = "error-number"
    duration.EntityData.SegmentPath = "duration" + "[num-seconds='" + fmt.Sprintf("%v", duration.NumSeconds) + "']"
    duration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    duration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    duration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    duration.EntityData.Children = make(map[string]types.YChild)
    duration.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range duration.Location {
        duration.EntityData.Children[types.GetSegmentPath(&duration.Location[i])] = types.YChild{"Location", &duration.Location[i]}
    }
    duration.EntityData.Leafs = make(map[string]types.YLeaf)
    duration.EntityData.Leafs["num-seconds"] = types.YLeaf{"NumSeconds", duration.NumSeconds}
    return &(duration.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Rate_ErrorNumber_Duration_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "duration"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Continuous_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "continuous"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location.
    Location []Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
}

func (stop *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop) GetEntityData() *types.CommonEntityData {
    stop.EntityData.YFilter = stop.YFilter
    stop.EntityData.YangName = "stop"
    stop.EntityData.BundleName = "cisco_ios_xr"
    stop.EntityData.ParentYangName = "block-name-lst"
    stop.EntityData.SegmentPath = "stop"
    stop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stop.EntityData.Children = make(map[string]types.YChild)
    stop.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range stop.Location {
        stop.EntityData.Children[types.GetSegmentPath(&stop.Location[i])] = types.YChild{"Location", &stop.Location[i]}
    }
    stop.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stop.EntityData)
}

// Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location
type Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((([fF][0-3])/(([a-zA-Z]){2}\\d{1,2}))|((0?[0-9]|1[1-5])/((([a-zA-Z]){2,3})?\\d{1,2})))(/[cC][pP][uU]0)?'.
    FitLocationName interface{}
}

func (location *Set_Controller_Asic_Instance_FaultInjection_Module_FaultType_Other_BlockNameLst_Stop_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "stop"
    location.EntityData.SegmentPath = "location" + "[fit-location-name='" + fmt.Sprintf("%v", location.FitLocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["fit-location-name"] = types.YLeaf{"FitLocationName", location.FitLocationName}
    return &(location.EntityData)
}

// Controller
type Controller struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_Fabric

    
    SfeOper Controller_SfeOper

    // The type is slice of Controller_Asic.
    Asic []Controller_Asic

    
    Oper Controller_Oper

    
    Zen Controller_Zen

    
    CccDriver Controller_CccDriver

    
    Switch_ Controller_Switch

    
    FabricAction Controller_FabricAction
}

func (controller *Controller) GetEntityData() *types.CommonEntityData {
    controller.EntityData.YFilter = controller.YFilter
    controller.EntityData.YangName = "controller"
    controller.EntityData.BundleName = "cisco_ios_xr"
    controller.EntityData.ParentYangName = "Cisco-IOS-XR-sysadmin-controllers"
    controller.EntityData.SegmentPath = "Cisco-IOS-XR-sysadmin-controllers:controller"
    controller.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controller.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controller.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controller.EntityData.Children = make(map[string]types.YChild)
    controller.EntityData.Children["fabric"] = types.YChild{"Fabric", &controller.Fabric}
    controller.EntityData.Children["sfe_oper"] = types.YChild{"SfeOper", &controller.SfeOper}
    controller.EntityData.Children["asic"] = types.YChild{"Asic", nil}
    for i := range controller.Asic {
        controller.EntityData.Children[types.GetSegmentPath(&controller.Asic[i])] = types.YChild{"Asic", &controller.Asic[i]}
    }
    controller.EntityData.Children["oper"] = types.YChild{"Oper", &controller.Oper}
    controller.EntityData.Children["zen"] = types.YChild{"Zen", &controller.Zen}
    controller.EntityData.Children["ccc_driver"] = types.YChild{"CccDriver", &controller.CccDriver}
    controller.EntityData.Children["switch"] = types.YChild{"Switch_", &controller.Switch_}
    controller.EntityData.Children["fabric_action"] = types.YChild{"FabricAction", &controller.FabricAction}
    controller.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(controller.EntityData)
}

// Controller_Fabric
// Fabric resource commands
type Controller_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric configuration.
    Fabric Controller_Fabric_Fabric_

    
    Oper Controller_Fabric_Oper
}

func (fabric *Controller_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "controller"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = make(map[string]types.YChild)
    fabric.EntityData.Children["fabric"] = types.YChild{"Fabric", &fabric.Fabric}
    fabric.EntityData.Children["oper"] = types.YChild{"Oper", &fabric.Oper}
    fabric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fabric.EntityData)
}

// Controller_Fabric_Fabric_
// Fabric configuration
type Controller_Fabric_Fabric_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Fabric__Fsdbagg

    
    Fgid Controller_Fabric_Fabric__Fgid
}

func (fabric_ *Controller_Fabric_Fabric_) GetEntityData() *types.CommonEntityData {
    fabric_.EntityData.YFilter = fabric_.YFilter
    fabric_.EntityData.YangName = "fabric"
    fabric_.EntityData.BundleName = "cisco_ios_xr"
    fabric_.EntityData.ParentYangName = "fabric"
    fabric_.EntityData.SegmentPath = "fabric"
    fabric_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric_.EntityData.Children = make(map[string]types.YChild)
    fabric_.EntityData.Children["fsdbagg"] = types.YChild{"Fsdbagg", &fabric_.Fsdbagg}
    fabric_.EntityData.Children["fgid"] = types.YChild{"Fgid", &fabric_.Fgid}
    fabric_.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fabric_.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg
type Controller_Fabric_Fabric__Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set state of fabric plane. The type is slice of
    // Controller_Fabric_Fabric__Fsdbagg_Plane.
    Plane []Controller_Fabric_Fabric__Fsdbagg_Plane

    // Link configuration commands.
    Link Controller_Fabric_Fabric__Fsdbagg_Link
}

func (fsdbagg *Controller_Fabric_Fabric__Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fabric"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = make(map[string]types.YChild)
    fsdbagg.EntityData.Children["plane"] = types.YChild{"Plane", nil}
    for i := range fsdbagg.Plane {
        fsdbagg.EntityData.Children[types.GetSegmentPath(&fsdbagg.Plane[i])] = types.YChild{"Plane", &fsdbagg.Plane[i]}
    }
    fsdbagg.EntityData.Children["link"] = types.YChild{"Link", &fsdbagg.Link}
    fsdbagg.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Plane
// Set state of fabric plane
type Controller_Fabric_Fabric__Fsdbagg_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]'.
    PlaneId interface{}

    // Shut down state. The type is interface{}.
    Shutdown interface{}

    // Back to Back plane mode. The type is interface{}.
    B2B interface{}

    // Multi-Chassis S2 configuration. The type is slice of
    // Controller_Fabric_Fabric__Fsdbagg_Plane_Instance.
    Instance []Controller_Fabric_Fabric__Fsdbagg_Plane_Instance

    // Multi-Chassis S2 Folded chassis configuration. The type is slice of
    // Controller_Fabric_Fabric__Fsdbagg_Plane_InstanceFolded.
    InstanceFolded []Controller_Fabric_Fabric__Fsdbagg_Plane_InstanceFolded
}

func (plane *Controller_Fabric_Fabric__Fsdbagg_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg"
    plane.EntityData.SegmentPath = "plane" + "[plane_id='" + fmt.Sprintf("%v", plane.PlaneId) + "']"
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = make(map[string]types.YChild)
    plane.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range plane.Instance {
        plane.EntityData.Children[types.GetSegmentPath(&plane.Instance[i])] = types.YChild{"Instance", &plane.Instance[i]}
    }
    plane.EntityData.Children["instance_folded"] = types.YChild{"InstanceFolded", nil}
    for i := range plane.InstanceFolded {
        plane.EntityData.Children[types.GetSegmentPath(&plane.InstanceFolded[i])] = types.YChild{"InstanceFolded", &plane.InstanceFolded[i]}
    }
    plane.EntityData.Leafs = make(map[string]types.YLeaf)
    plane.EntityData.Leafs["plane_id"] = types.YLeaf{"PlaneId", plane.PlaneId}
    plane.EntityData.Leafs["shutdown"] = types.YLeaf{"Shutdown", plane.Shutdown}
    plane.EntityData.Leafs["b2b"] = types.YLeaf{"B2B", plane.B2B}
    return &(plane.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Plane_Instance
// Multi-Chassis S2 configuration
type Controller_Fabric_Fabric__Fsdbagg_Plane_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..7.
    InstanceId interface{}

    // The type is string with pattern:
    // b'(0?[F|f][0-3])/[F|f][C|c](0?[0-9]|1[0-1])'.
    Location interface{}
}

func (instance *Controller_Fabric_Fabric__Fsdbagg_Plane_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "plane"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["location"] = types.YLeaf{"Location", instance.Location}
    return &(instance.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Plane_InstanceFolded
// Multi-Chassis S2 Folded chassis configuration
type Controller_Fabric_Fabric__Fsdbagg_Plane_InstanceFolded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    InstanceId interface{}

    // The type is string with pattern:
    // b'(0?[F|f][0-3])/[F|f][C|c](0?[0-9]|1[0-1])'.
    Location interface{}
}

func (instanceFolded *Controller_Fabric_Fabric__Fsdbagg_Plane_InstanceFolded) GetEntityData() *types.CommonEntityData {
    instanceFolded.EntityData.YFilter = instanceFolded.YFilter
    instanceFolded.EntityData.YangName = "instance_folded"
    instanceFolded.EntityData.BundleName = "cisco_ios_xr"
    instanceFolded.EntityData.ParentYangName = "plane"
    instanceFolded.EntityData.SegmentPath = "instance_folded" + "[instance-id='" + fmt.Sprintf("%v", instanceFolded.InstanceId) + "']"
    instanceFolded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instanceFolded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instanceFolded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instanceFolded.EntityData.Children = make(map[string]types.YChild)
    instanceFolded.EntityData.Leafs = make(map[string]types.YLeaf)
    instanceFolded.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instanceFolded.InstanceId}
    instanceFolded.EntityData.Leafs["location"] = types.YLeaf{"Location", instanceFolded.Location}
    return &(instanceFolded.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Link
// Link configuration commands
type Controller_Fabric_Fabric__Fsdbagg_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set admin state of a fabric link port.
    Port Controller_Fabric_Fabric__Fsdbagg_Link_Port
}

func (link *Controller_Fabric_Fabric__Fsdbagg_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "fsdbagg"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = make(map[string]types.YChild)
    link.EntityData.Children["port"] = types.YChild{"Port", &link.Port}
    link.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(link.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Link_Port
// Set admin state of a fabric link port
type Controller_Fabric_Fabric__Fsdbagg_Link_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Fabric__Fsdbagg_Link_Port_Location.
    Location []Controller_Fabric_Fabric__Fsdbagg_Link_Port_Location
}

func (port *Controller_Fabric_Fabric__Fsdbagg_Link_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "link"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range port.Location {
        port.EntityData.Children[types.GetSegmentPath(&port.Location[i])] = types.YChild{"Location", &port.Location[i]}
    }
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(port.EntityData)
}

// Controller_Fabric_Fabric__Fsdbagg_Link_Port_Location
type Controller_Fabric_Fabric__Fsdbagg_Link_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0)/([F|f][C|c](0?[0-5]))/(0?[0-5])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0?[0-9]|1[0-5])/(0?[0-9]|1[0-5])/(0?[0-5])/(0?[0-9]|[1-3][0-9]|4[0-7]))'.
    LocStr interface{}

    // Shut down state. The type is interface{}.
    Shutdown interface{}

    // maintenance state. The type is interface{}.
    Maintenance interface{}
}

func (location *Controller_Fabric_Fabric__Fsdbagg_Link_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["shutdown"] = types.YLeaf{"Shutdown", location.Shutdown}
    location.EntityData.Leafs["maintenance"] = types.YLeaf{"Maintenance", location.Maintenance}
    return &(location.EntityData)
}

// Controller_Fabric_Fabric__Fgid
type Controller_Fabric_Fabric__Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Resource Controller_Fabric_Fabric__Fgid_Resource
}

func (fgid *Controller_Fabric_Fabric__Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "fabric"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = make(map[string]types.YChild)
    fgid.EntityData.Children["resource"] = types.YChild{"Resource", &fgid.Resource}
    fgid.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fgid.EntityData)
}

// Controller_Fabric_Fabric__Fgid_Resource
type Controller_Fabric_Fabric__Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Sdr Controller_Fabric_Fabric__Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Fabric__Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = make(map[string]types.YChild)
    resource.EntityData.Children["sdr"] = types.YChild{"Sdr", &resource.Sdr}
    resource.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(resource.EntityData)
}

// Controller_Fabric_Fabric__Fgid_Resource_Sdr
type Controller_Fabric_Fabric__Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Allocation Controller_Fabric_Fabric__Fgid_Resource_Sdr_Allocation
}

func (sdr *Controller_Fabric_Fabric__Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = make(map[string]types.YChild)
    sdr.EntityData.Children["allocation"] = types.YChild{"Allocation", &sdr.Allocation}
    sdr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sdr.EntityData)
}

// Controller_Fabric_Fabric__Fgid_Resource_Sdr_Allocation
type Controller_Fabric_Fabric__Fgid_Resource_Sdr_Allocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 20..50.
    Percent interface{}
}

func (allocation *Controller_Fabric_Fabric__Fgid_Resource_Sdr_Allocation) GetEntityData() *types.CommonEntityData {
    allocation.EntityData.YFilter = allocation.YFilter
    allocation.EntityData.YangName = "allocation"
    allocation.EntityData.BundleName = "cisco_ios_xr"
    allocation.EntityData.ParentYangName = "sdr"
    allocation.EntityData.SegmentPath = "allocation"
    allocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocation.EntityData.Children = make(map[string]types.YChild)
    allocation.EntityData.Leafs = make(map[string]types.YLeaf)
    allocation.EntityData.Leafs["percent"] = types.YLeaf{"Percent", allocation.Percent}
    return &(allocation.EntityData)
}

// Controller_Fabric_Oper
type Controller_Fabric_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Cxp Controller_Fabric_Oper_Cxp

    // FGID management information.
    Fgid Controller_Fabric_Oper_Fgid

    
    FsdbaggActive Controller_Fabric_Oper_FsdbaggActive

    
    FsdbaggLink Controller_Fabric_Oper_FsdbaggLink

    
    FsdbaggSfeAsicType Controller_Fabric_Oper_FsdbaggSfeAsicType

    
    FsdbaggStandby Controller_Fabric_Oper_FsdbaggStandby

    
    FabHealth Controller_Fabric_Oper_FabHealth

    // FSDB Aggregator information.
    FsdbAggregator Controller_Fabric_Oper_FsdbAggregator

    // Fabric link option.
    Link Controller_Fabric_Oper_Link

    // Switch Fabric Element option.
    Sfe Controller_Fabric_Oper_Sfe

    // plane availability status option.
    FsdbPla Controller_Fabric_Oper_FsdbPla

    // FSDB Server information.
    FsdbSrvr Controller_Fabric_Oper_FsdbSrvr
}

func (oper *Controller_Fabric_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "fabric"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = make(map[string]types.YChild)
    oper.EntityData.Children["cxp"] = types.YChild{"Cxp", &oper.Cxp}
    oper.EntityData.Children["fgid"] = types.YChild{"Fgid", &oper.Fgid}
    oper.EntityData.Children["fsdbagg_active"] = types.YChild{"FsdbaggActive", &oper.FsdbaggActive}
    oper.EntityData.Children["fsdbagg_link"] = types.YChild{"FsdbaggLink", &oper.FsdbaggLink}
    oper.EntityData.Children["fsdbagg_sfe_asic_type"] = types.YChild{"FsdbaggSfeAsicType", &oper.FsdbaggSfeAsicType}
    oper.EntityData.Children["fsdbagg_standby"] = types.YChild{"FsdbaggStandby", &oper.FsdbaggStandby}
    oper.EntityData.Children["fab_health"] = types.YChild{"FabHealth", &oper.FabHealth}
    oper.EntityData.Children["fsdb-aggregator"] = types.YChild{"FsdbAggregator", &oper.FsdbAggregator}
    oper.EntityData.Children["link"] = types.YChild{"Link", &oper.Link}
    oper.EntityData.Children["sfe"] = types.YChild{"Sfe", &oper.Sfe}
    oper.EntityData.Children["fsdb_pla"] = types.YChild{"FsdbPla", &oper.FsdbPla}
    oper.EntityData.Children["fsdb_srvr"] = types.YChild{"FsdbSrvr", &oper.FsdbSrvr}
    oper.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oper.EntityData)
}

// Controller_Fabric_Oper_Cxp
type Controller_Fabric_Oper_Cxp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Dom Controller_Fabric_Oper_Cxp_Dom

    
    Summary Controller_Fabric_Oper_Cxp_Summary
}

func (cxp *Controller_Fabric_Oper_Cxp) GetEntityData() *types.CommonEntityData {
    cxp.EntityData.YFilter = cxp.YFilter
    cxp.EntityData.YangName = "cxp"
    cxp.EntityData.BundleName = "cisco_ios_xr"
    cxp.EntityData.ParentYangName = "oper"
    cxp.EntityData.SegmentPath = "cxp"
    cxp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cxp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cxp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cxp.EntityData.Children = make(map[string]types.YChild)
    cxp.EntityData.Children["dom"] = types.YChild{"Dom", &cxp.Dom}
    cxp.EntityData.Children["summary"] = types.YChild{"Summary", &cxp.Summary}
    cxp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cxp.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom
type Controller_Fabric_Oper_Cxp_Dom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Cxp_Dom_Location.
    Location []Controller_Fabric_Oper_Cxp_Dom_Location
}

func (dom *Controller_Fabric_Oper_Cxp_Dom) GetEntityData() *types.CommonEntityData {
    dom.EntityData.YFilter = dom.YFilter
    dom.EntityData.YangName = "dom"
    dom.EntityData.BundleName = "cisco_ios_xr"
    dom.EntityData.ParentYangName = "cxp"
    dom.EntityData.SegmentPath = "dom"
    dom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dom.EntityData.Children = make(map[string]types.YChild)
    dom.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range dom.Location {
        dom.EntityData.Children[types.GetSegmentPath(&dom.Location[i])] = types.YChild{"Location", &dom.Location[i]}
    }
    dom.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dom.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom_Location
type Controller_Fabric_Oper_Cxp_Dom_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Cxp_Dom_Location_Port.
    Port []Controller_Fabric_Oper_Cxp_Dom_Location_Port
}

func (location *Controller_Fabric_Oper_Cxp_Dom_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "dom"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port"] = types.YChild{"Port", nil}
    for i := range location.Port {
        location.EntityData.Children[types.GetSegmentPath(&location.Port[i])] = types.YChild{"Port", &location.Port[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_Cxp_Dom_Location_Port
type Controller_Fabric_Oper_Cxp_Dom_Location_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..31.
    CxpPort interface{}

    // The type is bool.
    ShowPort interface{}

    // The type is bool.
    Cxp2Display interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is string.
    CurLocStr interface{}

    // The type is string.
    Vendorname interface{}

    // The type is string.
    Partnumber interface{}

    // The type is string.
    Serialnumber interface{}

    // The type is string.
    Vid interface{}

    // The type is string.
    Pid interface{}

    // The type is interface{} with range: 0..4294967295.
    VendorRevNum interface{}

    // The type is string.
    VendorPn interface{}

    // The type is string.
    VendorSn interface{}

    // The type is string.
    DevDescription interface{}

    // The type is string.
    CleiCodeNum interface{}

    // The type is string.
    VenDateCode interface{}

    // The type is string.
    VenLotCode interface{}

    // The type is interface{} with range: 0..4294967295.
    VendorOuiIeeeCompanyId interface{}

    // The type is interface{} with range: 0..4294967295.
    EepromRevNum interface{}

    // The type is interface{} with range: 0..4294967295.
    FirmwareRevNum interface{}

    // The type is string.
    TxTempRd interface{}

    // The type is string.
    TxTempSts interface{}

    // The type is string.
    TxVoltSts interface{}

    // The type is string.
    TxVoltRd interface{}

    // The type is string.
    TxChnSts0 interface{}

    // The type is string.
    TxChnSts1 interface{}

    // The type is string.
    TxChnSts2 interface{}

    // The type is string.
    TxChnSts3 interface{}

    // The type is string.
    TxChnSts4 interface{}

    // The type is string.
    TxChnSts5 interface{}

    // The type is string.
    TxChnSts6 interface{}

    // The type is string.
    TxChnSts7 interface{}

    // The type is string.
    TxChnSts8 interface{}

    // The type is string.
    TxChnSts9 interface{}

    // The type is string.
    TxChnSts10 interface{}

    // The type is string.
    TxChnSts11 interface{}

    // The type is string.
    TxFault0 interface{}

    // The type is string.
    TxFault1 interface{}

    // The type is string.
    TxFault2 interface{}

    // The type is string.
    TxFault3 interface{}

    // The type is string.
    TxFault4 interface{}

    // The type is string.
    TxFault5 interface{}

    // The type is string.
    TxFault6 interface{}

    // The type is string.
    TxFault7 interface{}

    // The type is string.
    TxFault8 interface{}

    // The type is string.
    TxFault9 interface{}

    // The type is string.
    TxFault10 interface{}

    // The type is string.
    TxFault11 interface{}

    // The type is string.
    TxBiasCur0 interface{}

    // The type is string.
    TxBiasCur1 interface{}

    // The type is string.
    TxBiasCur2 interface{}

    // The type is string.
    TxBiasCur3 interface{}

    // The type is string.
    TxBiasCur4 interface{}

    // The type is string.
    TxBiasCur5 interface{}

    // The type is string.
    TxBiasCur6 interface{}

    // The type is string.
    TxBiasCur7 interface{}

    // The type is string.
    TxBiasCur8 interface{}

    // The type is string.
    TxBiasCur9 interface{}

    // The type is string.
    TxBiasCur10 interface{}

    // The type is string.
    TxBiasCur11 interface{}

    // The type is string.
    TxLos0 interface{}

    // The type is string.
    TxLos1 interface{}

    // The type is string.
    TxLos2 interface{}

    // The type is string.
    TxLos3 interface{}

    // The type is string.
    TxLos4 interface{}

    // The type is string.
    TxLos5 interface{}

    // The type is string.
    TxLos6 interface{}

    // The type is string.
    TxLos7 interface{}

    // The type is string.
    TxLos8 interface{}

    // The type is string.
    TxLos9 interface{}

    // The type is string.
    TxLos10 interface{}

    // The type is string.
    TxLos11 interface{}

    // The type is string.
    TxOptPwAlm0 interface{}

    // The type is string.
    TxOptPwAlm1 interface{}

    // The type is string.
    TxOptPwAlm2 interface{}

    // The type is string.
    TxOptPwAlm3 interface{}

    // The type is string.
    TxOptPwAlm4 interface{}

    // The type is string.
    TxOptPwAlm5 interface{}

    // The type is string.
    TxOptPwAlm6 interface{}

    // The type is string.
    TxOptPwAlm7 interface{}

    // The type is string.
    TxOptPwAlm8 interface{}

    // The type is string.
    TxOptPwAlm9 interface{}

    // The type is string.
    TxOptPwAlm10 interface{}

    // The type is string.
    TxOptPwAlm11 interface{}

    // The type is string.
    TxOptBsAlm0 interface{}

    // The type is string.
    TxOptBsAlm1 interface{}

    // The type is string.
    TxOptBsAlm2 interface{}

    // The type is string.
    TxOptBsAlm3 interface{}

    // The type is string.
    TxOptBsAlm4 interface{}

    // The type is string.
    TxOptBsAlm5 interface{}

    // The type is string.
    TxOptBsAlm6 interface{}

    // The type is string.
    TxOptBsAlm7 interface{}

    // The type is string.
    TxOptBsAlm8 interface{}

    // The type is string.
    TxOptBsAlm9 interface{}

    // The type is string.
    TxOptBsAlm10 interface{}

    // The type is string.
    TxOptBsAlm11 interface{}

    // The type is string.
    TxLightOpDbm0 interface{}

    // The type is string.
    TxLightOpDbm1 interface{}

    // The type is string.
    TxLightOpDbm2 interface{}

    // The type is string.
    TxLightOpDbm3 interface{}

    // The type is string.
    TxLightOpDbm4 interface{}

    // The type is string.
    TxLightOpDbm5 interface{}

    // The type is string.
    TxLightOpDbm6 interface{}

    // The type is string.
    TxLightOpDbm7 interface{}

    // The type is string.
    TxLightOpDbm8 interface{}

    // The type is string.
    TxLightOpDbm9 interface{}

    // The type is string.
    TxLightOpDbm10 interface{}

    // The type is string.
    TxLightOpDbm11 interface{}

    // The type is string.
    RxTempRd interface{}

    // The type is string.
    RxTempSts interface{}

    // The type is string.
    RxVoltSts interface{}

    // The type is string.
    RxVoltRd interface{}

    // The type is string.
    RxChnSts0 interface{}

    // The type is string.
    RxChnSts1 interface{}

    // The type is string.
    RxChnSts2 interface{}

    // The type is string.
    RxChnSts3 interface{}

    // The type is string.
    RxChnSts4 interface{}

    // The type is string.
    RxChnSts5 interface{}

    // The type is string.
    RxChnSts6 interface{}

    // The type is string.
    RxChnSts7 interface{}

    // The type is string.
    RxChnSts8 interface{}

    // The type is string.
    RxChnSts9 interface{}

    // The type is string.
    RxChnSts10 interface{}

    // The type is string.
    RxChnSts11 interface{}

    // The type is string.
    RxLos0 interface{}

    // The type is string.
    RxLos1 interface{}

    // The type is string.
    RxLos2 interface{}

    // The type is string.
    RxLos3 interface{}

    // The type is string.
    RxLos4 interface{}

    // The type is string.
    RxLos5 interface{}

    // The type is string.
    RxLos6 interface{}

    // The type is string.
    RxLos7 interface{}

    // The type is string.
    RxLos8 interface{}

    // The type is string.
    RxLos9 interface{}

    // The type is string.
    RxLos10 interface{}

    // The type is string.
    RxLos11 interface{}

    // The type is string.
    RxOptPwAlm0 interface{}

    // The type is string.
    RxOptPwAlm1 interface{}

    // The type is string.
    RxOptPwAlm2 interface{}

    // The type is string.
    RxOptPwAlm3 interface{}

    // The type is string.
    RxOptPwAlm4 interface{}

    // The type is string.
    RxOptPwAlm5 interface{}

    // The type is string.
    RxOptPwAlm6 interface{}

    // The type is string.
    RxOptPwAlm7 interface{}

    // The type is string.
    RxOptPwAlm8 interface{}

    // The type is string.
    RxOptPwAlm9 interface{}

    // The type is string.
    RxOptPwAlm10 interface{}

    // The type is string.
    RxOptPwAlm11 interface{}

    // The type is string.
    RxLightInDbm0 interface{}

    // The type is string.
    RxLightInDbm1 interface{}

    // The type is string.
    RxLightInDbm2 interface{}

    // The type is string.
    RxLightInDbm3 interface{}

    // The type is string.
    RxLightInDbm4 interface{}

    // The type is string.
    RxLightInDbm5 interface{}

    // The type is string.
    RxLightInDbm6 interface{}

    // The type is string.
    RxLightInDbm7 interface{}

    // The type is string.
    RxLightInDbm8 interface{}

    // The type is string.
    RxLightInDbm9 interface{}

    // The type is string.
    RxLightInDbm10 interface{}

    // The type is string.
    RxLightInDbm11 interface{}
}

func (port *Controller_Fabric_Oper_Cxp_Dom_Location_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "location"
    port.EntityData.SegmentPath = "port" + "[cxp_port='" + fmt.Sprintf("%v", port.CxpPort) + "']"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["cxp_port"] = types.YLeaf{"CxpPort", port.CxpPort}
    port.EntityData.Leafs["show_port"] = types.YLeaf{"ShowPort", port.ShowPort}
    port.EntityData.Leafs["cxp2_display"] = types.YLeaf{"Cxp2Display", port.Cxp2Display}
    port.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", port.RackNum}
    port.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", port.SlotNum}
    port.EntityData.Leafs["cur_loc_str"] = types.YLeaf{"CurLocStr", port.CurLocStr}
    port.EntityData.Leafs["vendorname"] = types.YLeaf{"Vendorname", port.Vendorname}
    port.EntityData.Leafs["partnumber"] = types.YLeaf{"Partnumber", port.Partnumber}
    port.EntityData.Leafs["serialnumber"] = types.YLeaf{"Serialnumber", port.Serialnumber}
    port.EntityData.Leafs["vid"] = types.YLeaf{"Vid", port.Vid}
    port.EntityData.Leafs["pid"] = types.YLeaf{"Pid", port.Pid}
    port.EntityData.Leafs["vendor_rev_num"] = types.YLeaf{"VendorRevNum", port.VendorRevNum}
    port.EntityData.Leafs["vendor_pn"] = types.YLeaf{"VendorPn", port.VendorPn}
    port.EntityData.Leafs["vendor_sn"] = types.YLeaf{"VendorSn", port.VendorSn}
    port.EntityData.Leafs["dev_description"] = types.YLeaf{"DevDescription", port.DevDescription}
    port.EntityData.Leafs["clei_code_num"] = types.YLeaf{"CleiCodeNum", port.CleiCodeNum}
    port.EntityData.Leafs["ven_date_code"] = types.YLeaf{"VenDateCode", port.VenDateCode}
    port.EntityData.Leafs["ven_lot_code"] = types.YLeaf{"VenLotCode", port.VenLotCode}
    port.EntityData.Leafs["vendor_oui_ieee_company_id"] = types.YLeaf{"VendorOuiIeeeCompanyId", port.VendorOuiIeeeCompanyId}
    port.EntityData.Leafs["eeprom_rev_num"] = types.YLeaf{"EepromRevNum", port.EepromRevNum}
    port.EntityData.Leafs["firmware_rev_num"] = types.YLeaf{"FirmwareRevNum", port.FirmwareRevNum}
    port.EntityData.Leafs["TX_temp_rd"] = types.YLeaf{"TxTempRd", port.TxTempRd}
    port.EntityData.Leafs["TX_temp_sts"] = types.YLeaf{"TxTempSts", port.TxTempSts}
    port.EntityData.Leafs["TX_volt_sts"] = types.YLeaf{"TxVoltSts", port.TxVoltSts}
    port.EntityData.Leafs["TX_volt_rd"] = types.YLeaf{"TxVoltRd", port.TxVoltRd}
    port.EntityData.Leafs["tx_chn_sts0"] = types.YLeaf{"TxChnSts0", port.TxChnSts0}
    port.EntityData.Leafs["tx_chn_sts1"] = types.YLeaf{"TxChnSts1", port.TxChnSts1}
    port.EntityData.Leafs["tx_chn_sts2"] = types.YLeaf{"TxChnSts2", port.TxChnSts2}
    port.EntityData.Leafs["tx_chn_sts3"] = types.YLeaf{"TxChnSts3", port.TxChnSts3}
    port.EntityData.Leafs["tx_chn_sts4"] = types.YLeaf{"TxChnSts4", port.TxChnSts4}
    port.EntityData.Leafs["tx_chn_sts5"] = types.YLeaf{"TxChnSts5", port.TxChnSts5}
    port.EntityData.Leafs["tx_chn_sts6"] = types.YLeaf{"TxChnSts6", port.TxChnSts6}
    port.EntityData.Leafs["tx_chn_sts7"] = types.YLeaf{"TxChnSts7", port.TxChnSts7}
    port.EntityData.Leafs["tx_chn_sts8"] = types.YLeaf{"TxChnSts8", port.TxChnSts8}
    port.EntityData.Leafs["tx_chn_sts9"] = types.YLeaf{"TxChnSts9", port.TxChnSts9}
    port.EntityData.Leafs["tx_chn_sts10"] = types.YLeaf{"TxChnSts10", port.TxChnSts10}
    port.EntityData.Leafs["tx_chn_sts11"] = types.YLeaf{"TxChnSts11", port.TxChnSts11}
    port.EntityData.Leafs["tx_fault0"] = types.YLeaf{"TxFault0", port.TxFault0}
    port.EntityData.Leafs["tx_fault1"] = types.YLeaf{"TxFault1", port.TxFault1}
    port.EntityData.Leafs["tx_fault2"] = types.YLeaf{"TxFault2", port.TxFault2}
    port.EntityData.Leafs["tx_fault3"] = types.YLeaf{"TxFault3", port.TxFault3}
    port.EntityData.Leafs["tx_fault4"] = types.YLeaf{"TxFault4", port.TxFault4}
    port.EntityData.Leafs["tx_fault5"] = types.YLeaf{"TxFault5", port.TxFault5}
    port.EntityData.Leafs["tx_fault6"] = types.YLeaf{"TxFault6", port.TxFault6}
    port.EntityData.Leafs["tx_fault7"] = types.YLeaf{"TxFault7", port.TxFault7}
    port.EntityData.Leafs["tx_fault8"] = types.YLeaf{"TxFault8", port.TxFault8}
    port.EntityData.Leafs["tx_fault9"] = types.YLeaf{"TxFault9", port.TxFault9}
    port.EntityData.Leafs["tx_fault10"] = types.YLeaf{"TxFault10", port.TxFault10}
    port.EntityData.Leafs["tx_fault11"] = types.YLeaf{"TxFault11", port.TxFault11}
    port.EntityData.Leafs["tx_bias_cur0"] = types.YLeaf{"TxBiasCur0", port.TxBiasCur0}
    port.EntityData.Leafs["tx_bias_cur1"] = types.YLeaf{"TxBiasCur1", port.TxBiasCur1}
    port.EntityData.Leafs["tx_bias_cur2"] = types.YLeaf{"TxBiasCur2", port.TxBiasCur2}
    port.EntityData.Leafs["tx_bias_cur3"] = types.YLeaf{"TxBiasCur3", port.TxBiasCur3}
    port.EntityData.Leafs["tx_bias_cur4"] = types.YLeaf{"TxBiasCur4", port.TxBiasCur4}
    port.EntityData.Leafs["tx_bias_cur5"] = types.YLeaf{"TxBiasCur5", port.TxBiasCur5}
    port.EntityData.Leafs["tx_bias_cur6"] = types.YLeaf{"TxBiasCur6", port.TxBiasCur6}
    port.EntityData.Leafs["tx_bias_cur7"] = types.YLeaf{"TxBiasCur7", port.TxBiasCur7}
    port.EntityData.Leafs["tx_bias_cur8"] = types.YLeaf{"TxBiasCur8", port.TxBiasCur8}
    port.EntityData.Leafs["tx_bias_cur9"] = types.YLeaf{"TxBiasCur9", port.TxBiasCur9}
    port.EntityData.Leafs["tx_bias_cur10"] = types.YLeaf{"TxBiasCur10", port.TxBiasCur10}
    port.EntityData.Leafs["tx_bias_cur11"] = types.YLeaf{"TxBiasCur11", port.TxBiasCur11}
    port.EntityData.Leafs["tx_los0"] = types.YLeaf{"TxLos0", port.TxLos0}
    port.EntityData.Leafs["tx_los1"] = types.YLeaf{"TxLos1", port.TxLos1}
    port.EntityData.Leafs["tx_los2"] = types.YLeaf{"TxLos2", port.TxLos2}
    port.EntityData.Leafs["tx_los3"] = types.YLeaf{"TxLos3", port.TxLos3}
    port.EntityData.Leafs["tx_los4"] = types.YLeaf{"TxLos4", port.TxLos4}
    port.EntityData.Leafs["tx_los5"] = types.YLeaf{"TxLos5", port.TxLos5}
    port.EntityData.Leafs["tx_los6"] = types.YLeaf{"TxLos6", port.TxLos6}
    port.EntityData.Leafs["tx_los7"] = types.YLeaf{"TxLos7", port.TxLos7}
    port.EntityData.Leafs["tx_los8"] = types.YLeaf{"TxLos8", port.TxLos8}
    port.EntityData.Leafs["tx_los9"] = types.YLeaf{"TxLos9", port.TxLos9}
    port.EntityData.Leafs["tx_los10"] = types.YLeaf{"TxLos10", port.TxLos10}
    port.EntityData.Leafs["tx_los11"] = types.YLeaf{"TxLos11", port.TxLos11}
    port.EntityData.Leafs["tx_opt_pw_alm0"] = types.YLeaf{"TxOptPwAlm0", port.TxOptPwAlm0}
    port.EntityData.Leafs["tx_opt_pw_alm1"] = types.YLeaf{"TxOptPwAlm1", port.TxOptPwAlm1}
    port.EntityData.Leafs["tx_opt_pw_alm2"] = types.YLeaf{"TxOptPwAlm2", port.TxOptPwAlm2}
    port.EntityData.Leafs["tx_opt_pw_alm3"] = types.YLeaf{"TxOptPwAlm3", port.TxOptPwAlm3}
    port.EntityData.Leafs["tx_opt_pw_alm4"] = types.YLeaf{"TxOptPwAlm4", port.TxOptPwAlm4}
    port.EntityData.Leafs["tx_opt_pw_alm5"] = types.YLeaf{"TxOptPwAlm5", port.TxOptPwAlm5}
    port.EntityData.Leafs["tx_opt_pw_alm6"] = types.YLeaf{"TxOptPwAlm6", port.TxOptPwAlm6}
    port.EntityData.Leafs["tx_opt_pw_alm7"] = types.YLeaf{"TxOptPwAlm7", port.TxOptPwAlm7}
    port.EntityData.Leafs["tx_opt_pw_alm8"] = types.YLeaf{"TxOptPwAlm8", port.TxOptPwAlm8}
    port.EntityData.Leafs["tx_opt_pw_alm9"] = types.YLeaf{"TxOptPwAlm9", port.TxOptPwAlm9}
    port.EntityData.Leafs["tx_opt_pw_alm10"] = types.YLeaf{"TxOptPwAlm10", port.TxOptPwAlm10}
    port.EntityData.Leafs["tx_opt_pw_alm11"] = types.YLeaf{"TxOptPwAlm11", port.TxOptPwAlm11}
    port.EntityData.Leafs["tx_opt_bs_alm0"] = types.YLeaf{"TxOptBsAlm0", port.TxOptBsAlm0}
    port.EntityData.Leafs["tx_opt_bs_alm1"] = types.YLeaf{"TxOptBsAlm1", port.TxOptBsAlm1}
    port.EntityData.Leafs["tx_opt_bs_alm2"] = types.YLeaf{"TxOptBsAlm2", port.TxOptBsAlm2}
    port.EntityData.Leafs["tx_opt_bs_alm3"] = types.YLeaf{"TxOptBsAlm3", port.TxOptBsAlm3}
    port.EntityData.Leafs["tx_opt_bs_alm4"] = types.YLeaf{"TxOptBsAlm4", port.TxOptBsAlm4}
    port.EntityData.Leafs["tx_opt_bs_alm5"] = types.YLeaf{"TxOptBsAlm5", port.TxOptBsAlm5}
    port.EntityData.Leafs["tx_opt_bs_alm6"] = types.YLeaf{"TxOptBsAlm6", port.TxOptBsAlm6}
    port.EntityData.Leafs["tx_opt_bs_alm7"] = types.YLeaf{"TxOptBsAlm7", port.TxOptBsAlm7}
    port.EntityData.Leafs["tx_opt_bs_alm8"] = types.YLeaf{"TxOptBsAlm8", port.TxOptBsAlm8}
    port.EntityData.Leafs["tx_opt_bs_alm9"] = types.YLeaf{"TxOptBsAlm9", port.TxOptBsAlm9}
    port.EntityData.Leafs["tx_opt_bs_alm10"] = types.YLeaf{"TxOptBsAlm10", port.TxOptBsAlm10}
    port.EntityData.Leafs["tx_opt_bs_alm11"] = types.YLeaf{"TxOptBsAlm11", port.TxOptBsAlm11}
    port.EntityData.Leafs["tx_light_op_dBm0"] = types.YLeaf{"TxLightOpDbm0", port.TxLightOpDbm0}
    port.EntityData.Leafs["tx_light_op_dBm1"] = types.YLeaf{"TxLightOpDbm1", port.TxLightOpDbm1}
    port.EntityData.Leafs["tx_light_op_dBm2"] = types.YLeaf{"TxLightOpDbm2", port.TxLightOpDbm2}
    port.EntityData.Leafs["tx_light_op_dBm3"] = types.YLeaf{"TxLightOpDbm3", port.TxLightOpDbm3}
    port.EntityData.Leafs["tx_light_op_dBm4"] = types.YLeaf{"TxLightOpDbm4", port.TxLightOpDbm4}
    port.EntityData.Leafs["tx_light_op_dBm5"] = types.YLeaf{"TxLightOpDbm5", port.TxLightOpDbm5}
    port.EntityData.Leafs["tx_light_op_dBm6"] = types.YLeaf{"TxLightOpDbm6", port.TxLightOpDbm6}
    port.EntityData.Leafs["tx_light_op_dBm7"] = types.YLeaf{"TxLightOpDbm7", port.TxLightOpDbm7}
    port.EntityData.Leafs["tx_light_op_dBm8"] = types.YLeaf{"TxLightOpDbm8", port.TxLightOpDbm8}
    port.EntityData.Leafs["tx_light_op_dBm9"] = types.YLeaf{"TxLightOpDbm9", port.TxLightOpDbm9}
    port.EntityData.Leafs["tx_light_op_dBm10"] = types.YLeaf{"TxLightOpDbm10", port.TxLightOpDbm10}
    port.EntityData.Leafs["tx_light_op_dBm11"] = types.YLeaf{"TxLightOpDbm11", port.TxLightOpDbm11}
    port.EntityData.Leafs["RX_temp_rd"] = types.YLeaf{"RxTempRd", port.RxTempRd}
    port.EntityData.Leafs["RX_temp_sts"] = types.YLeaf{"RxTempSts", port.RxTempSts}
    port.EntityData.Leafs["RX_volt_sts"] = types.YLeaf{"RxVoltSts", port.RxVoltSts}
    port.EntityData.Leafs["RX_volt_rd"] = types.YLeaf{"RxVoltRd", port.RxVoltRd}
    port.EntityData.Leafs["rx_chn_sts0"] = types.YLeaf{"RxChnSts0", port.RxChnSts0}
    port.EntityData.Leafs["rx_chn_sts1"] = types.YLeaf{"RxChnSts1", port.RxChnSts1}
    port.EntityData.Leafs["rx_chn_sts2"] = types.YLeaf{"RxChnSts2", port.RxChnSts2}
    port.EntityData.Leafs["rx_chn_sts3"] = types.YLeaf{"RxChnSts3", port.RxChnSts3}
    port.EntityData.Leafs["rx_chn_sts4"] = types.YLeaf{"RxChnSts4", port.RxChnSts4}
    port.EntityData.Leafs["rx_chn_sts5"] = types.YLeaf{"RxChnSts5", port.RxChnSts5}
    port.EntityData.Leafs["rx_chn_sts6"] = types.YLeaf{"RxChnSts6", port.RxChnSts6}
    port.EntityData.Leafs["rx_chn_sts7"] = types.YLeaf{"RxChnSts7", port.RxChnSts7}
    port.EntityData.Leafs["rx_chn_sts8"] = types.YLeaf{"RxChnSts8", port.RxChnSts8}
    port.EntityData.Leafs["rx_chn_sts9"] = types.YLeaf{"RxChnSts9", port.RxChnSts9}
    port.EntityData.Leafs["rx_chn_sts10"] = types.YLeaf{"RxChnSts10", port.RxChnSts10}
    port.EntityData.Leafs["rx_chn_sts11"] = types.YLeaf{"RxChnSts11", port.RxChnSts11}
    port.EntityData.Leafs["rx_los0"] = types.YLeaf{"RxLos0", port.RxLos0}
    port.EntityData.Leafs["rx_los1"] = types.YLeaf{"RxLos1", port.RxLos1}
    port.EntityData.Leafs["rx_los2"] = types.YLeaf{"RxLos2", port.RxLos2}
    port.EntityData.Leafs["rx_los3"] = types.YLeaf{"RxLos3", port.RxLos3}
    port.EntityData.Leafs["rx_los4"] = types.YLeaf{"RxLos4", port.RxLos4}
    port.EntityData.Leafs["rx_los5"] = types.YLeaf{"RxLos5", port.RxLos5}
    port.EntityData.Leafs["rx_los6"] = types.YLeaf{"RxLos6", port.RxLos6}
    port.EntityData.Leafs["rx_los7"] = types.YLeaf{"RxLos7", port.RxLos7}
    port.EntityData.Leafs["rx_los8"] = types.YLeaf{"RxLos8", port.RxLos8}
    port.EntityData.Leafs["rx_los9"] = types.YLeaf{"RxLos9", port.RxLos9}
    port.EntityData.Leafs["rx_los10"] = types.YLeaf{"RxLos10", port.RxLos10}
    port.EntityData.Leafs["rx_los11"] = types.YLeaf{"RxLos11", port.RxLos11}
    port.EntityData.Leafs["rx_opt_pw_alm0"] = types.YLeaf{"RxOptPwAlm0", port.RxOptPwAlm0}
    port.EntityData.Leafs["rx_opt_pw_alm1"] = types.YLeaf{"RxOptPwAlm1", port.RxOptPwAlm1}
    port.EntityData.Leafs["rx_opt_pw_alm2"] = types.YLeaf{"RxOptPwAlm2", port.RxOptPwAlm2}
    port.EntityData.Leafs["rx_opt_pw_alm3"] = types.YLeaf{"RxOptPwAlm3", port.RxOptPwAlm3}
    port.EntityData.Leafs["rx_opt_pw_alm4"] = types.YLeaf{"RxOptPwAlm4", port.RxOptPwAlm4}
    port.EntityData.Leafs["rx_opt_pw_alm5"] = types.YLeaf{"RxOptPwAlm5", port.RxOptPwAlm5}
    port.EntityData.Leafs["rx_opt_pw_alm6"] = types.YLeaf{"RxOptPwAlm6", port.RxOptPwAlm6}
    port.EntityData.Leafs["rx_opt_pw_alm7"] = types.YLeaf{"RxOptPwAlm7", port.RxOptPwAlm7}
    port.EntityData.Leafs["rx_opt_pw_alm8"] = types.YLeaf{"RxOptPwAlm8", port.RxOptPwAlm8}
    port.EntityData.Leafs["rx_opt_pw_alm9"] = types.YLeaf{"RxOptPwAlm9", port.RxOptPwAlm9}
    port.EntityData.Leafs["rx_opt_pw_alm10"] = types.YLeaf{"RxOptPwAlm10", port.RxOptPwAlm10}
    port.EntityData.Leafs["rx_opt_pw_alm11"] = types.YLeaf{"RxOptPwAlm11", port.RxOptPwAlm11}
    port.EntityData.Leafs["rx_light_in_dBm0"] = types.YLeaf{"RxLightInDbm0", port.RxLightInDbm0}
    port.EntityData.Leafs["rx_light_in_dBm1"] = types.YLeaf{"RxLightInDbm1", port.RxLightInDbm1}
    port.EntityData.Leafs["rx_light_in_dBm2"] = types.YLeaf{"RxLightInDbm2", port.RxLightInDbm2}
    port.EntityData.Leafs["rx_light_in_dBm3"] = types.YLeaf{"RxLightInDbm3", port.RxLightInDbm3}
    port.EntityData.Leafs["rx_light_in_dBm4"] = types.YLeaf{"RxLightInDbm4", port.RxLightInDbm4}
    port.EntityData.Leafs["rx_light_in_dBm5"] = types.YLeaf{"RxLightInDbm5", port.RxLightInDbm5}
    port.EntityData.Leafs["rx_light_in_dBm6"] = types.YLeaf{"RxLightInDbm6", port.RxLightInDbm6}
    port.EntityData.Leafs["rx_light_in_dBm7"] = types.YLeaf{"RxLightInDbm7", port.RxLightInDbm7}
    port.EntityData.Leafs["rx_light_in_dBm8"] = types.YLeaf{"RxLightInDbm8", port.RxLightInDbm8}
    port.EntityData.Leafs["rx_light_in_dBm9"] = types.YLeaf{"RxLightInDbm9", port.RxLightInDbm9}
    port.EntityData.Leafs["rx_light_in_dBm10"] = types.YLeaf{"RxLightInDbm10", port.RxLightInDbm10}
    port.EntityData.Leafs["rx_light_in_dBm11"] = types.YLeaf{"RxLightInDbm11", port.RxLightInDbm11}
    return &(port.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary
type Controller_Fabric_Oper_Cxp_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Cxp_Summary_Rack.
    Rack []Controller_Fabric_Oper_Cxp_Summary_Rack
}

func (summary *Controller_Fabric_Oper_Cxp_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "cxp"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range summary.Rack {
        summary.EntityData.Children[types.GetSegmentPath(&summary.Rack[i])] = types.YChild{"Rack", &summary.Rack[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack
type Controller_Fabric_Oper_Cxp_Summary_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    RackStr interface{}

    // The type is string. The default value is Rack No..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag.
    SplitTblFlag []Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag
}

func (rack *Controller_Fabric_Oper_Cxp_Summary_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "summary"
    rack.EntityData.SegmentPath = "rack" + "[rack_str='" + fmt.Sprintf("%v", rack.RackStr) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["split_tbl_flag"] = types.YChild{"SplitTblFlag", nil}
    for i := range rack.SplitTblFlag {
        rack.EntityData.Children[types.GetSegmentPath(&rack.SplitTblFlag[i])] = types.YChild{"SplitTblFlag", &rack.SplitTblFlag[i]}
    }
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_str"] = types.YLeaf{"RackStr", rack.RackStr}
    rack.EntityData.Leafs["description"] = types.YLeaf{"Description", rack.Description}
    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag
type Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    TblSplt interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot.
    SmryPerSlot []Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot
}

func (splitTblFlag *Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag) GetEntityData() *types.CommonEntityData {
    splitTblFlag.EntityData.YFilter = splitTblFlag.YFilter
    splitTblFlag.EntityData.YangName = "split_tbl_flag"
    splitTblFlag.EntityData.BundleName = "cisco_ios_xr"
    splitTblFlag.EntityData.ParentYangName = "rack"
    splitTblFlag.EntityData.SegmentPath = "split_tbl_flag" + "[tbl_splt='" + fmt.Sprintf("%v", splitTblFlag.TblSplt) + "']"
    splitTblFlag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    splitTblFlag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    splitTblFlag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    splitTblFlag.EntityData.Children = make(map[string]types.YChild)
    splitTblFlag.EntityData.Children["smry_per_slot"] = types.YChild{"SmryPerSlot", nil}
    for i := range splitTblFlag.SmryPerSlot {
        splitTblFlag.EntityData.Children[types.GetSegmentPath(&splitTblFlag.SmryPerSlot[i])] = types.YChild{"SmryPerSlot", &splitTblFlag.SmryPerSlot[i]}
    }
    splitTblFlag.EntityData.Leafs = make(map[string]types.YLeaf)
    splitTblFlag.EntityData.Leafs["tbl_splt"] = types.YLeaf{"TblSplt", splitTblFlag.TblSplt}
    return &(splitTblFlag.EntityData)
}

// Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot
type Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    SlotNo interface{}

    // The type is string.
    FuncRackName interface{}

    // The type is interface{} with range: 0..4294967295.
    MaxCxp interface{}

    // The type is bool. The default value is false.
    RowCxp1 interface{}

    // The type is bool. The default value is false.
    RowCxp2 interface{}

    // The type is bool. The default value is false.
    SlotRow interface{}

    // The type is bool.
    TblSpltFlag interface{}

    // The type is interface{} with range: 0..4294967295.
    CxpPortNo interface{}

    // The type is string.
    FcLocStr interface{}

    // The type is string.
    CxpSts0 interface{}

    // The type is string.
    CxpSts1 interface{}

    // The type is string.
    CxpSts2 interface{}

    // The type is string.
    CxpSts3 interface{}

    // The type is string.
    CxpSts4 interface{}

    // The type is string.
    CxpSts5 interface{}

    // The type is string.
    CxpSts6 interface{}

    // The type is string.
    CxpSts7 interface{}

    // The type is string.
    CxpSts8 interface{}

    // The type is string.
    CxpSts9 interface{}

    // The type is string.
    CxpSts10 interface{}

    // The type is string.
    CxpSts11 interface{}

    // The type is string.
    CxpSts12 interface{}

    // The type is string.
    CxpSts13 interface{}

    // The type is string.
    CxpSts14 interface{}

    // The type is string.
    CxpSts15 interface{}
}

func (smryPerSlot *Controller_Fabric_Oper_Cxp_Summary_Rack_SplitTblFlag_SmryPerSlot) GetEntityData() *types.CommonEntityData {
    smryPerSlot.EntityData.YFilter = smryPerSlot.YFilter
    smryPerSlot.EntityData.YangName = "smry_per_slot"
    smryPerSlot.EntityData.BundleName = "cisco_ios_xr"
    smryPerSlot.EntityData.ParentYangName = "split_tbl_flag"
    smryPerSlot.EntityData.SegmentPath = "smry_per_slot" + "[slot_no='" + fmt.Sprintf("%v", smryPerSlot.SlotNo) + "']"
    smryPerSlot.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    smryPerSlot.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    smryPerSlot.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    smryPerSlot.EntityData.Children = make(map[string]types.YChild)
    smryPerSlot.EntityData.Leafs = make(map[string]types.YLeaf)
    smryPerSlot.EntityData.Leafs["slot_no"] = types.YLeaf{"SlotNo", smryPerSlot.SlotNo}
    smryPerSlot.EntityData.Leafs["func_rack_name"] = types.YLeaf{"FuncRackName", smryPerSlot.FuncRackName}
    smryPerSlot.EntityData.Leafs["max_cxp"] = types.YLeaf{"MaxCxp", smryPerSlot.MaxCxp}
    smryPerSlot.EntityData.Leafs["row_cxp_1"] = types.YLeaf{"RowCxp1", smryPerSlot.RowCxp1}
    smryPerSlot.EntityData.Leafs["row_cxp_2"] = types.YLeaf{"RowCxp2", smryPerSlot.RowCxp2}
    smryPerSlot.EntityData.Leafs["slot_row"] = types.YLeaf{"SlotRow", smryPerSlot.SlotRow}
    smryPerSlot.EntityData.Leafs["tbl_splt_flag"] = types.YLeaf{"TblSpltFlag", smryPerSlot.TblSpltFlag}
    smryPerSlot.EntityData.Leafs["cxp_port_no"] = types.YLeaf{"CxpPortNo", smryPerSlot.CxpPortNo}
    smryPerSlot.EntityData.Leafs["fc_loc_str"] = types.YLeaf{"FcLocStr", smryPerSlot.FcLocStr}
    smryPerSlot.EntityData.Leafs["cxp_sts_0"] = types.YLeaf{"CxpSts0", smryPerSlot.CxpSts0}
    smryPerSlot.EntityData.Leafs["cxp_sts_1"] = types.YLeaf{"CxpSts1", smryPerSlot.CxpSts1}
    smryPerSlot.EntityData.Leafs["cxp_sts_2"] = types.YLeaf{"CxpSts2", smryPerSlot.CxpSts2}
    smryPerSlot.EntityData.Leafs["cxp_sts_3"] = types.YLeaf{"CxpSts3", smryPerSlot.CxpSts3}
    smryPerSlot.EntityData.Leafs["cxp_sts_4"] = types.YLeaf{"CxpSts4", smryPerSlot.CxpSts4}
    smryPerSlot.EntityData.Leafs["cxp_sts_5"] = types.YLeaf{"CxpSts5", smryPerSlot.CxpSts5}
    smryPerSlot.EntityData.Leafs["cxp_sts_6"] = types.YLeaf{"CxpSts6", smryPerSlot.CxpSts6}
    smryPerSlot.EntityData.Leafs["cxp_sts_7"] = types.YLeaf{"CxpSts7", smryPerSlot.CxpSts7}
    smryPerSlot.EntityData.Leafs["cxp_sts_8"] = types.YLeaf{"CxpSts8", smryPerSlot.CxpSts8}
    smryPerSlot.EntityData.Leafs["cxp_sts_9"] = types.YLeaf{"CxpSts9", smryPerSlot.CxpSts9}
    smryPerSlot.EntityData.Leafs["cxp_sts_10"] = types.YLeaf{"CxpSts10", smryPerSlot.CxpSts10}
    smryPerSlot.EntityData.Leafs["cxp_sts_11"] = types.YLeaf{"CxpSts11", smryPerSlot.CxpSts11}
    smryPerSlot.EntityData.Leafs["cxp_sts_12"] = types.YLeaf{"CxpSts12", smryPerSlot.CxpSts12}
    smryPerSlot.EntityData.Leafs["cxp_sts_13"] = types.YLeaf{"CxpSts13", smryPerSlot.CxpSts13}
    smryPerSlot.EntityData.Leafs["cxp_sts_14"] = types.YLeaf{"CxpSts14", smryPerSlot.CxpSts14}
    smryPerSlot.EntityData.Leafs["cxp_sts_15"] = types.YLeaf{"CxpSts15", smryPerSlot.CxpSts15}
    return &(smryPerSlot.EntityData)
}

// Controller_Fabric_Oper_Fgid
// FGID management information
type Controller_Fabric_Oper_Fgid struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Information Controller_Fabric_Oper_Fgid_Information

    
    Resource Controller_Fabric_Oper_Fgid_Resource

    
    Statistics Controller_Fabric_Oper_Fgid_Statistics

    
    FgidMgr Controller_Fabric_Oper_Fgid_FgidMgr

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError.
    ProgramError []Controller_Fabric_Oper_Fgid_ProgramError
}

func (fgid *Controller_Fabric_Oper_Fgid) GetEntityData() *types.CommonEntityData {
    fgid.EntityData.YFilter = fgid.YFilter
    fgid.EntityData.YangName = "fgid"
    fgid.EntityData.BundleName = "cisco_ios_xr"
    fgid.EntityData.ParentYangName = "oper"
    fgid.EntityData.SegmentPath = "fgid"
    fgid.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgid.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgid.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgid.EntityData.Children = make(map[string]types.YChild)
    fgid.EntityData.Children["information"] = types.YChild{"Information", &fgid.Information}
    fgid.EntityData.Children["resource"] = types.YChild{"Resource", &fgid.Resource}
    fgid.EntityData.Children["statistics"] = types.YChild{"Statistics", &fgid.Statistics}
    fgid.EntityData.Children["fgid_mgr"] = types.YChild{"FgidMgr", &fgid.FgidMgr}
    fgid.EntityData.Children["program_error"] = types.YChild{"ProgramError", nil}
    for i := range fgid.ProgramError {
        fgid.EntityData.Children[types.GetSegmentPath(&fgid.ProgramError[i])] = types.YChild{"ProgramError", &fgid.ProgramError[i]}
    }
    fgid.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fgid.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information
type Controller_Fabric_Oper_Fgid_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id.
    Id []Controller_Fabric_Oper_Fgid_Information_Id
}

func (information *Controller_Fabric_Oper_Fgid_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "fgid"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = make(map[string]types.YChild)
    information.EntityData.Children["id"] = types.YChild{"Id", nil}
    for i := range information.Id {
        information.EntityData.Children[types.GetSegmentPath(&information.Id[i])] = types.YChild{"Id", &information.Id[i]}
    }
    information.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(information.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id
type Controller_Fabric_Oper_Fgid_Information_Id struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..131071.
    FgidId interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAssoFabricqIds interface{}

    // The type is string.
    AssoClientInfo interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps.
    HexBitmaps []Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps.
    BinaryBitmaps []Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds.
    AssoFabricqIds []Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds

    // The type is slice of Controller_Fabric_Oper_Fgid_Information_Id_Drivers.
    Drivers []Controller_Fabric_Oper_Fgid_Information_Id_Drivers
}

func (id *Controller_Fabric_Oper_Fgid_Information_Id) GetEntityData() *types.CommonEntityData {
    id.EntityData.YFilter = id.YFilter
    id.EntityData.YangName = "id"
    id.EntityData.BundleName = "cisco_ios_xr"
    id.EntityData.ParentYangName = "information"
    id.EntityData.SegmentPath = "id" + "[fgid_id='" + fmt.Sprintf("%v", id.FgidId) + "']"
    id.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    id.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    id.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    id.EntityData.Children = make(map[string]types.YChild)
    id.EntityData.Children["hex_bitmaps"] = types.YChild{"HexBitmaps", nil}
    for i := range id.HexBitmaps {
        id.EntityData.Children[types.GetSegmentPath(&id.HexBitmaps[i])] = types.YChild{"HexBitmaps", &id.HexBitmaps[i]}
    }
    id.EntityData.Children["binary_bitmaps"] = types.YChild{"BinaryBitmaps", nil}
    for i := range id.BinaryBitmaps {
        id.EntityData.Children[types.GetSegmentPath(&id.BinaryBitmaps[i])] = types.YChild{"BinaryBitmaps", &id.BinaryBitmaps[i]}
    }
    id.EntityData.Children["asso_fabricq_ids"] = types.YChild{"AssoFabricqIds", nil}
    for i := range id.AssoFabricqIds {
        id.EntityData.Children[types.GetSegmentPath(&id.AssoFabricqIds[i])] = types.YChild{"AssoFabricqIds", &id.AssoFabricqIds[i]}
    }
    id.EntityData.Children["drivers"] = types.YChild{"Drivers", nil}
    for i := range id.Drivers {
        id.EntityData.Children[types.GetSegmentPath(&id.Drivers[i])] = types.YChild{"Drivers", &id.Drivers[i]}
    }
    id.EntityData.Leafs = make(map[string]types.YLeaf)
    id.EntityData.Leafs["fgid_id"] = types.YLeaf{"FgidId", id.FgidId}
    id.EntityData.Leafs["total_asso_fabricq_ids"] = types.YLeaf{"TotalAssoFabricqIds", id.TotalAssoFabricqIds}
    id.EntityData.Leafs["asso_client_info"] = types.YLeaf{"AssoClientInfo", id.AssoClientInfo}
    return &(id.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (hexBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_HexBitmaps) GetEntityData() *types.CommonEntityData {
    hexBitmaps.EntityData.YFilter = hexBitmaps.YFilter
    hexBitmaps.EntityData.YangName = "hex_bitmaps"
    hexBitmaps.EntityData.BundleName = "cisco_ios_xr"
    hexBitmaps.EntityData.ParentYangName = "id"
    hexBitmaps.EntityData.SegmentPath = "hex_bitmaps" + "[rack_number='" + fmt.Sprintf("%v", hexBitmaps.RackNumber) + "']"
    hexBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hexBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hexBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hexBitmaps.EntityData.Children = make(map[string]types.YChild)
    hexBitmaps.EntityData.Leafs = make(map[string]types.YLeaf)
    hexBitmaps.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", hexBitmaps.RackNumber}
    hexBitmaps.EntityData.Leafs["bitmap"] = types.YLeaf{"Bitmap", hexBitmaps.Bitmap}
    return &(hexBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps
type Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is string.
    Bitmap interface{}
}

func (binaryBitmaps *Controller_Fabric_Oper_Fgid_Information_Id_BinaryBitmaps) GetEntityData() *types.CommonEntityData {
    binaryBitmaps.EntityData.YFilter = binaryBitmaps.YFilter
    binaryBitmaps.EntityData.YangName = "binary_bitmaps"
    binaryBitmaps.EntityData.BundleName = "cisco_ios_xr"
    binaryBitmaps.EntityData.ParentYangName = "id"
    binaryBitmaps.EntityData.SegmentPath = "binary_bitmaps" + "[rack_number='" + fmt.Sprintf("%v", binaryBitmaps.RackNumber) + "']"
    binaryBitmaps.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binaryBitmaps.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binaryBitmaps.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binaryBitmaps.EntityData.Children = make(map[string]types.YChild)
    binaryBitmaps.EntityData.Leafs = make(map[string]types.YLeaf)
    binaryBitmaps.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", binaryBitmaps.RackNumber}
    binaryBitmaps.EntityData.Leafs["bitmap"] = types.YLeaf{"Bitmap", binaryBitmaps.Bitmap}
    return &(binaryBitmaps.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds
type Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FabricqId interface{}
}

func (assoFabricqIds *Controller_Fabric_Oper_Fgid_Information_Id_AssoFabricqIds) GetEntityData() *types.CommonEntityData {
    assoFabricqIds.EntityData.YFilter = assoFabricqIds.YFilter
    assoFabricqIds.EntityData.YangName = "asso_fabricq_ids"
    assoFabricqIds.EntityData.BundleName = "cisco_ios_xr"
    assoFabricqIds.EntityData.ParentYangName = "id"
    assoFabricqIds.EntityData.SegmentPath = "asso_fabricq_ids" + "[fabricq_id='" + fmt.Sprintf("%v", assoFabricqIds.FabricqId) + "']"
    assoFabricqIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assoFabricqIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assoFabricqIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assoFabricqIds.EntityData.Children = make(map[string]types.YChild)
    assoFabricqIds.EntityData.Leafs = make(map[string]types.YLeaf)
    assoFabricqIds.EntityData.Leafs["fabricq_id"] = types.YLeaf{"FabricqId", assoFabricqIds.FabricqId}
    return &(assoFabricqIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients.
    Clients []Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
}

func (drivers *Controller_Fabric_Oper_Fgid_Information_Id_Drivers) GetEntityData() *types.CommonEntityData {
    drivers.EntityData.YFilter = drivers.YFilter
    drivers.EntityData.YangName = "drivers"
    drivers.EntityData.BundleName = "cisco_ios_xr"
    drivers.EntityData.ParentYangName = "id"
    drivers.EntityData.SegmentPath = "drivers" + "[rack_number='" + fmt.Sprintf("%v", drivers.RackNumber) + "']"
    drivers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drivers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drivers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drivers.EntityData.Children = make(map[string]types.YChild)
    drivers.EntityData.Children["clients"] = types.YChild{"Clients", nil}
    for i := range drivers.Clients {
        drivers.EntityData.Children[types.GetSegmentPath(&drivers.Clients[i])] = types.YChild{"Clients", &drivers.Clients[i]}
    }
    drivers.EntityData.Leafs = make(map[string]types.YLeaf)
    drivers.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", drivers.RackNumber}
    return &(drivers.EntityData)
}

// Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients
type Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientIdx interface{}

    // The type is bool. The default value is false.
    ShowAsic0 interface{}

    // The type is string.
    Asic0Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic1 interface{}

    // The type is string.
    Asic1Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic2 interface{}

    // The type is string.
    Asic2Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic3 interface{}

    // The type is string.
    Asic3Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic4 interface{}

    // The type is string.
    Asic4Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic5 interface{}

    // The type is string.
    Asic5Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic6 interface{}

    // The type is string.
    Asic6Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic7 interface{}

    // The type is string.
    Asic7Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic8 interface{}

    // The type is string.
    Asic8Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic9 interface{}

    // The type is string.
    Asic9Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic10 interface{}

    // The type is string.
    Asic10Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic11 interface{}

    // The type is string.
    Asic11Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic12 interface{}

    // The type is string.
    Asic12Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic13 interface{}

    // The type is string.
    Asic13Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic14 interface{}

    // The type is string.
    Asic14Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic15 interface{}

    // The type is string.
    Asic15Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic16 interface{}

    // The type is string.
    Asic16Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic17 interface{}

    // The type is string.
    Asic17Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic18 interface{}

    // The type is string.
    Asic18Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic19 interface{}

    // The type is string.
    Asic19Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic20 interface{}

    // The type is string.
    Asic20Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic21 interface{}

    // The type is string.
    Asic21Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic22 interface{}

    // The type is string.
    Asic22Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic23 interface{}

    // The type is string.
    Asic23Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic24 interface{}

    // The type is string.
    Asic24Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic25 interface{}

    // The type is string.
    Asic25Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic26 interface{}

    // The type is string.
    Asic26Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic27 interface{}

    // The type is string.
    Asic27Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic28 interface{}

    // The type is string.
    Asic28Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic29 interface{}

    // The type is string.
    Asic29Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic30 interface{}

    // The type is string.
    Asic30Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic31 interface{}

    // The type is string.
    Asic31Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic32 interface{}

    // The type is string.
    Asic32Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic33 interface{}

    // The type is string.
    Asic33Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic34 interface{}

    // The type is string.
    Asic34Bitmap interface{}

    // The type is bool. The default value is false.
    ShowAsic35 interface{}

    // The type is string.
    Asic35Bitmap interface{}
}

func (clients *Controller_Fabric_Oper_Fgid_Information_Id_Drivers_Clients) GetEntityData() *types.CommonEntityData {
    clients.EntityData.YFilter = clients.YFilter
    clients.EntityData.YangName = "clients"
    clients.EntityData.BundleName = "cisco_ios_xr"
    clients.EntityData.ParentYangName = "drivers"
    clients.EntityData.SegmentPath = "clients" + "[client_idx='" + fmt.Sprintf("%v", clients.ClientIdx) + "']"
    clients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clients.EntityData.Children = make(map[string]types.YChild)
    clients.EntityData.Leafs = make(map[string]types.YLeaf)
    clients.EntityData.Leafs["client_idx"] = types.YLeaf{"ClientIdx", clients.ClientIdx}
    clients.EntityData.Leafs["show_asic_0"] = types.YLeaf{"ShowAsic0", clients.ShowAsic0}
    clients.EntityData.Leafs["asic_0_bitmap"] = types.YLeaf{"Asic0Bitmap", clients.Asic0Bitmap}
    clients.EntityData.Leafs["show_asic_1"] = types.YLeaf{"ShowAsic1", clients.ShowAsic1}
    clients.EntityData.Leafs["asic_1_bitmap"] = types.YLeaf{"Asic1Bitmap", clients.Asic1Bitmap}
    clients.EntityData.Leafs["show_asic_2"] = types.YLeaf{"ShowAsic2", clients.ShowAsic2}
    clients.EntityData.Leafs["asic_2_bitmap"] = types.YLeaf{"Asic2Bitmap", clients.Asic2Bitmap}
    clients.EntityData.Leafs["show_asic_3"] = types.YLeaf{"ShowAsic3", clients.ShowAsic3}
    clients.EntityData.Leafs["asic_3_bitmap"] = types.YLeaf{"Asic3Bitmap", clients.Asic3Bitmap}
    clients.EntityData.Leafs["show_asic_4"] = types.YLeaf{"ShowAsic4", clients.ShowAsic4}
    clients.EntityData.Leafs["asic_4_bitmap"] = types.YLeaf{"Asic4Bitmap", clients.Asic4Bitmap}
    clients.EntityData.Leafs["show_asic_5"] = types.YLeaf{"ShowAsic5", clients.ShowAsic5}
    clients.EntityData.Leafs["asic_5_bitmap"] = types.YLeaf{"Asic5Bitmap", clients.Asic5Bitmap}
    clients.EntityData.Leafs["show_asic_6"] = types.YLeaf{"ShowAsic6", clients.ShowAsic6}
    clients.EntityData.Leafs["asic_6_bitmap"] = types.YLeaf{"Asic6Bitmap", clients.Asic6Bitmap}
    clients.EntityData.Leafs["show_asic_7"] = types.YLeaf{"ShowAsic7", clients.ShowAsic7}
    clients.EntityData.Leafs["asic_7_bitmap"] = types.YLeaf{"Asic7Bitmap", clients.Asic7Bitmap}
    clients.EntityData.Leafs["show_asic_8"] = types.YLeaf{"ShowAsic8", clients.ShowAsic8}
    clients.EntityData.Leafs["asic_8_bitmap"] = types.YLeaf{"Asic8Bitmap", clients.Asic8Bitmap}
    clients.EntityData.Leafs["show_asic_9"] = types.YLeaf{"ShowAsic9", clients.ShowAsic9}
    clients.EntityData.Leafs["asic_9_bitmap"] = types.YLeaf{"Asic9Bitmap", clients.Asic9Bitmap}
    clients.EntityData.Leafs["show_asic_10"] = types.YLeaf{"ShowAsic10", clients.ShowAsic10}
    clients.EntityData.Leafs["asic_10_bitmap"] = types.YLeaf{"Asic10Bitmap", clients.Asic10Bitmap}
    clients.EntityData.Leafs["show_asic_11"] = types.YLeaf{"ShowAsic11", clients.ShowAsic11}
    clients.EntityData.Leafs["asic_11_bitmap"] = types.YLeaf{"Asic11Bitmap", clients.Asic11Bitmap}
    clients.EntityData.Leafs["show_asic_12"] = types.YLeaf{"ShowAsic12", clients.ShowAsic12}
    clients.EntityData.Leafs["asic_12_bitmap"] = types.YLeaf{"Asic12Bitmap", clients.Asic12Bitmap}
    clients.EntityData.Leafs["show_asic_13"] = types.YLeaf{"ShowAsic13", clients.ShowAsic13}
    clients.EntityData.Leafs["asic_13_bitmap"] = types.YLeaf{"Asic13Bitmap", clients.Asic13Bitmap}
    clients.EntityData.Leafs["show_asic_14"] = types.YLeaf{"ShowAsic14", clients.ShowAsic14}
    clients.EntityData.Leafs["asic_14_bitmap"] = types.YLeaf{"Asic14Bitmap", clients.Asic14Bitmap}
    clients.EntityData.Leafs["show_asic_15"] = types.YLeaf{"ShowAsic15", clients.ShowAsic15}
    clients.EntityData.Leafs["asic_15_bitmap"] = types.YLeaf{"Asic15Bitmap", clients.Asic15Bitmap}
    clients.EntityData.Leafs["show_asic_16"] = types.YLeaf{"ShowAsic16", clients.ShowAsic16}
    clients.EntityData.Leafs["asic_16_bitmap"] = types.YLeaf{"Asic16Bitmap", clients.Asic16Bitmap}
    clients.EntityData.Leafs["show_asic_17"] = types.YLeaf{"ShowAsic17", clients.ShowAsic17}
    clients.EntityData.Leafs["asic_17_bitmap"] = types.YLeaf{"Asic17Bitmap", clients.Asic17Bitmap}
    clients.EntityData.Leafs["show_asic_18"] = types.YLeaf{"ShowAsic18", clients.ShowAsic18}
    clients.EntityData.Leafs["asic_18_bitmap"] = types.YLeaf{"Asic18Bitmap", clients.Asic18Bitmap}
    clients.EntityData.Leafs["show_asic_19"] = types.YLeaf{"ShowAsic19", clients.ShowAsic19}
    clients.EntityData.Leafs["asic_19_bitmap"] = types.YLeaf{"Asic19Bitmap", clients.Asic19Bitmap}
    clients.EntityData.Leafs["show_asic_20"] = types.YLeaf{"ShowAsic20", clients.ShowAsic20}
    clients.EntityData.Leafs["asic_20_bitmap"] = types.YLeaf{"Asic20Bitmap", clients.Asic20Bitmap}
    clients.EntityData.Leafs["show_asic_21"] = types.YLeaf{"ShowAsic21", clients.ShowAsic21}
    clients.EntityData.Leafs["asic_21_bitmap"] = types.YLeaf{"Asic21Bitmap", clients.Asic21Bitmap}
    clients.EntityData.Leafs["show_asic_22"] = types.YLeaf{"ShowAsic22", clients.ShowAsic22}
    clients.EntityData.Leafs["asic_22_bitmap"] = types.YLeaf{"Asic22Bitmap", clients.Asic22Bitmap}
    clients.EntityData.Leafs["show_asic_23"] = types.YLeaf{"ShowAsic23", clients.ShowAsic23}
    clients.EntityData.Leafs["asic_23_bitmap"] = types.YLeaf{"Asic23Bitmap", clients.Asic23Bitmap}
    clients.EntityData.Leafs["show_asic_24"] = types.YLeaf{"ShowAsic24", clients.ShowAsic24}
    clients.EntityData.Leafs["asic_24_bitmap"] = types.YLeaf{"Asic24Bitmap", clients.Asic24Bitmap}
    clients.EntityData.Leafs["show_asic_25"] = types.YLeaf{"ShowAsic25", clients.ShowAsic25}
    clients.EntityData.Leafs["asic_25_bitmap"] = types.YLeaf{"Asic25Bitmap", clients.Asic25Bitmap}
    clients.EntityData.Leafs["show_asic_26"] = types.YLeaf{"ShowAsic26", clients.ShowAsic26}
    clients.EntityData.Leafs["asic_26_bitmap"] = types.YLeaf{"Asic26Bitmap", clients.Asic26Bitmap}
    clients.EntityData.Leafs["show_asic_27"] = types.YLeaf{"ShowAsic27", clients.ShowAsic27}
    clients.EntityData.Leafs["asic_27_bitmap"] = types.YLeaf{"Asic27Bitmap", clients.Asic27Bitmap}
    clients.EntityData.Leafs["show_asic_28"] = types.YLeaf{"ShowAsic28", clients.ShowAsic28}
    clients.EntityData.Leafs["asic_28_bitmap"] = types.YLeaf{"Asic28Bitmap", clients.Asic28Bitmap}
    clients.EntityData.Leafs["show_asic_29"] = types.YLeaf{"ShowAsic29", clients.ShowAsic29}
    clients.EntityData.Leafs["asic_29_bitmap"] = types.YLeaf{"Asic29Bitmap", clients.Asic29Bitmap}
    clients.EntityData.Leafs["show_asic_30"] = types.YLeaf{"ShowAsic30", clients.ShowAsic30}
    clients.EntityData.Leafs["asic_30_bitmap"] = types.YLeaf{"Asic30Bitmap", clients.Asic30Bitmap}
    clients.EntityData.Leafs["show_asic_31"] = types.YLeaf{"ShowAsic31", clients.ShowAsic31}
    clients.EntityData.Leafs["asic_31_bitmap"] = types.YLeaf{"Asic31Bitmap", clients.Asic31Bitmap}
    clients.EntityData.Leafs["show_asic_32"] = types.YLeaf{"ShowAsic32", clients.ShowAsic32}
    clients.EntityData.Leafs["asic_32_bitmap"] = types.YLeaf{"Asic32Bitmap", clients.Asic32Bitmap}
    clients.EntityData.Leafs["show_asic_33"] = types.YLeaf{"ShowAsic33", clients.ShowAsic33}
    clients.EntityData.Leafs["asic_33_bitmap"] = types.YLeaf{"Asic33Bitmap", clients.Asic33Bitmap}
    clients.EntityData.Leafs["show_asic_34"] = types.YLeaf{"ShowAsic34", clients.ShowAsic34}
    clients.EntityData.Leafs["asic_34_bitmap"] = types.YLeaf{"Asic34Bitmap", clients.Asic34Bitmap}
    clients.EntityData.Leafs["show_asic_35"] = types.YLeaf{"ShowAsic35", clients.ShowAsic35}
    clients.EntityData.Leafs["asic_35_bitmap"] = types.YLeaf{"Asic35Bitmap", clients.Asic35Bitmap}
    return &(clients.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource
type Controller_Fabric_Oper_Fgid_Resource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr.
    Sdr []Controller_Fabric_Oper_Fgid_Resource_Sdr
}

func (resource *Controller_Fabric_Oper_Fgid_Resource) GetEntityData() *types.CommonEntityData {
    resource.EntityData.YFilter = resource.YFilter
    resource.EntityData.YangName = "resource"
    resource.EntityData.BundleName = "cisco_ios_xr"
    resource.EntityData.ParentYangName = "fgid"
    resource.EntityData.SegmentPath = "resource"
    resource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resource.EntityData.Children = make(map[string]types.YChild)
    resource.EntityData.Children["sdr"] = types.YChild{"Sdr", nil}
    for i := range resource.Sdr {
        resource.EntityData.Children[types.GetSegmentPath(&resource.Sdr[i])] = types.YChild{"Sdr", &resource.Sdr[i]}
    }
    resource.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(resource.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr
type Controller_Fabric_Oper_Fgid_Resource_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_Resource_Sdr_Application.
    Application []Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
}

func (sdr *Controller_Fabric_Oper_Fgid_Resource_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "resource"
    sdr.EntityData.SegmentPath = "sdr" + "[sdr_name='" + fmt.Sprintf("%v", sdr.SdrName) + "']"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = make(map[string]types.YChild)
    sdr.EntityData.Children["application"] = types.YChild{"Application", nil}
    for i := range sdr.Application {
        sdr.EntityData.Children[types.GetSegmentPath(&sdr.Application[i])] = types.YChild{"Application", &sdr.Application[i]}
    }
    sdr.EntityData.Leafs = make(map[string]types.YLeaf)
    sdr.EntityData.Leafs["sdr_name"] = types.YLeaf{"SdrName", sdr.SdrName}
    sdr.EntityData.Leafs["description"] = types.YLeaf{"Description", sdr.Description}
    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange.
    IdsRange []Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
}

func (application *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr"
    application.EntityData.SegmentPath = "application" + "[app_name='" + fmt.Sprintf("%v", application.AppName) + "']"
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = make(map[string]types.YChild)
    application.EntityData.Children["ids_range"] = types.YChild{"IdsRange", nil}
    for i := range application.IdsRange {
        application.EntityData.Children[types.GetSegmentPath(&application.IdsRange[i])] = types.YChild{"IdsRange", &application.IdsRange[i]}
    }
    application.EntityData.Leafs = make(map[string]types.YLeaf)
    application.EntityData.Leafs["app_name"] = types.YLeaf{"AppName", application.AppName}
    application.EntityData.Leafs["description"] = types.YLeaf{"Description", application.Description}
    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..131071.
    Id interface{}

    // This attribute is a key. The type is interface{} with range: 0..131072.
    Elements interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds.
    FgidIds []Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
}

func (idsRange *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange) GetEntityData() *types.CommonEntityData {
    idsRange.EntityData.YFilter = idsRange.YFilter
    idsRange.EntityData.YangName = "ids_range"
    idsRange.EntityData.BundleName = "cisco_ios_xr"
    idsRange.EntityData.ParentYangName = "application"
    idsRange.EntityData.SegmentPath = "ids_range" + "[id='" + fmt.Sprintf("%v", idsRange.Id) + "']" + "[elements='" + fmt.Sprintf("%v", idsRange.Elements) + "']"
    idsRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idsRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idsRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idsRange.EntityData.Children = make(map[string]types.YChild)
    idsRange.EntityData.Children["fgid_ids"] = types.YChild{"FgidIds", nil}
    for i := range idsRange.FgidIds {
        idsRange.EntityData.Children[types.GetSegmentPath(&idsRange.FgidIds[i])] = types.YChild{"FgidIds", &idsRange.FgidIds[i]}
    }
    idsRange.EntityData.Leafs = make(map[string]types.YLeaf)
    idsRange.EntityData.Leafs["id"] = types.YLeaf{"Id", idsRange.Id}
    idsRange.EntityData.Leafs["elements"] = types.YLeaf{"Elements", idsRange.Elements}
    return &(idsRange.EntityData)
}

// Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds
type Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FgidId interface{}

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    LineIdx interface{}

    // The type is string.
    SdrNameH interface{}

    // The type is string.
    AppNameH interface{}
}

func (fgidIds *Controller_Fabric_Oper_Fgid_Resource_Sdr_Application_IdsRange_FgidIds) GetEntityData() *types.CommonEntityData {
    fgidIds.EntityData.YFilter = fgidIds.YFilter
    fgidIds.EntityData.YangName = "fgid_ids"
    fgidIds.EntityData.BundleName = "cisco_ios_xr"
    fgidIds.EntityData.ParentYangName = "ids_range"
    fgidIds.EntityData.SegmentPath = "fgid_ids" + "[fgid_id='" + fmt.Sprintf("%v", fgidIds.FgidId) + "']" + "[line_idx='" + fmt.Sprintf("%v", fgidIds.LineIdx) + "']"
    fgidIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidIds.EntityData.Children = make(map[string]types.YChild)
    fgidIds.EntityData.Leafs = make(map[string]types.YLeaf)
    fgidIds.EntityData.Leafs["fgid_id"] = types.YLeaf{"FgidId", fgidIds.FgidId}
    fgidIds.EntityData.Leafs["line_idx"] = types.YLeaf{"LineIdx", fgidIds.LineIdx}
    fgidIds.EntityData.Leafs["sdr_name_h"] = types.YLeaf{"SdrNameH", fgidIds.SdrNameH}
    fgidIds.EntityData.Leafs["app_name_h"] = types.YLeaf{"AppNameH", fgidIds.AppNameH}
    return &(fgidIds.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics
type Controller_Fabric_Oper_Fgid_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_Fgid_Statistics_All

    
    Sdr Controller_Fabric_Oper_Fgid_Statistics_Sdr

    
    Pool Controller_Fabric_Oper_Fgid_Statistics_Pool

    
    System Controller_Fabric_Oper_Fgid_Statistics_System
}

func (statistics *Controller_Fabric_Oper_Fgid_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fgid"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["all"] = types.YChild{"All", &statistics.All}
    statistics.EntityData.Children["sdr"] = types.YChild{"Sdr", &statistics.Sdr}
    statistics.EntityData.Children["pool"] = types.YChild{"Pool", &statistics.Pool}
    statistics.EntityData.Children["system"] = types.YChild{"System", &statistics.System}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All
type Controller_Fabric_Oper_Fgid_Statistics_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_StatsList.
    StatsList []Controller_Fabric_Oper_Fgid_Statistics_All_StatsList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_SdrList.
    SdrList []Controller_Fabric_Oper_Fgid_Statistics_All_SdrList

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_All_PoolList.
    PoolList []Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
}

func (all *Controller_Fabric_Oper_Fgid_Statistics_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "statistics"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["stats_list"] = types.YChild{"StatsList", nil}
    for i := range all.StatsList {
        all.EntityData.Children[types.GetSegmentPath(&all.StatsList[i])] = types.YChild{"StatsList", &all.StatsList[i]}
    }
    all.EntityData.Children["sdr_list"] = types.YChild{"SdrList", nil}
    for i := range all.SdrList {
        all.EntityData.Children[types.GetSegmentPath(&all.SdrList[i])] = types.YChild{"SdrList", &all.SdrList[i]}
    }
    all.EntityData.Children["pool_list"] = types.YChild{"PoolList", nil}
    for i := range all.PoolList {
        all.EntityData.Children[types.GetSegmentPath(&all.PoolList[i])] = types.YChild{"PoolList", &all.PoolList[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_All_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_All_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "all"
    statsList.EntityData.SegmentPath = "stats_list" + "[system_stats='" + fmt.Sprintf("%v", statsList.SystemStats) + "']"
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = make(map[string]types.YChild)
    statsList.EntityData.Leafs = make(map[string]types.YLeaf)
    statsList.EntityData.Leafs["system_stats"] = types.YLeaf{"SystemStats", statsList.SystemStats}
    statsList.EntityData.Leafs["system_total_fgids"] = types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids}
    statsList.EntityData.Leafs["system_inuse_fgids"] = types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids}
    statsList.EntityData.Leafs["system_hwm_fgids"] = types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids}
    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application.
    Application []Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "all"
    sdrList.EntityData.SegmentPath = "sdr_list" + "[sdr_name='" + fmt.Sprintf("%v", sdrList.SdrName) + "']"
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = make(map[string]types.YChild)
    sdrList.EntityData.Children["application"] = types.YChild{"Application", nil}
    for i := range sdrList.Application {
        sdrList.EntityData.Children[types.GetSegmentPath(&sdrList.Application[i])] = types.YChild{"Application", &sdrList.Application[i]}
    }
    sdrList.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrList.EntityData.Leafs["sdr_name"] = types.YLeaf{"SdrName", sdrList.SdrName}
    sdrList.EntityData.Leafs["description"] = types.YLeaf{"Description", sdrList.Description}
    sdrList.EntityData.Leafs["sdr_total_fgids"] = types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids}
    sdrList.EntityData.Leafs["sdr_inuse_fgids"] = types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids}
    sdrList.EntityData.Leafs["sdr_hwm_fgids"] = types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids}
    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_All_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + "[app_name='" + fmt.Sprintf("%v", application.AppName) + "']"
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = make(map[string]types.YChild)
    application.EntityData.Leafs = make(map[string]types.YLeaf)
    application.EntityData.Leafs["app_name"] = types.YLeaf{"AppName", application.AppName}
    application.EntityData.Leafs["description"] = types.YLeaf{"Description", application.Description}
    application.EntityData.Leafs["app_id"] = types.YLeaf{"AppId", application.AppId}
    application.EntityData.Leafs["pool_id"] = types.YLeaf{"PoolId", application.PoolId}
    application.EntityData.Leafs["inuse_fgids"] = types.YLeaf{"InuseFgids", application.InuseFgids}
    application.EntityData.Leafs["hwm_fgids"] = types.YLeaf{"HwmFgids", application.HwmFgids}
    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_All_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_All_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_All_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "all"
    poolList.EntityData.SegmentPath = "pool_list" + "[pool_id='" + fmt.Sprintf("%v", poolList.PoolId) + "']"
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = make(map[string]types.YChild)
    poolList.EntityData.Leafs = make(map[string]types.YLeaf)
    poolList.EntityData.Leafs["pool_id"] = types.YLeaf{"PoolId", poolList.PoolId}
    poolList.EntityData.Leafs["pool_name"] = types.YLeaf{"PoolName", poolList.PoolName}
    poolList.EntityData.Leafs["pool_type"] = types.YLeaf{"PoolType", poolList.PoolType}
    poolList.EntityData.Leafs["start_fgid"] = types.YLeaf{"StartFgid", poolList.StartFgid}
    poolList.EntityData.Leafs["total_fgids"] = types.YLeaf{"TotalFgids", poolList.TotalFgids}
    poolList.EntityData.Leafs["current_fgids"] = types.YLeaf{"CurrentFgids", poolList.CurrentFgids}
    poolList.EntityData.Leafs["hwm_fgids"] = types.YLeaf{"HwmFgids", poolList.HwmFgids}
    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr
type Controller_Fabric_Oper_Fgid_Statistics_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList.
    SdrList []Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
}

func (sdr *Controller_Fabric_Oper_Fgid_Statistics_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "statistics"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = make(map[string]types.YChild)
    sdr.EntityData.Children["sdr_list"] = types.YChild{"SdrList", nil}
    for i := range sdr.SdrList {
        sdr.EntityData.Children[types.GetSegmentPath(&sdr.SdrList[i])] = types.YChild{"SdrList", &sdr.SdrList[i]}
    }
    sdr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sdr.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    SdrName interface{}

    // The type is string. The default value is Secure Domain Router name..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SdrHwmFgids interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application.
    Application []Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
}

func (sdrList *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList) GetEntityData() *types.CommonEntityData {
    sdrList.EntityData.YFilter = sdrList.YFilter
    sdrList.EntityData.YangName = "sdr_list"
    sdrList.EntityData.BundleName = "cisco_ios_xr"
    sdrList.EntityData.ParentYangName = "sdr"
    sdrList.EntityData.SegmentPath = "sdr_list" + "[sdr_name='" + fmt.Sprintf("%v", sdrList.SdrName) + "']"
    sdrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrList.EntityData.Children = make(map[string]types.YChild)
    sdrList.EntityData.Children["application"] = types.YChild{"Application", nil}
    for i := range sdrList.Application {
        sdrList.EntityData.Children[types.GetSegmentPath(&sdrList.Application[i])] = types.YChild{"Application", &sdrList.Application[i]}
    }
    sdrList.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrList.EntityData.Leafs["sdr_name"] = types.YLeaf{"SdrName", sdrList.SdrName}
    sdrList.EntityData.Leafs["description"] = types.YLeaf{"Description", sdrList.Description}
    sdrList.EntityData.Leafs["sdr_total_fgids"] = types.YLeaf{"SdrTotalFgids", sdrList.SdrTotalFgids}
    sdrList.EntityData.Leafs["sdr_inuse_fgids"] = types.YLeaf{"SdrInuseFgids", sdrList.SdrInuseFgids}
    sdrList.EntityData.Leafs["sdr_hwm_fgids"] = types.YLeaf{"SdrHwmFgids", sdrList.SdrHwmFgids}
    return &(sdrList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application
type Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AppName interface{}

    // The type is string. The default value is application..
    Description interface{}

    // The type is interface{} with range: 0..4294967295.
    AppId interface{}

    // The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is interface{} with range: 0..4294967295.
    InuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (application *Controller_Fabric_Oper_Fgid_Statistics_Sdr_SdrList_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "sdr_list"
    application.EntityData.SegmentPath = "application" + "[app_name='" + fmt.Sprintf("%v", application.AppName) + "']"
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = make(map[string]types.YChild)
    application.EntityData.Leafs = make(map[string]types.YLeaf)
    application.EntityData.Leafs["app_name"] = types.YLeaf{"AppName", application.AppName}
    application.EntityData.Leafs["description"] = types.YLeaf{"Description", application.Description}
    application.EntityData.Leafs["app_id"] = types.YLeaf{"AppId", application.AppId}
    application.EntityData.Leafs["pool_id"] = types.YLeaf{"PoolId", application.PoolId}
    application.EntityData.Leafs["inuse_fgids"] = types.YLeaf{"InuseFgids", application.InuseFgids}
    application.EntityData.Leafs["hwm_fgids"] = types.YLeaf{"HwmFgids", application.HwmFgids}
    return &(application.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool
type Controller_Fabric_Oper_Fgid_Statistics_Pool struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList.
    PoolList []Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
}

func (pool *Controller_Fabric_Oper_Fgid_Statistics_Pool) GetEntityData() *types.CommonEntityData {
    pool.EntityData.YFilter = pool.YFilter
    pool.EntityData.YangName = "pool"
    pool.EntityData.BundleName = "cisco_ios_xr"
    pool.EntityData.ParentYangName = "statistics"
    pool.EntityData.SegmentPath = "pool"
    pool.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pool.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pool.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pool.EntityData.Children = make(map[string]types.YChild)
    pool.EntityData.Children["pool_list"] = types.YChild{"PoolList", nil}
    for i := range pool.PoolList {
        pool.EntityData.Children[types.GetSegmentPath(&pool.PoolList[i])] = types.YChild{"PoolList", &pool.PoolList[i]}
    }
    pool.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(pool.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList
type Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    PoolId interface{}

    // The type is string.
    PoolName interface{}

    // The type is string.
    PoolType interface{}

    // The type is string.
    StartFgid interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    HwmFgids interface{}
}

func (poolList *Controller_Fabric_Oper_Fgid_Statistics_Pool_PoolList) GetEntityData() *types.CommonEntityData {
    poolList.EntityData.YFilter = poolList.YFilter
    poolList.EntityData.YangName = "pool_list"
    poolList.EntityData.BundleName = "cisco_ios_xr"
    poolList.EntityData.ParentYangName = "pool"
    poolList.EntityData.SegmentPath = "pool_list" + "[pool_id='" + fmt.Sprintf("%v", poolList.PoolId) + "']"
    poolList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    poolList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    poolList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    poolList.EntityData.Children = make(map[string]types.YChild)
    poolList.EntityData.Leafs = make(map[string]types.YLeaf)
    poolList.EntityData.Leafs["pool_id"] = types.YLeaf{"PoolId", poolList.PoolId}
    poolList.EntityData.Leafs["pool_name"] = types.YLeaf{"PoolName", poolList.PoolName}
    poolList.EntityData.Leafs["pool_type"] = types.YLeaf{"PoolType", poolList.PoolType}
    poolList.EntityData.Leafs["start_fgid"] = types.YLeaf{"StartFgid", poolList.StartFgid}
    poolList.EntityData.Leafs["total_fgids"] = types.YLeaf{"TotalFgids", poolList.TotalFgids}
    poolList.EntityData.Leafs["current_fgids"] = types.YLeaf{"CurrentFgids", poolList.CurrentFgids}
    poolList.EntityData.Leafs["hwm_fgids"] = types.YLeaf{"HwmFgids", poolList.HwmFgids}
    return &(poolList.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System
type Controller_Fabric_Oper_Fgid_Statistics_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_Statistics_System_StatsList.
    StatsList []Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
}

func (system *Controller_Fabric_Oper_Fgid_Statistics_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "statistics"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["stats_list"] = types.YChild{"StatsList", nil}
    for i := range system.StatsList {
        system.EntityData.Children[types.GetSegmentPath(&system.StatsList[i])] = types.YChild{"StatsList", &system.StatsList[i]}
    }
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(system.EntityData)
}

// Controller_Fabric_Oper_Fgid_Statistics_System_StatsList
type Controller_Fabric_Oper_Fgid_Statistics_System_StatsList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    SystemStats interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemTotalFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemInuseFgids interface{}

    // The type is interface{} with range: 0..4294967295.
    SystemHwmFgids interface{}
}

func (statsList *Controller_Fabric_Oper_Fgid_Statistics_System_StatsList) GetEntityData() *types.CommonEntityData {
    statsList.EntityData.YFilter = statsList.YFilter
    statsList.EntityData.YangName = "stats_list"
    statsList.EntityData.BundleName = "cisco_ios_xr"
    statsList.EntityData.ParentYangName = "system"
    statsList.EntityData.SegmentPath = "stats_list" + "[system_stats='" + fmt.Sprintf("%v", statsList.SystemStats) + "']"
    statsList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statsList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statsList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statsList.EntityData.Children = make(map[string]types.YChild)
    statsList.EntityData.Leafs = make(map[string]types.YLeaf)
    statsList.EntityData.Leafs["system_stats"] = types.YLeaf{"SystemStats", statsList.SystemStats}
    statsList.EntityData.Leafs["system_total_fgids"] = types.YLeaf{"SystemTotalFgids", statsList.SystemTotalFgids}
    statsList.EntityData.Leafs["system_inuse_fgids"] = types.YLeaf{"SystemInuseFgids", statsList.SystemInuseFgids}
    statsList.EntityData.Leafs["system_hwm_fgids"] = types.YLeaf{"SystemHwmFgids", statsList.SystemHwmFgids}
    return &(statsList.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr
type Controller_Fabric_Oper_Fgid_FgidMgr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace.
    Trace []Controller_Fabric_Oper_Fgid_FgidMgr_Trace
}

func (fgidMgr *Controller_Fabric_Oper_Fgid_FgidMgr) GetEntityData() *types.CommonEntityData {
    fgidMgr.EntityData.YFilter = fgidMgr.YFilter
    fgidMgr.EntityData.YangName = "fgid_mgr"
    fgidMgr.EntityData.BundleName = "cisco_ios_xr"
    fgidMgr.EntityData.ParentYangName = "fgid"
    fgidMgr.EntityData.SegmentPath = "fgid_mgr"
    fgidMgr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fgidMgr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fgidMgr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fgidMgr.EntityData.Children = make(map[string]types.YChild)
    fgidMgr.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range fgidMgr.Trace {
        fgidMgr.EntityData.Children[types.GetSegmentPath(&fgidMgr.Trace[i])] = types.YChild{"Trace", &fgidMgr.Trace[i]}
    }
    fgidMgr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fgidMgr.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace
// show traceable processes
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location.
    Location []Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
}

func (trace *Controller_Fabric_Oper_Fgid_FgidMgr_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fgid_mgr"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions.
    AllOptions []Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_Fgid_FgidMgr_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError
type Controller_Fabric_Oper_Fgid_ProgramError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..131071.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..131071.
    End interface{}

    // The type is slice of Controller_Fabric_Oper_Fgid_ProgramError_Rack.
    Rack []Controller_Fabric_Oper_Fgid_ProgramError_Rack
}

func (programError *Controller_Fabric_Oper_Fgid_ProgramError) GetEntityData() *types.CommonEntityData {
    programError.EntityData.YFilter = programError.YFilter
    programError.EntityData.YangName = "program_error"
    programError.EntityData.BundleName = "cisco_ios_xr"
    programError.EntityData.ParentYangName = "fgid"
    programError.EntityData.SegmentPath = "program_error" + "[start='" + fmt.Sprintf("%v", programError.Start) + "']" + "[end='" + fmt.Sprintf("%v", programError.End) + "']"
    programError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    programError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    programError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    programError.EntityData.Children = make(map[string]types.YChild)
    programError.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range programError.Rack {
        programError.EntityData.Children[types.GetSegmentPath(&programError.Rack[i])] = types.YChild{"Rack", &programError.Rack[i]}
    }
    programError.EntityData.Leafs = make(map[string]types.YLeaf)
    programError.EntityData.Leafs["start"] = types.YLeaf{"Start", programError.Start}
    programError.EntityData.Leafs["end"] = types.YLeaf{"End", programError.End}
    return &(programError.EntityData)
}

// Controller_Fabric_Oper_Fgid_ProgramError_Rack
type Controller_Fabric_Oper_Fgid_ProgramError_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    FgidsInError interface{}

    // The type is bool.
    FoundFgidsInError interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalErrorFgids interface{}

    // The type is bool.
    IncorrectFgidsRange interface{}

    // The type is bool.
    CmdNotSupported interface{}
}

func (rack *Controller_Fabric_Oper_Fgid_ProgramError_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "program_error"
    rack.EntityData.SegmentPath = "rack" + "[rack_id='" + fmt.Sprintf("%v", rack.RackId) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_id"] = types.YLeaf{"RackId", rack.RackId}
    rack.EntityData.Leafs["rack_id_str"] = types.YLeaf{"RackIdStr", rack.RackIdStr}
    rack.EntityData.Leafs["fgids_in_error"] = types.YLeaf{"FgidsInError", rack.FgidsInError}
    rack.EntityData.Leafs["found_fgids_in_error"] = types.YLeaf{"FoundFgidsInError", rack.FoundFgidsInError}
    rack.EntityData.Leafs["total_error_fgids"] = types.YLeaf{"TotalErrorFgids", rack.TotalErrorFgids}
    rack.EntityData.Leafs["incorrect_fgids_range"] = types.YLeaf{"IncorrectFgidsRange", rack.IncorrectFgidsRange}
    rack.EntityData.Leafs["cmd_not_supported"] = types.YLeaf{"CmdNotSupported", rack.CmdNotSupported}
    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive
type Controller_Fabric_Oper_FsdbaggActive struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Plane.
    Plane []Controller_Fabric_Oper_FsdbaggActive_Plane

    
    Bundle Controller_Fabric_Oper_FsdbaggActive_Bundle

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Statistics
}

func (fsdbaggActive *Controller_Fabric_Oper_FsdbaggActive) GetEntityData() *types.CommonEntityData {
    fsdbaggActive.EntityData.YFilter = fsdbaggActive.YFilter
    fsdbaggActive.EntityData.YangName = "fsdbagg_active"
    fsdbaggActive.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggActive.EntityData.ParentYangName = "oper"
    fsdbaggActive.EntityData.SegmentPath = "fsdbagg_active"
    fsdbaggActive.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggActive.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggActive.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggActive.EntityData.Children = make(map[string]types.YChild)
    fsdbaggActive.EntityData.Children["plane"] = types.YChild{"Plane", nil}
    for i := range fsdbaggActive.Plane {
        fsdbaggActive.EntityData.Children[types.GetSegmentPath(&fsdbaggActive.Plane[i])] = types.YChild{"Plane", &fsdbaggActive.Plane[i]}
    }
    fsdbaggActive.EntityData.Children["bundle"] = types.YChild{"Bundle", &fsdbaggActive.Bundle}
    fsdbaggActive.EntityData.Children["statistics"] = types.YChild{"Statistics", &fsdbaggActive.Statistics}
    fsdbaggActive.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbaggActive.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane
type Controller_Fabric_Oper_FsdbaggActive_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-5]'.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError.
    AsicInternalError []Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_active"
    plane.EntityData.SegmentPath = "plane" + "[planeid='" + fmt.Sprintf("%v", plane.Planeid) + "']"
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = make(map[string]types.YChild)
    plane.EntityData.Children["asic_internal_error"] = types.YChild{"AsicInternalError", nil}
    for i := range plane.AsicInternalError {
        plane.EntityData.Children[types.GetSegmentPath(&plane.AsicInternalError[i])] = types.YChild{"AsicInternalError", &plane.AsicInternalError[i]}
    }
    plane.EntityData.Leafs = make(map[string]types.YLeaf)
    plane.EntityData.Leafs["planeid"] = types.YLeaf{"Planeid", plane.Planeid}
    plane.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", plane.AdminState}
    plane.EntityData.Leafs["ucast_oper_state"] = types.YLeaf{"UcastOperState", plane.UcastOperState}
    plane.EntityData.Leafs["mcast_oper_state"] = types.YLeaf{"McastOperState", plane.McastOperState}
    plane.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", plane.PlaneMode}
    plane.EntityData.Leafs["ucast_cnt_up"] = types.YLeaf{"UcastCntUp", plane.UcastCntUp}
    plane.EntityData.Leafs["ucast_cnt_some_up"] = types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp}
    plane.EntityData.Leafs["ucast_cnt_dn"] = types.YLeaf{"UcastCntDn", plane.UcastCntDn}
    plane.EntityData.Leafs["mcast_cnt_up"] = types.YLeaf{"McastCntUp", plane.McastCntUp}
    plane.EntityData.Leafs["mcast_cnt_some_up"] = types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp}
    plane.EntityData.Leafs["mcast_cnt_dn"] = types.YLeaf{"McastCntDn", plane.McastCntDn}
    plane.EntityData.Leafs["total_bundles"] = types.YLeaf{"TotalBundles", plane.TotalBundles}
    plane.EntityData.Leafs["down_bundles"] = types.YLeaf{"DownBundles", plane.DownBundles}
    plane.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", plane.RxDataCells}
    plane.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", plane.TxDataCells}
    plane.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow}
    plane.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", plane.RxCeCells}
    plane.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow}
    plane.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", plane.RxUceCells}
    plane.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow}
    plane.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", plane.RxPeCells}
    plane.EntityData.Leafs["ucast_lost_cells"] = types.YLeaf{"UcastLostCells", plane.UcastLostCells}
    plane.EntityData.Leafs["mcast_lost_cells"] = types.YLeaf{"McastLostCells", plane.McastLostCells}
    plane.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", plane.LastClearTs}
    plane.EntityData.Leafs["last_clear_reason"] = types.YLeaf{"LastClearReason", plane.LastClearReason}
    plane.EntityData.Leafs["last_clear_req_ts"] = types.YLeaf{"LastClearReqTs", plane.LastClearReqTs}
    plane.EntityData.Leafs["last_clear_status"] = types.YLeaf{"LastClearStatus", plane.LastClearStatus}
    plane.EntityData.Leafs["is_asic_internal_error"] = types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError}
    plane.EntityData.Leafs["asic_internal_drops"] = types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops}
    plane.EntityData.Leafs["asic_location_drops"] = types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops}
    plane.EntityData.Leafs["ppu_state"] = types.YLeaf{"PpuState", plane.PpuState}
    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + "[asic_number='" + fmt.Sprintf("%v", asicInternalError.AsicNumber) + "']"
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = make(map[string]types.YChild)
    asicInternalError.EntityData.Leafs = make(map[string]types.YLeaf)
    asicInternalError.EntityData.Leafs["asic_number"] = types.YLeaf{"AsicNumber", asicInternalError.AsicNumber}
    asicInternalError.EntityData.Leafs["asic_location"] = types.YLeaf{"AsicLocation", asicInternalError.AsicLocation}
    asicInternalError.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError}
    asicInternalError.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError}
    asicInternalError.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError}
    asicInternalError.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError}
    asicInternalError.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError}
    asicInternalError.EntityData.Leafs["link_no_sign_accept_error"] = types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError}
    asicInternalError.EntityData.Leafs["link_token_error"] = types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError}
    asicInternalError.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount}
    asicInternalError.EntityData.Leafs["last_asic_internal_error_ts"] = types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs}
    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle
type Controller_Fabric_Oper_FsdbaggActive_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_All

    
    Port Controller_Fabric_Oper_FsdbaggActive_Bundle_Port

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Bundle_Location.
    Location []Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
}

func (bundle *Controller_Fabric_Oper_FsdbaggActive_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "fsdbagg_active"
    bundle.EntityData.SegmentPath = "bundle"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["summary"] = types.YChild{"Summary", &bundle.Summary}
    bundle.EntityData.Children["all"] = types.YChild{"All", &bundle.All}
    bundle.EntityData.Children["port"] = types.YChild{"Port", &bundle.Port}
    bundle.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range bundle.Location {
        bundle.EntityData.Children[types.GetSegmentPath(&bundle.Location[i])] = types.YChild{"Location", &bundle.Location[i]}
    }
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundle.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList.
    BundleSummaryList []Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
}

func (summary *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "bundle"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["bundle_summary_list"] = types.YChild{"BundleSummaryList", nil}
    for i := range summary.BundleSummaryList {
        summary.EntityData.Children[types.GetSegmentPath(&summary.BundleSummaryList[i])] = types.YChild{"BundleSummaryList", &summary.BundleSummaryList[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBundles interface{}

    // The type is interface{} with range: 0..4294967295.
    BundlesNotConnected interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalBports interface{}

    // The type is interface{} with range: 0..4294967295.
    DownBports interface{}

    // The type is interface{} with range: 0..4294967295.
    BportsNotConnected interface{}
}

func (bundleSummaryList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Summary_BundleSummaryList) GetEntityData() *types.CommonEntityData {
    bundleSummaryList.EntityData.YFilter = bundleSummaryList.YFilter
    bundleSummaryList.EntityData.YangName = "bundle_summary_list"
    bundleSummaryList.EntityData.BundleName = "cisco_ios_xr"
    bundleSummaryList.EntityData.ParentYangName = "summary"
    bundleSummaryList.EntityData.SegmentPath = "bundle_summary_list" + "[idx='" + fmt.Sprintf("%v", bundleSummaryList.Idx) + "']"
    bundleSummaryList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSummaryList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSummaryList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSummaryList.EntityData.Children = make(map[string]types.YChild)
    bundleSummaryList.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleSummaryList.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bundleSummaryList.Idx}
    bundleSummaryList.EntityData.Leafs["total_bundles"] = types.YLeaf{"TotalBundles", bundleSummaryList.TotalBundles}
    bundleSummaryList.EntityData.Leafs["down_bundles"] = types.YLeaf{"DownBundles", bundleSummaryList.DownBundles}
    bundleSummaryList.EntityData.Leafs["bundles_not_connected"] = types.YLeaf{"BundlesNotConnected", bundleSummaryList.BundlesNotConnected}
    bundleSummaryList.EntityData.Leafs["total_bports"] = types.YLeaf{"TotalBports", bundleSummaryList.TotalBports}
    bundleSummaryList.EntityData.Leafs["down_bports"] = types.YLeaf{"DownBports", bundleSummaryList.DownBports}
    bundleSummaryList.EntityData.Leafs["bports_not_connected"] = types.YLeaf{"BportsNotConnected", bundleSummaryList.BportsNotConnected}
    return &(bundleSummaryList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList.
    BundleAllList []Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "bundle"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["bundle_all_list"] = types.YChild{"BundleAllList", nil}
    for i := range all.BundleAllList {
        all.EntityData.Children[types.GetSegmentPath(&all.BundleAllList[i])] = types.YChild{"BundleAllList", &all.BundleAllList[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_All_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "all"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + "[idx='" + fmt.Sprintf("%v", bundleAllList.Idx) + "']"
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = make(map[string]types.YChild)
    bundleAllList.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleAllList.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bundleAllList.Idx}
    bundleAllList.EntityData.Leafs["bundle_id"] = types.YLeaf{"BundleId", bundleAllList.BundleId}
    bundleAllList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", bundleAllList.OperState}
    bundleAllList.EntityData.Leafs["plane_id"] = types.YLeaf{"PlaneId", bundleAllList.PlaneId}
    bundleAllList.EntityData.Leafs["total_links"] = types.YLeaf{"TotalLinks", bundleAllList.TotalLinks}
    bundleAllList.EntityData.Leafs["down_links"] = types.YLeaf{"DownLinks", bundleAllList.DownLinks}
    bundleAllList.EntityData.Leafs["bport1"] = types.YLeaf{"Bport1", bundleAllList.Bport1}
    bundleAllList.EntityData.Leafs["bport2"] = types.YLeaf{"Bport2", bundleAllList.Bport2}
    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    All Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location.
    Location []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
}

func (port *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "bundle"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Children["all"] = types.YChild{"All", &port.All}
    port.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range port.Location {
        port.EntityData.Children[types.GetSegmentPath(&port.Location[i])] = types.YChild{"Location", &port.Location[i]}
    }
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList.
    BportAllList []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
}

func (all *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "port"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["bport_all_list"] = types.YChild{"BportAllList", nil}
    for i := range all.BportAllList {
        all.EntityData.Children[types.GetSegmentPath(&all.BportAllList[i])] = types.YChild{"BportAllList", &all.BportAllList[i]}
    }
    all.EntityData.Children["statistics"] = types.YChild{"Statistics", &all.Statistics}
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "all"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + "[idx='" + fmt.Sprintf("%v", bportAllList.Idx) + "']"
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = make(map[string]types.YChild)
    bportAllList.EntityData.Leafs = make(map[string]types.YLeaf)
    bportAllList.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportAllList.Idx}
    bportAllList.EntityData.Leafs["bport_id"] = types.YLeaf{"BportId", bportAllList.BportId}
    bportAllList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", bportAllList.AdminState}
    bportAllList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", bportAllList.OperState}
    bportAllList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", bportAllList.DownFlags}
    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "all"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["bport_stats_all_racks"] = types.YChild{"BportStatsAllRacks", nil}
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.BportStatsAllRacks[i])] = types.YChild{"BportStatsAllRacks", &statistics.BportStatsAllRacks[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + "[idx='" + fmt.Sprintf("%v", bportStatsAllRacks.Idx) + "']"
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = make(map[string]types.YChild)
    bportStatsAllRacks.EntityData.Children["bport_stats_rack"] = types.YChild{"BportStatsRack", nil}
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children[types.GetSegmentPath(&bportStatsAllRacks.BportStatsRack[i])] = types.YChild{"BportStatsRack", &bportStatsAllRacks.BportStatsRack[i]}
    }
    bportStatsAllRacks.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStatsAllRacks.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStatsAllRacks.Idx}
    bportStatsAllRacks.EntityData.Leafs["total_racks"] = types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks}
    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + "[idx='" + fmt.Sprintf("%v", bportStatsRack.Idx) + "']"
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = make(map[string]types.YChild)
    bportStatsRack.EntityData.Children["bport_stats"] = types.YChild{"BportStats", nil}
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children[types.GetSegmentPath(&bportStatsRack.BportStats[i])] = types.YChild{"BportStats", &bportStatsRack.BportStats[i]}
    }
    bportStatsRack.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStatsRack.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStatsRack.Idx}
    bportStatsRack.EntityData.Leafs["rack_num_str"] = types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr}
    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_All_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + "[idx='" + fmt.Sprintf("%v", bportStats.Idx) + "']"
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = make(map[string]types.YChild)
    bportStats.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStats.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStats.Idx}
    bportStats.EntityData.Leafs["bport_id"] = types.YLeaf{"BportId", bportStats.BportId}
    bportStats.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", bportStats.RxDataCells}
    bportStats.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", bportStats.TxDataCells}
    bportStats.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", bportStats.RxCeCells}
    bportStats.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", bportStats.RxUceCells}
    bportStats.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", bportStats.RxPeCells}
    bportStats.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", bportStats.LastClearTs}
    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1])))'.
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList.
    BportAllList []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList

    
    Statistics Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["bport_all_list"] = types.YChild{"BportAllList", nil}
    for i := range location.BportAllList {
        location.EntityData.Children[types.GetSegmentPath(&location.BportAllList[i])] = types.YChild{"BportAllList", &location.BportAllList[i]}
    }
    location.EntityData.Children["statistics"] = types.YChild{"Statistics", &location.Statistics}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}
}

func (bportAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_BportAllList) GetEntityData() *types.CommonEntityData {
    bportAllList.EntityData.YFilter = bportAllList.YFilter
    bportAllList.EntityData.YangName = "bport_all_list"
    bportAllList.EntityData.BundleName = "cisco_ios_xr"
    bportAllList.EntityData.ParentYangName = "location"
    bportAllList.EntityData.SegmentPath = "bport_all_list" + "[idx='" + fmt.Sprintf("%v", bportAllList.Idx) + "']"
    bportAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportAllList.EntityData.Children = make(map[string]types.YChild)
    bportAllList.EntityData.Leafs = make(map[string]types.YLeaf)
    bportAllList.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportAllList.Idx}
    bportAllList.EntityData.Leafs["bport_id"] = types.YLeaf{"BportId", bportAllList.BportId}
    bportAllList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", bportAllList.AdminState}
    bportAllList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", bportAllList.OperState}
    bportAllList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", bportAllList.DownFlags}
    return &(bportAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks.
    BportStatsAllRacks []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "location"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["bport_stats_all_racks"] = types.YChild{"BportStatsAllRacks", nil}
    for i := range statistics.BportStatsAllRacks {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.BportStatsAllRacks[i])] = types.YChild{"BportStatsAllRacks", &statistics.BportStatsAllRacks[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalRacks interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack.
    BportStatsRack []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
}

func (bportStatsAllRacks *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks) GetEntityData() *types.CommonEntityData {
    bportStatsAllRacks.EntityData.YFilter = bportStatsAllRacks.YFilter
    bportStatsAllRacks.EntityData.YangName = "bport_stats_all_racks"
    bportStatsAllRacks.EntityData.BundleName = "cisco_ios_xr"
    bportStatsAllRacks.EntityData.ParentYangName = "statistics"
    bportStatsAllRacks.EntityData.SegmentPath = "bport_stats_all_racks" + "[idx='" + fmt.Sprintf("%v", bportStatsAllRacks.Idx) + "']"
    bportStatsAllRacks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsAllRacks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsAllRacks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsAllRacks.EntityData.Children = make(map[string]types.YChild)
    bportStatsAllRacks.EntityData.Children["bport_stats_rack"] = types.YChild{"BportStatsRack", nil}
    for i := range bportStatsAllRacks.BportStatsRack {
        bportStatsAllRacks.EntityData.Children[types.GetSegmentPath(&bportStatsAllRacks.BportStatsRack[i])] = types.YChild{"BportStatsRack", &bportStatsAllRacks.BportStatsRack[i]}
    }
    bportStatsAllRacks.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStatsAllRacks.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStatsAllRacks.Idx}
    bportStatsAllRacks.EntityData.Leafs["total_racks"] = types.YLeaf{"TotalRacks", bportStatsAllRacks.TotalRacks}
    return &(bportStatsAllRacks.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    RackNumStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats.
    BportStats []Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
}

func (bportStatsRack *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack) GetEntityData() *types.CommonEntityData {
    bportStatsRack.EntityData.YFilter = bportStatsRack.YFilter
    bportStatsRack.EntityData.YangName = "bport_stats_rack"
    bportStatsRack.EntityData.BundleName = "cisco_ios_xr"
    bportStatsRack.EntityData.ParentYangName = "bport_stats_all_racks"
    bportStatsRack.EntityData.SegmentPath = "bport_stats_rack" + "[idx='" + fmt.Sprintf("%v", bportStatsRack.Idx) + "']"
    bportStatsRack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStatsRack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStatsRack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStatsRack.EntityData.Children = make(map[string]types.YChild)
    bportStatsRack.EntityData.Children["bport_stats"] = types.YChild{"BportStats", nil}
    for i := range bportStatsRack.BportStats {
        bportStatsRack.EntityData.Children[types.GetSegmentPath(&bportStatsRack.BportStats[i])] = types.YChild{"BportStats", &bportStatsRack.BportStats[i]}
    }
    bportStatsRack.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStatsRack.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStatsRack.Idx}
    bportStatsRack.EntityData.Leafs["rack_num_str"] = types.YLeaf{"RackNumStr", bportStatsRack.RackNumStr}
    return &(bportStatsRack.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BportId interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is string.
    LastClearTs interface{}
}

func (bportStats *Controller_Fabric_Oper_FsdbaggActive_Bundle_Port_Location_Statistics_BportStatsAllRacks_BportStatsRack_BportStats) GetEntityData() *types.CommonEntityData {
    bportStats.EntityData.YFilter = bportStats.YFilter
    bportStats.EntityData.YangName = "bport_stats"
    bportStats.EntityData.BundleName = "cisco_ios_xr"
    bportStats.EntityData.ParentYangName = "bport_stats_rack"
    bportStats.EntityData.SegmentPath = "bport_stats" + "[idx='" + fmt.Sprintf("%v", bportStats.Idx) + "']"
    bportStats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bportStats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bportStats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bportStats.EntityData.Children = make(map[string]types.YChild)
    bportStats.EntityData.Leafs = make(map[string]types.YLeaf)
    bportStats.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bportStats.Idx}
    bportStats.EntityData.Leafs["bport_id"] = types.YLeaf{"BportId", bportStats.BportId}
    bportStats.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", bportStats.RxDataCells}
    bportStats.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", bportStats.TxDataCells}
    bportStats.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", bportStats.RxCeCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", bportStats.RxCeCells}
    bportStats.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", bportStats.RxUceCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", bportStats.RxUceCells}
    bportStats.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", bportStats.RxPeCellsIsOverflow}
    bportStats.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", bportStats.RxPeCells}
    bportStats.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", bportStats.LastClearTs}
    return &(bportStats.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/((0?[0-9])|(1[0-5])))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/((0?[0-9])|([1-2][0-9])|(3[0-1])))'.
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList.
    BundleAllList []Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
}

func (location *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "bundle"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["bundle_all_list"] = types.YChild{"BundleAllList", nil}
    for i := range location.BundleAllList {
        location.EntityData.Children[types.GetSegmentPath(&location.BundleAllList[i])] = types.YChild{"BundleAllList", &location.BundleAllList[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList
type Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    Idx interface{}

    // The type is string.
    BundleId interface{}

    // The type is string.
    OperState interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneId interface{}

    // The type is interface{} with range: 0..4294967295.
    TotalLinks interface{}

    // The type is interface{} with range: 0..4294967295.
    DownLinks interface{}

    // The type is string.
    Bport1 interface{}

    // The type is string.
    Bport2 interface{}
}

func (bundleAllList *Controller_Fabric_Oper_FsdbaggActive_Bundle_Location_BundleAllList) GetEntityData() *types.CommonEntityData {
    bundleAllList.EntityData.YFilter = bundleAllList.YFilter
    bundleAllList.EntityData.YangName = "bundle_all_list"
    bundleAllList.EntityData.BundleName = "cisco_ios_xr"
    bundleAllList.EntityData.ParentYangName = "location"
    bundleAllList.EntityData.SegmentPath = "bundle_all_list" + "[idx='" + fmt.Sprintf("%v", bundleAllList.Idx) + "']"
    bundleAllList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleAllList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleAllList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleAllList.EntityData.Children = make(map[string]types.YChild)
    bundleAllList.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleAllList.EntityData.Leafs["idx"] = types.YLeaf{"Idx", bundleAllList.Idx}
    bundleAllList.EntityData.Leafs["bundle_id"] = types.YLeaf{"BundleId", bundleAllList.BundleId}
    bundleAllList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", bundleAllList.OperState}
    bundleAllList.EntityData.Leafs["plane_id"] = types.YLeaf{"PlaneId", bundleAllList.PlaneId}
    bundleAllList.EntityData.Leafs["total_links"] = types.YLeaf{"TotalLinks", bundleAllList.TotalLinks}
    bundleAllList.EntityData.Leafs["down_links"] = types.YLeaf{"DownLinks", bundleAllList.DownLinks}
    bundleAllList.EntityData.Leafs["bport1"] = types.YLeaf{"Bport1", bundleAllList.Bport1}
    bundleAllList.EntityData.Leafs["bport2"] = types.YLeaf{"Bport2", bundleAllList.Bport2}
    return &(bundleAllList.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics
type Controller_Fabric_Oper_FsdbaggActive_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane.
    Plane []Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggActive_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_active"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["plane"] = types.YChild{"Plane", nil}
    for i := range statistics.Plane {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Plane[i])] = types.YChild{"Plane", &statistics.Plane[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-5]'.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError.
    AsicInternalError []Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + "[planeid='" + fmt.Sprintf("%v", plane.Planeid) + "']"
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = make(map[string]types.YChild)
    plane.EntityData.Children["asic_internal_error"] = types.YChild{"AsicInternalError", nil}
    for i := range plane.AsicInternalError {
        plane.EntityData.Children[types.GetSegmentPath(&plane.AsicInternalError[i])] = types.YChild{"AsicInternalError", &plane.AsicInternalError[i]}
    }
    plane.EntityData.Leafs = make(map[string]types.YLeaf)
    plane.EntityData.Leafs["planeid"] = types.YLeaf{"Planeid", plane.Planeid}
    plane.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", plane.AdminState}
    plane.EntityData.Leafs["ucast_oper_state"] = types.YLeaf{"UcastOperState", plane.UcastOperState}
    plane.EntityData.Leafs["mcast_oper_state"] = types.YLeaf{"McastOperState", plane.McastOperState}
    plane.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", plane.PlaneMode}
    plane.EntityData.Leafs["ucast_cnt_up"] = types.YLeaf{"UcastCntUp", plane.UcastCntUp}
    plane.EntityData.Leafs["ucast_cnt_some_up"] = types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp}
    plane.EntityData.Leafs["ucast_cnt_dn"] = types.YLeaf{"UcastCntDn", plane.UcastCntDn}
    plane.EntityData.Leafs["mcast_cnt_up"] = types.YLeaf{"McastCntUp", plane.McastCntUp}
    plane.EntityData.Leafs["mcast_cnt_some_up"] = types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp}
    plane.EntityData.Leafs["mcast_cnt_dn"] = types.YLeaf{"McastCntDn", plane.McastCntDn}
    plane.EntityData.Leafs["total_bundles"] = types.YLeaf{"TotalBundles", plane.TotalBundles}
    plane.EntityData.Leafs["down_bundles"] = types.YLeaf{"DownBundles", plane.DownBundles}
    plane.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", plane.RxDataCells}
    plane.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", plane.TxDataCells}
    plane.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow}
    plane.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", plane.RxCeCells}
    plane.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow}
    plane.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", plane.RxUceCells}
    plane.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow}
    plane.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", plane.RxPeCells}
    plane.EntityData.Leafs["ucast_lost_cells"] = types.YLeaf{"UcastLostCells", plane.UcastLostCells}
    plane.EntityData.Leafs["mcast_lost_cells"] = types.YLeaf{"McastLostCells", plane.McastLostCells}
    plane.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", plane.LastClearTs}
    plane.EntityData.Leafs["last_clear_reason"] = types.YLeaf{"LastClearReason", plane.LastClearReason}
    plane.EntityData.Leafs["last_clear_req_ts"] = types.YLeaf{"LastClearReqTs", plane.LastClearReqTs}
    plane.EntityData.Leafs["last_clear_status"] = types.YLeaf{"LastClearStatus", plane.LastClearStatus}
    plane.EntityData.Leafs["is_asic_internal_error"] = types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError}
    plane.EntityData.Leafs["asic_internal_drops"] = types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops}
    plane.EntityData.Leafs["asic_location_drops"] = types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops}
    plane.EntityData.Leafs["ppu_state"] = types.YLeaf{"PpuState", plane.PpuState}
    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggActive_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + "[asic_number='" + fmt.Sprintf("%v", asicInternalError.AsicNumber) + "']"
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = make(map[string]types.YChild)
    asicInternalError.EntityData.Leafs = make(map[string]types.YLeaf)
    asicInternalError.EntityData.Leafs["asic_number"] = types.YLeaf{"AsicNumber", asicInternalError.AsicNumber}
    asicInternalError.EntityData.Leafs["asic_location"] = types.YLeaf{"AsicLocation", asicInternalError.AsicLocation}
    asicInternalError.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError}
    asicInternalError.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError}
    asicInternalError.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError}
    asicInternalError.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError}
    asicInternalError.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError}
    asicInternalError.EntityData.Leafs["link_no_sign_accept_error"] = types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError}
    asicInternalError.EntityData.Leafs["link_token_error"] = types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError}
    asicInternalError.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount}
    asicInternalError.EntityData.Leafs["last_asic_internal_error_ts"] = types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs}
    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink
type Controller_Fabric_Oper_FsdbaggLink struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggLink_Port.
    Port []Controller_Fabric_Oper_FsdbaggLink_Port
}

func (fsdbaggLink *Controller_Fabric_Oper_FsdbaggLink) GetEntityData() *types.CommonEntityData {
    fsdbaggLink.EntityData.YFilter = fsdbaggLink.YFilter
    fsdbaggLink.EntityData.YangName = "fsdbagg_link"
    fsdbaggLink.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggLink.EntityData.ParentYangName = "oper"
    fsdbaggLink.EntityData.SegmentPath = "fsdbagg_link"
    fsdbaggLink.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggLink.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggLink.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggLink.EntityData.Children = make(map[string]types.YChild)
    fsdbaggLink.EntityData.Children["port"] = types.YChild{"Port", nil}
    for i := range fsdbaggLink.Port {
        fsdbaggLink.EntityData.Children[types.GetSegmentPath(&fsdbaggLink.Port[i])] = types.YChild{"Port", &fsdbaggLink.Port[i]}
    }
    fsdbaggLink.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbaggLink.EntityData)
}

// Controller_Fabric_Oper_FsdbaggLink_Port
type Controller_Fabric_Oper_FsdbaggLink_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'fia|s1|s2|s3'.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}
}

func (port *Controller_Fabric_Oper_FsdbaggLink_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "fsdbagg_link"
    port.EntityData.SegmentPath = "port" + "[portname='" + fmt.Sprintf("%v", port.Portname) + "']"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["portname"] = types.YLeaf{"Portname", port.Portname}
    port.EntityData.Leafs["description"] = types.YLeaf{"Description", port.Description}
    return &(port.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType
type Controller_Fabric_Oper_FsdbaggSfeAsicType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes.
    AsicTypes []Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
}

func (fsdbaggSfeAsicType *Controller_Fabric_Oper_FsdbaggSfeAsicType) GetEntityData() *types.CommonEntityData {
    fsdbaggSfeAsicType.EntityData.YFilter = fsdbaggSfeAsicType.YFilter
    fsdbaggSfeAsicType.EntityData.YangName = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggSfeAsicType.EntityData.ParentYangName = "oper"
    fsdbaggSfeAsicType.EntityData.SegmentPath = "fsdbagg_sfe_asic_type"
    fsdbaggSfeAsicType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggSfeAsicType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggSfeAsicType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggSfeAsicType.EntityData.Children = make(map[string]types.YChild)
    fsdbaggSfeAsicType.EntityData.Children["asic_types"] = types.YChild{"AsicTypes", nil}
    for i := range fsdbaggSfeAsicType.AsicTypes {
        fsdbaggSfeAsicType.EntityData.Children[types.GetSegmentPath(&fsdbaggSfeAsicType.AsicTypes[i])] = types.YChild{"AsicTypes", &fsdbaggSfeAsicType.AsicTypes[i]}
    }
    fsdbaggSfeAsicType.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbaggSfeAsicType.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Asicname interface{}

    // The type is string. The default value is asic..
    Description interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block.
    Block []Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
}

func (asicTypes *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes) GetEntityData() *types.CommonEntityData {
    asicTypes.EntityData.YFilter = asicTypes.YFilter
    asicTypes.EntityData.YangName = "asic_types"
    asicTypes.EntityData.BundleName = "cisco_ios_xr"
    asicTypes.EntityData.ParentYangName = "fsdbagg_sfe_asic_type"
    asicTypes.EntityData.SegmentPath = "asic_types" + "[asicname='" + fmt.Sprintf("%v", asicTypes.Asicname) + "']"
    asicTypes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicTypes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicTypes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicTypes.EntityData.Children = make(map[string]types.YChild)
    asicTypes.EntityData.Children["block"] = types.YChild{"Block", nil}
    for i := range asicTypes.Block {
        asicTypes.EntityData.Children[types.GetSegmentPath(&asicTypes.Block[i])] = types.YChild{"Block", &asicTypes.Block[i]}
    }
    asicTypes.EntityData.Leafs = make(map[string]types.YLeaf)
    asicTypes.EntityData.Leafs["asicname"] = types.YLeaf{"Asicname", asicTypes.Asicname}
    asicTypes.EntityData.Leafs["description"] = types.YLeaf{"Description", asicTypes.Description}
    return &(asicTypes.EntityData)
}

// Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block
type Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Blockname interface{}
}

func (block *Controller_Fabric_Oper_FsdbaggSfeAsicType_AsicTypes_Block) GetEntityData() *types.CommonEntityData {
    block.EntityData.YFilter = block.YFilter
    block.EntityData.YangName = "block"
    block.EntityData.BundleName = "cisco_ios_xr"
    block.EntityData.ParentYangName = "asic_types"
    block.EntityData.SegmentPath = "block" + "[blockname='" + fmt.Sprintf("%v", block.Blockname) + "']"
    block.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    block.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    block.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    block.EntityData.Children = make(map[string]types.YChild)
    block.EntityData.Leafs = make(map[string]types.YLeaf)
    block.EntityData.Leafs["blockname"] = types.YLeaf{"Blockname", block.Blockname}
    return &(block.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby
type Controller_Fabric_Oper_FsdbaggStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FsdbaggStandby_Plane.
    Plane []Controller_Fabric_Oper_FsdbaggStandby_Plane

    
    Statistics Controller_Fabric_Oper_FsdbaggStandby_Statistics
}

func (fsdbaggStandby *Controller_Fabric_Oper_FsdbaggStandby) GetEntityData() *types.CommonEntityData {
    fsdbaggStandby.EntityData.YFilter = fsdbaggStandby.YFilter
    fsdbaggStandby.EntityData.YangName = "fsdbagg_standby"
    fsdbaggStandby.EntityData.BundleName = "cisco_ios_xr"
    fsdbaggStandby.EntityData.ParentYangName = "oper"
    fsdbaggStandby.EntityData.SegmentPath = "fsdbagg_standby"
    fsdbaggStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbaggStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbaggStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbaggStandby.EntityData.Children = make(map[string]types.YChild)
    fsdbaggStandby.EntityData.Children["plane"] = types.YChild{"Plane", nil}
    for i := range fsdbaggStandby.Plane {
        fsdbaggStandby.EntityData.Children[types.GetSegmentPath(&fsdbaggStandby.Plane[i])] = types.YChild{"Plane", &fsdbaggStandby.Plane[i]}
    }
    fsdbaggStandby.EntityData.Children["statistics"] = types.YChild{"Statistics", &fsdbaggStandby.Statistics}
    fsdbaggStandby.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbaggStandby.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-5]'.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError.
    AsicInternalError []Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "fsdbagg_standby"
    plane.EntityData.SegmentPath = "plane" + "[planeid='" + fmt.Sprintf("%v", plane.Planeid) + "']"
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = make(map[string]types.YChild)
    plane.EntityData.Children["asic_internal_error"] = types.YChild{"AsicInternalError", nil}
    for i := range plane.AsicInternalError {
        plane.EntityData.Children[types.GetSegmentPath(&plane.AsicInternalError[i])] = types.YChild{"AsicInternalError", &plane.AsicInternalError[i]}
    }
    plane.EntityData.Leafs = make(map[string]types.YLeaf)
    plane.EntityData.Leafs["planeid"] = types.YLeaf{"Planeid", plane.Planeid}
    plane.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", plane.AdminState}
    plane.EntityData.Leafs["ucast_oper_state"] = types.YLeaf{"UcastOperState", plane.UcastOperState}
    plane.EntityData.Leafs["mcast_oper_state"] = types.YLeaf{"McastOperState", plane.McastOperState}
    plane.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", plane.PlaneMode}
    plane.EntityData.Leafs["ucast_cnt_up"] = types.YLeaf{"UcastCntUp", plane.UcastCntUp}
    plane.EntityData.Leafs["ucast_cnt_some_up"] = types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp}
    plane.EntityData.Leafs["ucast_cnt_dn"] = types.YLeaf{"UcastCntDn", plane.UcastCntDn}
    plane.EntityData.Leafs["mcast_cnt_up"] = types.YLeaf{"McastCntUp", plane.McastCntUp}
    plane.EntityData.Leafs["mcast_cnt_some_up"] = types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp}
    plane.EntityData.Leafs["mcast_cnt_dn"] = types.YLeaf{"McastCntDn", plane.McastCntDn}
    plane.EntityData.Leafs["total_bundles"] = types.YLeaf{"TotalBundles", plane.TotalBundles}
    plane.EntityData.Leafs["down_bundles"] = types.YLeaf{"DownBundles", plane.DownBundles}
    plane.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", plane.RxDataCells}
    plane.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", plane.TxDataCells}
    plane.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow}
    plane.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", plane.RxCeCells}
    plane.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow}
    plane.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", plane.RxUceCells}
    plane.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow}
    plane.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", plane.RxPeCells}
    plane.EntityData.Leafs["ucast_lost_cells"] = types.YLeaf{"UcastLostCells", plane.UcastLostCells}
    plane.EntityData.Leafs["mcast_lost_cells"] = types.YLeaf{"McastLostCells", plane.McastLostCells}
    plane.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", plane.LastClearTs}
    plane.EntityData.Leafs["last_clear_reason"] = types.YLeaf{"LastClearReason", plane.LastClearReason}
    plane.EntityData.Leafs["last_clear_req_ts"] = types.YLeaf{"LastClearReqTs", plane.LastClearReqTs}
    plane.EntityData.Leafs["last_clear_status"] = types.YLeaf{"LastClearStatus", plane.LastClearStatus}
    plane.EntityData.Leafs["is_asic_internal_error"] = types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError}
    plane.EntityData.Leafs["asic_internal_drops"] = types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops}
    plane.EntityData.Leafs["asic_location_drops"] = types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops}
    plane.EntityData.Leafs["ppu_state"] = types.YLeaf{"PpuState", plane.PpuState}
    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + "[asic_number='" + fmt.Sprintf("%v", asicInternalError.AsicNumber) + "']"
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = make(map[string]types.YChild)
    asicInternalError.EntityData.Leafs = make(map[string]types.YLeaf)
    asicInternalError.EntityData.Leafs["asic_number"] = types.YLeaf{"AsicNumber", asicInternalError.AsicNumber}
    asicInternalError.EntityData.Leafs["asic_location"] = types.YLeaf{"AsicLocation", asicInternalError.AsicLocation}
    asicInternalError.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError}
    asicInternalError.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError}
    asicInternalError.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError}
    asicInternalError.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError}
    asicInternalError.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError}
    asicInternalError.EntityData.Leafs["link_no_sign_accept_error"] = types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError}
    asicInternalError.EntityData.Leafs["link_token_error"] = types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError}
    asicInternalError.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount}
    asicInternalError.EntityData.Leafs["last_asic_internal_error_ts"] = types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs}
    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics
type Controller_Fabric_Oper_FsdbaggStandby_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane.
    Plane []Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
}

func (statistics *Controller_Fabric_Oper_FsdbaggStandby_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fsdbagg_standby"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["plane"] = types.YChild{"Plane", nil}
    for i := range statistics.Plane {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Plane[i])] = types.YChild{"Plane", &statistics.Plane[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-5]'.
    Planeid interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    UcastOperState interface{}

    // The type is string.
    McastOperState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    UcastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntSomeUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    McastCntDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalBundles interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    DownBundles interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCells interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCells interface{}

    // The type is bool.
    RxCeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCeCells interface{}

    // The type is bool.
    RxUceCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxUceCells interface{}

    // The type is bool.
    RxPeCellsIsOverflow interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPeCells interface{}

    // The type is interface{} with range: 0..4294967295.
    UcastLostCells interface{}

    // The type is interface{} with range: 0..4294967295.
    McastLostCells interface{}

    // The type is string.
    LastClearTs interface{}

    // The type is string.
    LastClearReason interface{}

    // The type is string.
    LastClearReqTs interface{}

    // The type is string.
    LastClearStatus interface{}

    // The type is bool.
    IsAsicInternalError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicInternalDrops interface{}

    // The type is string.
    AsicLocationDrops interface{}

    // The type is string.
    PpuState interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError.
    AsicInternalError []Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
}

func (plane *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane) GetEntityData() *types.CommonEntityData {
    plane.EntityData.YFilter = plane.YFilter
    plane.EntityData.YangName = "plane"
    plane.EntityData.BundleName = "cisco_ios_xr"
    plane.EntityData.ParentYangName = "statistics"
    plane.EntityData.SegmentPath = "plane" + "[planeid='" + fmt.Sprintf("%v", plane.Planeid) + "']"
    plane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    plane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    plane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    plane.EntityData.Children = make(map[string]types.YChild)
    plane.EntityData.Children["asic_internal_error"] = types.YChild{"AsicInternalError", nil}
    for i := range plane.AsicInternalError {
        plane.EntityData.Children[types.GetSegmentPath(&plane.AsicInternalError[i])] = types.YChild{"AsicInternalError", &plane.AsicInternalError[i]}
    }
    plane.EntityData.Leafs = make(map[string]types.YLeaf)
    plane.EntityData.Leafs["planeid"] = types.YLeaf{"Planeid", plane.Planeid}
    plane.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", plane.AdminState}
    plane.EntityData.Leafs["ucast_oper_state"] = types.YLeaf{"UcastOperState", plane.UcastOperState}
    plane.EntityData.Leafs["mcast_oper_state"] = types.YLeaf{"McastOperState", plane.McastOperState}
    plane.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", plane.PlaneMode}
    plane.EntityData.Leafs["ucast_cnt_up"] = types.YLeaf{"UcastCntUp", plane.UcastCntUp}
    plane.EntityData.Leafs["ucast_cnt_some_up"] = types.YLeaf{"UcastCntSomeUp", plane.UcastCntSomeUp}
    plane.EntityData.Leafs["ucast_cnt_dn"] = types.YLeaf{"UcastCntDn", plane.UcastCntDn}
    plane.EntityData.Leafs["mcast_cnt_up"] = types.YLeaf{"McastCntUp", plane.McastCntUp}
    plane.EntityData.Leafs["mcast_cnt_some_up"] = types.YLeaf{"McastCntSomeUp", plane.McastCntSomeUp}
    plane.EntityData.Leafs["mcast_cnt_dn"] = types.YLeaf{"McastCntDn", plane.McastCntDn}
    plane.EntityData.Leafs["total_bundles"] = types.YLeaf{"TotalBundles", plane.TotalBundles}
    plane.EntityData.Leafs["down_bundles"] = types.YLeaf{"DownBundles", plane.DownBundles}
    plane.EntityData.Leafs["rx_data_cells"] = types.YLeaf{"RxDataCells", plane.RxDataCells}
    plane.EntityData.Leafs["tx_data_cells"] = types.YLeaf{"TxDataCells", plane.TxDataCells}
    plane.EntityData.Leafs["rx_ce_cells_is_overflow"] = types.YLeaf{"RxCeCellsIsOverflow", plane.RxCeCellsIsOverflow}
    plane.EntityData.Leafs["rx_ce_cells"] = types.YLeaf{"RxCeCells", plane.RxCeCells}
    plane.EntityData.Leafs["rx_uce_cells_is_overflow"] = types.YLeaf{"RxUceCellsIsOverflow", plane.RxUceCellsIsOverflow}
    plane.EntityData.Leafs["rx_uce_cells"] = types.YLeaf{"RxUceCells", plane.RxUceCells}
    plane.EntityData.Leafs["rx_pe_cells_is_overflow"] = types.YLeaf{"RxPeCellsIsOverflow", plane.RxPeCellsIsOverflow}
    plane.EntityData.Leafs["rx_pe_cells"] = types.YLeaf{"RxPeCells", plane.RxPeCells}
    plane.EntityData.Leafs["ucast_lost_cells"] = types.YLeaf{"UcastLostCells", plane.UcastLostCells}
    plane.EntityData.Leafs["mcast_lost_cells"] = types.YLeaf{"McastLostCells", plane.McastLostCells}
    plane.EntityData.Leafs["last_clear_ts"] = types.YLeaf{"LastClearTs", plane.LastClearTs}
    plane.EntityData.Leafs["last_clear_reason"] = types.YLeaf{"LastClearReason", plane.LastClearReason}
    plane.EntityData.Leafs["last_clear_req_ts"] = types.YLeaf{"LastClearReqTs", plane.LastClearReqTs}
    plane.EntityData.Leafs["last_clear_status"] = types.YLeaf{"LastClearStatus", plane.LastClearStatus}
    plane.EntityData.Leafs["is_asic_internal_error"] = types.YLeaf{"IsAsicInternalError", plane.IsAsicInternalError}
    plane.EntityData.Leafs["asic_internal_drops"] = types.YLeaf{"AsicInternalDrops", plane.AsicInternalDrops}
    plane.EntityData.Leafs["asic_location_drops"] = types.YLeaf{"AsicLocationDrops", plane.AsicLocationDrops}
    plane.EntityData.Leafs["ppu_state"] = types.YLeaf{"PpuState", plane.PpuState}
    return &(plane.EntityData)
}

// Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError
type Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicNumber interface{}

    // The type is string.
    AsicLocation interface{}

    // The type is bool.
    LinkCrcError interface{}

    // The type is bool.
    LinkSizeError interface{}

    // The type is bool.
    LinkMisAlignError interface{}

    // The type is bool.
    LinkCodeGroupError interface{}

    // The type is bool.
    LinkNoSigLockError interface{}

    // The type is bool.
    LinkNoSignAcceptError interface{}

    // The type is bool.
    LinkTokenError interface{}

    // The type is bool.
    ErrorTokenCount interface{}

    // The type is string.
    LastAsicInternalErrorTs interface{}
}

func (asicInternalError *Controller_Fabric_Oper_FsdbaggStandby_Statistics_Plane_AsicInternalError) GetEntityData() *types.CommonEntityData {
    asicInternalError.EntityData.YFilter = asicInternalError.YFilter
    asicInternalError.EntityData.YangName = "asic_internal_error"
    asicInternalError.EntityData.BundleName = "cisco_ios_xr"
    asicInternalError.EntityData.ParentYangName = "plane"
    asicInternalError.EntityData.SegmentPath = "asic_internal_error" + "[asic_number='" + fmt.Sprintf("%v", asicInternalError.AsicNumber) + "']"
    asicInternalError.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicInternalError.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicInternalError.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicInternalError.EntityData.Children = make(map[string]types.YChild)
    asicInternalError.EntityData.Leafs = make(map[string]types.YLeaf)
    asicInternalError.EntityData.Leafs["asic_number"] = types.YLeaf{"AsicNumber", asicInternalError.AsicNumber}
    asicInternalError.EntityData.Leafs["asic_location"] = types.YLeaf{"AsicLocation", asicInternalError.AsicLocation}
    asicInternalError.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", asicInternalError.LinkCrcError}
    asicInternalError.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", asicInternalError.LinkSizeError}
    asicInternalError.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", asicInternalError.LinkMisAlignError}
    asicInternalError.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", asicInternalError.LinkCodeGroupError}
    asicInternalError.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", asicInternalError.LinkNoSigLockError}
    asicInternalError.EntityData.Leafs["link_no_sign_accept_error"] = types.YLeaf{"LinkNoSignAcceptError", asicInternalError.LinkNoSignAcceptError}
    asicInternalError.EntityData.Leafs["link_token_error"] = types.YLeaf{"LinkTokenError", asicInternalError.LinkTokenError}
    asicInternalError.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", asicInternalError.ErrorTokenCount}
    asicInternalError.EntityData.Leafs["last_asic_internal_error_ts"] = types.YLeaf{"LastAsicInternalErrorTs", asicInternalError.LastAsicInternalErrorTs}
    return &(asicInternalError.EntityData)
}

// Controller_Fabric_Oper_FabHealth
type Controller_Fabric_Oper_FabHealth struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_FabHealth_SysInfoList.
    SysInfoList []Controller_Fabric_Oper_FabHealth_SysInfoList
}

func (fabHealth *Controller_Fabric_Oper_FabHealth) GetEntityData() *types.CommonEntityData {
    fabHealth.EntityData.YFilter = fabHealth.YFilter
    fabHealth.EntityData.YangName = "fab_health"
    fabHealth.EntityData.BundleName = "cisco_ios_xr"
    fabHealth.EntityData.ParentYangName = "oper"
    fabHealth.EntityData.SegmentPath = "fab_health"
    fabHealth.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabHealth.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabHealth.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabHealth.EntityData.Children = make(map[string]types.YChild)
    fabHealth.EntityData.Children["sys_info_list"] = types.YChild{"SysInfoList", nil}
    for i := range fabHealth.SysInfoList {
        fabHealth.EntityData.Children[types.GetSegmentPath(&fabHealth.SysInfoList[i])] = types.YChild{"SysInfoList", &fabHealth.SysInfoList[i]}
    }
    fabHealth.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fabHealth.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    IndexKey interface{}

    // The type is bool.
    AggrStatus interface{}

    // The type is string.
    AvailableRackIds interface{}

    // The type is string.
    RackIdSeparator interface{}

    // The type is string.
    AvailableFmLoc interface{}

    // The type is string.
    FmLocSeparator interface{}

    // The type is interface{} with range: 0..4294967295.
    RackTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    RackLcc interface{}

    // The type is interface{} with range: 0..4294967295.
    RackFcc interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowSysPlaneDetail interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    SfeAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsUp interface{}

    // The type is interface{} with range: 0..4294967295.
    FiaAsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList.
    SysPlaneInfoList []Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList.
    RackInfoList []Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus.
    FsdbStatus []Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus.
    SfeStatus []Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc.
    SfeDrvrLoc []Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc

    // The type is slice of Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep.
    SfeFmSep []Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep
}

func (sysInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList) GetEntityData() *types.CommonEntityData {
    sysInfoList.EntityData.YFilter = sysInfoList.YFilter
    sysInfoList.EntityData.YangName = "sys_info_list"
    sysInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysInfoList.EntityData.ParentYangName = "fab_health"
    sysInfoList.EntityData.SegmentPath = "sys_info_list" + "[index_key='" + fmt.Sprintf("%v", sysInfoList.IndexKey) + "']"
    sysInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysInfoList.EntityData.Children = make(map[string]types.YChild)
    sysInfoList.EntityData.Children["sys_plane_info_list"] = types.YChild{"SysPlaneInfoList", nil}
    for i := range sysInfoList.SysPlaneInfoList {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.SysPlaneInfoList[i])] = types.YChild{"SysPlaneInfoList", &sysInfoList.SysPlaneInfoList[i]}
    }
    sysInfoList.EntityData.Children["rack_info_list"] = types.YChild{"RackInfoList", nil}
    for i := range sysInfoList.RackInfoList {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.RackInfoList[i])] = types.YChild{"RackInfoList", &sysInfoList.RackInfoList[i]}
    }
    sysInfoList.EntityData.Children["fsdb_status"] = types.YChild{"FsdbStatus", nil}
    for i := range sysInfoList.FsdbStatus {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.FsdbStatus[i])] = types.YChild{"FsdbStatus", &sysInfoList.FsdbStatus[i]}
    }
    sysInfoList.EntityData.Children["sfe_status"] = types.YChild{"SfeStatus", nil}
    for i := range sysInfoList.SfeStatus {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.SfeStatus[i])] = types.YChild{"SfeStatus", &sysInfoList.SfeStatus[i]}
    }
    sysInfoList.EntityData.Children["sfe_drvr_loc"] = types.YChild{"SfeDrvrLoc", nil}
    for i := range sysInfoList.SfeDrvrLoc {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.SfeDrvrLoc[i])] = types.YChild{"SfeDrvrLoc", &sysInfoList.SfeDrvrLoc[i]}
    }
    sysInfoList.EntityData.Children["sfe_fm_sep"] = types.YChild{"SfeFmSep", nil}
    for i := range sysInfoList.SfeFmSep {
        sysInfoList.EntityData.Children[types.GetSegmentPath(&sysInfoList.SfeFmSep[i])] = types.YChild{"SfeFmSep", &sysInfoList.SfeFmSep[i]}
    }
    sysInfoList.EntityData.Leafs = make(map[string]types.YLeaf)
    sysInfoList.EntityData.Leafs["index_key"] = types.YLeaf{"IndexKey", sysInfoList.IndexKey}
    sysInfoList.EntityData.Leafs["aggr_status"] = types.YLeaf{"AggrStatus", sysInfoList.AggrStatus}
    sysInfoList.EntityData.Leafs["available_rack_ids"] = types.YLeaf{"AvailableRackIds", sysInfoList.AvailableRackIds}
    sysInfoList.EntityData.Leafs["rack_id_separator"] = types.YLeaf{"RackIdSeparator", sysInfoList.RackIdSeparator}
    sysInfoList.EntityData.Leafs["available_fm_loc"] = types.YLeaf{"AvailableFmLoc", sysInfoList.AvailableFmLoc}
    sysInfoList.EntityData.Leafs["fm_loc_separator"] = types.YLeaf{"FmLocSeparator", sysInfoList.FmLocSeparator}
    sysInfoList.EntityData.Leafs["rack_total"] = types.YLeaf{"RackTotal", sysInfoList.RackTotal}
    sysInfoList.EntityData.Leafs["rack_lcc"] = types.YLeaf{"RackLcc", sysInfoList.RackLcc}
    sysInfoList.EntityData.Leafs["rack_fcc"] = types.YLeaf{"RackFcc", sysInfoList.RackFcc}
    sysInfoList.EntityData.Leafs["plane_up"] = types.YLeaf{"PlaneUp", sysInfoList.PlaneUp}
    sysInfoList.EntityData.Leafs["plane_dn"] = types.YLeaf{"PlaneDn", sysInfoList.PlaneDn}
    sysInfoList.EntityData.Leafs["plane_mcast_dn"] = types.YLeaf{"PlaneMcastDn", sysInfoList.PlaneMcastDn}
    sysInfoList.EntityData.Leafs["plane_admin_dn"] = types.YLeaf{"PlaneAdminDn", sysInfoList.PlaneAdminDn}
    sysInfoList.EntityData.Leafs["show_sys_plane_detail"] = types.YLeaf{"ShowSysPlaneDetail", sysInfoList.ShowSysPlaneDetail}
    sysInfoList.EntityData.Leafs["sfe_asics_total"] = types.YLeaf{"SfeAsicsTotal", sysInfoList.SfeAsicsTotal}
    sysInfoList.EntityData.Leafs["sfe_asics_up"] = types.YLeaf{"SfeAsicsUp", sysInfoList.SfeAsicsUp}
    sysInfoList.EntityData.Leafs["sfe_asics_dn"] = types.YLeaf{"SfeAsicsDn", sysInfoList.SfeAsicsDn}
    sysInfoList.EntityData.Leafs["fia_asics_total"] = types.YLeaf{"FiaAsicsTotal", sysInfoList.FiaAsicsTotal}
    sysInfoList.EntityData.Leafs["fia_asics_up"] = types.YLeaf{"FiaAsicsUp", sysInfoList.FiaAsicsUp}
    sysInfoList.EntityData.Leafs["fia_asics_dn"] = types.YLeaf{"FiaAsicsDn", sysInfoList.FiaAsicsDn}
    return &(sysInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    RacksWPlaneFault interface{}

    // The type is bool.
    IsDataDrop interface{}
}

func (sysPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_SysPlaneInfoList) GetEntityData() *types.CommonEntityData {
    sysPlaneInfoList.EntityData.YFilter = sysPlaneInfoList.YFilter
    sysPlaneInfoList.EntityData.YangName = "sys_plane_info_list"
    sysPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    sysPlaneInfoList.EntityData.ParentYangName = "sys_info_list"
    sysPlaneInfoList.EntityData.SegmentPath = "sys_plane_info_list" + "[plane_id='" + fmt.Sprintf("%v", sysPlaneInfoList.PlaneId) + "']"
    sysPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sysPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sysPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sysPlaneInfoList.EntityData.Children = make(map[string]types.YChild)
    sysPlaneInfoList.EntityData.Leafs = make(map[string]types.YLeaf)
    sysPlaneInfoList.EntityData.Leafs["plane_id"] = types.YLeaf{"PlaneId", sysPlaneInfoList.PlaneId}
    sysPlaneInfoList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", sysPlaneInfoList.AdminState}
    sysPlaneInfoList.EntityData.Leafs["plane_state"] = types.YLeaf{"PlaneState", sysPlaneInfoList.PlaneState}
    sysPlaneInfoList.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", sysPlaneInfoList.PlaneMode}
    sysPlaneInfoList.EntityData.Leafs["racks_w_plane_fault"] = types.YLeaf{"RacksWPlaneFault", sysPlaneInfoList.RacksWPlaneFault}
    sysPlaneInfoList.EntityData.Leafs["is_data_drop"] = types.YLeaf{"IsDataDrop", sysPlaneInfoList.IsDataDrop}
    return &(sysPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    SfeAsicsDn interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    FiaAsicsDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneUp interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneMcastDn interface{}

    // The type is interface{} with range: 0..4294967295.
    PlaneAdminDn interface{}

    // The type is bool. The default value is false.
    ShowRackPlaneDetail interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AmbaValid interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList.
    RackPlaneInfoList []Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
}

func (rackInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList) GetEntityData() *types.CommonEntityData {
    rackInfoList.EntityData.YFilter = rackInfoList.YFilter
    rackInfoList.EntityData.YangName = "rack_info_list"
    rackInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackInfoList.EntityData.ParentYangName = "sys_info_list"
    rackInfoList.EntityData.SegmentPath = "rack_info_list" + "[rack_id='" + fmt.Sprintf("%v", rackInfoList.RackId) + "']"
    rackInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackInfoList.EntityData.Children = make(map[string]types.YChild)
    rackInfoList.EntityData.Children["rack_plane_info_list"] = types.YChild{"RackPlaneInfoList", nil}
    for i := range rackInfoList.RackPlaneInfoList {
        rackInfoList.EntityData.Children[types.GetSegmentPath(&rackInfoList.RackPlaneInfoList[i])] = types.YChild{"RackPlaneInfoList", &rackInfoList.RackPlaneInfoList[i]}
    }
    rackInfoList.EntityData.Leafs = make(map[string]types.YLeaf)
    rackInfoList.EntityData.Leafs["rack_id"] = types.YLeaf{"RackId", rackInfoList.RackId}
    rackInfoList.EntityData.Leafs["rack_name"] = types.YLeaf{"RackName", rackInfoList.RackName}
    rackInfoList.EntityData.Leafs["rack_type"] = types.YLeaf{"RackType", rackInfoList.RackType}
    rackInfoList.EntityData.Leafs["sfe_asics_total"] = types.YLeaf{"SfeAsicsTotal", rackInfoList.SfeAsicsTotal}
    rackInfoList.EntityData.Leafs["sfe_asics_up"] = types.YLeaf{"SfeAsicsUp", rackInfoList.SfeAsicsUp}
    rackInfoList.EntityData.Leafs["sfe_asics_dn"] = types.YLeaf{"SfeAsicsDn", rackInfoList.SfeAsicsDn}
    rackInfoList.EntityData.Leafs["fia_asics_total"] = types.YLeaf{"FiaAsicsTotal", rackInfoList.FiaAsicsTotal}
    rackInfoList.EntityData.Leafs["fia_asics_up"] = types.YLeaf{"FiaAsicsUp", rackInfoList.FiaAsicsUp}
    rackInfoList.EntityData.Leafs["fia_asics_dn"] = types.YLeaf{"FiaAsicsDn", rackInfoList.FiaAsicsDn}
    rackInfoList.EntityData.Leafs["plane_up"] = types.YLeaf{"PlaneUp", rackInfoList.PlaneUp}
    rackInfoList.EntityData.Leafs["plane_dn"] = types.YLeaf{"PlaneDn", rackInfoList.PlaneDn}
    rackInfoList.EntityData.Leafs["plane_mcast_dn"] = types.YLeaf{"PlaneMcastDn", rackInfoList.PlaneMcastDn}
    rackInfoList.EntityData.Leafs["plane_admin_dn"] = types.YLeaf{"PlaneAdminDn", rackInfoList.PlaneAdminDn}
    rackInfoList.EntityData.Leafs["show_rack_plane_detail"] = types.YLeaf{"ShowRackPlaneDetail", rackInfoList.ShowRackPlaneDetail}
    rackInfoList.EntityData.Leafs["amba_valid"] = types.YLeaf{"AmbaValid", rackInfoList.AmbaValid}
    return &(rackInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneId interface{}

    // The type is string.
    PlaneState interface{}

    // The type is string.
    PlaneMode interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsTotal interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsUp interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    AsicsDn interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba.
    ReachableAmba []Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
}

func (rackPlaneInfoList *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList) GetEntityData() *types.CommonEntityData {
    rackPlaneInfoList.EntityData.YFilter = rackPlaneInfoList.YFilter
    rackPlaneInfoList.EntityData.YangName = "rack_plane_info_list"
    rackPlaneInfoList.EntityData.BundleName = "cisco_ios_xr"
    rackPlaneInfoList.EntityData.ParentYangName = "rack_info_list"
    rackPlaneInfoList.EntityData.SegmentPath = "rack_plane_info_list" + "[plane_id='" + fmt.Sprintf("%v", rackPlaneInfoList.PlaneId) + "']"
    rackPlaneInfoList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rackPlaneInfoList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rackPlaneInfoList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rackPlaneInfoList.EntityData.Children = make(map[string]types.YChild)
    rackPlaneInfoList.EntityData.Children["reachable_amba"] = types.YChild{"ReachableAmba", nil}
    for i := range rackPlaneInfoList.ReachableAmba {
        rackPlaneInfoList.EntityData.Children[types.GetSegmentPath(&rackPlaneInfoList.ReachableAmba[i])] = types.YChild{"ReachableAmba", &rackPlaneInfoList.ReachableAmba[i]}
    }
    rackPlaneInfoList.EntityData.Leafs = make(map[string]types.YLeaf)
    rackPlaneInfoList.EntityData.Leafs["plane_id"] = types.YLeaf{"PlaneId", rackPlaneInfoList.PlaneId}
    rackPlaneInfoList.EntityData.Leafs["plane_state"] = types.YLeaf{"PlaneState", rackPlaneInfoList.PlaneState}
    rackPlaneInfoList.EntityData.Leafs["plane_mode"] = types.YLeaf{"PlaneMode", rackPlaneInfoList.PlaneMode}
    rackPlaneInfoList.EntityData.Leafs["asics_total"] = types.YLeaf{"AsicsTotal", rackPlaneInfoList.AsicsTotal}
    rackPlaneInfoList.EntityData.Leafs["asics_up"] = types.YLeaf{"AsicsUp", rackPlaneInfoList.AsicsUp}
    rackPlaneInfoList.EntityData.Leafs["asics_dn"] = types.YLeaf{"AsicsDn", rackPlaneInfoList.AsicsDn}
    return &(rackPlaneInfoList.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba
type Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    NumReachable interface{}
}

func (reachableAmba *Controller_Fabric_Oper_FabHealth_SysInfoList_RackInfoList_RackPlaneInfoList_ReachableAmba) GetEntityData() *types.CommonEntityData {
    reachableAmba.EntityData.YFilter = reachableAmba.YFilter
    reachableAmba.EntityData.YangName = "reachable_amba"
    reachableAmba.EntityData.BundleName = "cisco_ios_xr"
    reachableAmba.EntityData.ParentYangName = "rack_plane_info_list"
    reachableAmba.EntityData.SegmentPath = "reachable_amba" + "[idx='" + fmt.Sprintf("%v", reachableAmba.Idx) + "']"
    reachableAmba.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachableAmba.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachableAmba.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachableAmba.EntityData.Children = make(map[string]types.YChild)
    reachableAmba.EntityData.Leafs = make(map[string]types.YLeaf)
    reachableAmba.EntityData.Leafs["idx"] = types.YLeaf{"Idx", reachableAmba.Idx}
    reachableAmba.EntityData.Leafs["num_reachable"] = types.YLeaf{"NumReachable", reachableAmba.NumReachable}
    return &(reachableAmba.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is bool.
    Status interface{}
}

func (fsdbStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_FsdbStatus) GetEntityData() *types.CommonEntityData {
    fsdbStatus.EntityData.YFilter = fsdbStatus.YFilter
    fsdbStatus.EntityData.YangName = "fsdb_status"
    fsdbStatus.EntityData.BundleName = "cisco_ios_xr"
    fsdbStatus.EntityData.ParentYangName = "sys_info_list"
    fsdbStatus.EntityData.SegmentPath = "fsdb_status" + "[rack_id='" + fmt.Sprintf("%v", fsdbStatus.RackId) + "']"
    fsdbStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbStatus.EntityData.Children = make(map[string]types.YChild)
    fsdbStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    fsdbStatus.EntityData.Leafs["rack_id"] = types.YLeaf{"RackId", fsdbStatus.RackId}
    fsdbStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", fsdbStatus.Status}
    return &(fsdbStatus.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackId interface{}

    // The type is bool.
    Status interface{}
}

func (sfeStatus *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeStatus) GetEntityData() *types.CommonEntityData {
    sfeStatus.EntityData.YFilter = sfeStatus.YFilter
    sfeStatus.EntityData.YangName = "sfe_status"
    sfeStatus.EntityData.BundleName = "cisco_ios_xr"
    sfeStatus.EntityData.ParentYangName = "sys_info_list"
    sfeStatus.EntityData.SegmentPath = "sfe_status" + "[rack_id='" + fmt.Sprintf("%v", sfeStatus.RackId) + "']"
    sfeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeStatus.EntityData.Children = make(map[string]types.YChild)
    sfeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    sfeStatus.EntityData.Leafs["rack_id"] = types.YLeaf{"RackId", sfeStatus.RackId}
    sfeStatus.EntityData.Leafs["status"] = types.YLeaf{"Status", sfeStatus.Status}
    return &(sfeStatus.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}
}

func (sfeDrvrLoc *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeDrvrLoc) GetEntityData() *types.CommonEntityData {
    sfeDrvrLoc.EntityData.YFilter = sfeDrvrLoc.YFilter
    sfeDrvrLoc.EntityData.YangName = "sfe_drvr_loc"
    sfeDrvrLoc.EntityData.BundleName = "cisco_ios_xr"
    sfeDrvrLoc.EntityData.ParentYangName = "sys_info_list"
    sfeDrvrLoc.EntityData.SegmentPath = "sfe_drvr_loc" + "[loc_str='" + fmt.Sprintf("%v", sfeDrvrLoc.LocStr) + "']"
    sfeDrvrLoc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeDrvrLoc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeDrvrLoc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeDrvrLoc.EntityData.Children = make(map[string]types.YChild)
    sfeDrvrLoc.EntityData.Leafs = make(map[string]types.YLeaf)
    sfeDrvrLoc.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", sfeDrvrLoc.LocStr}
    return &(sfeDrvrLoc.EntityData)
}

// Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep
type Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocStr interface{}
}

func (sfeFmSep *Controller_Fabric_Oper_FabHealth_SysInfoList_SfeFmSep) GetEntityData() *types.CommonEntityData {
    sfeFmSep.EntityData.YFilter = sfeFmSep.YFilter
    sfeFmSep.EntityData.YangName = "sfe_fm_sep"
    sfeFmSep.EntityData.BundleName = "cisco_ios_xr"
    sfeFmSep.EntityData.ParentYangName = "sys_info_list"
    sfeFmSep.EntityData.SegmentPath = "sfe_fm_sep" + "[loc_str='" + fmt.Sprintf("%v", sfeFmSep.LocStr) + "']"
    sfeFmSep.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeFmSep.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeFmSep.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeFmSep.EntityData.Children = make(map[string]types.YChild)
    sfeFmSep.EntityData.Leafs = make(map[string]types.YLeaf)
    sfeFmSep.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", sfeFmSep.LocStr}
    return &(sfeFmSep.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator
// FSDB Aggregator information
type Controller_Fabric_Oper_FsdbAggregator struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Fsdbagg Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
}

func (fsdbAggregator *Controller_Fabric_Oper_FsdbAggregator) GetEntityData() *types.CommonEntityData {
    fsdbAggregator.EntityData.YFilter = fsdbAggregator.YFilter
    fsdbAggregator.EntityData.YangName = "fsdb-aggregator"
    fsdbAggregator.EntityData.BundleName = "cisco_ios_xr"
    fsdbAggregator.EntityData.ParentYangName = "oper"
    fsdbAggregator.EntityData.SegmentPath = "fsdb-aggregator"
    fsdbAggregator.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbAggregator.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbAggregator.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbAggregator.EntityData.Children = make(map[string]types.YChild)
    fsdbAggregator.EntityData.Children["fsdbagg"] = types.YChild{"Fsdbagg", &fsdbAggregator.Fsdbagg}
    fsdbAggregator.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbAggregator.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace.
    Trace []Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
}

func (fsdbagg *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg) GetEntityData() *types.CommonEntityData {
    fsdbagg.EntityData.YFilter = fsdbagg.YFilter
    fsdbagg.EntityData.YangName = "fsdbagg"
    fsdbagg.EntityData.BundleName = "cisco_ios_xr"
    fsdbagg.EntityData.ParentYangName = "fsdb-aggregator"
    fsdbagg.EntityData.SegmentPath = "fsdbagg"
    fsdbagg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbagg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbagg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbagg.EntityData.Children = make(map[string]types.YChild)
    fsdbagg.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range fsdbagg.Trace {
        fsdbagg.EntityData.Children[types.GetSegmentPath(&fsdbagg.Trace[i])] = types.YChild{"Trace", &fsdbagg.Trace[i]}
    }
    fsdbagg.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbagg.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location.
    Location []Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdbagg"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions.
    AllOptions []Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbAggregator_Fsdbagg_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Fabric_Oper_Link
// Fabric link option
type Controller_Fabric_Oper_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack.
    Rack []Controller_Fabric_Oper_Link_Rack

    // The type is slice of Controller_Fabric_Oper_Link_NodeLocation.
    NodeLocation []Controller_Fabric_Oper_Link_NodeLocation
}

func (link *Controller_Fabric_Oper_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "oper"
    link.EntityData.SegmentPath = "link"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = make(map[string]types.YChild)
    link.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range link.Rack {
        link.EntityData.Children[types.GetSegmentPath(&link.Rack[i])] = types.YChild{"Rack", &link.Rack[i]}
    }
    link.EntityData.Children["node_location"] = types.YChild{"NodeLocation", nil}
    for i := range link.NodeLocation {
        link.EntityData.Children[types.GetSegmentPath(&link.NodeLocation[i])] = types.YChild{"NodeLocation", &link.NodeLocation[i]}
    }
    link.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(link.EntityData)
}

// Controller_Fabric_Oper_Link_Rack
type Controller_Fabric_Oper_Link_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port.
    Port []Controller_Fabric_Oper_Link_Rack_Port
}

func (rack *Controller_Fabric_Oper_Link_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "link"
    rack.EntityData.SegmentPath = "rack" + "[rack_number='" + fmt.Sprintf("%v", rack.RackNumber) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["port"] = types.YChild{"Port", nil}
    for i := range rack.Port {
        rack.EntityData.Children[types.GetSegmentPath(&rack.Port[i])] = types.YChild{"Port", &rack.Port[i]}
    }
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", rack.RackNumber}
    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port
type Controller_Fabric_Oper_Link_Rack_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'fia|s1|s2|s3'.
    Portname interface{}

    // The type is string. The default value is port..
    Description interface{}

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Location.
    Location []Controller_Fabric_Oper_Link_Rack_Port_Location

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Tx
}

func (port *Controller_Fabric_Oper_Link_Rack_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "rack"
    port.EntityData.SegmentPath = "port" + "[portname='" + fmt.Sprintf("%v", port.Portname) + "']"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range port.Location {
        port.EntityData.Children[types.GetSegmentPath(&port.Location[i])] = types.YChild{"Location", &port.Location[i]}
    }
    port.EntityData.Children["rx"] = types.YChild{"Rx", &port.Rx}
    port.EntityData.Children["tx"] = types.YChild{"Tx", &port.Tx}
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["portname"] = types.YLeaf{"Portname", port.Portname}
    port.EntityData.Leafs["description"] = types.YLeaf{"Description", port.Description}
    return &(port.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location
type Controller_Fabric_Oper_Link_Rack_Port_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0)/([F|f][C|c](0?[0-5]))/(0?[0-5])/(0?[0-9]|[1-9][0-9]|1[0-3][0-9]|14[0-3]))|((0?[0-9]|1[0-5])/(0?[0-9]|1[0-5])/(0?[0-5])/(0?[0-9]|[1-3][0-9]|4[0-7]))'.
    LocStr interface{}

    // Rx link option.
    Rx Controller_Fabric_Oper_Link_Rack_Port_Location_Rx

    // Tx link option.
    Tx Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
}

func (location *Controller_Fabric_Oper_Link_Rack_Port_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["rx"] = types.YChild{"Rx", &location.Rx}
    location.EntityData.Children["tx"] = types.YChild{"Tx", &location.Tx}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = make(map[string]types.YChild)
    rx.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range rx.DataIdx {
        rx.EntityData.Children[types.GetSegmentPath(&rx.DataIdx[i])] = types.YChild{"DataIdx", &rx.DataIdx[i]}
    }
    rx.EntityData.Children["brief"] = types.YChild{"Brief", &rx.Brief}
    rx.EntityData.Children["detail"] = types.YChild{"Detail", &rx.Detail}
    rx.EntityData.Children["state"] = types.YChild{"State", &rx.State}
    rx.EntityData.Children["statistics"] = types.YChild{"Statistics", &rx.Statistics}
    rx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["up"] = types.YChild{"Up", &state.Up}
    state.EntityData.Children["down"] = types.YChild{"Down", &state.Down}
    state.EntityData.Children["er"] = types.YChild{"Er", &state.Er}
    state.EntityData.Children["mismatch"] = types.YChild{"Mismatch", &state.Mismatch}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = make(map[string]types.YChild)
    up.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range up.DataIdx {
        up.EntityData.Children[types.GetSegmentPath(&up.DataIdx[i])] = types.YChild{"DataIdx", &up.DataIdx[i]}
    }
    up.EntityData.Children["brief"] = types.YChild{"Brief", &up.Brief}
    up.EntityData.Children["detail"] = types.YChild{"Detail", &up.Detail}
    up.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = make(map[string]types.YChild)
    down.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range down.DataIdx {
        down.EntityData.Children[types.GetSegmentPath(&down.DataIdx[i])] = types.YChild{"DataIdx", &down.DataIdx[i]}
    }
    down.EntityData.Children["brief"] = types.YChild{"Brief", &down.Brief}
    down.EntityData.Children["detail"] = types.YChild{"Detail", &down.Detail}
    down.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = make(map[string]types.YChild)
    er.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range er.DataIdx {
        er.EntityData.Children[types.GetSegmentPath(&er.DataIdx[i])] = types.YChild{"DataIdx", &er.DataIdx[i]}
    }
    er.EntityData.Children["brief"] = types.YChild{"Brief", &er.Brief}
    er.EntityData.Children["detail"] = types.YChild{"Detail", &er.Detail}
    er.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = make(map[string]types.YChild)
    mismatch.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children[types.GetSegmentPath(&mismatch.DataIdx[i])] = types.YChild{"DataIdx", &mismatch.DataIdx[i]}
    }
    mismatch.EntityData.Children["brief"] = types.YChild{"Brief", &mismatch.Brief}
    mismatch.EntityData.Children["detail"] = types.YChild{"Detail", &mismatch.Detail}
    mismatch.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range statistics.DataIdx {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.DataIdx[i])] = types.YChild{"DataIdx", &statistics.DataIdx[i]}
    }
    statistics.EntityData.Children["brief"] = types.YChild{"Brief", &statistics.Brief}
    statistics.EntityData.Children["detail"] = types.YChild{"Detail", &statistics.Detail}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = make(map[string]types.YChild)
    tx.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range tx.DataIdx {
        tx.EntityData.Children[types.GetSegmentPath(&tx.DataIdx[i])] = types.YChild{"DataIdx", &tx.DataIdx[i]}
    }
    tx.EntityData.Children["brief"] = types.YChild{"Brief", &tx.Brief}
    tx.EntityData.Children["detail"] = types.YChild{"Detail", &tx.Detail}
    tx.EntityData.Children["state"] = types.YChild{"State", &tx.State}
    tx.EntityData.Children["statistics"] = types.YChild{"Statistics", &tx.Statistics}
    tx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["up"] = types.YChild{"Up", &state.Up}
    state.EntityData.Children["down"] = types.YChild{"Down", &state.Down}
    state.EntityData.Children["er"] = types.YChild{"Er", &state.Er}
    state.EntityData.Children["mismatch"] = types.YChild{"Mismatch", &state.Mismatch}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = make(map[string]types.YChild)
    up.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range up.DataIdx {
        up.EntityData.Children[types.GetSegmentPath(&up.DataIdx[i])] = types.YChild{"DataIdx", &up.DataIdx[i]}
    }
    up.EntityData.Children["brief"] = types.YChild{"Brief", &up.Brief}
    up.EntityData.Children["detail"] = types.YChild{"Detail", &up.Detail}
    up.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = make(map[string]types.YChild)
    down.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range down.DataIdx {
        down.EntityData.Children[types.GetSegmentPath(&down.DataIdx[i])] = types.YChild{"DataIdx", &down.DataIdx[i]}
    }
    down.EntityData.Children["brief"] = types.YChild{"Brief", &down.Brief}
    down.EntityData.Children["detail"] = types.YChild{"Detail", &down.Detail}
    down.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = make(map[string]types.YChild)
    er.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range er.DataIdx {
        er.EntityData.Children[types.GetSegmentPath(&er.DataIdx[i])] = types.YChild{"DataIdx", &er.DataIdx[i]}
    }
    er.EntityData.Children["brief"] = types.YChild{"Brief", &er.Brief}
    er.EntityData.Children["detail"] = types.YChild{"Detail", &er.Detail}
    er.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = make(map[string]types.YChild)
    mismatch.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children[types.GetSegmentPath(&mismatch.DataIdx[i])] = types.YChild{"DataIdx", &mismatch.DataIdx[i]}
    }
    mismatch.EntityData.Children["brief"] = types.YChild{"Brief", &mismatch.Brief}
    mismatch.EntityData.Children["detail"] = types.YChild{"Detail", &mismatch.Detail}
    mismatch.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range statistics.DataIdx {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.DataIdx[i])] = types.YChild{"DataIdx", &statistics.DataIdx[i]}
    }
    statistics.EntityData.Children["brief"] = types.YChild{"Brief", &statistics.Brief}
    statistics.EntityData.Children["detail"] = types.YChild{"Detail", &statistics.Detail}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Location_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx
// Rx link option
type Controller_Fabric_Oper_Link_Rack_Port_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Rx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
}

func (rx *Controller_Fabric_Oper_Link_Rack_Port_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "port"
    rx.EntityData.SegmentPath = "rx"
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = make(map[string]types.YChild)
    rx.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range rx.DataIdx {
        rx.EntityData.Children[types.GetSegmentPath(&rx.DataIdx[i])] = types.YChild{"DataIdx", &rx.DataIdx[i]}
    }
    rx.EntityData.Children["brief"] = types.YChild{"Brief", &rx.Brief}
    rx.EntityData.Children["detail"] = types.YChild{"Detail", &rx.Detail}
    rx.EntityData.Children["state"] = types.YChild{"State", &rx.State}
    rx.EntityData.Children["statistics"] = types.YChild{"Statistics", &rx.Statistics}
    rx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "rx"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "rx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Rx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "rx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["up"] = types.YChild{"Up", &state.Up}
    state.EntityData.Children["down"] = types.YChild{"Down", &state.Down}
    state.EntityData.Children["er"] = types.YChild{"Er", &state.Er}
    state.EntityData.Children["mismatch"] = types.YChild{"Mismatch", &state.Mismatch}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = make(map[string]types.YChild)
    up.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range up.DataIdx {
        up.EntityData.Children[types.GetSegmentPath(&up.DataIdx[i])] = types.YChild{"DataIdx", &up.DataIdx[i]}
    }
    up.EntityData.Children["brief"] = types.YChild{"Brief", &up.Brief}
    up.EntityData.Children["detail"] = types.YChild{"Detail", &up.Detail}
    up.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = make(map[string]types.YChild)
    down.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range down.DataIdx {
        down.EntityData.Children[types.GetSegmentPath(&down.DataIdx[i])] = types.YChild{"DataIdx", &down.DataIdx[i]}
    }
    down.EntityData.Children["brief"] = types.YChild{"Brief", &down.Brief}
    down.EntityData.Children["detail"] = types.YChild{"Detail", &down.Detail}
    down.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = make(map[string]types.YChild)
    er.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range er.DataIdx {
        er.EntityData.Children[types.GetSegmentPath(&er.DataIdx[i])] = types.YChild{"DataIdx", &er.DataIdx[i]}
    }
    er.EntityData.Children["brief"] = types.YChild{"Brief", &er.Brief}
    er.EntityData.Children["detail"] = types.YChild{"Detail", &er.Detail}
    er.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = make(map[string]types.YChild)
    mismatch.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children[types.GetSegmentPath(&mismatch.DataIdx[i])] = types.YChild{"DataIdx", &mismatch.DataIdx[i]}
    }
    mismatch.EntityData.Children["brief"] = types.YChild{"Brief", &mismatch.Brief}
    mismatch.EntityData.Children["detail"] = types.YChild{"Detail", &mismatch.Detail}
    mismatch.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Rx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "rx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range statistics.DataIdx {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.DataIdx[i])] = types.YChild{"DataIdx", &statistics.DataIdx[i]}
    }
    statistics.EntityData.Children["brief"] = types.YChild{"Brief", &statistics.Brief}
    statistics.EntityData.Children["detail"] = types.YChild{"Detail", &statistics.Detail}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Rx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx
// Tx link option
type Controller_Fabric_Oper_Link_Rack_Port_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail

    
    State Controller_Fabric_Oper_Link_Rack_Port_Tx_State

    
    Statistics Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
}

func (tx *Controller_Fabric_Oper_Link_Rack_Port_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "port"
    tx.EntityData.SegmentPath = "tx"
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = make(map[string]types.YChild)
    tx.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range tx.DataIdx {
        tx.EntityData.Children[types.GetSegmentPath(&tx.DataIdx[i])] = types.YChild{"DataIdx", &tx.DataIdx[i]}
    }
    tx.EntityData.Children["brief"] = types.YChild{"Brief", &tx.Brief}
    tx.EntityData.Children["detail"] = types.YChild{"Detail", &tx.Detail}
    tx.EntityData.Children["state"] = types.YChild{"State", &tx.State}
    tx.EntityData.Children["statistics"] = types.YChild{"Statistics", &tx.Statistics}
    tx.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(tx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "tx"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "tx"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Up Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up

    
    Down Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down

    
    Er Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er

    
    Mismatch Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
}

func (state *Controller_Fabric_Oper_Link_Rack_Port_Tx_State) GetEntityData() *types.CommonEntityData {
    state.EntityData.YFilter = state.YFilter
    state.EntityData.YangName = "state"
    state.EntityData.BundleName = "cisco_ios_xr"
    state.EntityData.ParentYangName = "tx"
    state.EntityData.SegmentPath = "state"
    state.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    state.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    state.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    state.EntityData.Children = make(map[string]types.YChild)
    state.EntityData.Children["up"] = types.YChild{"Up", &state.Up}
    state.EntityData.Children["down"] = types.YChild{"Down", &state.Down}
    state.EntityData.Children["er"] = types.YChild{"Er", &state.Er}
    state.EntityData.Children["mismatch"] = types.YChild{"Mismatch", &state.Mismatch}
    state.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(state.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
}

func (up *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up) GetEntityData() *types.CommonEntityData {
    up.EntityData.YFilter = up.YFilter
    up.EntityData.YangName = "up"
    up.EntityData.BundleName = "cisco_ios_xr"
    up.EntityData.ParentYangName = "state"
    up.EntityData.SegmentPath = "up"
    up.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    up.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    up.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    up.EntityData.Children = make(map[string]types.YChild)
    up.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range up.DataIdx {
        up.EntityData.Children[types.GetSegmentPath(&up.DataIdx[i])] = types.YChild{"DataIdx", &up.DataIdx[i]}
    }
    up.EntityData.Children["brief"] = types.YChild{"Brief", &up.Brief}
    up.EntityData.Children["detail"] = types.YChild{"Detail", &up.Detail}
    up.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(up.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "up"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "up"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "up"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Up_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
}

func (down *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down) GetEntityData() *types.CommonEntityData {
    down.EntityData.YFilter = down.YFilter
    down.EntityData.YangName = "down"
    down.EntityData.BundleName = "cisco_ios_xr"
    down.EntityData.ParentYangName = "state"
    down.EntityData.SegmentPath = "down"
    down.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    down.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    down.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    down.EntityData.Children = make(map[string]types.YChild)
    down.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range down.DataIdx {
        down.EntityData.Children[types.GetSegmentPath(&down.DataIdx[i])] = types.YChild{"DataIdx", &down.DataIdx[i]}
    }
    down.EntityData.Children["brief"] = types.YChild{"Brief", &down.Brief}
    down.EntityData.Children["detail"] = types.YChild{"Detail", &down.Detail}
    down.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(down.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "down"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "down"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "down"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Down_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail
}

func (er *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er) GetEntityData() *types.CommonEntityData {
    er.EntityData.YFilter = er.YFilter
    er.EntityData.YangName = "er"
    er.EntityData.BundleName = "cisco_ios_xr"
    er.EntityData.ParentYangName = "state"
    er.EntityData.SegmentPath = "er"
    er.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    er.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    er.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    er.EntityData.Children = make(map[string]types.YChild)
    er.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range er.DataIdx {
        er.EntityData.Children[types.GetSegmentPath(&er.DataIdx[i])] = types.YChild{"DataIdx", &er.DataIdx[i]}
    }
    er.EntityData.Children["brief"] = types.YChild{"Brief", &er.Brief}
    er.EntityData.Children["detail"] = types.YChild{"Detail", &er.Detail}
    er.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(er.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "er"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "er"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "er"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Er_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
}

func (mismatch *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch) GetEntityData() *types.CommonEntityData {
    mismatch.EntityData.YFilter = mismatch.YFilter
    mismatch.EntityData.YangName = "mismatch"
    mismatch.EntityData.BundleName = "cisco_ios_xr"
    mismatch.EntityData.ParentYangName = "state"
    mismatch.EntityData.SegmentPath = "mismatch"
    mismatch.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mismatch.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mismatch.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mismatch.EntityData.Children = make(map[string]types.YChild)
    mismatch.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range mismatch.DataIdx {
        mismatch.EntityData.Children[types.GetSegmentPath(&mismatch.DataIdx[i])] = types.YChild{"DataIdx", &mismatch.DataIdx[i]}
    }
    mismatch.EntityData.Children["brief"] = types.YChild{"Brief", &mismatch.Brief}
    mismatch.EntityData.Children["detail"] = types.YChild{"Detail", &mismatch.Detail}
    mismatch.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mismatch.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "mismatch"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "mismatch"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Brief_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mismatch"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    SfePort interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    NearEndCdrLn interface{}

    // The type is string.
    NearEndCxpCh interface{}

    // The type is string.
    FarEndCxpCh interface{}

    // The type is string.
    FarEndCdrLn interface{}

    // The type is string.
    NeighborLink interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History.
    History []Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range dataIdx.History {
        dataIdx.EntityData.Children[types.GetSegmentPath(&dataIdx.History[i])] = types.YChild{"History", &dataIdx.History[i]}
    }
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", dataIdx.AdminState}
    dataIdx.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", dataIdx.OperState}
    dataIdx.EntityData.Leafs["near_end_cdr_ln"] = types.YLeaf{"NearEndCdrLn", dataIdx.NearEndCdrLn}
    dataIdx.EntityData.Leafs["near_end_cxp_ch"] = types.YLeaf{"NearEndCxpCh", dataIdx.NearEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cxp_ch"] = types.YLeaf{"FarEndCxpCh", dataIdx.FarEndCxpCh}
    dataIdx.EntityData.Leafs["far_end_cdr_ln"] = types.YLeaf{"FarEndCdrLn", dataIdx.FarEndCdrLn}
    dataIdx.EntityData.Leafs["neighbor_link"] = types.YLeaf{"NeighborLink", dataIdx.NeighborLink}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History
type Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Link_Rack_Port_Tx_State_Mismatch_Detail_DataIdx_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "data_idx"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx

    
    Brief Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief

    
    Detail Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
}

func (statistics *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "tx"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range statistics.DataIdx {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.DataIdx[i])] = types.YChild{"DataIdx", &statistics.DataIdx[i]}
    }
    statistics.EntityData.Children["brief"] = types.YChild{"Brief", &statistics.Brief}
    statistics.EntityData.Children["detail"] = types.YChild{"Detail", &statistics.Detail}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "statistics"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
}

func (brief *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "statistics"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range brief.DataIdx {
        brief.EntityData.Children[types.GetSegmentPath(&brief.DataIdx[i])] = types.YChild{"DataIdx", &brief.DataIdx[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Brief_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "brief"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx.
    DataIdx []Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
}

func (detail *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["data_idx"] = types.YChild{"DataIdx", nil}
    for i := range detail.DataIdx {
        detail.EntityData.Children[types.GetSegmentPath(&detail.DataIdx[i])] = types.YChild{"DataIdx", &detail.DataIdx[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx
type Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    PortDataIdx interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    SfePort interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BDisparityErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Rx8B10BCodeErrors interface{}

    // The type is bool. The default value is false.
    IsLinkError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCrcError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkSizeError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkMisAlignError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkCodeGroupError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigLockError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNoSigAcceptError interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkTokensError interface{}

    // The type is interface{} with range: 0..4294967295.
    ErrorTokenCount interface{}
}

func (dataIdx *Controller_Fabric_Oper_Link_Rack_Port_Tx_Statistics_Detail_DataIdx) GetEntityData() *types.CommonEntityData {
    dataIdx.EntityData.YFilter = dataIdx.YFilter
    dataIdx.EntityData.YangName = "data_idx"
    dataIdx.EntityData.BundleName = "cisco_ios_xr"
    dataIdx.EntityData.ParentYangName = "detail"
    dataIdx.EntityData.SegmentPath = "data_idx" + "[port_data_idx='" + fmt.Sprintf("%v", dataIdx.PortDataIdx) + "']"
    dataIdx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dataIdx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dataIdx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dataIdx.EntityData.Children = make(map[string]types.YChild)
    dataIdx.EntityData.Leafs = make(map[string]types.YLeaf)
    dataIdx.EntityData.Leafs["port_data_idx"] = types.YLeaf{"PortDataIdx", dataIdx.PortDataIdx}
    dataIdx.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", dataIdx.RackNum}
    dataIdx.EntityData.Leafs["sfe_port"] = types.YLeaf{"SfePort", dataIdx.SfePort}
    dataIdx.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", dataIdx.TxControlCellsCounter}
    dataIdx.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", dataIdx.TxDataCellCounter}
    dataIdx.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", dataIdx.TxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", dataIdx.RxCrcErrorsCounter}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", dataIdx.RxLfecFecCorrectableError}
    dataIdx.EntityData.Leafs["RX_8b_10b_disparity_errors"] = types.YLeaf{"Rx8B10BDisparityErrors", dataIdx.Rx8B10BDisparityErrors}
    dataIdx.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", dataIdx.RxControlCellsCounter}
    dataIdx.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", dataIdx.RxDataCellCounter}
    dataIdx.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", dataIdx.RxDataByteCounter}
    dataIdx.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", dataIdx.RxDroppedRetransmittedControl}
    dataIdx.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", dataIdx.TxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", dataIdx.RxAsynFifoRate}
    dataIdx.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", dataIdx.RxLfecFecUncorrectableErrors}
    dataIdx.EntityData.Leafs["RX_8b_10b_code_errors"] = types.YLeaf{"Rx8B10BCodeErrors", dataIdx.Rx8B10BCodeErrors}
    dataIdx.EntityData.Leafs["is_link_error"] = types.YLeaf{"IsLinkError", dataIdx.IsLinkError}
    dataIdx.EntityData.Leafs["link_crc_error"] = types.YLeaf{"LinkCrcError", dataIdx.LinkCrcError}
    dataIdx.EntityData.Leafs["link_size_error"] = types.YLeaf{"LinkSizeError", dataIdx.LinkSizeError}
    dataIdx.EntityData.Leafs["link_mis_align_error"] = types.YLeaf{"LinkMisAlignError", dataIdx.LinkMisAlignError}
    dataIdx.EntityData.Leafs["link_code_group_error"] = types.YLeaf{"LinkCodeGroupError", dataIdx.LinkCodeGroupError}
    dataIdx.EntityData.Leafs["link_no_sig_lock_error"] = types.YLeaf{"LinkNoSigLockError", dataIdx.LinkNoSigLockError}
    dataIdx.EntityData.Leafs["link_no_sig_accept_error"] = types.YLeaf{"LinkNoSigAcceptError", dataIdx.LinkNoSigAcceptError}
    dataIdx.EntityData.Leafs["link_tokens_error"] = types.YLeaf{"LinkTokensError", dataIdx.LinkTokensError}
    dataIdx.EntityData.Leafs["error_token_count"] = types.YLeaf{"ErrorTokenCount", dataIdx.ErrorTokenCount}
    return &(dataIdx.EntityData)
}

// Controller_Fabric_Oper_Link_NodeLocation
type Controller_Fabric_Oper_Link_NodeLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    NodeStr interface{}
}

func (nodeLocation *Controller_Fabric_Oper_Link_NodeLocation) GetEntityData() *types.CommonEntityData {
    nodeLocation.EntityData.YFilter = nodeLocation.YFilter
    nodeLocation.EntityData.YangName = "node_location"
    nodeLocation.EntityData.BundleName = "cisco_ios_xr"
    nodeLocation.EntityData.ParentYangName = "link"
    nodeLocation.EntityData.SegmentPath = "node_location" + "[node_str='" + fmt.Sprintf("%v", nodeLocation.NodeStr) + "']"
    nodeLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeLocation.EntityData.Children = make(map[string]types.YChild)
    nodeLocation.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeLocation.EntityData.Leafs["node_str"] = types.YLeaf{"NodeStr", nodeLocation.NodeStr}
    return &(nodeLocation.EntityData)
}

// Controller_Fabric_Oper_Sfe
// Switch Fabric Element option
type Controller_Fabric_Oper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack.
    Rack []Controller_Fabric_Oper_Sfe_Rack
}

func (sfe *Controller_Fabric_Oper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = make(map[string]types.YChild)
    sfe.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range sfe.Rack {
        sfe.EntityData.Children[types.GetSegmentPath(&sfe.Rack[i])] = types.YChild{"Rack", &sfe.Rack[i]}
    }
    sfe.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfe.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack
type Controller_Fabric_Oper_Sfe_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages.
    AsicStages []Controller_Fabric_Oper_Sfe_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_Sfe_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "sfe"
    rack.EntityData.SegmentPath = "rack" + "[rack_number='" + fmt.Sprintf("%v", rack.RackNumber) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["asic_stages"] = types.YChild{"AsicStages", nil}
    for i := range rack.AsicStages {
        rack.EntityData.Children[types.GetSegmentPath(&rack.AsicStages[i])] = types.YChild{"AsicStages", &rack.AsicStages[i]}
    }
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", rack.RackNumber}
    return &(rack.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages
type Controller_Fabric_Oper_Sfe_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'fia|s123|s13|s2|b2b'.
    AsicStageName interface{}

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location.
    Location []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location

    // The type is slice of Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
}

func (asicStages *Controller_Fabric_Oper_Sfe_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + "[asic_stage_name='" + fmt.Sprintf("%v", asicStages.AsicStageName) + "']"
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = make(map[string]types.YChild)
    asicStages.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range asicStages.Location {
        asicStages.EntityData.Children[types.GetSegmentPath(&asicStages.Location[i])] = types.YChild{"Location", &asicStages.Location[i]}
    }
    asicStages.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range asicStages.AsicList {
        asicStages.EntityData.Children[types.GetSegmentPath(&asicStages.AsicList[i])] = types.YChild{"AsicList", &asicStages.AsicList[i]}
    }
    asicStages.EntityData.Children["brief"] = types.YChild{"Brief", &asicStages.Brief}
    asicStages.EntityData.Children["detail"] = types.YChild{"Detail", &asicStages.Detail}
    asicStages.EntityData.Leafs = make(map[string]types.YLeaf)
    asicStages.EntityData.Leafs["asic_stage_name"] = types.YLeaf{"AsicStageName", asicStages.AsicStageName}
    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5]))/(0?[0-5]))|((0?[0-9]|1[0-5])/(0?[0-9]|1[0-5])/(0?[0-5]))|(([F|f][0-3])/([F|f][C|c](0?[0-9]|1[0-1]))/(0?[0-2]))'.
    LocStr interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList

    
    Brief Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief

    
    Detail Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
}

func (location *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "asic_stages"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range location.AsicList {
        location.EntityData.Children[types.GetSegmentPath(&location.AsicList[i])] = types.YChild{"AsicList", &location.AsicList[i]}
    }
    location.EntityData.Children["brief"] = types.YChild{"Brief", &location.Brief}
    location.EntityData.Children["detail"] = types.YChild{"Detail", &location.Detail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "location"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "location"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range brief.AsicList {
        brief.EntityData.Children[types.GetSegmentPath(&brief.AsicList[i])] = types.YChild{"AsicList", &brief.AsicList[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "location"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range detail.AsicList {
        detail.EntityData.Children[types.GetSegmentPath(&detail.AsicList[i])] = types.YChild{"AsicList", &detail.AsicList[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Location_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "asic_stages"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
}

func (brief *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "asic_stages"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range brief.AsicList {
        brief.EntityData.Children[types.GetSegmentPath(&brief.AsicList[i])] = types.YChild{"AsicList", &brief.AsicList[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "brief"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Brief_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList.
    AsicList []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
}

func (detail *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "asic_stages"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range detail.AsicList {
        detail.EntityData.Children[types.GetSegmentPath(&detail.AsicList[i])] = types.YChild{"AsicList", &detail.AsicList[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    AsicIdx interface{}

    // The type is string.
    AsicLocStr interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    DownFlags interface{}

    // The type is string.
    FabGroup interface{}

    // The type is slice of
    // Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History.
    History []Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
}

func (asicList *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "detail"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range asicList.History {
        asicList.EntityData.Children[types.GetSegmentPath(&asicList.History[i])] = types.YChild{"History", &asicList.History[i]}
    }
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_loc_str"] = types.YLeaf{"AsicLocStr", asicList.AsicLocStr}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["down_flags"] = types.YLeaf{"DownFlags", asicList.DownFlags}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    return &(asicList.EntityData)
}

// Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History
type Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}
}

func (history *Controller_Fabric_Oper_Sfe_Rack_AsicStages_Detail_AsicList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "asic_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    return &(history.EntityData)
}

// Controller_Fabric_Oper_FsdbPla
// plane availability status option
type Controller_Fabric_Oper_FsdbPla struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack. The type is slice of Controller_Fabric_Oper_FsdbPla_Rack.
    Rack []Controller_Fabric_Oper_FsdbPla_Rack
}

func (fsdbPla *Controller_Fabric_Oper_FsdbPla) GetEntityData() *types.CommonEntityData {
    fsdbPla.EntityData.YFilter = fsdbPla.YFilter
    fsdbPla.EntityData.YangName = "fsdb_pla"
    fsdbPla.EntityData.BundleName = "cisco_ios_xr"
    fsdbPla.EntityData.ParentYangName = "oper"
    fsdbPla.EntityData.SegmentPath = "fsdb_pla"
    fsdbPla.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbPla.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbPla.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbPla.EntityData.Children = make(map[string]types.YChild)
    fsdbPla.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range fsdbPla.Rack {
        fsdbPla.EntityData.Children[types.GetSegmentPath(&fsdbPla.Rack[i])] = types.YChild{"Rack", &fsdbPla.Rack[i]}
    }
    fsdbPla.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbPla.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack
// Rack
type Controller_Fabric_Oper_FsdbPla_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    RackNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages.
    AsicStages []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
}

func (rack *Controller_Fabric_Oper_FsdbPla_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "fsdb_pla"
    rack.EntityData.SegmentPath = "rack" + "[rack_number='" + fmt.Sprintf("%v", rack.RackNumber) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["asic_stages"] = types.YChild{"AsicStages", nil}
    for i := range rack.AsicStages {
        rack.EntityData.Children[types.GetSegmentPath(&rack.AsicStages[i])] = types.YChild{"AsicStages", &rack.AsicStages[i]}
    }
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", rack.RackNumber}
    return &(rack.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b's1|s2|s3|s123'.
    AsicStageIdx interface{}

    // The type is string with pattern: b's1|s2|s3|s123'.
    AsicStageName interface{}

    // The type is string.
    RackNumber interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNumber interface{}

    // The type is slice of Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids.
    Fabids []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids.
    DownFabids []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination.
    Destination []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
}

func (asicStages *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages) GetEntityData() *types.CommonEntityData {
    asicStages.EntityData.YFilter = asicStages.YFilter
    asicStages.EntityData.YangName = "asic_stages"
    asicStages.EntityData.BundleName = "cisco_ios_xr"
    asicStages.EntityData.ParentYangName = "rack"
    asicStages.EntityData.SegmentPath = "asic_stages" + "[asic_stage_idx='" + fmt.Sprintf("%v", asicStages.AsicStageIdx) + "']"
    asicStages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicStages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicStages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicStages.EntityData.Children = make(map[string]types.YChild)
    asicStages.EntityData.Children["fabids"] = types.YChild{"Fabids", nil}
    for i := range asicStages.Fabids {
        asicStages.EntityData.Children[types.GetSegmentPath(&asicStages.Fabids[i])] = types.YChild{"Fabids", &asicStages.Fabids[i]}
    }
    asicStages.EntityData.Children["down_fabids"] = types.YChild{"DownFabids", nil}
    for i := range asicStages.DownFabids {
        asicStages.EntityData.Children[types.GetSegmentPath(&asicStages.DownFabids[i])] = types.YChild{"DownFabids", &asicStages.DownFabids[i]}
    }
    asicStages.EntityData.Children["destination"] = types.YChild{"Destination", nil}
    for i := range asicStages.Destination {
        asicStages.EntityData.Children[types.GetSegmentPath(&asicStages.Destination[i])] = types.YChild{"Destination", &asicStages.Destination[i]}
    }
    asicStages.EntityData.Leafs = make(map[string]types.YLeaf)
    asicStages.EntityData.Leafs["asic_stage_idx"] = types.YLeaf{"AsicStageIdx", asicStages.AsicStageIdx}
    asicStages.EntityData.Leafs["asic_stage_name"] = types.YLeaf{"AsicStageName", asicStages.AsicStageName}
    asicStages.EntityData.Leafs["rack_number"] = types.YLeaf{"RackNumber", asicStages.RackNumber}
    asicStages.EntityData.Leafs["plane_number"] = types.YLeaf{"PlaneNumber", asicStages.PlaneNumber}
    return &(asicStages.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    Plane0Mask interface{}

    // The type is string.
    Plane1Mask interface{}

    // The type is string.
    Plane2Mask interface{}

    // The type is string.
    Plane3Mask interface{}

    // The type is string.
    Plane4Mask interface{}

    // The type is string.
    Plane5Mask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MinUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    MaxUpLinksPerAsic interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}
}

func (fabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Fabids) GetEntityData() *types.CommonEntityData {
    fabids.EntityData.YFilter = fabids.YFilter
    fabids.EntityData.YangName = "fabids"
    fabids.EntityData.BundleName = "cisco_ios_xr"
    fabids.EntityData.ParentYangName = "asic_stages"
    fabids.EntityData.SegmentPath = "fabids" + "[idx='" + fmt.Sprintf("%v", fabids.Idx) + "']"
    fabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabids.EntityData.Children = make(map[string]types.YChild)
    fabids.EntityData.Leafs = make(map[string]types.YLeaf)
    fabids.EntityData.Leafs["idx"] = types.YLeaf{"Idx", fabids.Idx}
    fabids.EntityData.Leafs["fabid_address"] = types.YLeaf{"FabidAddress", fabids.FabidAddress}
    fabids.EntityData.Leafs["plane_num"] = types.YLeaf{"PlaneNum", fabids.PlaneNum}
    fabids.EntityData.Leafs["plane_0_mask"] = types.YLeaf{"Plane0Mask", fabids.Plane0Mask}
    fabids.EntityData.Leafs["plane_1_mask"] = types.YLeaf{"Plane1Mask", fabids.Plane1Mask}
    fabids.EntityData.Leafs["plane_2_mask"] = types.YLeaf{"Plane2Mask", fabids.Plane2Mask}
    fabids.EntityData.Leafs["plane_3_mask"] = types.YLeaf{"Plane3Mask", fabids.Plane3Mask}
    fabids.EntityData.Leafs["plane_4_mask"] = types.YLeaf{"Plane4Mask", fabids.Plane4Mask}
    fabids.EntityData.Leafs["plane_5_mask"] = types.YLeaf{"Plane5Mask", fabids.Plane5Mask}
    fabids.EntityData.Leafs["min_links_per_asic"] = types.YLeaf{"MinLinksPerAsic", fabids.MinLinksPerAsic}
    fabids.EntityData.Leafs["max_links_per_asic"] = types.YLeaf{"MaxLinksPerAsic", fabids.MaxLinksPerAsic}
    fabids.EntityData.Leafs["total_links"] = types.YLeaf{"TotalLinks", fabids.TotalLinks}
    fabids.EntityData.Leafs["min_up_links_per_asic"] = types.YLeaf{"MinUpLinksPerAsic", fabids.MinUpLinksPerAsic}
    fabids.EntityData.Leafs["max_up_links_per_asic"] = types.YLeaf{"MaxUpLinksPerAsic", fabids.MaxUpLinksPerAsic}
    fabids.EntityData.Leafs["total_up_links"] = types.YLeaf{"TotalUpLinks", fabids.TotalUpLinks}
    return &(fabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is string.
    FabidAddress interface{}

    // The type is string.
    FabidStatus interface{}
}

func (downFabids *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_DownFabids) GetEntityData() *types.CommonEntityData {
    downFabids.EntityData.YFilter = downFabids.YFilter
    downFabids.EntityData.YangName = "down_fabids"
    downFabids.EntityData.BundleName = "cisco_ios_xr"
    downFabids.EntityData.ParentYangName = "asic_stages"
    downFabids.EntityData.SegmentPath = "down_fabids" + "[idx='" + fmt.Sprintf("%v", downFabids.Idx) + "']"
    downFabids.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downFabids.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downFabids.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downFabids.EntityData.Children = make(map[string]types.YChild)
    downFabids.EntityData.Leafs = make(map[string]types.YLeaf)
    downFabids.EntityData.Leafs["idx"] = types.YLeaf{"Idx", downFabids.Idx}
    downFabids.EntityData.Leafs["fabid_address"] = types.YLeaf{"FabidAddress", downFabids.FabidAddress}
    downFabids.EntityData.Leafs["fabid_status"] = types.YLeaf{"FabidStatus", downFabids.FabidStatus}
    return &(downFabids.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'(0?[0-9]|1[0-5])/(0?[0-7])/(0?[0-5])|([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|10[0-1][0-9]|102[0-3])'.
    AmbaId interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes.
    Planes []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
}

func (destination *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination) GetEntityData() *types.CommonEntityData {
    destination.EntityData.YFilter = destination.YFilter
    destination.EntityData.YangName = "destination"
    destination.EntityData.BundleName = "cisco_ios_xr"
    destination.EntityData.ParentYangName = "asic_stages"
    destination.EntityData.SegmentPath = "destination" + "[amba_id='" + fmt.Sprintf("%v", destination.AmbaId) + "']"
    destination.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destination.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destination.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destination.EntityData.Children = make(map[string]types.YChild)
    destination.EntityData.Children["planes"] = types.YChild{"Planes", nil}
    for i := range destination.Planes {
        destination.EntityData.Children[types.GetSegmentPath(&destination.Planes[i])] = types.YChild{"Planes", &destination.Planes[i]}
    }
    destination.EntityData.Leafs = make(map[string]types.YLeaf)
    destination.EntityData.Leafs["amba_id"] = types.YLeaf{"AmbaId", destination.AmbaId}
    return &(destination.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    PlaneIdx interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PlaneNum interface{}

    // The type is string.
    FabidName interface{}

    // The type is bool.
    ShowFabid interface{}

    // The type is string.
    AsicStage interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards.
    Cards []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
}

func (planes *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes) GetEntityData() *types.CommonEntityData {
    planes.EntityData.YFilter = planes.YFilter
    planes.EntityData.YangName = "planes"
    planes.EntityData.BundleName = "cisco_ios_xr"
    planes.EntityData.ParentYangName = "destination"
    planes.EntityData.SegmentPath = "planes" + "[plane_idx='" + fmt.Sprintf("%v", planes.PlaneIdx) + "']"
    planes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    planes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    planes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    planes.EntityData.Children = make(map[string]types.YChild)
    planes.EntityData.Children["cards"] = types.YChild{"Cards", nil}
    for i := range planes.Cards {
        planes.EntityData.Children[types.GetSegmentPath(&planes.Cards[i])] = types.YChild{"Cards", &planes.Cards[i]}
    }
    planes.EntityData.Leafs = make(map[string]types.YLeaf)
    planes.EntityData.Leafs["plane_idx"] = types.YLeaf{"PlaneIdx", planes.PlaneIdx}
    planes.EntityData.Leafs["plane_num"] = types.YLeaf{"PlaneNum", planes.PlaneNum}
    planes.EntityData.Leafs["fabid_name"] = types.YLeaf{"FabidName", planes.FabidName}
    planes.EntityData.Leafs["show_fabid"] = types.YLeaf{"ShowFabid", planes.ShowFabid}
    planes.EntityData.Leafs["asic_stage"] = types.YLeaf{"AsicStage", planes.AsicStage}
    return &(planes.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CardIdx interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics.
    Asics []Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
}

func (cards *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards) GetEntityData() *types.CommonEntityData {
    cards.EntityData.YFilter = cards.YFilter
    cards.EntityData.YangName = "cards"
    cards.EntityData.BundleName = "cisco_ios_xr"
    cards.EntityData.ParentYangName = "planes"
    cards.EntityData.SegmentPath = "cards" + "[card_idx='" + fmt.Sprintf("%v", cards.CardIdx) + "']"
    cards.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cards.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cards.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cards.EntityData.Children = make(map[string]types.YChild)
    cards.EntityData.Children["asics"] = types.YChild{"Asics", nil}
    for i := range cards.Asics {
        cards.EntityData.Children[types.GetSegmentPath(&cards.Asics[i])] = types.YChild{"Asics", &cards.Asics[i]}
    }
    cards.EntityData.Leafs = make(map[string]types.YLeaf)
    cards.EntityData.Leafs["card_idx"] = types.YLeaf{"CardIdx", cards.CardIdx}
    return &(cards.EntityData)
}

// Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics
type Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    AsicIdx interface{}

    // The type is string.
    AsicRsa interface{}

    // The type is string.
    ReachabilityMask interface{}

    // The type is string.
    LinkupMask interface{}

    // The type is string.
    AllReachMask interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalUpLinks interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TotalAllReachLinks interface{}

    // The type is string with pattern: b's1|s2|s3|s123'.
    AsicStageName interface{}
}

func (asics *Controller_Fabric_Oper_FsdbPla_Rack_AsicStages_Destination_Planes_Cards_Asics) GetEntityData() *types.CommonEntityData {
    asics.EntityData.YFilter = asics.YFilter
    asics.EntityData.YangName = "asics"
    asics.EntityData.BundleName = "cisco_ios_xr"
    asics.EntityData.ParentYangName = "cards"
    asics.EntityData.SegmentPath = "asics" + "[asic_idx='" + fmt.Sprintf("%v", asics.AsicIdx) + "']"
    asics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asics.EntityData.Children = make(map[string]types.YChild)
    asics.EntityData.Leafs = make(map[string]types.YLeaf)
    asics.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asics.AsicIdx}
    asics.EntityData.Leafs["asic_RSA"] = types.YLeaf{"AsicRsa", asics.AsicRsa}
    asics.EntityData.Leafs["reachability_mask"] = types.YLeaf{"ReachabilityMask", asics.ReachabilityMask}
    asics.EntityData.Leafs["linkup_mask"] = types.YLeaf{"LinkupMask", asics.LinkupMask}
    asics.EntityData.Leafs["all_reach_mask"] = types.YLeaf{"AllReachMask", asics.AllReachMask}
    asics.EntityData.Leafs["total_links"] = types.YLeaf{"TotalLinks", asics.TotalLinks}
    asics.EntityData.Leafs["total_up_links"] = types.YLeaf{"TotalUpLinks", asics.TotalUpLinks}
    asics.EntityData.Leafs["total_all_reach_links"] = types.YLeaf{"TotalAllReachLinks", asics.TotalAllReachLinks}
    asics.EntityData.Leafs["asic_stage_name"] = types.YLeaf{"AsicStageName", asics.AsicStageName}
    return &(asics.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr
// FSDB Server information
type Controller_Fabric_Oper_FsdbSrvr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    FsdbServer Controller_Fabric_Oper_FsdbSrvr_FsdbServer
}

func (fsdbSrvr *Controller_Fabric_Oper_FsdbSrvr) GetEntityData() *types.CommonEntityData {
    fsdbSrvr.EntityData.YFilter = fsdbSrvr.YFilter
    fsdbSrvr.EntityData.YangName = "fsdb_srvr"
    fsdbSrvr.EntityData.BundleName = "cisco_ios_xr"
    fsdbSrvr.EntityData.ParentYangName = "oper"
    fsdbSrvr.EntityData.SegmentPath = "fsdb_srvr"
    fsdbSrvr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbSrvr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbSrvr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbSrvr.EntityData.Children = make(map[string]types.YChild)
    fsdbSrvr.EntityData.Children["fsdb_server"] = types.YChild{"FsdbServer", &fsdbSrvr.FsdbServer}
    fsdbSrvr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbSrvr.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace.
    Trace []Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
}

func (fsdbServer *Controller_Fabric_Oper_FsdbSrvr_FsdbServer) GetEntityData() *types.CommonEntityData {
    fsdbServer.EntityData.YFilter = fsdbServer.YFilter
    fsdbServer.EntityData.YangName = "fsdb_server"
    fsdbServer.EntityData.BundleName = "cisco_ios_xr"
    fsdbServer.EntityData.ParentYangName = "fsdb_srvr"
    fsdbServer.EntityData.SegmentPath = "fsdb_server"
    fsdbServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fsdbServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fsdbServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fsdbServer.EntityData.Children = make(map[string]types.YChild)
    fsdbServer.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range fsdbServer.Trace {
        fsdbServer.EntityData.Children[types.GetSegmentPath(&fsdbServer.Trace[i])] = types.YChild{"Trace", &fsdbServer.Trace[i]}
    }
    fsdbServer.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fsdbServer.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace
// show traceable processes
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location.
    Location []Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
}

func (trace *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "fsdb_server"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions.
    AllOptions []Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
}

func (location *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks
type Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Fabric_Oper_FsdbSrvr_FsdbServer_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_SfeOper
type Controller_SfeOper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric SFE driver commands.
    Sfe Controller_SfeOper_Sfe

    
    SfeTrace Controller_SfeOper_SfeTrace
}

func (sfeOper *Controller_SfeOper) GetEntityData() *types.CommonEntityData {
    sfeOper.EntityData.YFilter = sfeOper.YFilter
    sfeOper.EntityData.YangName = "sfe_oper"
    sfeOper.EntityData.BundleName = "cisco_ios_xr"
    sfeOper.EntityData.ParentYangName = "controller"
    sfeOper.EntityData.SegmentPath = "sfe_oper"
    sfeOper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeOper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeOper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeOper.EntityData.Children = make(map[string]types.YChild)
    sfeOper.EntityData.Children["sfe"] = types.YChild{"Sfe", &sfeOper.Sfe}
    sfeOper.EntityData.Children["sfe_trace"] = types.YChild{"SfeTrace", &sfeOper.SfeTrace}
    sfeOper.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfeOper.EntityData)
}

// Controller_SfeOper_Sfe
// Fabric SFE driver commands
type Controller_SfeOper_Sfe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Driver Controller_SfeOper_Sfe_Driver

    
    Statistics Controller_SfeOper_Sfe_Statistics

    
    LinkInfo Controller_SfeOper_Sfe_LinkInfo

    
    Diagshell Controller_SfeOper_Sfe_Diagshell

    
    Register Controller_SfeOper_Sfe_Register

    
    DumpFile Controller_SfeOper_Sfe_DumpFile

    
    Parse Controller_SfeOper_Sfe_Parse
}

func (sfe *Controller_SfeOper_Sfe) GetEntityData() *types.CommonEntityData {
    sfe.EntityData.YFilter = sfe.YFilter
    sfe.EntityData.YangName = "sfe"
    sfe.EntityData.BundleName = "cisco_ios_xr"
    sfe.EntityData.ParentYangName = "sfe_oper"
    sfe.EntityData.SegmentPath = "sfe"
    sfe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfe.EntityData.Children = make(map[string]types.YChild)
    sfe.EntityData.Children["driver"] = types.YChild{"Driver", &sfe.Driver}
    sfe.EntityData.Children["statistics"] = types.YChild{"Statistics", &sfe.Statistics}
    sfe.EntityData.Children["link-info"] = types.YChild{"LinkInfo", &sfe.LinkInfo}
    sfe.EntityData.Children["diagshell"] = types.YChild{"Diagshell", &sfe.Diagshell}
    sfe.EntityData.Children["register"] = types.YChild{"Register", &sfe.Register}
    sfe.EntityData.Children["dump-file"] = types.YChild{"DumpFile", &sfe.DumpFile}
    sfe.EntityData.Children["parse"] = types.YChild{"Parse", &sfe.Parse}
    sfe.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfe.EntityData)
}

// Controller_SfeOper_Sfe_Driver
type Controller_SfeOper_Sfe_Driver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack.
    Rack []Controller_SfeOper_Sfe_Driver_Rack
}

func (driver *Controller_SfeOper_Sfe_Driver) GetEntityData() *types.CommonEntityData {
    driver.EntityData.YFilter = driver.YFilter
    driver.EntityData.YangName = "driver"
    driver.EntityData.BundleName = "cisco_ios_xr"
    driver.EntityData.ParentYangName = "sfe"
    driver.EntityData.SegmentPath = "driver"
    driver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    driver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    driver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    driver.EntityData.Children = make(map[string]types.YChild)
    driver.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range driver.Rack {
        driver.EntityData.Children[types.GetSegmentPath(&driver.Rack[i])] = types.YChild{"Rack", &driver.Rack[i]}
    }
    driver.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(driver.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack
type Controller_SfeOper_Sfe_Driver_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'(0?[0-9])|(1[0-5])|([F|f][0-3])'.
    RackNum interface{}

    // The type is string. The default value is rack no..
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo.
    DrvrInfo []Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo
}

func (rack *Controller_SfeOper_Sfe_Driver_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "driver"
    rack.EntityData.SegmentPath = "rack" + "[rack_num='" + fmt.Sprintf("%v", rack.RackNum) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["drvr_info"] = types.YChild{"DrvrInfo", nil}
    for i := range rack.DrvrInfo {
        rack.EntityData.Children[types.GetSegmentPath(&rack.DrvrInfo[i])] = types.YChild{"DrvrInfo", &rack.DrvrInfo[i]}
    }
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", rack.RackNum}
    rack.EntityData.Leafs["description"] = types.YLeaf{"Description", rack.Description}
    return &(rack.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo
type Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Idx interface{}

    // The type is interface{} with range: 0..4294967295.
    DrvVersion interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMajorRev interface{}

    // The type is interface{} with range: 0..4294967295.
    CoeffMinorRev interface{}

    // The type is string.
    FuncRole interface{}

    // The type is string.
    IssuRole interface{}

    // The type is string.
    RackName interface{}

    // The type is string.
    RackType interface{}

    // The type is string.
    RackNum interface{}

    // The type is string.
    IpAddress interface{}

    // The type is interface{} with range: 0..4294967295.
    CardAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AsicAvailMask interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    ExpAsicAvailMask interface{}

    // The type is interface{} with range: 0..4294967295.
    UcmcRatio interface{}

    // The type is bool.
    PmConnActive interface{}

    // The type is bool.
    PlatformLocalConnActive interface{}

    // The type is bool.
    FsdbConnActive interface{}

    // The type is bool.
    FgidConnActive interface{}

    // The type is bool.
    CmConnActive interface{}

    // The type is bool.
    CccConnActive interface{}

    // The type is bool.
    IssuMgrConnActive interface{}

    // The type is bool.
    PeerSfeConnActive interface{}

    // The type is bool.
    CxpConnActive interface{}

    // The type is bool.
    PmRegActive interface{}

    // The type is bool.
    PlatformLocalRegActive interface{}

    // The type is bool.
    FsdbRegActive interface{}

    // The type is bool.
    FgidRegActive interface{}

    // The type is bool.
    CmRegActive interface{}

    // The type is bool.
    IssuMgrRegActive interface{}

    // The type is bool.
    PeerSfeRegActive interface{}

    // The type is bool.
    CxpRegActive interface{}

    // The type is interface{} with range: 0..255.
    NumPmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPlatformLocalConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFsdbConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFgidConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumFstatsConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCmConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCccConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumIssuMgrConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumPeerSfeConnReqs interface{}

    // The type is interface{} with range: 0..255.
    NumCxpConnReqs interface{}

    // The type is bool.
    IsGasppRegistered interface{}

    // The type is bool.
    IsCihRegistered interface{}

    // The type is string.
    StartupTime interface{}

    // The type is slice of Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList.
    AsicList []Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList
}

func (drvrInfo *Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo) GetEntityData() *types.CommonEntityData {
    drvrInfo.EntityData.YFilter = drvrInfo.YFilter
    drvrInfo.EntityData.YangName = "drvr_info"
    drvrInfo.EntityData.BundleName = "cisco_ios_xr"
    drvrInfo.EntityData.ParentYangName = "rack"
    drvrInfo.EntityData.SegmentPath = "drvr_info" + "[idx='" + fmt.Sprintf("%v", drvrInfo.Idx) + "']"
    drvrInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    drvrInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    drvrInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    drvrInfo.EntityData.Children = make(map[string]types.YChild)
    drvrInfo.EntityData.Children["asic_list"] = types.YChild{"AsicList", nil}
    for i := range drvrInfo.AsicList {
        drvrInfo.EntityData.Children[types.GetSegmentPath(&drvrInfo.AsicList[i])] = types.YChild{"AsicList", &drvrInfo.AsicList[i]}
    }
    drvrInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    drvrInfo.EntityData.Leafs["idx"] = types.YLeaf{"Idx", drvrInfo.Idx}
    drvrInfo.EntityData.Leafs["drv_version"] = types.YLeaf{"DrvVersion", drvrInfo.DrvVersion}
    drvrInfo.EntityData.Leafs["coeff_major_rev"] = types.YLeaf{"CoeffMajorRev", drvrInfo.CoeffMajorRev}
    drvrInfo.EntityData.Leafs["coeff_minor_rev"] = types.YLeaf{"CoeffMinorRev", drvrInfo.CoeffMinorRev}
    drvrInfo.EntityData.Leafs["func_role"] = types.YLeaf{"FuncRole", drvrInfo.FuncRole}
    drvrInfo.EntityData.Leafs["issu_role"] = types.YLeaf{"IssuRole", drvrInfo.IssuRole}
    drvrInfo.EntityData.Leafs["rack_name"] = types.YLeaf{"RackName", drvrInfo.RackName}
    drvrInfo.EntityData.Leafs["rack_type"] = types.YLeaf{"RackType", drvrInfo.RackType}
    drvrInfo.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", drvrInfo.RackNum}
    drvrInfo.EntityData.Leafs["ip_address"] = types.YLeaf{"IpAddress", drvrInfo.IpAddress}
    drvrInfo.EntityData.Leafs["card_avail_mask"] = types.YLeaf{"CardAvailMask", drvrInfo.CardAvailMask}
    drvrInfo.EntityData.Leafs["asic_avail_mask"] = types.YLeaf{"AsicAvailMask", drvrInfo.AsicAvailMask}
    drvrInfo.EntityData.Leafs["exp_asic_avail_mask"] = types.YLeaf{"ExpAsicAvailMask", drvrInfo.ExpAsicAvailMask}
    drvrInfo.EntityData.Leafs["ucmc_ratio"] = types.YLeaf{"UcmcRatio", drvrInfo.UcmcRatio}
    drvrInfo.EntityData.Leafs["pm_conn_active"] = types.YLeaf{"PmConnActive", drvrInfo.PmConnActive}
    drvrInfo.EntityData.Leafs["platform_local_conn_active"] = types.YLeaf{"PlatformLocalConnActive", drvrInfo.PlatformLocalConnActive}
    drvrInfo.EntityData.Leafs["fsdb_conn_active"] = types.YLeaf{"FsdbConnActive", drvrInfo.FsdbConnActive}
    drvrInfo.EntityData.Leafs["fgid_conn_active"] = types.YLeaf{"FgidConnActive", drvrInfo.FgidConnActive}
    drvrInfo.EntityData.Leafs["cm_conn_active"] = types.YLeaf{"CmConnActive", drvrInfo.CmConnActive}
    drvrInfo.EntityData.Leafs["ccc_conn_active"] = types.YLeaf{"CccConnActive", drvrInfo.CccConnActive}
    drvrInfo.EntityData.Leafs["issu_mgr_conn_active"] = types.YLeaf{"IssuMgrConnActive", drvrInfo.IssuMgrConnActive}
    drvrInfo.EntityData.Leafs["peer_sfe_conn_active"] = types.YLeaf{"PeerSfeConnActive", drvrInfo.PeerSfeConnActive}
    drvrInfo.EntityData.Leafs["cxp_conn_active"] = types.YLeaf{"CxpConnActive", drvrInfo.CxpConnActive}
    drvrInfo.EntityData.Leafs["pm_reg_active"] = types.YLeaf{"PmRegActive", drvrInfo.PmRegActive}
    drvrInfo.EntityData.Leafs["platform_local_reg_active"] = types.YLeaf{"PlatformLocalRegActive", drvrInfo.PlatformLocalRegActive}
    drvrInfo.EntityData.Leafs["fsdb_reg_active"] = types.YLeaf{"FsdbRegActive", drvrInfo.FsdbRegActive}
    drvrInfo.EntityData.Leafs["fgid_reg_active"] = types.YLeaf{"FgidRegActive", drvrInfo.FgidRegActive}
    drvrInfo.EntityData.Leafs["cm_reg_active"] = types.YLeaf{"CmRegActive", drvrInfo.CmRegActive}
    drvrInfo.EntityData.Leafs["issu_mgr_reg_active"] = types.YLeaf{"IssuMgrRegActive", drvrInfo.IssuMgrRegActive}
    drvrInfo.EntityData.Leafs["peer_sfe_reg_active"] = types.YLeaf{"PeerSfeRegActive", drvrInfo.PeerSfeRegActive}
    drvrInfo.EntityData.Leafs["cxp_reg_active"] = types.YLeaf{"CxpRegActive", drvrInfo.CxpRegActive}
    drvrInfo.EntityData.Leafs["num_pm_conn_reqs"] = types.YLeaf{"NumPmConnReqs", drvrInfo.NumPmConnReqs}
    drvrInfo.EntityData.Leafs["num_platform_local_conn_reqs"] = types.YLeaf{"NumPlatformLocalConnReqs", drvrInfo.NumPlatformLocalConnReqs}
    drvrInfo.EntityData.Leafs["num_fsdb_conn_reqs"] = types.YLeaf{"NumFsdbConnReqs", drvrInfo.NumFsdbConnReqs}
    drvrInfo.EntityData.Leafs["num_fgid_conn_reqs"] = types.YLeaf{"NumFgidConnReqs", drvrInfo.NumFgidConnReqs}
    drvrInfo.EntityData.Leafs["num_fstats_conn_reqs"] = types.YLeaf{"NumFstatsConnReqs", drvrInfo.NumFstatsConnReqs}
    drvrInfo.EntityData.Leafs["num_cm_conn_reqs"] = types.YLeaf{"NumCmConnReqs", drvrInfo.NumCmConnReqs}
    drvrInfo.EntityData.Leafs["num_ccc_conn_reqs"] = types.YLeaf{"NumCccConnReqs", drvrInfo.NumCccConnReqs}
    drvrInfo.EntityData.Leafs["num_issu_mgr_conn_reqs"] = types.YLeaf{"NumIssuMgrConnReqs", drvrInfo.NumIssuMgrConnReqs}
    drvrInfo.EntityData.Leafs["num_peer_sfe_conn_reqs"] = types.YLeaf{"NumPeerSfeConnReqs", drvrInfo.NumPeerSfeConnReqs}
    drvrInfo.EntityData.Leafs["num_cxp_conn_reqs"] = types.YLeaf{"NumCxpConnReqs", drvrInfo.NumCxpConnReqs}
    drvrInfo.EntityData.Leafs["is_gaspp_registered"] = types.YLeaf{"IsGasppRegistered", drvrInfo.IsGasppRegistered}
    drvrInfo.EntityData.Leafs["is_cih_registered"] = types.YLeaf{"IsCihRegistered", drvrInfo.IsCihRegistered}
    drvrInfo.EntityData.Leafs["startup_time"] = types.YLeaf{"StartupTime", drvrInfo.StartupTime}
    return &(drvrInfo.EntityData)
}

// Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList
type Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    AsicIdx interface{}

    // The type is string.
    AsicInstance interface{}

    // The type is string.
    CardPresent interface{}

    // The type is string.
    CardPowered interface{}

    // The type is interface{} with range: 0..4294967295.
    HotplugEvent interface{}

    // The type is string.
    AsicType interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    FabPlane interface{}

    // The type is string.
    FabGroup interface{}

    // The type is string.
    FgidDownload interface{}

    // The type is string.
    AsicState interface{}

    // The type is string.
    AsicDisconnectSignal interface{}

    // The type is string.
    LastInitCause interface{}

    // The type is interface{} with range: 0..4294967295.
    NumPonResets interface{}

    // The type is interface{} with range: 0..4294967295.
    NumHardResets interface{}
}

func (asicList *Controller_SfeOper_Sfe_Driver_Rack_DrvrInfo_AsicList) GetEntityData() *types.CommonEntityData {
    asicList.EntityData.YFilter = asicList.YFilter
    asicList.EntityData.YangName = "asic_list"
    asicList.EntityData.BundleName = "cisco_ios_xr"
    asicList.EntityData.ParentYangName = "drvr_info"
    asicList.EntityData.SegmentPath = "asic_list" + "[asic_idx='" + fmt.Sprintf("%v", asicList.AsicIdx) + "']"
    asicList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asicList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asicList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asicList.EntityData.Children = make(map[string]types.YChild)
    asicList.EntityData.Leafs = make(map[string]types.YLeaf)
    asicList.EntityData.Leafs["asic_idx"] = types.YLeaf{"AsicIdx", asicList.AsicIdx}
    asicList.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", asicList.AsicInstance}
    asicList.EntityData.Leafs["card_present"] = types.YLeaf{"CardPresent", asicList.CardPresent}
    asicList.EntityData.Leafs["card_powered"] = types.YLeaf{"CardPowered", asicList.CardPowered}
    asicList.EntityData.Leafs["hotplug_event"] = types.YLeaf{"HotplugEvent", asicList.HotplugEvent}
    asicList.EntityData.Leafs["asic_type"] = types.YLeaf{"AsicType", asicList.AsicType}
    asicList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", asicList.AdminState}
    asicList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", asicList.OperState}
    asicList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", asicList.FabPlane}
    asicList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", asicList.FabGroup}
    asicList.EntityData.Leafs["fgid_download"] = types.YLeaf{"FgidDownload", asicList.FgidDownload}
    asicList.EntityData.Leafs["asic_state"] = types.YLeaf{"AsicState", asicList.AsicState}
    asicList.EntityData.Leafs["asic_disconnect_signal"] = types.YLeaf{"AsicDisconnectSignal", asicList.AsicDisconnectSignal}
    asicList.EntityData.Leafs["last_init_cause"] = types.YLeaf{"LastInitCause", asicList.LastInitCause}
    asicList.EntityData.Leafs["num_pon_resets"] = types.YLeaf{"NumPonResets", asicList.NumPonResets}
    asicList.EntityData.Leafs["num_hard_resets"] = types.YLeaf{"NumHardResets", asicList.NumHardResets}
    return &(asicList.EntityData)
}

// Controller_SfeOper_Sfe_Statistics
type Controller_SfeOper_Sfe_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Statistics_Location.
    Location []Controller_SfeOper_Sfe_Statistics_Location
}

func (statistics *Controller_SfeOper_Sfe_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "sfe"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range statistics.Location {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Location[i])] = types.YChild{"Location", &statistics.Location[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location
type Controller_SfeOper_Sfe_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S)..
    Description interface{}

    
    Asic Controller_SfeOper_Sfe_Statistics_Location_Asic
}

func (location *Controller_SfeOper_Sfe_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["asic"] = types.YChild{"Asic", &location.Asic}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic
type Controller_SfeOper_Sfe_Statistics_Location_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ccs Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS

    
    Dch Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH

    
    Dcl Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl

    
    Dcma Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA

    
    Dcmb Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB

    
    Eci Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI

    
    Fmac Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC

    
    Gck Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK

    
    Rtp Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP

    
    All Controller_SfeOper_Sfe_Statistics_Location_Asic_All
}

func (asic *Controller_SfeOper_Sfe_Statistics_Location_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "location"
    asic.EntityData.SegmentPath = "asic"
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = make(map[string]types.YChild)
    asic.EntityData.Children["CCS"] = types.YChild{"Ccs", &asic.Ccs}
    asic.EntityData.Children["DCH"] = types.YChild{"Dch", &asic.Dch}
    asic.EntityData.Children["DCl"] = types.YChild{"Dcl", &asic.Dcl}
    asic.EntityData.Children["DCMA"] = types.YChild{"Dcma", &asic.Dcma}
    asic.EntityData.Children["DCMB"] = types.YChild{"Dcmb", &asic.Dcmb}
    asic.EntityData.Children["ECI"] = types.YChild{"Eci", &asic.Eci}
    asic.EntityData.Children["FMAC"] = types.YChild{"Fmac", &asic.Fmac}
    asic.EntityData.Children["GCK"] = types.YChild{"Gck", &asic.Gck}
    asic.EntityData.Children["RTP"] = types.YChild{"Rtp", &asic.Rtp}
    asic.EntityData.Children["all"] = types.YChild{"All", &asic.All}
    asic.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(asic.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS
type Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS_Instance
}

func (cCS *Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS) GetEntityData() *types.CommonEntityData {
    cCS.EntityData.YFilter = cCS.YFilter
    cCS.EntityData.YangName = "CCS"
    cCS.EntityData.BundleName = "cisco_ios_xr"
    cCS.EntityData.ParentYangName = "asic"
    cCS.EntityData.SegmentPath = "CCS"
    cCS.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cCS.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cCS.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cCS.EntityData.Children = make(map[string]types.YChild)
    cCS.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range cCS.Instance {
        cCS.EntityData.Children[types.GetSegmentPath(&cCS.Instance[i])] = types.YChild{"Instance", &cCS.Instance[i]}
    }
    cCS.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cCS.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_CCS_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "CCS"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH_Instance
}

func (dCH *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH) GetEntityData() *types.CommonEntityData {
    dCH.EntityData.YFilter = dCH.YFilter
    dCH.EntityData.YangName = "DCH"
    dCH.EntityData.BundleName = "cisco_ios_xr"
    dCH.EntityData.ParentYangName = "asic"
    dCH.EntityData.SegmentPath = "DCH"
    dCH.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dCH.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dCH.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dCH.EntityData.Children = make(map[string]types.YChild)
    dCH.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range dCH.Instance {
        dCH.EntityData.Children[types.GetSegmentPath(&dCH.Instance[i])] = types.YChild{"Instance", &dCH.Instance[i]}
    }
    dCH.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dCH.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCH_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "DCH"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl_Instance
}

func (dCl *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl) GetEntityData() *types.CommonEntityData {
    dCl.EntityData.YFilter = dCl.YFilter
    dCl.EntityData.YangName = "DCl"
    dCl.EntityData.BundleName = "cisco_ios_xr"
    dCl.EntityData.ParentYangName = "asic"
    dCl.EntityData.SegmentPath = "DCl"
    dCl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dCl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dCl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dCl.EntityData.Children = make(map[string]types.YChild)
    dCl.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range dCl.Instance {
        dCl.EntityData.Children[types.GetSegmentPath(&dCl.Instance[i])] = types.YChild{"Instance", &dCl.Instance[i]}
    }
    dCl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dCl.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "DCl"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA_Instance
}

func (dCMA *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA) GetEntityData() *types.CommonEntityData {
    dCMA.EntityData.YFilter = dCMA.YFilter
    dCMA.EntityData.YangName = "DCMA"
    dCMA.EntityData.BundleName = "cisco_ios_xr"
    dCMA.EntityData.ParentYangName = "asic"
    dCMA.EntityData.SegmentPath = "DCMA"
    dCMA.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dCMA.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dCMA.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dCMA.EntityData.Children = make(map[string]types.YChild)
    dCMA.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range dCMA.Instance {
        dCMA.EntityData.Children[types.GetSegmentPath(&dCMA.Instance[i])] = types.YChild{"Instance", &dCMA.Instance[i]}
    }
    dCMA.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dCMA.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMA_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "DCMA"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB_Instance
}

func (dCMB *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB) GetEntityData() *types.CommonEntityData {
    dCMB.EntityData.YFilter = dCMB.YFilter
    dCMB.EntityData.YangName = "DCMB"
    dCMB.EntityData.BundleName = "cisco_ios_xr"
    dCMB.EntityData.ParentYangName = "asic"
    dCMB.EntityData.SegmentPath = "DCMB"
    dCMB.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dCMB.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dCMB.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dCMB.EntityData.Children = make(map[string]types.YChild)
    dCMB.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range dCMB.Instance {
        dCMB.EntityData.Children[types.GetSegmentPath(&dCMB.Instance[i])] = types.YChild{"Instance", &dCMB.Instance[i]}
    }
    dCMB.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dCMB.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_DCMB_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "DCMB"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI
type Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI_Instance
}

func (eCI *Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI) GetEntityData() *types.CommonEntityData {
    eCI.EntityData.YFilter = eCI.YFilter
    eCI.EntityData.YangName = "ECI"
    eCI.EntityData.BundleName = "cisco_ios_xr"
    eCI.EntityData.ParentYangName = "asic"
    eCI.EntityData.SegmentPath = "ECI"
    eCI.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eCI.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eCI.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eCI.EntityData.Children = make(map[string]types.YChild)
    eCI.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range eCI.Instance {
        eCI.EntityData.Children[types.GetSegmentPath(&eCI.Instance[i])] = types.YChild{"Instance", &eCI.Instance[i]}
    }
    eCI.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eCI.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_ECI_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ECI"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC
type Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC_Instance
}

func (fMAC *Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC) GetEntityData() *types.CommonEntityData {
    fMAC.EntityData.YFilter = fMAC.YFilter
    fMAC.EntityData.YangName = "FMAC"
    fMAC.EntityData.BundleName = "cisco_ios_xr"
    fMAC.EntityData.ParentYangName = "asic"
    fMAC.EntityData.SegmentPath = "FMAC"
    fMAC.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fMAC.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fMAC.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fMAC.EntityData.Children = make(map[string]types.YChild)
    fMAC.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range fMAC.Instance {
        fMAC.EntityData.Children[types.GetSegmentPath(&fMAC.Instance[i])] = types.YChild{"Instance", &fMAC.Instance[i]}
    }
    fMAC.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fMAC.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_FMAC_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "FMAC"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK
type Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK_Instance
}

func (gCK *Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK) GetEntityData() *types.CommonEntityData {
    gCK.EntityData.YFilter = gCK.YFilter
    gCK.EntityData.YangName = "GCK"
    gCK.EntityData.BundleName = "cisco_ios_xr"
    gCK.EntityData.ParentYangName = "asic"
    gCK.EntityData.SegmentPath = "GCK"
    gCK.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gCK.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gCK.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gCK.EntityData.Children = make(map[string]types.YChild)
    gCK.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range gCK.Instance {
        gCK.EntityData.Children[types.GetSegmentPath(&gCK.Instance[i])] = types.YChild{"Instance", &gCK.Instance[i]}
    }
    gCK.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(gCK.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_GCK_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "GCK"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP
type Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP_Instance
}

func (rTP *Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP) GetEntityData() *types.CommonEntityData {
    rTP.EntityData.YFilter = rTP.YFilter
    rTP.EntityData.YangName = "RTP"
    rTP.EntityData.BundleName = "cisco_ios_xr"
    rTP.EntityData.ParentYangName = "asic"
    rTP.EntityData.SegmentPath = "RTP"
    rTP.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rTP.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rTP.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rTP.EntityData.Children = make(map[string]types.YChild)
    rTP.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range rTP.Instance {
        rTP.EntityData.Children[types.GetSegmentPath(&rTP.Instance[i])] = types.YChild{"Instance", &rTP.Instance[i]}
    }
    rTP.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rTP.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_RTP_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "RTP"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_All
type Controller_SfeOper_Sfe_Statistics_Location_Asic_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_Statistics_Location_Asic_All_Instance.
    Instance []Controller_SfeOper_Sfe_Statistics_Location_Asic_All_Instance
}

func (all *Controller_SfeOper_Sfe_Statistics_Location_Asic_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "asic"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range all.Instance {
        all.EntityData.Children[types.GetSegmentPath(&all.Instance[i])] = types.YChild{"Instance", &all.Instance[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_Statistics_Location_Asic_All_Instance
type Controller_SfeOper_Sfe_Statistics_Location_Asic_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is interface{} with range: 0..4294967295.
    RackNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstance interface{}

    // The type is bool.
    Ccs0UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs1UnreachabledestinationcellscntOvf interface{}

    // The type is bool.
    Ccs0CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs1CapturefifodiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmalpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs1CdmblpcellsdiscardcntOvf interface{}

    // The type is bool.
    Ccs0CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs1CrpparityerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Ccs0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Ccs1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch1FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch2FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch3FifodiscardcounterpOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcounterpOvf interface{}

    // The type is bool.
    Dch0FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch1FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch2FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch3FifodiscardcountersOvf interface{}

    // The type is bool.
    Dch0DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch1DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch2DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch3DchreorddiscardcountersOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntpOvf interface{}

    // The type is bool.
    Dch0UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch1UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch2UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch3UnreachdestcntsOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntpOvf interface{}

    // The type is bool.
    Dch0DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch1DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch2DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch3DchdroppedlowmulcntsOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntapOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbpOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntasOvf interface{}

    // The type is bool.
    Dch0ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch1ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch2ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch3ErrorfiltercntbsOvf interface{}

    // The type is bool.
    Dch0DroplowpricntpOvf interface{}

    // The type is bool.
    Dch1DroplowpricntpOvf interface{}

    // The type is bool.
    Dch2DroplowpricntpOvf interface{}

    // The type is bool.
    Dch3DroplowpricntpOvf interface{}

    // The type is bool.
    Dch0DroplowpricntsOvf interface{}

    // The type is bool.
    Dch1DroplowpricntsOvf interface{}

    // The type is bool.
    Dch2DroplowpricntsOvf interface{}

    // The type is bool.
    Dch3DroplowpricntsOvf interface{}

    // The type is bool.
    Dch0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dch0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dch0ParityerrcntOvf interface{}

    // The type is bool.
    Dch1ParityerrcntOvf interface{}

    // The type is bool.
    Dch2ParityerrcntOvf interface{}

    // The type is bool.
    Dch3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntpOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp0CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp1CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp2CntsOvf interface{}

    // The type is bool.
    Dcl0Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl1Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl2Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl3Dcldroppedp3CntsOvf interface{}

    // The type is bool.
    Dcl0Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp0CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl1Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl2Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl3Ccp1CifdscrdcntOvf interface{}

    // The type is bool.
    Dcl0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcl0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcl0ParityerrcntOvf interface{}

    // The type is bool.
    Dcl1ParityerrcntOvf interface{}

    // The type is bool.
    Dcl2ParityerrcntOvf interface{}

    // The type is bool.
    Dcl3ParityerrcntOvf interface{}

    // The type is bool.
    Dcl0TagparerrcntOvf interface{}

    // The type is bool.
    Dcl1TagparerrcntOvf interface{}

    // The type is bool.
    Dcl2TagparerrcntOvf interface{}

    // The type is bool.
    Dcl3TagparerrcntOvf interface{}

    // The type is bool.
    Dcl0DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl1DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl2DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcl3DatacrcerrcntOvf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcma0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcma0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcma0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcma0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcma0ParityerrcntOvf interface{}

    // The type is bool.
    Dcma1ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmmdroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmmdroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip0Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip1Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip2Ovf interface{}

    // The type is bool.
    Dcmb0Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb1Dcmudroppedip3Ovf interface{}

    // The type is bool.
    Dcmb0DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb1DcmudroppedtotalcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Dcmb0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Dcmb0ParityerrcntOvf interface{}

    // The type is bool.
    Dcmb1ParityerrcntOvf interface{}

    // The type is bool.
    EciParityerrcntOvf interface{}

    // The type is bool.
    RtpEcc1BerrcntOvf interface{}

    // The type is bool.
    RtpEcc2BerrcntOvf interface{}

    // The type is bool.
    RtpParityerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc1BerrcntOvf interface{}

    // The type is bool.
    Fmac0Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac1Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac2Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac3Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac4Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac5Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac6Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac7Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac8Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac9Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac10Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac11Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac12Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac13Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac14Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac15Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac16Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac17Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac18Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac19Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac20Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac21Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac22Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac23Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac24Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac25Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac26Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac27Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac28Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac29Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac30Ecc2BerrcntOvf interface{}

    // The type is bool.
    Fmac31Ecc2BerrcntOvf interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Unreachabledestinationcellscnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Capturefifodiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmalpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Cdmblpcellsdiscardcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Crpparityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Ccs1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounterp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Fifodiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchreorddiscardcounters interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Unreachdestcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Dchdroppedlowmulcnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntap interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntas interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Errorfiltercntbs interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Droplowpricnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dch3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cntp interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp0Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp1Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp2Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Dcldroppedp3Cnts interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp0Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ccp1Cifdscrdcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Tagparerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl0Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl1Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl2Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcl3Datacrcerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcma1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmmdroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip0 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip1 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedip3 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Dcmudroppedtotalcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb0Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Dcmb1Parityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EciParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpEcc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RtpParityerrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc1Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac0Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac1Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac2Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac3Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac4Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac5Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac6Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac7Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac8Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac9Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac10Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac11Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac12Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac13Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac14Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac15Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac16Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac17Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac18Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac19Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac20Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac21Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac22Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac23Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac24Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac25Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac26Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac27Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac28Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac29Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac30Ecc2Berrcnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    Fmac31Ecc2Berrcnt interface{}

    // The type is bool.
    IsShow interface{}

    // The type is bool.
    ShowCcs interface{}

    // The type is bool.
    ShowDch interface{}

    // The type is bool.
    ShowDcl interface{}

    // The type is bool.
    ShowDcma interface{}

    // The type is bool.
    ShowDcmb interface{}

    // The type is bool.
    ShowEci interface{}

    // The type is bool.
    ShowFmac interface{}

    // The type is bool.
    ShowRtp interface{}
}

func (instance *Controller_SfeOper_Sfe_Statistics_Location_Asic_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["rack_num"] = types.YLeaf{"RackNum", instance.RackNum}
    instance.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", instance.SlotNum}
    instance.EntityData.Leafs["asic_instance"] = types.YLeaf{"AsicInstance", instance.AsicInstance}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs0UnreachabledestinationcellscntOvf", instance.Ccs0UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt_ovf"] = types.YLeaf{"Ccs1UnreachabledestinationcellscntOvf", instance.Ccs1UnreachabledestinationcellscntOvf}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs0CapturefifodiscardcntOvf", instance.Ccs0CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt_ovf"] = types.YLeaf{"Ccs1CapturefifodiscardcntOvf", instance.Ccs1CapturefifodiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmalpcellsdiscardcntOvf", instance.Ccs0CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmalpcellsdiscardcntOvf", instance.Ccs1CdmalpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs0CdmblpcellsdiscardcntOvf", instance.Ccs0CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt_ovf"] = types.YLeaf{"Ccs1CdmblpcellsdiscardcntOvf", instance.Ccs1CdmblpcellsdiscardcntOvf}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs0CrpparityerrcntOvf", instance.Ccs0CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt_ovf"] = types.YLeaf{"Ccs1CrpparityerrcntOvf", instance.Ccs1CrpparityerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc1BerrcntOvf", instance.Ccs0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc1BerrcntOvf", instance.Ccs1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs0Ecc2BerrcntOvf", instance.Ccs0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Ccs1Ecc2BerrcntOvf", instance.Ccs1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch0FifodiscardcounterpOvf", instance.Dch0FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch1FifodiscardcounterpOvf", instance.Dch1FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch2FifodiscardcounterpOvf", instance.Dch2FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP_ovf"] = types.YLeaf{"Dch3FifodiscardcounterpOvf", instance.Dch3FifodiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch0DchreorddiscardcounterpOvf", instance.Dch0DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch1DchreorddiscardcounterpOvf", instance.Dch1DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch2DchreorddiscardcounterpOvf", instance.Dch2DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP_ovf"] = types.YLeaf{"Dch3DchreorddiscardcounterpOvf", instance.Dch3DchreorddiscardcounterpOvf}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch0FifodiscardcountersOvf", instance.Dch0FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch1FifodiscardcountersOvf", instance.Dch1FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch2FifodiscardcountersOvf", instance.Dch2FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS_ovf"] = types.YLeaf{"Dch3FifodiscardcountersOvf", instance.Dch3FifodiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch0DchreorddiscardcountersOvf", instance.Dch0DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch1DchreorddiscardcountersOvf", instance.Dch1DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch2DchreorddiscardcountersOvf", instance.Dch2DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS_ovf"] = types.YLeaf{"Dch3DchreorddiscardcountersOvf", instance.Dch3DchreorddiscardcountersOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP_ovf"] = types.YLeaf{"Dch0UnreachdestcntpOvf", instance.Dch0UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP_ovf"] = types.YLeaf{"Dch1UnreachdestcntpOvf", instance.Dch1UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP_ovf"] = types.YLeaf{"Dch2UnreachdestcntpOvf", instance.Dch2UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP_ovf"] = types.YLeaf{"Dch3UnreachdestcntpOvf", instance.Dch3UnreachdestcntpOvf}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS_ovf"] = types.YLeaf{"Dch0UnreachdestcntsOvf", instance.Dch0UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS_ovf"] = types.YLeaf{"Dch1UnreachdestcntsOvf", instance.Dch1UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS_ovf"] = types.YLeaf{"Dch2UnreachdestcntsOvf", instance.Dch2UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS_ovf"] = types.YLeaf{"Dch3UnreachdestcntsOvf", instance.Dch3UnreachdestcntsOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntpOvf", instance.Dch0DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntpOvf", instance.Dch1DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntpOvf", instance.Dch2DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntpOvf", instance.Dch3DchdroppedlowmulcntpOvf}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch0DchdroppedlowmulcntsOvf", instance.Dch0DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch1DchdroppedlowmulcntsOvf", instance.Dch1DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch2DchdroppedlowmulcntsOvf", instance.Dch2DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS_ovf"] = types.YLeaf{"Dch3DchdroppedlowmulcntsOvf", instance.Dch3DchdroppedlowmulcntsOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntapOvf", instance.Dch0ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntapOvf", instance.Dch1ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntapOvf", instance.Dch2ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntapOvf", instance.Dch3ErrorfiltercntapOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbpOvf", instance.Dch0ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbpOvf", instance.Dch1ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbpOvf", instance.Dch2ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbpOvf", instance.Dch3ErrorfiltercntbpOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntasOvf", instance.Dch0ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntasOvf", instance.Dch1ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntasOvf", instance.Dch2ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntasOvf", instance.Dch3ErrorfiltercntasOvf}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch0ErrorfiltercntbsOvf", instance.Dch0ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch1ErrorfiltercntbsOvf", instance.Dch1ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch2ErrorfiltercntbsOvf", instance.Dch2ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS_ovf"] = types.YLeaf{"Dch3ErrorfiltercntbsOvf", instance.Dch3ErrorfiltercntbsOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP_ovf"] = types.YLeaf{"Dch0DroplowpricntpOvf", instance.Dch0DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP_ovf"] = types.YLeaf{"Dch1DroplowpricntpOvf", instance.Dch1DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP_ovf"] = types.YLeaf{"Dch2DroplowpricntpOvf", instance.Dch2DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP_ovf"] = types.YLeaf{"Dch3DroplowpricntpOvf", instance.Dch3DroplowpricntpOvf}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS_ovf"] = types.YLeaf{"Dch0DroplowpricntsOvf", instance.Dch0DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS_ovf"] = types.YLeaf{"Dch1DroplowpricntsOvf", instance.Dch1DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS_ovf"] = types.YLeaf{"Dch2DroplowpricntsOvf", instance.Dch2DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS_ovf"] = types.YLeaf{"Dch3DroplowpricntsOvf", instance.Dch3DroplowpricntsOvf}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc1BerrcntOvf", instance.Dch0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc1BerrcntOvf", instance.Dch1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc1BerrcntOvf", instance.Dch2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc1BerrcntOvf", instance.Dch3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch0Ecc2BerrcntOvf", instance.Dch0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch1Ecc2BerrcntOvf", instance.Dch1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch2Ecc2BerrcntOvf", instance.Dch2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dch3Ecc2BerrcntOvf", instance.Dch3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCH0_ParityErrCnt_ovf"] = types.YLeaf{"Dch0ParityerrcntOvf", instance.Dch0ParityerrcntOvf}
    instance.EntityData.Leafs["DCH1_ParityErrCnt_ovf"] = types.YLeaf{"Dch1ParityerrcntOvf", instance.Dch1ParityerrcntOvf}
    instance.EntityData.Leafs["DCH2_ParityErrCnt_ovf"] = types.YLeaf{"Dch2ParityerrcntOvf", instance.Dch2ParityerrcntOvf}
    instance.EntityData.Leafs["DCH3_ParityErrCnt_ovf"] = types.YLeaf{"Dch3ParityerrcntOvf", instance.Dch3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntpOvf", instance.Dcl0Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntpOvf", instance.Dcl1Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntpOvf", instance.Dcl2Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntpOvf", instance.Dcl3Dcldroppedp0CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntpOvf", instance.Dcl0Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntpOvf", instance.Dcl1Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntpOvf", instance.Dcl2Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntpOvf", instance.Dcl3Dcldroppedp1CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntpOvf", instance.Dcl0Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntpOvf", instance.Dcl1Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntpOvf", instance.Dcl2Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntpOvf", instance.Dcl3Dcldroppedp2CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntpOvf", instance.Dcl0Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntpOvf", instance.Dcl1Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntpOvf", instance.Dcl2Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntpOvf", instance.Dcl3Dcldroppedp3CntpOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp0CntsOvf", instance.Dcl0Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp0CntsOvf", instance.Dcl1Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp0CntsOvf", instance.Dcl2Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp0CntsOvf", instance.Dcl3Dcldroppedp0CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp1CntsOvf", instance.Dcl0Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp1CntsOvf", instance.Dcl1Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp1CntsOvf", instance.Dcl2Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp1CntsOvf", instance.Dcl3Dcldroppedp1CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp2CntsOvf", instance.Dcl0Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp2CntsOvf", instance.Dcl1Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp2CntsOvf", instance.Dcl2Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp2CntsOvf", instance.Dcl3Dcldroppedp2CntsOvf}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl0Dcldroppedp3CntsOvf", instance.Dcl0Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl1Dcldroppedp3CntsOvf", instance.Dcl1Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl2Dcldroppedp3CntsOvf", instance.Dcl2Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS_ovf"] = types.YLeaf{"Dcl3Dcldroppedp3CntsOvf", instance.Dcl3Dcldroppedp3CntsOvf}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp0CifdscrdcntOvf", instance.Dcl0Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp0CifdscrdcntOvf", instance.Dcl1Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp0CifdscrdcntOvf", instance.Dcl2Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp0CifdscrdcntOvf", instance.Dcl3Ccp0CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl0Ccp1CifdscrdcntOvf", instance.Dcl0Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl1Ccp1CifdscrdcntOvf", instance.Dcl1Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl2Ccp1CifdscrdcntOvf", instance.Dcl2Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt_ovf"] = types.YLeaf{"Dcl3Ccp1CifdscrdcntOvf", instance.Dcl3Ccp1CifdscrdcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc1BerrcntOvf", instance.Dcl0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc1BerrcntOvf", instance.Dcl1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc1BerrcntOvf", instance.Dcl2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc1BerrcntOvf", instance.Dcl3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl0Ecc2BerrcntOvf", instance.Dcl0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl1Ecc2BerrcntOvf", instance.Dcl1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl2Ecc2BerrcntOvf", instance.Dcl2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcl3Ecc2BerrcntOvf", instance.Dcl3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCL0_ParityErrCnt_ovf"] = types.YLeaf{"Dcl0ParityerrcntOvf", instance.Dcl0ParityerrcntOvf}
    instance.EntityData.Leafs["DCL1_ParityErrCnt_ovf"] = types.YLeaf{"Dcl1ParityerrcntOvf", instance.Dcl1ParityerrcntOvf}
    instance.EntityData.Leafs["DCL2_ParityErrCnt_ovf"] = types.YLeaf{"Dcl2ParityerrcntOvf", instance.Dcl2ParityerrcntOvf}
    instance.EntityData.Leafs["DCL3_ParityErrCnt_ovf"] = types.YLeaf{"Dcl3ParityerrcntOvf", instance.Dcl3ParityerrcntOvf}
    instance.EntityData.Leafs["DCL0_TagParErrCnt_ovf"] = types.YLeaf{"Dcl0TagparerrcntOvf", instance.Dcl0TagparerrcntOvf}
    instance.EntityData.Leafs["DCL1_TagParErrCnt_ovf"] = types.YLeaf{"Dcl1TagparerrcntOvf", instance.Dcl1TagparerrcntOvf}
    instance.EntityData.Leafs["DCL2_TagParErrCnt_ovf"] = types.YLeaf{"Dcl2TagparerrcntOvf", instance.Dcl2TagparerrcntOvf}
    instance.EntityData.Leafs["DCL3_TagParErrCnt_ovf"] = types.YLeaf{"Dcl3TagparerrcntOvf", instance.Dcl3TagparerrcntOvf}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl0DatacrcerrcntOvf", instance.Dcl0DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl1DatacrcerrcntOvf", instance.Dcl1DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl2DatacrcerrcntOvf", instance.Dcl2DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt_ovf"] = types.YLeaf{"Dcl3DatacrcerrcntOvf", instance.Dcl3DatacrcerrcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip0Ovf", instance.Dcma0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip0Ovf", instance.Dcma1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip1Ovf", instance.Dcma0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip1Ovf", instance.Dcma1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip2Ovf", instance.Dcma0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip2Ovf", instance.Dcma1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmmdroppedip3Ovf", instance.Dcma0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmmdroppedip3Ovf", instance.Dcma1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmmdroppedtotalcntOvf", instance.Dcma0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmmdroppedtotalcntOvf", instance.Dcma1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip0Ovf", instance.Dcma0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip0Ovf", instance.Dcma1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip1Ovf", instance.Dcma0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip1Ovf", instance.Dcma1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip2Ovf", instance.Dcma0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip2Ovf", instance.Dcma1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma0Dcmudroppedip3Ovf", instance.Dcma0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcma1Dcmudroppedip3Ovf", instance.Dcma1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma0DcmudroppedtotalcntOvf", instance.Dcma0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcma1DcmudroppedtotalcntOvf", instance.Dcma1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc1BerrcntOvf", instance.Dcma0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc1BerrcntOvf", instance.Dcma1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma0Ecc2BerrcntOvf", instance.Dcma0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcma1Ecc2BerrcntOvf", instance.Dcma1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt_ovf"] = types.YLeaf{"Dcma0ParityerrcntOvf", instance.Dcma0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt_ovf"] = types.YLeaf{"Dcma1ParityerrcntOvf", instance.Dcma1ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip0Ovf", instance.Dcmb0Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip0Ovf", instance.Dcmb1Dcmmdroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip1Ovf", instance.Dcmb0Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip1Ovf", instance.Dcmb1Dcmmdroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip2Ovf", instance.Dcmb0Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip2Ovf", instance.Dcmb1Dcmmdroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmmdroppedip3Ovf", instance.Dcmb0Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmmdroppedip3Ovf", instance.Dcmb1Dcmmdroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmmdroppedtotalcntOvf", instance.Dcmb0DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmmdroppedtotalcntOvf", instance.Dcmb1DcmmdroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip0Ovf", instance.Dcmb0Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip0Ovf", instance.Dcmb1Dcmudroppedip0Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip1Ovf", instance.Dcmb0Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip1Ovf", instance.Dcmb1Dcmudroppedip1Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip2Ovf", instance.Dcmb0Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip2Ovf", instance.Dcmb1Dcmudroppedip2Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb0Dcmudroppedip3Ovf", instance.Dcmb0Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3_ovf"] = types.YLeaf{"Dcmb1Dcmudroppedip3Ovf", instance.Dcmb1Dcmudroppedip3Ovf}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb0DcmudroppedtotalcntOvf", instance.Dcmb0DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt_ovf"] = types.YLeaf{"Dcmb1DcmudroppedtotalcntOvf", instance.Dcmb1DcmudroppedtotalcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc1BerrcntOvf", instance.Dcmb0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc1BerrcntOvf", instance.Dcmb1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb0Ecc2BerrcntOvf", instance.Dcmb0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Dcmb1Ecc2BerrcntOvf", instance.Dcmb1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb0ParityerrcntOvf", instance.Dcmb0ParityerrcntOvf}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt_ovf"] = types.YLeaf{"Dcmb1ParityerrcntOvf", instance.Dcmb1ParityerrcntOvf}
    instance.EntityData.Leafs["ECI_ParityErrCnt_ovf"] = types.YLeaf{"EciParityerrcntOvf", instance.EciParityerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt_ovf"] = types.YLeaf{"RtpEcc1BerrcntOvf", instance.RtpEcc1BerrcntOvf}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt_ovf"] = types.YLeaf{"RtpEcc2BerrcntOvf", instance.RtpEcc2BerrcntOvf}
    instance.EntityData.Leafs["RTP_ParityErrCnt_ovf"] = types.YLeaf{"RtpParityerrcntOvf", instance.RtpParityerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc1BerrcntOvf", instance.Fmac0Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc1BerrcntOvf", instance.Fmac1Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc1BerrcntOvf", instance.Fmac2Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc1BerrcntOvf", instance.Fmac3Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc1BerrcntOvf", instance.Fmac4Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc1BerrcntOvf", instance.Fmac5Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc1BerrcntOvf", instance.Fmac6Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc1BerrcntOvf", instance.Fmac7Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc1BerrcntOvf", instance.Fmac8Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc1BerrcntOvf", instance.Fmac9Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc1BerrcntOvf", instance.Fmac10Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc1BerrcntOvf", instance.Fmac11Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc1BerrcntOvf", instance.Fmac12Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc1BerrcntOvf", instance.Fmac13Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc1BerrcntOvf", instance.Fmac14Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc1BerrcntOvf", instance.Fmac15Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc1BerrcntOvf", instance.Fmac16Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc1BerrcntOvf", instance.Fmac17Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc1BerrcntOvf", instance.Fmac18Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc1BerrcntOvf", instance.Fmac19Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc1BerrcntOvf", instance.Fmac20Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc1BerrcntOvf", instance.Fmac21Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc1BerrcntOvf", instance.Fmac22Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc1BerrcntOvf", instance.Fmac23Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc1BerrcntOvf", instance.Fmac24Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc1BerrcntOvf", instance.Fmac25Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc1BerrcntOvf", instance.Fmac26Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc1BerrcntOvf", instance.Fmac27Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc1BerrcntOvf", instance.Fmac28Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc1BerrcntOvf", instance.Fmac29Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc1BerrcntOvf", instance.Fmac30Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc1BerrcntOvf", instance.Fmac31Ecc1BerrcntOvf}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac0Ecc2BerrcntOvf", instance.Fmac0Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac1Ecc2BerrcntOvf", instance.Fmac1Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac2Ecc2BerrcntOvf", instance.Fmac2Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac3Ecc2BerrcntOvf", instance.Fmac3Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac4Ecc2BerrcntOvf", instance.Fmac4Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac5Ecc2BerrcntOvf", instance.Fmac5Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac6Ecc2BerrcntOvf", instance.Fmac6Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac7Ecc2BerrcntOvf", instance.Fmac7Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac8Ecc2BerrcntOvf", instance.Fmac8Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac9Ecc2BerrcntOvf", instance.Fmac9Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac10Ecc2BerrcntOvf", instance.Fmac10Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac11Ecc2BerrcntOvf", instance.Fmac11Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac12Ecc2BerrcntOvf", instance.Fmac12Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac13Ecc2BerrcntOvf", instance.Fmac13Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac14Ecc2BerrcntOvf", instance.Fmac14Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac15Ecc2BerrcntOvf", instance.Fmac15Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac16Ecc2BerrcntOvf", instance.Fmac16Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac17Ecc2BerrcntOvf", instance.Fmac17Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac18Ecc2BerrcntOvf", instance.Fmac18Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac19Ecc2BerrcntOvf", instance.Fmac19Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac20Ecc2BerrcntOvf", instance.Fmac20Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac21Ecc2BerrcntOvf", instance.Fmac21Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac22Ecc2BerrcntOvf", instance.Fmac22Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac23Ecc2BerrcntOvf", instance.Fmac23Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac24Ecc2BerrcntOvf", instance.Fmac24Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac25Ecc2BerrcntOvf", instance.Fmac25Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac26Ecc2BerrcntOvf", instance.Fmac26Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac27Ecc2BerrcntOvf", instance.Fmac27Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac28Ecc2BerrcntOvf", instance.Fmac28Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac29Ecc2BerrcntOvf", instance.Fmac29Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac30Ecc2BerrcntOvf", instance.Fmac30Ecc2BerrcntOvf}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt_ovf"] = types.YLeaf{"Fmac31Ecc2BerrcntOvf", instance.Fmac31Ecc2BerrcntOvf}
    instance.EntityData.Leafs["CCS0_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs0Unreachabledestinationcellscnt", instance.Ccs0Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS1_UnreachableDestinationCellsCnt"] = types.YLeaf{"Ccs1Unreachabledestinationcellscnt", instance.Ccs1Unreachabledestinationcellscnt}
    instance.EntityData.Leafs["CCS0_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs0Capturefifodiscardcnt", instance.Ccs0Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS1_CaptureFifoDiscardCnt"] = types.YLeaf{"Ccs1Capturefifodiscardcnt", instance.Ccs1Capturefifodiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmalpcellsdiscardcnt", instance.Ccs0Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmaLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmalpcellsdiscardcnt", instance.Ccs1Cdmalpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs0Cdmblpcellsdiscardcnt", instance.Ccs0Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS1_CdmbLpCellsDiscardCnt"] = types.YLeaf{"Ccs1Cdmblpcellsdiscardcnt", instance.Ccs1Cdmblpcellsdiscardcnt}
    instance.EntityData.Leafs["CCS0_CrpParityErrCnt"] = types.YLeaf{"Ccs0Crpparityerrcnt", instance.Ccs0Crpparityerrcnt}
    instance.EntityData.Leafs["CCS1_CrpParityErrCnt"] = types.YLeaf{"Ccs1Crpparityerrcnt", instance.Ccs1Crpparityerrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_1bErrCnt"] = types.YLeaf{"Ccs0Ecc1Berrcnt", instance.Ccs0Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_1bErrCnt"] = types.YLeaf{"Ccs1Ecc1Berrcnt", instance.Ccs1Ecc1Berrcnt}
    instance.EntityData.Leafs["CCS0_Ecc_2bErrCnt"] = types.YLeaf{"Ccs0Ecc2Berrcnt", instance.Ccs0Ecc2Berrcnt}
    instance.EntityData.Leafs["CCS1_Ecc_2bErrCnt"] = types.YLeaf{"Ccs1Ecc2Berrcnt", instance.Ccs1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterP"] = types.YLeaf{"Dch0Fifodiscardcounterp", instance.Dch0Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterP"] = types.YLeaf{"Dch1Fifodiscardcounterp", instance.Dch1Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterP"] = types.YLeaf{"Dch2Fifodiscardcounterp", instance.Dch2Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterP"] = types.YLeaf{"Dch3Fifodiscardcounterp", instance.Dch3Fifodiscardcounterp}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterP"] = types.YLeaf{"Dch0Dchreorddiscardcounterp", instance.Dch0Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterP"] = types.YLeaf{"Dch1Dchreorddiscardcounterp", instance.Dch1Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterP"] = types.YLeaf{"Dch2Dchreorddiscardcounterp", instance.Dch2Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterP"] = types.YLeaf{"Dch3Dchreorddiscardcounterp", instance.Dch3Dchreorddiscardcounterp}
    instance.EntityData.Leafs["DCH0_FifoDiscardCounterS"] = types.YLeaf{"Dch0Fifodiscardcounters", instance.Dch0Fifodiscardcounters}
    instance.EntityData.Leafs["DCH1_FifoDiscardCounterS"] = types.YLeaf{"Dch1Fifodiscardcounters", instance.Dch1Fifodiscardcounters}
    instance.EntityData.Leafs["DCH2_FifoDiscardCounterS"] = types.YLeaf{"Dch2Fifodiscardcounters", instance.Dch2Fifodiscardcounters}
    instance.EntityData.Leafs["DCH3_FifoDiscardCounterS"] = types.YLeaf{"Dch3Fifodiscardcounters", instance.Dch3Fifodiscardcounters}
    instance.EntityData.Leafs["DCH0_DCHReordDiscardCounterS"] = types.YLeaf{"Dch0Dchreorddiscardcounters", instance.Dch0Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH1_DCHReordDiscardCounterS"] = types.YLeaf{"Dch1Dchreorddiscardcounters", instance.Dch1Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH2_DCHReordDiscardCounterS"] = types.YLeaf{"Dch2Dchreorddiscardcounters", instance.Dch2Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH3_DCHReordDiscardCounterS"] = types.YLeaf{"Dch3Dchreorddiscardcounters", instance.Dch3Dchreorddiscardcounters}
    instance.EntityData.Leafs["DCH0_UnreachDestCntP"] = types.YLeaf{"Dch0Unreachdestcntp", instance.Dch0Unreachdestcntp}
    instance.EntityData.Leafs["DCH1_UnreachDestCntP"] = types.YLeaf{"Dch1Unreachdestcntp", instance.Dch1Unreachdestcntp}
    instance.EntityData.Leafs["DCH2_UnreachDestCntP"] = types.YLeaf{"Dch2Unreachdestcntp", instance.Dch2Unreachdestcntp}
    instance.EntityData.Leafs["DCH3_UnreachDestCntP"] = types.YLeaf{"Dch3Unreachdestcntp", instance.Dch3Unreachdestcntp}
    instance.EntityData.Leafs["DCH0_UnreachDestCntS"] = types.YLeaf{"Dch0Unreachdestcnts", instance.Dch0Unreachdestcnts}
    instance.EntityData.Leafs["DCH1_UnreachDestCntS"] = types.YLeaf{"Dch1Unreachdestcnts", instance.Dch1Unreachdestcnts}
    instance.EntityData.Leafs["DCH2_UnreachDestCntS"] = types.YLeaf{"Dch2Unreachdestcnts", instance.Dch2Unreachdestcnts}
    instance.EntityData.Leafs["DCH3_UnreachDestCntS"] = types.YLeaf{"Dch3Unreachdestcnts", instance.Dch3Unreachdestcnts}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntP"] = types.YLeaf{"Dch0Dchdroppedlowmulcntp", instance.Dch0Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntP"] = types.YLeaf{"Dch1Dchdroppedlowmulcntp", instance.Dch1Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntP"] = types.YLeaf{"Dch2Dchdroppedlowmulcntp", instance.Dch2Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntP"] = types.YLeaf{"Dch3Dchdroppedlowmulcntp", instance.Dch3Dchdroppedlowmulcntp}
    instance.EntityData.Leafs["DCH0_DchDroppedLowMulCntS"] = types.YLeaf{"Dch0Dchdroppedlowmulcnts", instance.Dch0Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH1_DchDroppedLowMulCntS"] = types.YLeaf{"Dch1Dchdroppedlowmulcnts", instance.Dch1Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH2_DchDroppedLowMulCntS"] = types.YLeaf{"Dch2Dchdroppedlowmulcnts", instance.Dch2Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH3_DchDroppedLowMulCntS"] = types.YLeaf{"Dch3Dchdroppedlowmulcnts", instance.Dch3Dchdroppedlowmulcnts}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAP"] = types.YLeaf{"Dch0Errorfiltercntap", instance.Dch0Errorfiltercntap}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAP"] = types.YLeaf{"Dch1Errorfiltercntap", instance.Dch1Errorfiltercntap}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAP"] = types.YLeaf{"Dch2Errorfiltercntap", instance.Dch2Errorfiltercntap}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAP"] = types.YLeaf{"Dch3Errorfiltercntap", instance.Dch3Errorfiltercntap}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBP"] = types.YLeaf{"Dch0Errorfiltercntbp", instance.Dch0Errorfiltercntbp}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBP"] = types.YLeaf{"Dch1Errorfiltercntbp", instance.Dch1Errorfiltercntbp}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBP"] = types.YLeaf{"Dch2Errorfiltercntbp", instance.Dch2Errorfiltercntbp}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBP"] = types.YLeaf{"Dch3Errorfiltercntbp", instance.Dch3Errorfiltercntbp}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntAS"] = types.YLeaf{"Dch0Errorfiltercntas", instance.Dch0Errorfiltercntas}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntAS"] = types.YLeaf{"Dch1Errorfiltercntas", instance.Dch1Errorfiltercntas}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntAS"] = types.YLeaf{"Dch2Errorfiltercntas", instance.Dch2Errorfiltercntas}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntAS"] = types.YLeaf{"Dch3Errorfiltercntas", instance.Dch3Errorfiltercntas}
    instance.EntityData.Leafs["DCH0_ErrorFilterCntBS"] = types.YLeaf{"Dch0Errorfiltercntbs", instance.Dch0Errorfiltercntbs}
    instance.EntityData.Leafs["DCH1_ErrorFilterCntBS"] = types.YLeaf{"Dch1Errorfiltercntbs", instance.Dch1Errorfiltercntbs}
    instance.EntityData.Leafs["DCH2_ErrorFilterCntBS"] = types.YLeaf{"Dch2Errorfiltercntbs", instance.Dch2Errorfiltercntbs}
    instance.EntityData.Leafs["DCH3_ErrorFilterCntBS"] = types.YLeaf{"Dch3Errorfiltercntbs", instance.Dch3Errorfiltercntbs}
    instance.EntityData.Leafs["DCH0_DropLowPriCntP"] = types.YLeaf{"Dch0Droplowpricntp", instance.Dch0Droplowpricntp}
    instance.EntityData.Leafs["DCH1_DropLowPriCntP"] = types.YLeaf{"Dch1Droplowpricntp", instance.Dch1Droplowpricntp}
    instance.EntityData.Leafs["DCH2_DropLowPriCntP"] = types.YLeaf{"Dch2Droplowpricntp", instance.Dch2Droplowpricntp}
    instance.EntityData.Leafs["DCH3_DropLowPriCntP"] = types.YLeaf{"Dch3Droplowpricntp", instance.Dch3Droplowpricntp}
    instance.EntityData.Leafs["DCH0_DropLowPriCntS"] = types.YLeaf{"Dch0Droplowpricnts", instance.Dch0Droplowpricnts}
    instance.EntityData.Leafs["DCH1_DropLowPriCntS"] = types.YLeaf{"Dch1Droplowpricnts", instance.Dch1Droplowpricnts}
    instance.EntityData.Leafs["DCH2_DropLowPriCntS"] = types.YLeaf{"Dch2Droplowpricnts", instance.Dch2Droplowpricnts}
    instance.EntityData.Leafs["DCH3_DropLowPriCntS"] = types.YLeaf{"Dch3Droplowpricnts", instance.Dch3Droplowpricnts}
    instance.EntityData.Leafs["DCH0_Ecc_1bErrCnt"] = types.YLeaf{"Dch0Ecc1Berrcnt", instance.Dch0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_1bErrCnt"] = types.YLeaf{"Dch1Ecc1Berrcnt", instance.Dch1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_1bErrCnt"] = types.YLeaf{"Dch2Ecc1Berrcnt", instance.Dch2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_1bErrCnt"] = types.YLeaf{"Dch3Ecc1Berrcnt", instance.Dch3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCH0_Ecc_2bErrCnt"] = types.YLeaf{"Dch0Ecc2Berrcnt", instance.Dch0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH1_Ecc_2bErrCnt"] = types.YLeaf{"Dch1Ecc2Berrcnt", instance.Dch1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH2_Ecc_2bErrCnt"] = types.YLeaf{"Dch2Ecc2Berrcnt", instance.Dch2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH3_Ecc_2bErrCnt"] = types.YLeaf{"Dch3Ecc2Berrcnt", instance.Dch3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCH0_ParityErrCnt"] = types.YLeaf{"Dch0Parityerrcnt", instance.Dch0Parityerrcnt}
    instance.EntityData.Leafs["DCH1_ParityErrCnt"] = types.YLeaf{"Dch1Parityerrcnt", instance.Dch1Parityerrcnt}
    instance.EntityData.Leafs["DCH2_ParityErrCnt"] = types.YLeaf{"Dch2Parityerrcnt", instance.Dch2Parityerrcnt}
    instance.EntityData.Leafs["DCH3_ParityErrCnt"] = types.YLeaf{"Dch3Parityerrcnt", instance.Dch3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntP"] = types.YLeaf{"Dcl0Dcldroppedp0Cntp", instance.Dcl0Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntP"] = types.YLeaf{"Dcl1Dcldroppedp0Cntp", instance.Dcl1Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntP"] = types.YLeaf{"Dcl2Dcldroppedp0Cntp", instance.Dcl2Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntP"] = types.YLeaf{"Dcl3Dcldroppedp0Cntp", instance.Dcl3Dcldroppedp0Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntP"] = types.YLeaf{"Dcl0Dcldroppedp1Cntp", instance.Dcl0Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntP"] = types.YLeaf{"Dcl1Dcldroppedp1Cntp", instance.Dcl1Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntP"] = types.YLeaf{"Dcl2Dcldroppedp1Cntp", instance.Dcl2Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntP"] = types.YLeaf{"Dcl3Dcldroppedp1Cntp", instance.Dcl3Dcldroppedp1Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntP"] = types.YLeaf{"Dcl0Dcldroppedp2Cntp", instance.Dcl0Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntP"] = types.YLeaf{"Dcl1Dcldroppedp2Cntp", instance.Dcl1Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntP"] = types.YLeaf{"Dcl2Dcldroppedp2Cntp", instance.Dcl2Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntP"] = types.YLeaf{"Dcl3Dcldroppedp2Cntp", instance.Dcl3Dcldroppedp2Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntP"] = types.YLeaf{"Dcl0Dcldroppedp3Cntp", instance.Dcl0Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntP"] = types.YLeaf{"Dcl1Dcldroppedp3Cntp", instance.Dcl1Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntP"] = types.YLeaf{"Dcl2Dcldroppedp3Cntp", instance.Dcl2Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntP"] = types.YLeaf{"Dcl3Dcldroppedp3Cntp", instance.Dcl3Dcldroppedp3Cntp}
    instance.EntityData.Leafs["DCL0_DclDroppedP0CntS"] = types.YLeaf{"Dcl0Dcldroppedp0Cnts", instance.Dcl0Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP0CntS"] = types.YLeaf{"Dcl1Dcldroppedp0Cnts", instance.Dcl1Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP0CntS"] = types.YLeaf{"Dcl2Dcldroppedp0Cnts", instance.Dcl2Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP0CntS"] = types.YLeaf{"Dcl3Dcldroppedp0Cnts", instance.Dcl3Dcldroppedp0Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP1CntS"] = types.YLeaf{"Dcl0Dcldroppedp1Cnts", instance.Dcl0Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP1CntS"] = types.YLeaf{"Dcl1Dcldroppedp1Cnts", instance.Dcl1Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP1CntS"] = types.YLeaf{"Dcl2Dcldroppedp1Cnts", instance.Dcl2Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP1CntS"] = types.YLeaf{"Dcl3Dcldroppedp1Cnts", instance.Dcl3Dcldroppedp1Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP2CntS"] = types.YLeaf{"Dcl0Dcldroppedp2Cnts", instance.Dcl0Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP2CntS"] = types.YLeaf{"Dcl1Dcldroppedp2Cnts", instance.Dcl1Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP2CntS"] = types.YLeaf{"Dcl2Dcldroppedp2Cnts", instance.Dcl2Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP2CntS"] = types.YLeaf{"Dcl3Dcldroppedp2Cnts", instance.Dcl3Dcldroppedp2Cnts}
    instance.EntityData.Leafs["DCL0_DclDroppedP3CntS"] = types.YLeaf{"Dcl0Dcldroppedp3Cnts", instance.Dcl0Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL1_DclDroppedP3CntS"] = types.YLeaf{"Dcl1Dcldroppedp3Cnts", instance.Dcl1Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL2_DclDroppedP3CntS"] = types.YLeaf{"Dcl2Dcldroppedp3Cnts", instance.Dcl2Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL3_DclDroppedP3CntS"] = types.YLeaf{"Dcl3Dcldroppedp3Cnts", instance.Dcl3Dcldroppedp3Cnts}
    instance.EntityData.Leafs["DCL0_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp0Cifdscrdcnt", instance.Dcl0Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp0Cifdscrdcnt", instance.Dcl1Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp0Cifdscrdcnt", instance.Dcl2Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP0CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp0Cifdscrdcnt", instance.Dcl3Ccp0Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl0Ccp1Cifdscrdcnt", instance.Dcl0Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL1_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl1Ccp1Cifdscrdcnt", instance.Dcl1Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL2_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl2Ccp1Cifdscrdcnt", instance.Dcl2Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL3_CCP1CIfDscrdCnt"] = types.YLeaf{"Dcl3Ccp1Cifdscrdcnt", instance.Dcl3Ccp1Cifdscrdcnt}
    instance.EntityData.Leafs["DCL0_Ecc_1bErrCnt"] = types.YLeaf{"Dcl0Ecc1Berrcnt", instance.Dcl0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_1bErrCnt"] = types.YLeaf{"Dcl1Ecc1Berrcnt", instance.Dcl1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_1bErrCnt"] = types.YLeaf{"Dcl2Ecc1Berrcnt", instance.Dcl2Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_1bErrCnt"] = types.YLeaf{"Dcl3Ecc1Berrcnt", instance.Dcl3Ecc1Berrcnt}
    instance.EntityData.Leafs["DCL0_Ecc_2bErrCnt"] = types.YLeaf{"Dcl0Ecc2Berrcnt", instance.Dcl0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL1_Ecc_2bErrCnt"] = types.YLeaf{"Dcl1Ecc2Berrcnt", instance.Dcl1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL2_Ecc_2bErrCnt"] = types.YLeaf{"Dcl2Ecc2Berrcnt", instance.Dcl2Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL3_Ecc_2bErrCnt"] = types.YLeaf{"Dcl3Ecc2Berrcnt", instance.Dcl3Ecc2Berrcnt}
    instance.EntityData.Leafs["DCL0_ParityErrCnt"] = types.YLeaf{"Dcl0Parityerrcnt", instance.Dcl0Parityerrcnt}
    instance.EntityData.Leafs["DCL1_ParityErrCnt"] = types.YLeaf{"Dcl1Parityerrcnt", instance.Dcl1Parityerrcnt}
    instance.EntityData.Leafs["DCL2_ParityErrCnt"] = types.YLeaf{"Dcl2Parityerrcnt", instance.Dcl2Parityerrcnt}
    instance.EntityData.Leafs["DCL3_ParityErrCnt"] = types.YLeaf{"Dcl3Parityerrcnt", instance.Dcl3Parityerrcnt}
    instance.EntityData.Leafs["DCL0_TagParErrCnt"] = types.YLeaf{"Dcl0Tagparerrcnt", instance.Dcl0Tagparerrcnt}
    instance.EntityData.Leafs["DCL1_TagParErrCnt"] = types.YLeaf{"Dcl1Tagparerrcnt", instance.Dcl1Tagparerrcnt}
    instance.EntityData.Leafs["DCL2_TagParErrCnt"] = types.YLeaf{"Dcl2Tagparerrcnt", instance.Dcl2Tagparerrcnt}
    instance.EntityData.Leafs["DCL3_TagParErrCnt"] = types.YLeaf{"Dcl3Tagparerrcnt", instance.Dcl3Tagparerrcnt}
    instance.EntityData.Leafs["DCL0_DataCrcErrCnt"] = types.YLeaf{"Dcl0Datacrcerrcnt", instance.Dcl0Datacrcerrcnt}
    instance.EntityData.Leafs["DCL1_DataCrcErrCnt"] = types.YLeaf{"Dcl1Datacrcerrcnt", instance.Dcl1Datacrcerrcnt}
    instance.EntityData.Leafs["DCL2_DataCrcErrCnt"] = types.YLeaf{"Dcl2Datacrcerrcnt", instance.Dcl2Datacrcerrcnt}
    instance.EntityData.Leafs["DCL3_DataCrcErrCnt"] = types.YLeaf{"Dcl3Datacrcerrcnt", instance.Dcl3Datacrcerrcnt}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp0"] = types.YLeaf{"Dcma0Dcmmdroppedip0", instance.Dcma0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp0"] = types.YLeaf{"Dcma1Dcmmdroppedip0", instance.Dcma1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp1"] = types.YLeaf{"Dcma0Dcmmdroppedip1", instance.Dcma0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp1"] = types.YLeaf{"Dcma1Dcmmdroppedip1", instance.Dcma1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp2"] = types.YLeaf{"Dcma0Dcmmdroppedip2", instance.Dcma0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp2"] = types.YLeaf{"Dcma1Dcmmdroppedip2", instance.Dcma1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedIp3"] = types.YLeaf{"Dcma0Dcmmdroppedip3", instance.Dcma0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedIp3"] = types.YLeaf{"Dcma1Dcmmdroppedip3", instance.Dcma1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmmdroppedtotalcnt", instance.Dcma0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmmdroppedtotalcnt", instance.Dcma1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp0"] = types.YLeaf{"Dcma0Dcmudroppedip0", instance.Dcma0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp0"] = types.YLeaf{"Dcma1Dcmudroppedip0", instance.Dcma1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp1"] = types.YLeaf{"Dcma0Dcmudroppedip1", instance.Dcma0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp1"] = types.YLeaf{"Dcma1Dcmudroppedip1", instance.Dcma1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp2"] = types.YLeaf{"Dcma0Dcmudroppedip2", instance.Dcma0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp2"] = types.YLeaf{"Dcma1Dcmudroppedip2", instance.Dcma1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedIp3"] = types.YLeaf{"Dcma0Dcmudroppedip3", instance.Dcma0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedIp3"] = types.YLeaf{"Dcma1Dcmudroppedip3", instance.Dcma1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMA0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma0Dcmudroppedtotalcnt", instance.Dcma0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcma1Dcmudroppedtotalcnt", instance.Dcma1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_1bErrCnt"] = types.YLeaf{"Dcma0Ecc1Berrcnt", instance.Dcma0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_1bErrCnt"] = types.YLeaf{"Dcma1Ecc1Berrcnt", instance.Dcma1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMA0_Ecc_2bErrCnt"] = types.YLeaf{"Dcma0Ecc2Berrcnt", instance.Dcma0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA1_Ecc_2bErrCnt"] = types.YLeaf{"Dcma1Ecc2Berrcnt", instance.Dcma1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMA0_ParityErrCnt"] = types.YLeaf{"Dcma0Parityerrcnt", instance.Dcma0Parityerrcnt}
    instance.EntityData.Leafs["DCMA1_ParityErrCnt"] = types.YLeaf{"Dcma1Parityerrcnt", instance.Dcma1Parityerrcnt}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp0"] = types.YLeaf{"Dcmb0Dcmmdroppedip0", instance.Dcmb0Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp0"] = types.YLeaf{"Dcmb1Dcmmdroppedip0", instance.Dcmb1Dcmmdroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp1"] = types.YLeaf{"Dcmb0Dcmmdroppedip1", instance.Dcmb0Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp1"] = types.YLeaf{"Dcmb1Dcmmdroppedip1", instance.Dcmb1Dcmmdroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp2"] = types.YLeaf{"Dcmb0Dcmmdroppedip2", instance.Dcmb0Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp2"] = types.YLeaf{"Dcmb1Dcmmdroppedip2", instance.Dcmb1Dcmmdroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedIp3"] = types.YLeaf{"Dcmb0Dcmmdroppedip3", instance.Dcmb0Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedIp3"] = types.YLeaf{"Dcmb1Dcmmdroppedip3", instance.Dcmb1Dcmmdroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmmdroppedtotalcnt", instance.Dcmb0Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmmDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmmdroppedtotalcnt", instance.Dcmb1Dcmmdroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp0"] = types.YLeaf{"Dcmb0Dcmudroppedip0", instance.Dcmb0Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp0"] = types.YLeaf{"Dcmb1Dcmudroppedip0", instance.Dcmb1Dcmudroppedip0}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp1"] = types.YLeaf{"Dcmb0Dcmudroppedip1", instance.Dcmb0Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp1"] = types.YLeaf{"Dcmb1Dcmudroppedip1", instance.Dcmb1Dcmudroppedip1}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp2"] = types.YLeaf{"Dcmb0Dcmudroppedip2", instance.Dcmb0Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp2"] = types.YLeaf{"Dcmb1Dcmudroppedip2", instance.Dcmb1Dcmudroppedip2}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedIp3"] = types.YLeaf{"Dcmb0Dcmudroppedip3", instance.Dcmb0Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedIp3"] = types.YLeaf{"Dcmb1Dcmudroppedip3", instance.Dcmb1Dcmudroppedip3}
    instance.EntityData.Leafs["DCMB0_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb0Dcmudroppedtotalcnt", instance.Dcmb0Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB1_DcmuDroppedTotalCnt"] = types.YLeaf{"Dcmb1Dcmudroppedtotalcnt", instance.Dcmb1Dcmudroppedtotalcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb0Ecc1Berrcnt", instance.Dcmb0Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_1bErrCnt"] = types.YLeaf{"Dcmb1Ecc1Berrcnt", instance.Dcmb1Ecc1Berrcnt}
    instance.EntityData.Leafs["DCMB0_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb0Ecc2Berrcnt", instance.Dcmb0Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB1_Ecc_2bErrCnt"] = types.YLeaf{"Dcmb1Ecc2Berrcnt", instance.Dcmb1Ecc2Berrcnt}
    instance.EntityData.Leafs["DCMB0_ParityErrCnt"] = types.YLeaf{"Dcmb0Parityerrcnt", instance.Dcmb0Parityerrcnt}
    instance.EntityData.Leafs["DCMB1_ParityErrCnt"] = types.YLeaf{"Dcmb1Parityerrcnt", instance.Dcmb1Parityerrcnt}
    instance.EntityData.Leafs["ECI_ParityErrCnt"] = types.YLeaf{"EciParityerrcnt", instance.EciParityerrcnt}
    instance.EntityData.Leafs["RTP_Ecc_1bErrCnt"] = types.YLeaf{"RtpEcc1Berrcnt", instance.RtpEcc1Berrcnt}
    instance.EntityData.Leafs["RTP_Ecc_2bErrCnt"] = types.YLeaf{"RtpEcc2Berrcnt", instance.RtpEcc2Berrcnt}
    instance.EntityData.Leafs["RTP_ParityErrCnt"] = types.YLeaf{"RtpParityerrcnt", instance.RtpParityerrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_1bErrCnt"] = types.YLeaf{"Fmac0Ecc1Berrcnt", instance.Fmac0Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_1bErrCnt"] = types.YLeaf{"Fmac1Ecc1Berrcnt", instance.Fmac1Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_1bErrCnt"] = types.YLeaf{"Fmac2Ecc1Berrcnt", instance.Fmac2Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_1bErrCnt"] = types.YLeaf{"Fmac3Ecc1Berrcnt", instance.Fmac3Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_1bErrCnt"] = types.YLeaf{"Fmac4Ecc1Berrcnt", instance.Fmac4Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_1bErrCnt"] = types.YLeaf{"Fmac5Ecc1Berrcnt", instance.Fmac5Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_1bErrCnt"] = types.YLeaf{"Fmac6Ecc1Berrcnt", instance.Fmac6Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_1bErrCnt"] = types.YLeaf{"Fmac7Ecc1Berrcnt", instance.Fmac7Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_1bErrCnt"] = types.YLeaf{"Fmac8Ecc1Berrcnt", instance.Fmac8Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_1bErrCnt"] = types.YLeaf{"Fmac9Ecc1Berrcnt", instance.Fmac9Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_1bErrCnt"] = types.YLeaf{"Fmac10Ecc1Berrcnt", instance.Fmac10Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_1bErrCnt"] = types.YLeaf{"Fmac11Ecc1Berrcnt", instance.Fmac11Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_1bErrCnt"] = types.YLeaf{"Fmac12Ecc1Berrcnt", instance.Fmac12Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_1bErrCnt"] = types.YLeaf{"Fmac13Ecc1Berrcnt", instance.Fmac13Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_1bErrCnt"] = types.YLeaf{"Fmac14Ecc1Berrcnt", instance.Fmac14Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_1bErrCnt"] = types.YLeaf{"Fmac15Ecc1Berrcnt", instance.Fmac15Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_1bErrCnt"] = types.YLeaf{"Fmac16Ecc1Berrcnt", instance.Fmac16Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_1bErrCnt"] = types.YLeaf{"Fmac17Ecc1Berrcnt", instance.Fmac17Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_1bErrCnt"] = types.YLeaf{"Fmac18Ecc1Berrcnt", instance.Fmac18Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_1bErrCnt"] = types.YLeaf{"Fmac19Ecc1Berrcnt", instance.Fmac19Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_1bErrCnt"] = types.YLeaf{"Fmac20Ecc1Berrcnt", instance.Fmac20Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_1bErrCnt"] = types.YLeaf{"Fmac21Ecc1Berrcnt", instance.Fmac21Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_1bErrCnt"] = types.YLeaf{"Fmac22Ecc1Berrcnt", instance.Fmac22Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_1bErrCnt"] = types.YLeaf{"Fmac23Ecc1Berrcnt", instance.Fmac23Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_1bErrCnt"] = types.YLeaf{"Fmac24Ecc1Berrcnt", instance.Fmac24Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_1bErrCnt"] = types.YLeaf{"Fmac25Ecc1Berrcnt", instance.Fmac25Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_1bErrCnt"] = types.YLeaf{"Fmac26Ecc1Berrcnt", instance.Fmac26Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_1bErrCnt"] = types.YLeaf{"Fmac27Ecc1Berrcnt", instance.Fmac27Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_1bErrCnt"] = types.YLeaf{"Fmac28Ecc1Berrcnt", instance.Fmac28Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_1bErrCnt"] = types.YLeaf{"Fmac29Ecc1Berrcnt", instance.Fmac29Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_1bErrCnt"] = types.YLeaf{"Fmac30Ecc1Berrcnt", instance.Fmac30Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_1bErrCnt"] = types.YLeaf{"Fmac31Ecc1Berrcnt", instance.Fmac31Ecc1Berrcnt}
    instance.EntityData.Leafs["FMAC0_Ecc_2bErrCnt"] = types.YLeaf{"Fmac0Ecc2Berrcnt", instance.Fmac0Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC1_Ecc_2bErrCnt"] = types.YLeaf{"Fmac1Ecc2Berrcnt", instance.Fmac1Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC2_Ecc_2bErrCnt"] = types.YLeaf{"Fmac2Ecc2Berrcnt", instance.Fmac2Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC3_Ecc_2bErrCnt"] = types.YLeaf{"Fmac3Ecc2Berrcnt", instance.Fmac3Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC4_Ecc_2bErrCnt"] = types.YLeaf{"Fmac4Ecc2Berrcnt", instance.Fmac4Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC5_Ecc_2bErrCnt"] = types.YLeaf{"Fmac5Ecc2Berrcnt", instance.Fmac5Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC6_Ecc_2bErrCnt"] = types.YLeaf{"Fmac6Ecc2Berrcnt", instance.Fmac6Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC7_Ecc_2bErrCnt"] = types.YLeaf{"Fmac7Ecc2Berrcnt", instance.Fmac7Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC8_Ecc_2bErrCnt"] = types.YLeaf{"Fmac8Ecc2Berrcnt", instance.Fmac8Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC9_Ecc_2bErrCnt"] = types.YLeaf{"Fmac9Ecc2Berrcnt", instance.Fmac9Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC10_Ecc_2bErrCnt"] = types.YLeaf{"Fmac10Ecc2Berrcnt", instance.Fmac10Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC11_Ecc_2bErrCnt"] = types.YLeaf{"Fmac11Ecc2Berrcnt", instance.Fmac11Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC12_Ecc_2bErrCnt"] = types.YLeaf{"Fmac12Ecc2Berrcnt", instance.Fmac12Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC13_Ecc_2bErrCnt"] = types.YLeaf{"Fmac13Ecc2Berrcnt", instance.Fmac13Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC14_Ecc_2bErrCnt"] = types.YLeaf{"Fmac14Ecc2Berrcnt", instance.Fmac14Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC15_Ecc_2bErrCnt"] = types.YLeaf{"Fmac15Ecc2Berrcnt", instance.Fmac15Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC16_Ecc_2bErrCnt"] = types.YLeaf{"Fmac16Ecc2Berrcnt", instance.Fmac16Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC17_Ecc_2bErrCnt"] = types.YLeaf{"Fmac17Ecc2Berrcnt", instance.Fmac17Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC18_Ecc_2bErrCnt"] = types.YLeaf{"Fmac18Ecc2Berrcnt", instance.Fmac18Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC19_Ecc_2bErrCnt"] = types.YLeaf{"Fmac19Ecc2Berrcnt", instance.Fmac19Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC20_Ecc_2bErrCnt"] = types.YLeaf{"Fmac20Ecc2Berrcnt", instance.Fmac20Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC21_Ecc_2bErrCnt"] = types.YLeaf{"Fmac21Ecc2Berrcnt", instance.Fmac21Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC22_Ecc_2bErrCnt"] = types.YLeaf{"Fmac22Ecc2Berrcnt", instance.Fmac22Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC23_Ecc_2bErrCnt"] = types.YLeaf{"Fmac23Ecc2Berrcnt", instance.Fmac23Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC24_Ecc_2bErrCnt"] = types.YLeaf{"Fmac24Ecc2Berrcnt", instance.Fmac24Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC25_Ecc_2bErrCnt"] = types.YLeaf{"Fmac25Ecc2Berrcnt", instance.Fmac25Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC26_Ecc_2bErrCnt"] = types.YLeaf{"Fmac26Ecc2Berrcnt", instance.Fmac26Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC27_Ecc_2bErrCnt"] = types.YLeaf{"Fmac27Ecc2Berrcnt", instance.Fmac27Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC28_Ecc_2bErrCnt"] = types.YLeaf{"Fmac28Ecc2Berrcnt", instance.Fmac28Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC29_Ecc_2bErrCnt"] = types.YLeaf{"Fmac29Ecc2Berrcnt", instance.Fmac29Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC30_Ecc_2bErrCnt"] = types.YLeaf{"Fmac30Ecc2Berrcnt", instance.Fmac30Ecc2Berrcnt}
    instance.EntityData.Leafs["FMAC31_Ecc_2bErrCnt"] = types.YLeaf{"Fmac31Ecc2Berrcnt", instance.Fmac31Ecc2Berrcnt}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    instance.EntityData.Leafs["show_CCS"] = types.YLeaf{"ShowCcs", instance.ShowCcs}
    instance.EntityData.Leafs["show_DCH"] = types.YLeaf{"ShowDch", instance.ShowDch}
    instance.EntityData.Leafs["show_DCl"] = types.YLeaf{"ShowDcl", instance.ShowDcl}
    instance.EntityData.Leafs["show_DCMA"] = types.YLeaf{"ShowDcma", instance.ShowDcma}
    instance.EntityData.Leafs["show_DCMB"] = types.YLeaf{"ShowDcmb", instance.ShowDcmb}
    instance.EntityData.Leafs["show_ECI"] = types.YLeaf{"ShowEci", instance.ShowEci}
    instance.EntityData.Leafs["show_FMAC"] = types.YLeaf{"ShowFmac", instance.ShowFmac}
    instance.EntityData.Leafs["show_RTP"] = types.YLeaf{"ShowRtp", instance.ShowRtp}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo
type Controller_SfeOper_Sfe_LinkInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location.
    Location []Controller_SfeOper_Sfe_LinkInfo_Location
}

func (linkInfo *Controller_SfeOper_Sfe_LinkInfo) GetEntityData() *types.CommonEntityData {
    linkInfo.EntityData.YFilter = linkInfo.YFilter
    linkInfo.EntityData.YangName = "link-info"
    linkInfo.EntityData.BundleName = "cisco_ios_xr"
    linkInfo.EntityData.ParentYangName = "sfe"
    linkInfo.EntityData.SegmentPath = "link-info"
    linkInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkInfo.EntityData.Children = make(map[string]types.YChild)
    linkInfo.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range linkInfo.Location {
        linkInfo.EntityData.Children[types.GetSegmentPath(&linkInfo.Location[i])] = types.YChild{"Location", &linkInfo.Location[i]}
    }
    linkInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(linkInfo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location
type Controller_SfeOper_Sfe_LinkInfo_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Rx.
    Rx []Controller_SfeOper_Sfe_LinkInfo_Location_Rx

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx.
    Tx []Controller_SfeOper_Sfe_LinkInfo_Location_Tx
}

func (location *Controller_SfeOper_Sfe_LinkInfo_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "link-info"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["rx"] = types.YChild{"Rx", nil}
    for i := range location.Rx {
        location.EntityData.Children[types.GetSegmentPath(&location.Rx[i])] = types.YChild{"Rx", &location.Rx[i]}
    }
    location.EntityData.Children["tx"] = types.YChild{"Tx", nil}
    for i := range location.Tx {
        location.EntityData.Children[types.GetSegmentPath(&location.Tx[i])] = types.YChild{"Tx", &location.Tx[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
}

func (rx *Controller_SfeOper_Sfe_LinkInfo_Location_Rx) GetEntityData() *types.CommonEntityData {
    rx.EntityData.YFilter = rx.YFilter
    rx.EntityData.YangName = "rx"
    rx.EntityData.BundleName = "cisco_ios_xr"
    rx.EntityData.ParentYangName = "location"
    rx.EntityData.SegmentPath = "rx" + "[start='" + fmt.Sprintf("%v", rx.Start) + "']" + "[end='" + fmt.Sprintf("%v", rx.End) + "']"
    rx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rx.EntityData.Children = make(map[string]types.YChild)
    rx.EntityData.Children["detail"] = types.YChild{"Detail", &rx.Detail}
    rx.EntityData.Children["topo"] = types.YChild{"Topo", &rx.Topo}
    rx.EntityData.Children["flap"] = types.YChild{"Flap", &rx.Flap}
    rx.EntityData.Children["stats"] = types.YChild{"Stats", &rx.Stats}
    rx.EntityData.Leafs = make(map[string]types.YLeaf)
    rx.EntityData.Leafs["start"] = types.YLeaf{"Start", rx.Start}
    rx.EntityData.Leafs["end"] = types.YLeaf{"End", rx.End}
    return &(rx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Topo Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo

    
    Flap Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "rx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["topo"] = types.YChild{"Topo", &detail.Topo}
    detail.EntityData.Children["flap"] = types.YChild{"Flap", &detail.Flap}
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "detail"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = make(map[string]types.YChild)
    topo.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range topo.Instance {
        topo.EntityData.Children[types.GetSegmentPath(&topo.Instance[i])] = types.YChild{"Instance", &topo.Instance[i]}
    }
    topo.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "detail"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = make(map[string]types.YChild)
    flap.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range flap.Instance {
        flap.EntityData.Children[types.GetSegmentPath(&flap.Instance[i])] = types.YChild{"Instance", &flap.Instance[i]}
    }
    flap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Detail_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
}

func (topo *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo) GetEntityData() *types.CommonEntityData {
    topo.EntityData.YFilter = topo.YFilter
    topo.EntityData.YangName = "topo"
    topo.EntityData.BundleName = "cisco_ios_xr"
    topo.EntityData.ParentYangName = "rx"
    topo.EntityData.SegmentPath = "topo"
    topo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topo.EntityData.Children = make(map[string]types.YChild)
    topo.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range topo.Instance {
        topo.EntityData.Children[types.GetSegmentPath(&topo.Instance[i])] = types.YChild{"Instance", &topo.Instance[i]}
    }
    topo.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(topo.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "topo"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Topo_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
}

func (flap *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap) GetEntityData() *types.CommonEntityData {
    flap.EntityData.YFilter = flap.YFilter
    flap.EntityData.YangName = "flap"
    flap.EntityData.BundleName = "cisco_ios_xr"
    flap.EntityData.ParentYangName = "rx"
    flap.EntityData.SegmentPath = "flap"
    flap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flap.EntityData.Children = make(map[string]types.YChild)
    flap.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range flap.Instance {
        flap.EntityData.Children[types.GetSegmentPath(&flap.Instance[i])] = types.YChild{"Instance", &flap.Instance[i]}
    }
    flap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(flap.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "flap"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Flap_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "rx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = make(map[string]types.YChild)
    stats.EntityData.Children["data"] = types.YChild{"Data", &stats.Data}
    stats.EntityData.Children["ctrl"] = types.YChild{"Ctrl", &stats.Ctrl}
    stats.EntityData.Children["all"] = types.YChild{"All", &stats.All}
    stats.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range data.Instance {
        data.EntityData.Children[types.GetSegmentPath(&data.Instance[i])] = types.YChild{"Instance", &data.Instance[i]}
    }
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = make(map[string]types.YChild)
    ctrl.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range ctrl.Instance {
        ctrl.EntityData.Children[types.GetSegmentPath(&ctrl.Instance[i])] = types.YChild{"Instance", &ctrl.Instance[i]}
    }
    ctrl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range all.Instance {
        all.EntityData.Children[types.GetSegmentPath(&all.Instance[i])] = types.YChild{"Instance", &all.Instance[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Rx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    
    Detail Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail

    // The type is slice of Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance

    
    Stats Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
}

func (tx *Controller_SfeOper_Sfe_LinkInfo_Location_Tx) GetEntityData() *types.CommonEntityData {
    tx.EntityData.YFilter = tx.YFilter
    tx.EntityData.YangName = "tx"
    tx.EntityData.BundleName = "cisco_ios_xr"
    tx.EntityData.ParentYangName = "location"
    tx.EntityData.SegmentPath = "tx" + "[start='" + fmt.Sprintf("%v", tx.Start) + "']" + "[end='" + fmt.Sprintf("%v", tx.End) + "']"
    tx.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tx.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tx.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tx.EntityData.Children = make(map[string]types.YChild)
    tx.EntityData.Children["detail"] = types.YChild{"Detail", &tx.Detail}
    tx.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range tx.Instance {
        tx.EntityData.Children[types.GetSegmentPath(&tx.Instance[i])] = types.YChild{"Instance", &tx.Instance[i]}
    }
    tx.EntityData.Children["stats"] = types.YChild{"Stats", &tx.Stats}
    tx.EntityData.Leafs = make(map[string]types.YLeaf)
    tx.EntityData.Leafs["start"] = types.YLeaf{"Start", tx.Start}
    tx.EntityData.Leafs["end"] = types.YLeaf{"End", tx.End}
    return &(tx.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
}

func (detail *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "tx"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range detail.Instance {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Instance[i])] = types.YChild{"Instance", &detail.Instance[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "detail"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Detail_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "tx"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Data Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data

    
    Ctrl Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl

    
    All Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
}

func (stats *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "tx"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = make(map[string]types.YChild)
    stats.EntityData.Children["data"] = types.YChild{"Data", &stats.Data}
    stats.EntityData.Children["ctrl"] = types.YChild{"Ctrl", &stats.Ctrl}
    stats.EntityData.Children["all"] = types.YChild{"All", &stats.All}
    stats.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(stats.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
}

func (data *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "stats"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range data.Instance {
        data.EntityData.Children[types.GetSegmentPath(&data.Instance[i])] = types.YChild{"Instance", &data.Instance[i]}
    }
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(data.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "data"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Data_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
}

func (ctrl *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl) GetEntityData() *types.CommonEntityData {
    ctrl.EntityData.YFilter = ctrl.YFilter
    ctrl.EntityData.YangName = "ctrl"
    ctrl.EntityData.BundleName = "cisco_ios_xr"
    ctrl.EntityData.ParentYangName = "stats"
    ctrl.EntityData.SegmentPath = "ctrl"
    ctrl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ctrl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ctrl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ctrl.EntityData.Children = make(map[string]types.YChild)
    ctrl.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range ctrl.Instance {
        ctrl.EntityData.Children[types.GetSegmentPath(&ctrl.Instance[i])] = types.YChild{"Instance", &ctrl.Instance[i]}
    }
    ctrl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ctrl.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "ctrl"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_Ctrl_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance.
    Instance []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
}

func (all *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All) GetEntityData() *types.CommonEntityData {
    all.EntityData.YFilter = all.YFilter
    all.EntityData.YangName = "all"
    all.EntityData.BundleName = "cisco_ios_xr"
    all.EntityData.ParentYangName = "stats"
    all.EntityData.SegmentPath = "all"
    all.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    all.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    all.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    all.EntityData.Children = make(map[string]types.YChild)
    all.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range all.Instance {
        all.EntityData.Children[types.GetSegmentPath(&all.Instance[i])] = types.YChild{"Instance", &all.Instance[i]}
    }
    all.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(all.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is string.
    NodeidStr interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "all"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["nodeid_str"] = types.YLeaf{"NodeidStr", instance.NodeidStr}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    LinkIdStr interface{}

    // The type is string.
    Speed interface{}

    // The type is string.
    Stage interface{}

    // The type is interface{} with range: 0..4294967295.
    FabPlane interface{}

    // The type is interface{} with range: 0..4294967295.
    FabGroup interface{}

    // The type is interface{} with range: 0..4294967295.
    FlapCnt interface{}

    // The type is interface{} with range: 0..4294967295.
    NumAdminShuts interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    Flags interface{}

    // The type is string.
    FarEndLinkFsdb interface{}

    // The type is string.
    FarEndLinkHw interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff1 interface{}

    // The type is interface{} with range: 0..4294967295.
    Coeff2 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxControlCellsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataCellCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDataByteCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxBecRetransmit interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxAsynFifoRate interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxCrcErrorsCounter interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecCorrectableError interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxLfecFecUncorrectableErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxDroppedRetransmittedControl interface{}

    // The type is string.
    FsmState interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History.
    History []Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
}

func (linkIdxList *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Children["history"] = types.YChild{"History", nil}
    for i := range linkIdxList.History {
        linkIdxList.EntityData.Children[types.GetSegmentPath(&linkIdxList.History[i])] = types.YChild{"History", &linkIdxList.History[i]}
    }
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["link_id_str"] = types.YLeaf{"LinkIdStr", linkIdxList.LinkIdStr}
    linkIdxList.EntityData.Leafs["speed"] = types.YLeaf{"Speed", linkIdxList.Speed}
    linkIdxList.EntityData.Leafs["stage"] = types.YLeaf{"Stage", linkIdxList.Stage}
    linkIdxList.EntityData.Leafs["fab_plane"] = types.YLeaf{"FabPlane", linkIdxList.FabPlane}
    linkIdxList.EntityData.Leafs["fab_group"] = types.YLeaf{"FabGroup", linkIdxList.FabGroup}
    linkIdxList.EntityData.Leafs["flap_cnt"] = types.YLeaf{"FlapCnt", linkIdxList.FlapCnt}
    linkIdxList.EntityData.Leafs["num_admin_shuts"] = types.YLeaf{"NumAdminShuts", linkIdxList.NumAdminShuts}
    linkIdxList.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", linkIdxList.AdminState}
    linkIdxList.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", linkIdxList.OperState}
    linkIdxList.EntityData.Leafs["flags"] = types.YLeaf{"Flags", linkIdxList.Flags}
    linkIdxList.EntityData.Leafs["far_end_link_fsdb"] = types.YLeaf{"FarEndLinkFsdb", linkIdxList.FarEndLinkFsdb}
    linkIdxList.EntityData.Leafs["far_end_link_hw"] = types.YLeaf{"FarEndLinkHw", linkIdxList.FarEndLinkHw}
    linkIdxList.EntityData.Leafs["coeff1"] = types.YLeaf{"Coeff1", linkIdxList.Coeff1}
    linkIdxList.EntityData.Leafs["coeff2"] = types.YLeaf{"Coeff2", linkIdxList.Coeff2}
    linkIdxList.EntityData.Leafs["TX_Control_cells_counter"] = types.YLeaf{"TxControlCellsCounter", linkIdxList.TxControlCellsCounter}
    linkIdxList.EntityData.Leafs["TX_Data_cell_counter"] = types.YLeaf{"TxDataCellCounter", linkIdxList.TxDataCellCounter}
    linkIdxList.EntityData.Leafs["TX_Data_byte_counter"] = types.YLeaf{"TxDataByteCounter", linkIdxList.TxDataByteCounter}
    linkIdxList.EntityData.Leafs["TX_BEC_retransmit"] = types.YLeaf{"TxBecRetransmit", linkIdxList.TxBecRetransmit}
    linkIdxList.EntityData.Leafs["TX_Asyn_fifo_rate"] = types.YLeaf{"TxAsynFifoRate", linkIdxList.TxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_Control_cells_counter"] = types.YLeaf{"RxControlCellsCounter", linkIdxList.RxControlCellsCounter}
    linkIdxList.EntityData.Leafs["RX_Data_cell_counter"] = types.YLeaf{"RxDataCellCounter", linkIdxList.RxDataCellCounter}
    linkIdxList.EntityData.Leafs["RX_Data_byte_counter"] = types.YLeaf{"RxDataByteCounter", linkIdxList.RxDataByteCounter}
    linkIdxList.EntityData.Leafs["RX_BEC_retransmit"] = types.YLeaf{"RxBecRetransmit", linkIdxList.RxBecRetransmit}
    linkIdxList.EntityData.Leafs["RX_Asyn_fifo_rate"] = types.YLeaf{"RxAsynFifoRate", linkIdxList.RxAsynFifoRate}
    linkIdxList.EntityData.Leafs["RX_CRC_errors_counter"] = types.YLeaf{"RxCrcErrorsCounter", linkIdxList.RxCrcErrorsCounter}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_correctable_error"] = types.YLeaf{"RxLfecFecCorrectableError", linkIdxList.RxLfecFecCorrectableError}
    linkIdxList.EntityData.Leafs["RX_LFEC_FEC_uncorrectable_errors"] = types.YLeaf{"RxLfecFecUncorrectableErrors", linkIdxList.RxLfecFecUncorrectableErrors}
    linkIdxList.EntityData.Leafs["RX_dropped_retransmitted_control"] = types.YLeaf{"RxDroppedRetransmittedControl", linkIdxList.RxDroppedRetransmittedControl}
    linkIdxList.EntityData.Leafs["fsm_state"] = types.YLeaf{"FsmState", linkIdxList.FsmState}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History
type Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    HistoryIdx interface{}

    // The type is string.
    TimeStamp interface{}

    // The type is string.
    AdminState interface{}

    // The type is string.
    OperState interface{}

    // The type is string.
    ErrorState interface{}

    // The type is string.
    DownReasons interface{}
}

func (history *Controller_SfeOper_Sfe_LinkInfo_Location_Tx_Stats_All_Instance_LinkIdxList_History) GetEntityData() *types.CommonEntityData {
    history.EntityData.YFilter = history.YFilter
    history.EntityData.YangName = "history"
    history.EntityData.BundleName = "cisco_ios_xr"
    history.EntityData.ParentYangName = "link_idx_list"
    history.EntityData.SegmentPath = "history" + "[history_idx='" + fmt.Sprintf("%v", history.HistoryIdx) + "']"
    history.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    history.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    history.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    history.EntityData.Children = make(map[string]types.YChild)
    history.EntityData.Leafs = make(map[string]types.YLeaf)
    history.EntityData.Leafs["history_idx"] = types.YLeaf{"HistoryIdx", history.HistoryIdx}
    history.EntityData.Leafs["time_stamp"] = types.YLeaf{"TimeStamp", history.TimeStamp}
    history.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", history.AdminState}
    history.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", history.OperState}
    history.EntityData.Leafs["error_state"] = types.YLeaf{"ErrorState", history.ErrorState}
    history.EntityData.Leafs["down_reasons"] = types.YLeaf{"DownReasons", history.DownReasons}
    return &(history.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell
type Controller_SfeOper_Sfe_Diagshell struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location.
    Location []Controller_SfeOper_Sfe_Diagshell_Location
}

func (diagshell *Controller_SfeOper_Sfe_Diagshell) GetEntityData() *types.CommonEntityData {
    diagshell.EntityData.YFilter = diagshell.YFilter
    diagshell.EntityData.YangName = "diagshell"
    diagshell.EntityData.BundleName = "cisco_ios_xr"
    diagshell.EntityData.ParentYangName = "sfe"
    diagshell.EntityData.SegmentPath = "diagshell"
    diagshell.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagshell.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagshell.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagshell.EntityData.Children = make(map[string]types.YChild)
    diagshell.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range diagshell.Location {
        diagshell.EntityData.Children[types.GetSegmentPath(&diagshell.Location[i])] = types.YChild{"Location", &diagshell.Location[i]}
    }
    diagshell.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(diagshell.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location
type Controller_SfeOper_Sfe_Diagshell_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Diagshell_Location_Instance.
    Instance []Controller_SfeOper_Sfe_Diagshell_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Diagshell_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "diagshell"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range location.Instance {
        location.EntityData.Children[types.GetSegmentPath(&location.Instance[i])] = types.YChild{"Instance", &location.Instance[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance
type Controller_SfeOper_Sfe_Diagshell_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd.
    DiagCmd []Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
}

func (instance *Controller_SfeOper_Sfe_Diagshell_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + "[instance_num='" + fmt.Sprintf("%v", instance.InstanceNum) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["diag_cmd"] = types.YChild{"DiagCmd", nil}
    for i := range instance.DiagCmd {
        instance.EntityData.Children[types.GetSegmentPath(&instance.DiagCmd[i])] = types.YChild{"DiagCmd", &instance.DiagCmd[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance_num"] = types.YLeaf{"InstanceNum", instance.InstanceNum}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    CmdStr interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes.
    Bytes []Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
}

func (diagCmd *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd) GetEntityData() *types.CommonEntityData {
    diagCmd.EntityData.YFilter = diagCmd.YFilter
    diagCmd.EntityData.YangName = "diag_cmd"
    diagCmd.EntityData.BundleName = "cisco_ios_xr"
    diagCmd.EntityData.ParentYangName = "instance"
    diagCmd.EntityData.SegmentPath = "diag_cmd" + "[cmd_str='" + fmt.Sprintf("%v", diagCmd.CmdStr) + "']"
    diagCmd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    diagCmd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    diagCmd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    diagCmd.EntityData.Children = make(map[string]types.YChild)
    diagCmd.EntityData.Children["bytes"] = types.YChild{"Bytes", nil}
    for i := range diagCmd.Bytes {
        diagCmd.EntityData.Children[types.GetSegmentPath(&diagCmd.Bytes[i])] = types.YChild{"Bytes", &diagCmd.Bytes[i]}
    }
    diagCmd.EntityData.Leafs = make(map[string]types.YLeaf)
    diagCmd.EntityData.Leafs["cmd_str"] = types.YLeaf{"CmdStr", diagCmd.CmdStr}
    return &(diagCmd.EntityData)
}

// Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes
type Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Diagshell_Location_Instance_DiagCmd_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "diag_cmd"
    bytes.EntityData.SegmentPath = "bytes" + "[byte_idx='" + fmt.Sprintf("%v", bytes.ByteIdx) + "']"
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = make(map[string]types.YChild)
    bytes.EntityData.Leafs = make(map[string]types.YLeaf)
    bytes.EntityData.Leafs["byte_idx"] = types.YLeaf{"ByteIdx", bytes.ByteIdx}
    bytes.EntityData.Leafs["data"] = types.YLeaf{"Data", bytes.Data}
    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Register
type Controller_SfeOper_Sfe_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Register_Location.
    Location []Controller_SfeOper_Sfe_Register_Location
}

func (register *Controller_SfeOper_Sfe_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "sfe"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = make(map[string]types.YChild)
    register.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range register.Location {
        register.EntityData.Children[types.GetSegmentPath(&register.Location[i])] = types.YChild{"Location", &register.Location[i]}
    }
    register.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(register.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location
type Controller_SfeOper_Sfe_Register_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Register_Location_Instance.
    Instance []Controller_SfeOper_Sfe_Register_Location_Instance
}

func (location *Controller_SfeOper_Sfe_Register_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range location.Instance {
        location.EntityData.Children[types.GetSegmentPath(&location.Instance[i])] = types.YChild{"Instance", &location.Instance[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance
type Controller_SfeOper_Sfe_Register_Location_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..5.
    InstanceNum interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Register_Location_Instance_Bytes.
    Bytes []Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
}

func (instance *Controller_SfeOper_Sfe_Register_Location_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "location"
    instance.EntityData.SegmentPath = "instance" + "[instance_num='" + fmt.Sprintf("%v", instance.InstanceNum) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["bytes"] = types.YChild{"Bytes", nil}
    for i := range instance.Bytes {
        instance.EntityData.Children[types.GetSegmentPath(&instance.Bytes[i])] = types.YChild{"Bytes", &instance.Bytes[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance_num"] = types.YLeaf{"InstanceNum", instance.InstanceNum}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Register_Location_Instance_Bytes
type Controller_SfeOper_Sfe_Register_Location_Instance_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_Register_Location_Instance_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "instance"
    bytes.EntityData.SegmentPath = "bytes" + "[byte_idx='" + fmt.Sprintf("%v", bytes.ByteIdx) + "']"
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = make(map[string]types.YChild)
    bytes.EntityData.Leafs = make(map[string]types.YLeaf)
    bytes.EntityData.Leafs["byte_idx"] = types.YLeaf{"ByteIdx", bytes.ByteIdx}
    bytes.EntityData.Leafs["data"] = types.YLeaf{"Data", bytes.Data}
    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile
type Controller_SfeOper_Sfe_DumpFile struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location.
    Location []Controller_SfeOper_Sfe_DumpFile_Location
}

func (dumpFile *Controller_SfeOper_Sfe_DumpFile) GetEntityData() *types.CommonEntityData {
    dumpFile.EntityData.YFilter = dumpFile.YFilter
    dumpFile.EntityData.YangName = "dump-file"
    dumpFile.EntityData.BundleName = "cisco_ios_xr"
    dumpFile.EntityData.ParentYangName = "sfe"
    dumpFile.EntityData.SegmentPath = "dump-file"
    dumpFile.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dumpFile.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dumpFile.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dumpFile.EntityData.Children = make(map[string]types.YChild)
    dumpFile.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range dumpFile.Location {
        dumpFile.EntityData.Children[types.GetSegmentPath(&dumpFile.Location[i])] = types.YChild{"Location", &dumpFile.Location[i]}
    }
    dumpFile.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(dumpFile.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location
type Controller_SfeOper_Sfe_DumpFile_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File.
    File []Controller_SfeOper_Sfe_DumpFile_Location_File
}

func (location *Controller_SfeOper_Sfe_DumpFile_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "dump-file"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["file"] = types.YChild{"File", nil}
    for i := range location.File {
        location.EntityData.Children[types.GetSegmentPath(&location.File[i])] = types.YChild{"File", &location.File[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File
type Controller_SfeOper_Sfe_DumpFile_Location_File struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    FileName interface{}

    // The type is slice of Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes.
    Bytes []Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
}

func (file *Controller_SfeOper_Sfe_DumpFile_Location_File) GetEntityData() *types.CommonEntityData {
    file.EntityData.YFilter = file.YFilter
    file.EntityData.YangName = "file"
    file.EntityData.BundleName = "cisco_ios_xr"
    file.EntityData.ParentYangName = "location"
    file.EntityData.SegmentPath = "file" + "[file_name='" + fmt.Sprintf("%v", file.FileName) + "']"
    file.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    file.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    file.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    file.EntityData.Children = make(map[string]types.YChild)
    file.EntityData.Children["bytes"] = types.YChild{"Bytes", nil}
    for i := range file.Bytes {
        file.EntityData.Children[types.GetSegmentPath(&file.Bytes[i])] = types.YChild{"Bytes", &file.Bytes[i]}
    }
    file.EntityData.Leafs = make(map[string]types.YLeaf)
    file.EntityData.Leafs["file_name"] = types.YLeaf{"FileName", file.FileName}
    return &(file.EntityData)
}

// Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes
type Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    ByteIdx interface{}

    // The type is string.
    Data interface{}
}

func (bytes *Controller_SfeOper_Sfe_DumpFile_Location_File_Bytes) GetEntityData() *types.CommonEntityData {
    bytes.EntityData.YFilter = bytes.YFilter
    bytes.EntityData.YangName = "bytes"
    bytes.EntityData.BundleName = "cisco_ios_xr"
    bytes.EntityData.ParentYangName = "file"
    bytes.EntityData.SegmentPath = "bytes" + "[byte_idx='" + fmt.Sprintf("%v", bytes.ByteIdx) + "']"
    bytes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bytes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bytes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bytes.EntityData.Children = make(map[string]types.YChild)
    bytes.EntityData.Leafs = make(map[string]types.YLeaf)
    bytes.EntityData.Leafs["byte_idx"] = types.YLeaf{"ByteIdx", bytes.ByteIdx}
    bytes.EntityData.Leafs["data"] = types.YLeaf{"Data", bytes.Data}
    return &(bytes.EntityData)
}

// Controller_SfeOper_Sfe_Parse
type Controller_SfeOper_Sfe_Parse struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location.
    Location []Controller_SfeOper_Sfe_Parse_Location
}

func (parse *Controller_SfeOper_Sfe_Parse) GetEntityData() *types.CommonEntityData {
    parse.EntityData.YFilter = parse.YFilter
    parse.EntityData.YangName = "parse"
    parse.EntityData.BundleName = "cisco_ios_xr"
    parse.EntityData.ParentYangName = "sfe"
    parse.EntityData.SegmentPath = "parse"
    parse.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parse.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parse.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parse.EntityData.Children = make(map[string]types.YChild)
    parse.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range parse.Location {
        parse.EntityData.Children[types.GetSegmentPath(&parse.Location[i])] = types.YChild{"Location", &parse.Location[i]}
    }
    parse.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(parse.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location
type Controller_SfeOper_Sfe_Parse_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/([F|f][C|c](0?[0-5])))|(0/([R|r][P|p]0))'.
    LocStr interface{}

    // The type is string. The default value is location (R/S).
    Description interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link.
    Link []Controller_SfeOper_Sfe_Parse_Location_Link
}

func (location *Controller_SfeOper_Sfe_Parse_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "parse"
    location.EntityData.SegmentPath = "location" + "[loc_str='" + fmt.Sprintf("%v", location.LocStr) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["link"] = types.YChild{"Link", nil}
    for i := range location.Link {
        location.EntityData.Children[types.GetSegmentPath(&location.Link[i])] = types.YChild{"Link", &location.Link[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", location.LocStr}
    location.EntityData.Leafs["description"] = types.YLeaf{"Description", location.Description}
    return &(location.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link
type Controller_SfeOper_Sfe_Parse_Location_Link struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..143.
    Start interface{}

    // This attribute is a key. The type is interface{} with range: 0..143.
    End interface{}

    // The type is slice of Controller_SfeOper_Sfe_Parse_Location_Link_Instance.
    Instance []Controller_SfeOper_Sfe_Parse_Location_Link_Instance
}

func (link *Controller_SfeOper_Sfe_Parse_Location_Link) GetEntityData() *types.CommonEntityData {
    link.EntityData.YFilter = link.YFilter
    link.EntityData.YangName = "link"
    link.EntityData.BundleName = "cisco_ios_xr"
    link.EntityData.ParentYangName = "location"
    link.EntityData.SegmentPath = "link" + "[start='" + fmt.Sprintf("%v", link.Start) + "']" + "[end='" + fmt.Sprintf("%v", link.End) + "']"
    link.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    link.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    link.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    link.EntityData.Children = make(map[string]types.YChild)
    link.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range link.Instance {
        link.EntityData.Children[types.GetSegmentPath(&link.Instance[i])] = types.YChild{"Instance", &link.Instance[i]}
    }
    link.EntityData.Leafs = make(map[string]types.YLeaf)
    link.EntityData.Leafs["start"] = types.YLeaf{"Start", link.Start}
    link.EntityData.Leafs["end"] = types.YLeaf{"End", link.End}
    return &(link.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-5]|all'.
    InstanceId interface{}

    // The type is bool.
    IsShow interface{}

    // The type is slice of
    // Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList.
    LinkIdxList []Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
}

func (instance *Controller_SfeOper_Sfe_Parse_Location_Link_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "link"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["link_idx_list"] = types.YChild{"LinkIdxList", nil}
    for i := range instance.LinkIdxList {
        instance.EntityData.Children[types.GetSegmentPath(&instance.LinkIdxList[i])] = types.YChild{"LinkIdxList", &instance.LinkIdxList[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["is_show"] = types.YLeaf{"IsShow", instance.IsShow}
    return &(instance.EntityData)
}

// Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList
type Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -9223372036854775808..9223372036854775807.
    LinkIdx interface{}

    // The type is string.
    RackIdStr interface{}

    // The type is string.
    SlotIdStr interface{}

    // The type is interface{} with range: 0..4294967295.
    AsicInstId interface{}

    // The type is interface{} with range: 0..4294967295.
    LinkNumId interface{}

    // The type is interface{} with range: 0..4294967295.
    LogSlot interface{}

    // The type is interface{} with range: 0..4294967295.
    PhySlot interface{}

    // The type is interface{} with range: 0..4294967295.
    FapId interface{}

    // The type is interface{} with range: 0..4294967295.
    Unit interface{}

    // The type is interface{} with range: 0..4294967295.
    SfiId interface{}

    // The type is string.
    IpAddr interface{}

    // The type is string.
    DriverRun interface{}
}

func (linkIdxList *Controller_SfeOper_Sfe_Parse_Location_Link_Instance_LinkIdxList) GetEntityData() *types.CommonEntityData {
    linkIdxList.EntityData.YFilter = linkIdxList.YFilter
    linkIdxList.EntityData.YangName = "link_idx_list"
    linkIdxList.EntityData.BundleName = "cisco_ios_xr"
    linkIdxList.EntityData.ParentYangName = "instance"
    linkIdxList.EntityData.SegmentPath = "link_idx_list" + "[link_idx='" + fmt.Sprintf("%v", linkIdxList.LinkIdx) + "']"
    linkIdxList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkIdxList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkIdxList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkIdxList.EntityData.Children = make(map[string]types.YChild)
    linkIdxList.EntityData.Leafs = make(map[string]types.YLeaf)
    linkIdxList.EntityData.Leafs["link_idx"] = types.YLeaf{"LinkIdx", linkIdxList.LinkIdx}
    linkIdxList.EntityData.Leafs["rack_id_str"] = types.YLeaf{"RackIdStr", linkIdxList.RackIdStr}
    linkIdxList.EntityData.Leafs["slot_id_str"] = types.YLeaf{"SlotIdStr", linkIdxList.SlotIdStr}
    linkIdxList.EntityData.Leafs["asic_inst_id"] = types.YLeaf{"AsicInstId", linkIdxList.AsicInstId}
    linkIdxList.EntityData.Leafs["link_num_id"] = types.YLeaf{"LinkNumId", linkIdxList.LinkNumId}
    linkIdxList.EntityData.Leafs["log_slot"] = types.YLeaf{"LogSlot", linkIdxList.LogSlot}
    linkIdxList.EntityData.Leafs["phy_slot"] = types.YLeaf{"PhySlot", linkIdxList.PhySlot}
    linkIdxList.EntityData.Leafs["fap_id"] = types.YLeaf{"FapId", linkIdxList.FapId}
    linkIdxList.EntityData.Leafs["unit"] = types.YLeaf{"Unit", linkIdxList.Unit}
    linkIdxList.EntityData.Leafs["sfi_id"] = types.YLeaf{"SfiId", linkIdxList.SfiId}
    linkIdxList.EntityData.Leafs["ip_addr"] = types.YLeaf{"IpAddr", linkIdxList.IpAddr}
    linkIdxList.EntityData.Leafs["driver_run"] = types.YLeaf{"DriverRun", linkIdxList.DriverRun}
    return &(linkIdxList.EntityData)
}

// Controller_SfeOper_SfeTrace
type Controller_SfeOper_SfeTrace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SfeDriver Controller_SfeOper_SfeTrace_SfeDriver
}

func (sfeTrace *Controller_SfeOper_SfeTrace) GetEntityData() *types.CommonEntityData {
    sfeTrace.EntityData.YFilter = sfeTrace.YFilter
    sfeTrace.EntityData.YangName = "sfe_trace"
    sfeTrace.EntityData.BundleName = "cisco_ios_xr"
    sfeTrace.EntityData.ParentYangName = "sfe_oper"
    sfeTrace.EntityData.SegmentPath = "sfe_trace"
    sfeTrace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeTrace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeTrace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeTrace.EntityData.Children = make(map[string]types.YChild)
    sfeTrace.EntityData.Children["sfe_driver"] = types.YChild{"SfeDriver", &sfeTrace.SfeDriver}
    sfeTrace.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfeTrace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver
type Controller_SfeOper_SfeTrace_SfeDriver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace.
    Trace []Controller_SfeOper_SfeTrace_SfeDriver_Trace
}

func (sfeDriver *Controller_SfeOper_SfeTrace_SfeDriver) GetEntityData() *types.CommonEntityData {
    sfeDriver.EntityData.YFilter = sfeDriver.YFilter
    sfeDriver.EntityData.YangName = "sfe_driver"
    sfeDriver.EntityData.BundleName = "cisco_ios_xr"
    sfeDriver.EntityData.ParentYangName = "sfe_trace"
    sfeDriver.EntityData.SegmentPath = "sfe_driver"
    sfeDriver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfeDriver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfeDriver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfeDriver.EntityData.Children = make(map[string]types.YChild)
    sfeDriver.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range sfeDriver.Trace {
        sfeDriver.EntityData.Children[types.GetSegmentPath(&sfeDriver.Trace[i])] = types.YChild{"Trace", &sfeDriver.Trace[i]}
    }
    sfeDriver.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfeDriver.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace
// show traceable processes
type Controller_SfeOper_SfeTrace_SfeDriver_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location.
    Location []Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
}

func (trace *Controller_SfeOper_SfeTrace_SfeDriver_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "sfe_driver"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions.
    AllOptions []Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
}

func (location *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks
type Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_SfeOper_SfeTrace_SfeDriver_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Asic
type Controller_Asic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    AsicName interface{}

    // The type is slice of Controller_Asic_Instance.
    Instance []Controller_Asic_Instance
}

func (asic *Controller_Asic) GetEntityData() *types.CommonEntityData {
    asic.EntityData.YFilter = asic.YFilter
    asic.EntityData.YangName = "asic"
    asic.EntityData.BundleName = "cisco_ios_xr"
    asic.EntityData.ParentYangName = "controller"
    asic.EntityData.SegmentPath = "asic" + "[asic-name='" + fmt.Sprintf("%v", asic.AsicName) + "']"
    asic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asic.EntityData.Children = make(map[string]types.YChild)
    asic.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range asic.Instance {
        asic.EntityData.Children[types.GetSegmentPath(&asic.Instance[i])] = types.YChild{"Instance", &asic.Instance[i]}
    }
    asic.EntityData.Leafs = make(map[string]types.YLeaf)
    asic.EntityData.Leafs["asic-name"] = types.YLeaf{"AsicName", asic.AsicName}
    return &(asic.EntityData)
}

// Controller_Asic_Instance
type Controller_Asic_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // The type is string.
    InstanceName interface{}

    // The type is slice of Controller_Asic_Instance_Address.
    Address []Controller_Asic_Instance_Address

    // The type is slice of Controller_Asic_Instance_BlockName.
    BlockName []Controller_Asic_Instance_BlockName

    // The type is slice of Controller_Asic_Instance_BlockNumber.
    BlockNumber []Controller_Asic_Instance_BlockNumber
}

func (instance *Controller_Asic_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "asic"
    instance.EntityData.SegmentPath = "instance" + "[instance-id='" + fmt.Sprintf("%v", instance.InstanceId) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["address"] = types.YChild{"Address", nil}
    for i := range instance.Address {
        instance.EntityData.Children[types.GetSegmentPath(&instance.Address[i])] = types.YChild{"Address", &instance.Address[i]}
    }
    instance.EntityData.Children["block-name"] = types.YChild{"BlockName", nil}
    for i := range instance.BlockName {
        instance.EntityData.Children[types.GetSegmentPath(&instance.BlockName[i])] = types.YChild{"BlockName", &instance.BlockName[i]}
    }
    instance.EntityData.Children["block-number"] = types.YChild{"BlockNumber", nil}
    for i := range instance.BlockNumber {
        instance.EntityData.Children[types.GetSegmentPath(&instance.BlockNumber[i])] = types.YChild{"BlockNumber", &instance.BlockNumber[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["instance-id"] = types.YLeaf{"InstanceId", instance.InstanceId}
    instance.EntityData.Leafs["instance-name"] = types.YLeaf{"InstanceName", instance.InstanceName}
    return &(instance.EntityData)
}

// Controller_Asic_Instance_Address
type Controller_Asic_Instance_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Addr interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    // This attribute is mandatory.
    Entries interface{}

    // The type is interface{} with range: 0..4294967295. This attribute is
    // mandatory.
    Width interface{}

    // The type is slice of Controller_Asic_Instance_Address_Location.
    Location []Controller_Asic_Instance_Address_Location
}

func (address *Controller_Asic_Instance_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "instance"
    address.EntityData.SegmentPath = "address" + "[addr='" + fmt.Sprintf("%v", address.Addr) + "']" + "[size='" + fmt.Sprintf("%v", address.Size) + "']" + "[entries='" + fmt.Sprintf("%v", address.Entries) + "']"
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = make(map[string]types.YChild)
    address.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range address.Location {
        address.EntityData.Children[types.GetSegmentPath(&address.Location[i])] = types.YChild{"Location", &address.Location[i]}
    }
    address.EntityData.Leafs = make(map[string]types.YLeaf)
    address.EntityData.Leafs["addr"] = types.YLeaf{"Addr", address.Addr}
    address.EntityData.Leafs["size"] = types.YLeaf{"Size", address.Size}
    address.EntityData.Leafs["entries"] = types.YLeaf{"Entries", address.Entries}
    address.EntityData.Leafs["width"] = types.YLeaf{"Width", address.Width}
    return &(address.EntityData)
}

// Controller_Asic_Instance_Address_Location
type Controller_Asic_Instance_Address_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of Controller_Asic_Instance_Address_Location_DirectData.
    DirectData []Controller_Asic_Instance_Address_Location_DirectData
}

func (location *Controller_Asic_Instance_Address_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "address"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["direct_data"] = types.YChild{"DirectData", nil}
    for i := range location.DirectData {
        location.EntityData.Children[types.GetSegmentPath(&location.DirectData[i])] = types.YChild{"DirectData", &location.DirectData[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Asic_Instance_Address_Location_DirectData
type Controller_Asic_Instance_Address_Location_DirectData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (directData *Controller_Asic_Instance_Address_Location_DirectData) GetEntityData() *types.CommonEntityData {
    directData.EntityData.YFilter = directData.YFilter
    directData.EntityData.YangName = "direct_data"
    directData.EntityData.BundleName = "cisco_ios_xr"
    directData.EntityData.ParentYangName = "location"
    directData.EntityData.SegmentPath = "direct_data"
    directData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directData.EntityData.Children = make(map[string]types.YChild)
    directData.EntityData.Leafs = make(map[string]types.YLeaf)
    directData.EntityData.Leafs["address"] = types.YLeaf{"Address", directData.Address}
    directData.EntityData.Leafs["name"] = types.YLeaf{"Name", directData.Name}
    directData.EntityData.Leafs["value"] = types.YLeaf{"Value", directData.Value}
    directData.EntityData.Leafs["size"] = types.YLeaf{"Size", directData.Size}
    return &(directData.EntityData)
}

// Controller_Asic_Instance_BlockName
type Controller_Asic_Instance_BlockName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    BlockNm interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is slice of Controller_Asic_Instance_BlockName_RegisterName.
    RegisterName []Controller_Asic_Instance_BlockName_RegisterName
}

func (blockName *Controller_Asic_Instance_BlockName) GetEntityData() *types.CommonEntityData {
    blockName.EntityData.YFilter = blockName.YFilter
    blockName.EntityData.YangName = "block-name"
    blockName.EntityData.BundleName = "cisco_ios_xr"
    blockName.EntityData.ParentYangName = "instance"
    blockName.EntityData.SegmentPath = "block-name" + "[block-nm='" + fmt.Sprintf("%v", blockName.BlockNm) + "']" + "[block-num='" + fmt.Sprintf("%v", blockName.BlockNum) + "']"
    blockName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockName.EntityData.Children = make(map[string]types.YChild)
    blockName.EntityData.Children["register-name"] = types.YChild{"RegisterName", nil}
    for i := range blockName.RegisterName {
        blockName.EntityData.Children[types.GetSegmentPath(&blockName.RegisterName[i])] = types.YChild{"RegisterName", &blockName.RegisterName[i]}
    }
    blockName.EntityData.Leafs = make(map[string]types.YLeaf)
    blockName.EntityData.Leafs["block-nm"] = types.YLeaf{"BlockNm", blockName.BlockNm}
    blockName.EntityData.Leafs["block-num"] = types.YLeaf{"BlockNum", blockName.BlockNum}
    return &(blockName.EntityData)
}

// Controller_Asic_Instance_BlockName_RegisterName
type Controller_Asic_Instance_BlockName_RegisterName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is slice of Controller_Asic_Instance_BlockName_RegisterName_Data.
    Data []Controller_Asic_Instance_BlockName_RegisterName_Data
}

func (registerName *Controller_Asic_Instance_BlockName_RegisterName) GetEntityData() *types.CommonEntityData {
    registerName.EntityData.YFilter = registerName.YFilter
    registerName.EntityData.YangName = "register-name"
    registerName.EntityData.BundleName = "cisco_ios_xr"
    registerName.EntityData.ParentYangName = "block-name"
    registerName.EntityData.SegmentPath = "register-name" + "[name='" + fmt.Sprintf("%v", registerName.Name) + "']"
    registerName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerName.EntityData.Children = make(map[string]types.YChild)
    registerName.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range registerName.Data {
        registerName.EntityData.Children[types.GetSegmentPath(&registerName.Data[i])] = types.YChild{"Data", &registerName.Data[i]}
    }
    registerName.EntityData.Leafs = make(map[string]types.YLeaf)
    registerName.EntityData.Leafs["name"] = types.YLeaf{"Name", registerName.Name}
    registerName.EntityData.Leafs["register"] = types.YLeaf{"Register", registerName.Register}
    return &(registerName.EntityData)
}

// Controller_Asic_Instance_BlockName_RegisterName_Data
type Controller_Asic_Instance_BlockName_RegisterName_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockName_RegisterName_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "register-name"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Controller_Asic_Instance_BlockNumber
type Controller_Asic_Instance_BlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    BlockNum interface{}

    // The type is string.
    BlockNm interface{}

    // The type is slice of Controller_Asic_Instance_BlockNumber_RegisterNumber.
    RegisterNumber []Controller_Asic_Instance_BlockNumber_RegisterNumber
}

func (blockNumber *Controller_Asic_Instance_BlockNumber) GetEntityData() *types.CommonEntityData {
    blockNumber.EntityData.YFilter = blockNumber.YFilter
    blockNumber.EntityData.YangName = "block-number"
    blockNumber.EntityData.BundleName = "cisco_ios_xr"
    blockNumber.EntityData.ParentYangName = "instance"
    blockNumber.EntityData.SegmentPath = "block-number" + "[block-num='" + fmt.Sprintf("%v", blockNumber.BlockNum) + "']"
    blockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    blockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    blockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    blockNumber.EntityData.Children = make(map[string]types.YChild)
    blockNumber.EntityData.Children["register-number"] = types.YChild{"RegisterNumber", nil}
    for i := range blockNumber.RegisterNumber {
        blockNumber.EntityData.Children[types.GetSegmentPath(&blockNumber.RegisterNumber[i])] = types.YChild{"RegisterNumber", &blockNumber.RegisterNumber[i]}
    }
    blockNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    blockNumber.EntityData.Leafs["block-num"] = types.YLeaf{"BlockNum", blockNumber.BlockNum}
    blockNumber.EntityData.Leafs["block-nm"] = types.YLeaf{"BlockNm", blockNumber.BlockNm}
    return &(blockNumber.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber
type Controller_Asic_Instance_BlockNumber_RegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Register interface{}

    // The type is string.
    RegisterName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets.
    RegisterOffsets []Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_Location.
    Location []Controller_Asic_Instance_BlockNumber_RegisterNumber_Location
}

func (registerNumber *Controller_Asic_Instance_BlockNumber_RegisterNumber) GetEntityData() *types.CommonEntityData {
    registerNumber.EntityData.YFilter = registerNumber.YFilter
    registerNumber.EntityData.YangName = "register-number"
    registerNumber.EntityData.BundleName = "cisco_ios_xr"
    registerNumber.EntityData.ParentYangName = "block-number"
    registerNumber.EntityData.SegmentPath = "register-number" + "[register='" + fmt.Sprintf("%v", registerNumber.Register) + "']"
    registerNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerNumber.EntityData.Children = make(map[string]types.YChild)
    registerNumber.EntityData.Children["register-offsets"] = types.YChild{"RegisterOffsets", nil}
    for i := range registerNumber.RegisterOffsets {
        registerNumber.EntityData.Children[types.GetSegmentPath(&registerNumber.RegisterOffsets[i])] = types.YChild{"RegisterOffsets", &registerNumber.RegisterOffsets[i]}
    }
    registerNumber.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range registerNumber.Location {
        registerNumber.EntityData.Children[types.GetSegmentPath(&registerNumber.Location[i])] = types.YChild{"Location", &registerNumber.Location[i]}
    }
    registerNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    registerNumber.EntityData.Leafs["register"] = types.YLeaf{"Register", registerNumber.Register}
    registerNumber.EntityData.Leafs["register-name"] = types.YLeaf{"RegisterName", registerNumber.RegisterName}
    return &(registerNumber.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    RegStart interface{}

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    NumEntries interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location.
    Location []Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
}

func (registerOffsets *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets) GetEntityData() *types.CommonEntityData {
    registerOffsets.EntityData.YFilter = registerOffsets.YFilter
    registerOffsets.EntityData.YangName = "register-offsets"
    registerOffsets.EntityData.BundleName = "cisco_ios_xr"
    registerOffsets.EntityData.ParentYangName = "register-number"
    registerOffsets.EntityData.SegmentPath = "register-offsets" + "[reg-start='" + fmt.Sprintf("%v", registerOffsets.RegStart) + "']" + "[num-entries='" + fmt.Sprintf("%v", registerOffsets.NumEntries) + "']"
    registerOffsets.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerOffsets.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerOffsets.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerOffsets.EntityData.Children = make(map[string]types.YChild)
    registerOffsets.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range registerOffsets.Location {
        registerOffsets.EntityData.Children[types.GetSegmentPath(&registerOffsets.Location[i])] = types.YChild{"Location", &registerOffsets.Location[i]}
    }
    registerOffsets.EntityData.Leafs = make(map[string]types.YLeaf)
    registerOffsets.EntityData.Leafs["reg-start"] = types.YLeaf{"RegStart", registerOffsets.RegStart}
    registerOffsets.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", registerOffsets.NumEntries}
    return &(registerOffsets.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data.
    Data []Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
}

func (location *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-offsets"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range location.Data {
        location.EntityData.Children[types.GetSegmentPath(&location.Data[i])] = types.YChild{"Data", &location.Data[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data
type Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockNumber_RegisterNumber_RegisterOffsets_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_Location
type Controller_Asic_Instance_BlockNumber_RegisterNumber_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    LocationName interface{}

    // The type is slice of
    // Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data.
    Data []Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
}

func (location *Controller_Asic_Instance_BlockNumber_RegisterNumber_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register-number"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["data"] = types.YChild{"Data", nil}
    for i := range location.Data {
        location.EntityData.Children[types.GetSegmentPath(&location.Data[i])] = types.YChild{"Data", &location.Data[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data
type Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    Address interface{}

    // The type is string.
    Name interface{}

    // The type is string.
    Value interface{}

    // The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (data *Controller_Asic_Instance_BlockNumber_RegisterNumber_Location_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "location"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["address"] = types.YLeaf{"Address", data.Address}
    data.EntityData.Leafs["name"] = types.YLeaf{"Name", data.Name}
    data.EntityData.Leafs["value"] = types.YLeaf{"Value", data.Value}
    data.EntityData.Leafs["size"] = types.YLeaf{"Size", data.Size}
    return &(data.EntityData)
}

// Controller_Oper
type Controller_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SliceControl Controller_Oper_SliceControl
}

func (oper *Controller_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "controller"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = make(map[string]types.YChild)
    oper.EntityData.Children["slice_control"] = types.YChild{"SliceControl", &oper.SliceControl}
    oper.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oper.EntityData)
}

// Controller_Oper_SliceControl
type Controller_Oper_SliceControl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Oper_SliceControl_LocationList.
    LocationList []Controller_Oper_SliceControl_LocationList
}

func (sliceControl *Controller_Oper_SliceControl) GetEntityData() *types.CommonEntityData {
    sliceControl.EntityData.YFilter = sliceControl.YFilter
    sliceControl.EntityData.YangName = "slice_control"
    sliceControl.EntityData.BundleName = "cisco_ios_xr"
    sliceControl.EntityData.ParentYangName = "oper"
    sliceControl.EntityData.SegmentPath = "slice_control"
    sliceControl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceControl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceControl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceControl.EntityData.Children = make(map[string]types.YChild)
    sliceControl.EntityData.Children["location_list"] = types.YChild{"LocationList", nil}
    for i := range sliceControl.LocationList {
        sliceControl.EntityData.Children[types.GetSegmentPath(&sliceControl.LocationList[i])] = types.YChild{"LocationList", &sliceControl.LocationList[i]}
    }
    sliceControl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sliceControl.EntityData)
}

// Controller_Oper_SliceControl_LocationList
type Controller_Oper_SliceControl_LocationList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'((0?[0-9]|1[0-5])/(0?[0-7]))'.
    LocStr interface{}

    // The type is string.
    Description interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_ManagerContextInfo.
    ManagerContextInfo []Controller_Oper_SliceControl_LocationList_ManagerContextInfo

    // The type is slice of Controller_Oper_SliceControl_LocationList_Fpga.
    Fpga []Controller_Oper_SliceControl_LocationList_FPGA
}

func (locationList *Controller_Oper_SliceControl_LocationList) GetEntityData() *types.CommonEntityData {
    locationList.EntityData.YFilter = locationList.YFilter
    locationList.EntityData.YangName = "location_list"
    locationList.EntityData.BundleName = "cisco_ios_xr"
    locationList.EntityData.ParentYangName = "slice_control"
    locationList.EntityData.SegmentPath = "location_list" + "[loc_str='" + fmt.Sprintf("%v", locationList.LocStr) + "']"
    locationList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locationList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locationList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locationList.EntityData.Children = make(map[string]types.YChild)
    locationList.EntityData.Children["manager_context_info"] = types.YChild{"ManagerContextInfo", nil}
    for i := range locationList.ManagerContextInfo {
        locationList.EntityData.Children[types.GetSegmentPath(&locationList.ManagerContextInfo[i])] = types.YChild{"ManagerContextInfo", &locationList.ManagerContextInfo[i]}
    }
    locationList.EntityData.Children["FPGA"] = types.YChild{"Fpga", nil}
    for i := range locationList.Fpga {
        locationList.EntityData.Children[types.GetSegmentPath(&locationList.Fpga[i])] = types.YChild{"Fpga", &locationList.Fpga[i]}
    }
    locationList.EntityData.Leafs = make(map[string]types.YLeaf)
    locationList.EntityData.Leafs["loc_str"] = types.YLeaf{"LocStr", locationList.LocStr}
    locationList.EntityData.Leafs["description"] = types.YLeaf{"Description", locationList.Description}
    return &(locationList.EntityData)
}

// Controller_Oper_SliceControl_LocationList_ManagerContextInfo
type Controller_Oper_SliceControl_LocationList_ManagerContextInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Id interface{}

    // The type is interface{} with range: 0..255.
    NumControllers interface{}

    // The type is string.
    Levm interface{}

    // The type is string.
    CccHdl interface{}

    // The type is string.
    Trace interface{}

    // The type is string.
    XmHdl interface{}

    // The type is string.
    FmHdl interface{}

    // The type is bool. The default value is false.
    Sim interface{}

    // The type is bool. The default value is false.
    Debug interface{}

    // The type is interface{} with range: 0..4294967295.
    CardType interface{}

    // The type is interface{} with range: 0..4294967295.
    SlotNum interface{}
}

func (managerContextInfo *Controller_Oper_SliceControl_LocationList_ManagerContextInfo) GetEntityData() *types.CommonEntityData {
    managerContextInfo.EntityData.YFilter = managerContextInfo.YFilter
    managerContextInfo.EntityData.YangName = "manager_context_info"
    managerContextInfo.EntityData.BundleName = "cisco_ios_xr"
    managerContextInfo.EntityData.ParentYangName = "location_list"
    managerContextInfo.EntityData.SegmentPath = "manager_context_info" + "[id='" + fmt.Sprintf("%v", managerContextInfo.Id) + "']"
    managerContextInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    managerContextInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    managerContextInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    managerContextInfo.EntityData.Children = make(map[string]types.YChild)
    managerContextInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    managerContextInfo.EntityData.Leafs["id"] = types.YLeaf{"Id", managerContextInfo.Id}
    managerContextInfo.EntityData.Leafs["num_controllers"] = types.YLeaf{"NumControllers", managerContextInfo.NumControllers}
    managerContextInfo.EntityData.Leafs["levm"] = types.YLeaf{"Levm", managerContextInfo.Levm}
    managerContextInfo.EntityData.Leafs["ccc_hdl"] = types.YLeaf{"CccHdl", managerContextInfo.CccHdl}
    managerContextInfo.EntityData.Leafs["trace"] = types.YLeaf{"Trace", managerContextInfo.Trace}
    managerContextInfo.EntityData.Leafs["xm_hdl"] = types.YLeaf{"XmHdl", managerContextInfo.XmHdl}
    managerContextInfo.EntityData.Leafs["fm_hdl"] = types.YLeaf{"FmHdl", managerContextInfo.FmHdl}
    managerContextInfo.EntityData.Leafs["sim"] = types.YLeaf{"Sim", managerContextInfo.Sim}
    managerContextInfo.EntityData.Leafs["debug"] = types.YLeaf{"Debug", managerContextInfo.Debug}
    managerContextInfo.EntityData.Leafs["card_type"] = types.YLeaf{"CardType", managerContextInfo.CardType}
    managerContextInfo.EntityData.Leafs["slot_num"] = types.YLeaf{"SlotNum", managerContextInfo.SlotNum}
    return &(managerContextInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA
type Controller_Oper_SliceControl_LocationList_FPGA struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-1]|all'.
    SliceControllerId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo.
    SliceContextInfo []Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices.
    ClockingDevices []Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices

    // The type is slice of Controller_Oper_SliceControl_LocationList_FPGA_Slice.
    Slice []Controller_Oper_SliceControl_LocationList_FPGA_Slice
}

func (fPGA *Controller_Oper_SliceControl_LocationList_FPGA) GetEntityData() *types.CommonEntityData {
    fPGA.EntityData.YFilter = fPGA.YFilter
    fPGA.EntityData.YangName = "FPGA"
    fPGA.EntityData.BundleName = "cisco_ios_xr"
    fPGA.EntityData.ParentYangName = "location_list"
    fPGA.EntityData.SegmentPath = "FPGA" + "[slice_controller_id='" + fmt.Sprintf("%v", fPGA.SliceControllerId) + "']"
    fPGA.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fPGA.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fPGA.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fPGA.EntityData.Children = make(map[string]types.YChild)
    fPGA.EntityData.Children["slice_context_info"] = types.YChild{"SliceContextInfo", nil}
    for i := range fPGA.SliceContextInfo {
        fPGA.EntityData.Children[types.GetSegmentPath(&fPGA.SliceContextInfo[i])] = types.YChild{"SliceContextInfo", &fPGA.SliceContextInfo[i]}
    }
    fPGA.EntityData.Children["clocking_devices"] = types.YChild{"ClockingDevices", nil}
    for i := range fPGA.ClockingDevices {
        fPGA.EntityData.Children[types.GetSegmentPath(&fPGA.ClockingDevices[i])] = types.YChild{"ClockingDevices", &fPGA.ClockingDevices[i]}
    }
    fPGA.EntityData.Children["slice"] = types.YChild{"Slice", nil}
    for i := range fPGA.Slice {
        fPGA.EntityData.Children[types.GetSegmentPath(&fPGA.Slice[i])] = types.YChild{"Slice", &fPGA.Slice[i]}
    }
    fPGA.EntityData.Leafs = make(map[string]types.YLeaf)
    fPGA.EntityData.Leafs["slice_controller_id"] = types.YLeaf{"SliceControllerId", fPGA.SliceControllerId}
    return &(fPGA.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo
type Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-1]|all'.
    Id interface{}

    // The type is string with pattern: b'[0-1]|all'.
    SliceControllerId interface{}

    // The type is interface{} with range: 0..255.
    Slices interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    OperState interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    PciStatus interface{}

    // The type is string.
    BaoDesc interface{}

    // The type is string.
    Handle interface{}

    // The type is string.
    Irq interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    Msi interface{}

    // The type is string.
    Regs interface{}

    // The type is interface{} with range: 0..255.
    NumPll interface{}

    // The type is string.
    CHd interface{}

    // The type is string.
    DHd interface{}

    // The type is string.
    IHd interface{}

    // The type is string.
    FmHdl interface{}

    // The type is string.
    Trace interface{}

    // The type is string.
    Levm interface{}

    // The type is string.
    HwVer interface{}

    // The type is string.
    PcaVer interface{}

    // The type is string.
    TcamVendor interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (sliceContextInfo *Controller_Oper_SliceControl_LocationList_FPGA_SliceContextInfo) GetEntityData() *types.CommonEntityData {
    sliceContextInfo.EntityData.YFilter = sliceContextInfo.YFilter
    sliceContextInfo.EntityData.YangName = "slice_context_info"
    sliceContextInfo.EntityData.BundleName = "cisco_ios_xr"
    sliceContextInfo.EntityData.ParentYangName = "FPGA"
    sliceContextInfo.EntityData.SegmentPath = "slice_context_info" + "[id='" + fmt.Sprintf("%v", sliceContextInfo.Id) + "']"
    sliceContextInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceContextInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceContextInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceContextInfo.EntityData.Children = make(map[string]types.YChild)
    sliceContextInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    sliceContextInfo.EntityData.Leafs["id"] = types.YLeaf{"Id", sliceContextInfo.Id}
    sliceContextInfo.EntityData.Leafs["slice_controller_id"] = types.YLeaf{"SliceControllerId", sliceContextInfo.SliceControllerId}
    sliceContextInfo.EntityData.Leafs["slices"] = types.YLeaf{"Slices", sliceContextInfo.Slices}
    sliceContextInfo.EntityData.Leafs["oper_state"] = types.YLeaf{"OperState", sliceContextInfo.OperState}
    sliceContextInfo.EntityData.Leafs["pci_status"] = types.YLeaf{"PciStatus", sliceContextInfo.PciStatus}
    sliceContextInfo.EntityData.Leafs["bao_desc"] = types.YLeaf{"BaoDesc", sliceContextInfo.BaoDesc}
    sliceContextInfo.EntityData.Leafs["handle"] = types.YLeaf{"Handle", sliceContextInfo.Handle}
    sliceContextInfo.EntityData.Leafs["irq"] = types.YLeaf{"Irq", sliceContextInfo.Irq}
    sliceContextInfo.EntityData.Leafs["msi"] = types.YLeaf{"Msi", sliceContextInfo.Msi}
    sliceContextInfo.EntityData.Leafs["regs"] = types.YLeaf{"Regs", sliceContextInfo.Regs}
    sliceContextInfo.EntityData.Leafs["num_pll"] = types.YLeaf{"NumPll", sliceContextInfo.NumPll}
    sliceContextInfo.EntityData.Leafs["c_hd"] = types.YLeaf{"CHd", sliceContextInfo.CHd}
    sliceContextInfo.EntityData.Leafs["d_hd"] = types.YLeaf{"DHd", sliceContextInfo.DHd}
    sliceContextInfo.EntityData.Leafs["i_hd"] = types.YLeaf{"IHd", sliceContextInfo.IHd}
    sliceContextInfo.EntityData.Leafs["fm_hdl"] = types.YLeaf{"FmHdl", sliceContextInfo.FmHdl}
    sliceContextInfo.EntityData.Leafs["trace"] = types.YLeaf{"Trace", sliceContextInfo.Trace}
    sliceContextInfo.EntityData.Leafs["levm"] = types.YLeaf{"Levm", sliceContextInfo.Levm}
    sliceContextInfo.EntityData.Leafs["hw_ver"] = types.YLeaf{"HwVer", sliceContextInfo.HwVer}
    sliceContextInfo.EntityData.Leafs["pca_ver"] = types.YLeaf{"PcaVer", sliceContextInfo.PcaVer}
    sliceContextInfo.EntityData.Leafs["tcam_vendor"] = types.YLeaf{"TcamVendor", sliceContextInfo.TcamVendor}
    sliceContextInfo.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", sliceContextInfo.IsDataAvailable}
    return &(sliceContextInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices
type Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-2]'.
    PllDeviceId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll.
    Pll []Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll
}

func (clockingDevices *Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices) GetEntityData() *types.CommonEntityData {
    clockingDevices.EntityData.YFilter = clockingDevices.YFilter
    clockingDevices.EntityData.YangName = "clocking_devices"
    clockingDevices.EntityData.BundleName = "cisco_ios_xr"
    clockingDevices.EntityData.ParentYangName = "FPGA"
    clockingDevices.EntityData.SegmentPath = "clocking_devices" + "[pll_device_id='" + fmt.Sprintf("%v", clockingDevices.PllDeviceId) + "']"
    clockingDevices.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clockingDevices.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clockingDevices.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clockingDevices.EntityData.Children = make(map[string]types.YChild)
    clockingDevices.EntityData.Children["pll"] = types.YChild{"Pll", nil}
    for i := range clockingDevices.Pll {
        clockingDevices.EntityData.Children[types.GetSegmentPath(&clockingDevices.Pll[i])] = types.YChild{"Pll", &clockingDevices.Pll[i]}
    }
    clockingDevices.EntityData.Leafs = make(map[string]types.YLeaf)
    clockingDevices.EntityData.Leafs["pll_device_id"] = types.YLeaf{"PllDeviceId", clockingDevices.PllDeviceId}
    clockingDevices.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", clockingDevices.IsDataAvailable}
    return &(clockingDevices.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll
type Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-3]'.
    PllId interface{}

    // The type is string.
    ClockingBus interface{}

    // The type is string.
    ClockingMode interface{}

    // The type is string.
    ClockingDevAddr interface{}

    // The type is string.
    ClockingI2CRegs interface{}
}

func (pll *Controller_Oper_SliceControl_LocationList_FPGA_ClockingDevices_Pll) GetEntityData() *types.CommonEntityData {
    pll.EntityData.YFilter = pll.YFilter
    pll.EntityData.YangName = "pll"
    pll.EntityData.BundleName = "cisco_ios_xr"
    pll.EntityData.ParentYangName = "clocking_devices"
    pll.EntityData.SegmentPath = "pll" + "[pll_id='" + fmt.Sprintf("%v", pll.PllId) + "']"
    pll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pll.EntityData.Children = make(map[string]types.YChild)
    pll.EntityData.Leafs = make(map[string]types.YLeaf)
    pll.EntityData.Leafs["pll_id"] = types.YLeaf{"PllId", pll.PllId}
    pll.EntityData.Leafs["clocking_bus"] = types.YLeaf{"ClockingBus", pll.ClockingBus}
    pll.EntityData.Leafs["clocking_mode"] = types.YLeaf{"ClockingMode", pll.ClockingMode}
    pll.EntityData.Leafs["clocking_dev_addr"] = types.YLeaf{"ClockingDevAddr", pll.ClockingDevAddr}
    pll.EntityData.Leafs["clocking_i2c_regs"] = types.YLeaf{"ClockingI2CRegs", pll.ClockingI2CRegs}
    return &(pll.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice
type Controller_Oper_SliceControl_LocationList_FPGA_Slice struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-2]|all'.
    SliceId interface{}

    
    Summary Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor.
    CurrSensor []Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom.
    Eeprom []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary.
    OpticsSummary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics.
    Optics []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy.
    Phy []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor.
    TempSensor []Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor.
    VoltSensor []Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary.
    GearboxSummary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary.
    Gearbox2Summary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary.
    DualGearboxSummary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox.
    Gearbox []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2.
    Gearbox2 []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox.
    DualGearbox []Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak.
    Cpak []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary.
    ModenaSummary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena.
    Modena []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena
}

func (slice *Controller_Oper_SliceControl_LocationList_FPGA_Slice) GetEntityData() *types.CommonEntityData {
    slice.EntityData.YFilter = slice.YFilter
    slice.EntityData.YangName = "slice"
    slice.EntityData.BundleName = "cisco_ios_xr"
    slice.EntityData.ParentYangName = "FPGA"
    slice.EntityData.SegmentPath = "slice" + "[slice_id='" + fmt.Sprintf("%v", slice.SliceId) + "']"
    slice.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slice.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slice.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slice.EntityData.Children = make(map[string]types.YChild)
    slice.EntityData.Children["summary"] = types.YChild{"Summary", &slice.Summary}
    slice.EntityData.Children["curr_sensor"] = types.YChild{"CurrSensor", nil}
    for i := range slice.CurrSensor {
        slice.EntityData.Children[types.GetSegmentPath(&slice.CurrSensor[i])] = types.YChild{"CurrSensor", &slice.CurrSensor[i]}
    }
    slice.EntityData.Children["eeprom"] = types.YChild{"Eeprom", nil}
    for i := range slice.Eeprom {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Eeprom[i])] = types.YChild{"Eeprom", &slice.Eeprom[i]}
    }
    slice.EntityData.Children["optics_summary"] = types.YChild{"OpticsSummary", nil}
    for i := range slice.OpticsSummary {
        slice.EntityData.Children[types.GetSegmentPath(&slice.OpticsSummary[i])] = types.YChild{"OpticsSummary", &slice.OpticsSummary[i]}
    }
    slice.EntityData.Children["optics"] = types.YChild{"Optics", nil}
    for i := range slice.Optics {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Optics[i])] = types.YChild{"Optics", &slice.Optics[i]}
    }
    slice.EntityData.Children["phy"] = types.YChild{"Phy", nil}
    for i := range slice.Phy {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Phy[i])] = types.YChild{"Phy", &slice.Phy[i]}
    }
    slice.EntityData.Children["temp_sensor"] = types.YChild{"TempSensor", nil}
    for i := range slice.TempSensor {
        slice.EntityData.Children[types.GetSegmentPath(&slice.TempSensor[i])] = types.YChild{"TempSensor", &slice.TempSensor[i]}
    }
    slice.EntityData.Children["volt_sensor"] = types.YChild{"VoltSensor", nil}
    for i := range slice.VoltSensor {
        slice.EntityData.Children[types.GetSegmentPath(&slice.VoltSensor[i])] = types.YChild{"VoltSensor", &slice.VoltSensor[i]}
    }
    slice.EntityData.Children["gearbox_summary"] = types.YChild{"GearboxSummary", nil}
    for i := range slice.GearboxSummary {
        slice.EntityData.Children[types.GetSegmentPath(&slice.GearboxSummary[i])] = types.YChild{"GearboxSummary", &slice.GearboxSummary[i]}
    }
    slice.EntityData.Children["gearbox2_summary"] = types.YChild{"Gearbox2Summary", nil}
    for i := range slice.Gearbox2Summary {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Gearbox2Summary[i])] = types.YChild{"Gearbox2Summary", &slice.Gearbox2Summary[i]}
    }
    slice.EntityData.Children["dual_gearbox_summary"] = types.YChild{"DualGearboxSummary", nil}
    for i := range slice.DualGearboxSummary {
        slice.EntityData.Children[types.GetSegmentPath(&slice.DualGearboxSummary[i])] = types.YChild{"DualGearboxSummary", &slice.DualGearboxSummary[i]}
    }
    slice.EntityData.Children["gearbox"] = types.YChild{"Gearbox", nil}
    for i := range slice.Gearbox {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Gearbox[i])] = types.YChild{"Gearbox", &slice.Gearbox[i]}
    }
    slice.EntityData.Children["gearbox2"] = types.YChild{"Gearbox2", nil}
    for i := range slice.Gearbox2 {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Gearbox2[i])] = types.YChild{"Gearbox2", &slice.Gearbox2[i]}
    }
    slice.EntityData.Children["dual_gearbox"] = types.YChild{"DualGearbox", nil}
    for i := range slice.DualGearbox {
        slice.EntityData.Children[types.GetSegmentPath(&slice.DualGearbox[i])] = types.YChild{"DualGearbox", &slice.DualGearbox[i]}
    }
    slice.EntityData.Children["cpak"] = types.YChild{"Cpak", nil}
    for i := range slice.Cpak {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Cpak[i])] = types.YChild{"Cpak", &slice.Cpak[i]}
    }
    slice.EntityData.Children["modena_summary"] = types.YChild{"ModenaSummary", nil}
    for i := range slice.ModenaSummary {
        slice.EntityData.Children[types.GetSegmentPath(&slice.ModenaSummary[i])] = types.YChild{"ModenaSummary", &slice.ModenaSummary[i]}
    }
    slice.EntityData.Children["modena"] = types.YChild{"Modena", nil}
    for i := range slice.Modena {
        slice.EntityData.Children[types.GetSegmentPath(&slice.Modena[i])] = types.YChild{"Modena", &slice.Modena[i]}
    }
    slice.EntityData.Leafs = make(map[string]types.YLeaf)
    slice.EntityData.Leafs["slice_id"] = types.YLeaf{"SliceId", slice.SliceId}
    return &(slice.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary.
    SliceSummary []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary
}

func (summary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "slice"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["slice_summary"] = types.YChild{"SliceSummary", nil}
    for i := range summary.SliceSummary {
        summary.EntityData.Children[types.GetSegmentPath(&summary.SliceSummary[i])] = types.YChild{"SliceSummary", &summary.SliceSummary[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'[0-2]|all'.
    SliceSummId interface{}

    // The type is string with pattern: b'[0-2]|all'.
    SliceId interface{}

    // The type is interface{} with range: 0..255.
    NumPhy interface{}

    // The type is interface{} with range: 0..255.
    NumOptics interface{}

    // The type is interface{} with range: 0..255.
    NumEeprom interface{}

    // The type is interface{} with range: 0..255.
    NumTempSensors interface{}

    // The type is interface{} with range: 0..255.
    NumVoltSensors interface{}

    // The type is interface{} with range: 0..255.
    NumCurrSensors interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (sliceSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Summary_SliceSummary) GetEntityData() *types.CommonEntityData {
    sliceSummary.EntityData.YFilter = sliceSummary.YFilter
    sliceSummary.EntityData.YangName = "slice_summary"
    sliceSummary.EntityData.BundleName = "cisco_ios_xr"
    sliceSummary.EntityData.ParentYangName = "summary"
    sliceSummary.EntityData.SegmentPath = "slice_summary" + "[slice_summ_id='" + fmt.Sprintf("%v", sliceSummary.SliceSummId) + "']"
    sliceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sliceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sliceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sliceSummary.EntityData.Children = make(map[string]types.YChild)
    sliceSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    sliceSummary.EntityData.Leafs["slice_summ_id"] = types.YLeaf{"SliceSummId", sliceSummary.SliceSummId}
    sliceSummary.EntityData.Leafs["slice_id"] = types.YLeaf{"SliceId", sliceSummary.SliceId}
    sliceSummary.EntityData.Leafs["num_phy"] = types.YLeaf{"NumPhy", sliceSummary.NumPhy}
    sliceSummary.EntityData.Leafs["num_optics"] = types.YLeaf{"NumOptics", sliceSummary.NumOptics}
    sliceSummary.EntityData.Leafs["num_eeprom"] = types.YLeaf{"NumEeprom", sliceSummary.NumEeprom}
    sliceSummary.EntityData.Leafs["num_temp_sensors"] = types.YLeaf{"NumTempSensors", sliceSummary.NumTempSensors}
    sliceSummary.EntityData.Leafs["num_volt_sensors"] = types.YLeaf{"NumVoltSensors", sliceSummary.NumVoltSensors}
    sliceSummary.EntityData.Leafs["num_curr_sensors"] = types.YLeaf{"NumCurrSensors", sliceSummary.NumCurrSensors}
    sliceSummary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", sliceSummary.IsDataAvailable}
    return &(sliceSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-5])'.
    SensorId interface{}

    // The type is string.
    CurrSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrLastValue interface{}

    // The type is bool. The default value is false.
    CurrSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    CurrNum1SecIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (currSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_CurrSensor) GetEntityData() *types.CommonEntityData {
    currSensor.EntityData.YFilter = currSensor.YFilter
    currSensor.EntityData.YangName = "curr_sensor"
    currSensor.EntityData.BundleName = "cisco_ios_xr"
    currSensor.EntityData.ParentYangName = "slice"
    currSensor.EntityData.SegmentPath = "curr_sensor" + "[sensor_id='" + fmt.Sprintf("%v", currSensor.SensorId) + "']"
    currSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    currSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    currSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    currSensor.EntityData.Children = make(map[string]types.YChild)
    currSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    currSensor.EntityData.Leafs["sensor_id"] = types.YLeaf{"SensorId", currSensor.SensorId}
    currSensor.EntityData.Leafs["curr_sensor_id"] = types.YLeaf{"CurrSensorId", currSensor.CurrSensorId}
    currSensor.EntityData.Leafs["curr_dev_addr"] = types.YLeaf{"CurrDevAddr", currSensor.CurrDevAddr}
    currSensor.EntityData.Leafs["curr_poll_intvl"] = types.YLeaf{"CurrPollIntvl", currSensor.CurrPollIntvl}
    currSensor.EntityData.Leafs["curr_delta"] = types.YLeaf{"CurrDelta", currSensor.CurrDelta}
    currSensor.EntityData.Leafs["curr_raw_data"] = types.YLeaf{"CurrRawData", currSensor.CurrRawData}
    currSensor.EntityData.Leafs["curr_sensor_value"] = types.YLeaf{"CurrSensorValue", currSensor.CurrSensorValue}
    currSensor.EntityData.Leafs["curr_unit"] = types.YLeaf{"CurrUnit", currSensor.CurrUnit}
    currSensor.EntityData.Leafs["curr_last_value"] = types.YLeaf{"CurrLastValue", currSensor.CurrLastValue}
    currSensor.EntityData.Leafs["curr_send_update"] = types.YLeaf{"CurrSendUpdate", currSensor.CurrSendUpdate}
    currSensor.EntityData.Leafs["curr_num_1sec_intervals"] = types.YLeaf{"CurrNum1SecIntervals", currSensor.CurrNum1SecIntervals}
    currSensor.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", currSensor.IsDataAvailable}
    return &(currSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-1]'.
    EepromId interface{}

    // The type is string.
    EepromType interface{}

    // The type is string.
    EepromBus interface{}

    // The type is string.
    EepromI2CRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (eeprom *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Eeprom) GetEntityData() *types.CommonEntityData {
    eeprom.EntityData.YFilter = eeprom.YFilter
    eeprom.EntityData.YangName = "eeprom"
    eeprom.EntityData.BundleName = "cisco_ios_xr"
    eeprom.EntityData.ParentYangName = "slice"
    eeprom.EntityData.SegmentPath = "eeprom" + "[eeprom_id='" + fmt.Sprintf("%v", eeprom.EepromId) + "']"
    eeprom.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eeprom.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eeprom.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eeprom.EntityData.Children = make(map[string]types.YChild)
    eeprom.EntityData.Leafs = make(map[string]types.YLeaf)
    eeprom.EntityData.Leafs["eeprom_id"] = types.YLeaf{"EepromId", eeprom.EepromId}
    eeprom.EntityData.Leafs["eeprom_type"] = types.YLeaf{"EepromType", eeprom.EepromType}
    eeprom.EntityData.Leafs["eeprom_bus"] = types.YLeaf{"EepromBus", eeprom.EepromBus}
    eeprom.EntityData.Leafs["eeprom_i2c_regs"] = types.YLeaf{"EepromI2CRegs", eeprom.EepromI2CRegs}
    eeprom.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", eeprom.IsDataAvailable}
    return &(eeprom.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-4]'.
    OpticsId interface{}

    // The type is string.
    OpticsType interface{}

    // The type is string.
    OpticsBus interface{}

    // The type is string.
    OpticsI2CRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (opticsSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_OpticsSummary) GetEntityData() *types.CommonEntityData {
    opticsSummary.EntityData.YFilter = opticsSummary.YFilter
    opticsSummary.EntityData.YangName = "optics_summary"
    opticsSummary.EntityData.BundleName = "cisco_ios_xr"
    opticsSummary.EntityData.ParentYangName = "slice"
    opticsSummary.EntityData.SegmentPath = "optics_summary" + "[optics_id='" + fmt.Sprintf("%v", opticsSummary.OpticsId) + "']"
    opticsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticsSummary.EntityData.Children = make(map[string]types.YChild)
    opticsSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    opticsSummary.EntityData.Leafs["optics_id"] = types.YLeaf{"OpticsId", opticsSummary.OpticsId}
    opticsSummary.EntityData.Leafs["optics_type"] = types.YLeaf{"OpticsType", opticsSummary.OpticsType}
    opticsSummary.EntityData.Leafs["optics_bus"] = types.YLeaf{"OpticsBus", opticsSummary.OpticsBus}
    opticsSummary.EntityData.Leafs["optics_i2c_regs"] = types.YLeaf{"OpticsI2CRegs", opticsSummary.OpticsI2CRegs}
    opticsSummary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", opticsSummary.IsDataAvailable}
    return &(opticsSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-4]'.
    OpticsId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp.
    Cxp []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo.
    TxInfo []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo.
    RxInfo []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients.
    TxCoefficients []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients.
    RxCoefficients []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients
}

func (optics *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics) GetEntityData() *types.CommonEntityData {
    optics.EntityData.YFilter = optics.YFilter
    optics.EntityData.YangName = "optics"
    optics.EntityData.BundleName = "cisco_ios_xr"
    optics.EntityData.ParentYangName = "slice"
    optics.EntityData.SegmentPath = "optics" + "[optics_id='" + fmt.Sprintf("%v", optics.OpticsId) + "']"
    optics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optics.EntityData.Children = make(map[string]types.YChild)
    optics.EntityData.Children["cxp"] = types.YChild{"Cxp", nil}
    for i := range optics.Cxp {
        optics.EntityData.Children[types.GetSegmentPath(&optics.Cxp[i])] = types.YChild{"Cxp", &optics.Cxp[i]}
    }
    optics.EntityData.Children["tx_info"] = types.YChild{"TxInfo", nil}
    for i := range optics.TxInfo {
        optics.EntityData.Children[types.GetSegmentPath(&optics.TxInfo[i])] = types.YChild{"TxInfo", &optics.TxInfo[i]}
    }
    optics.EntityData.Children["rx_info"] = types.YChild{"RxInfo", nil}
    for i := range optics.RxInfo {
        optics.EntityData.Children[types.GetSegmentPath(&optics.RxInfo[i])] = types.YChild{"RxInfo", &optics.RxInfo[i]}
    }
    optics.EntityData.Children["tx_coefficients"] = types.YChild{"TxCoefficients", nil}
    for i := range optics.TxCoefficients {
        optics.EntityData.Children[types.GetSegmentPath(&optics.TxCoefficients[i])] = types.YChild{"TxCoefficients", &optics.TxCoefficients[i]}
    }
    optics.EntityData.Children["rx_coefficients"] = types.YChild{"RxCoefficients", nil}
    for i := range optics.RxCoefficients {
        optics.EntityData.Children[types.GetSegmentPath(&optics.RxCoefficients[i])] = types.YChild{"RxCoefficients", &optics.RxCoefficients[i]}
    }
    optics.EntityData.Leafs = make(map[string]types.YLeaf)
    optics.EntityData.Leafs["optics_id"] = types.YLeaf{"OpticsId", optics.OpticsId}
    return &(optics.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-2]'.
    CxpId interface{}

    // The type is string.
    Signature interface{}

    // The type is bool. The default value is false.
    CxpPortReady interface{}

    // The type is string.
    Opaque interface{}

    // The type is string.
    Nodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Slice interface{}

    // The type is string.
    Capabilities interface{}

    // The type is string.
    VendorName interface{}

    // The type is string.
    VendorPartNum interface{}

    // The type is string.
    VendorRevNum interface{}

    // The type is string.
    VendorSerialNum interface{}

    // The type is bool. The default value is false.
    Passive interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (cxp *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_Cxp) GetEntityData() *types.CommonEntityData {
    cxp.EntityData.YFilter = cxp.YFilter
    cxp.EntityData.YangName = "cxp"
    cxp.EntityData.BundleName = "cisco_ios_xr"
    cxp.EntityData.ParentYangName = "optics"
    cxp.EntityData.SegmentPath = "cxp" + "[cxp_id='" + fmt.Sprintf("%v", cxp.CxpId) + "']"
    cxp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cxp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cxp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cxp.EntityData.Children = make(map[string]types.YChild)
    cxp.EntityData.Leafs = make(map[string]types.YLeaf)
    cxp.EntityData.Leafs["cxp_id"] = types.YLeaf{"CxpId", cxp.CxpId}
    cxp.EntityData.Leafs["signature"] = types.YLeaf{"Signature", cxp.Signature}
    cxp.EntityData.Leafs["cxp_port_ready"] = types.YLeaf{"CxpPortReady", cxp.CxpPortReady}
    cxp.EntityData.Leafs["opaque"] = types.YLeaf{"Opaque", cxp.Opaque}
    cxp.EntityData.Leafs["nodeid"] = types.YLeaf{"Nodeid", cxp.Nodeid}
    cxp.EntityData.Leafs["slice"] = types.YLeaf{"Slice", cxp.Slice}
    cxp.EntityData.Leafs["capabilities"] = types.YLeaf{"Capabilities", cxp.Capabilities}
    cxp.EntityData.Leafs["vendor_name"] = types.YLeaf{"VendorName", cxp.VendorName}
    cxp.EntityData.Leafs["vendor_part_num"] = types.YLeaf{"VendorPartNum", cxp.VendorPartNum}
    cxp.EntityData.Leafs["vendor_rev_num"] = types.YLeaf{"VendorRevNum", cxp.VendorRevNum}
    cxp.EntityData.Leafs["vendor_serial_num"] = types.YLeaf{"VendorSerialNum", cxp.VendorSerialNum}
    cxp.EntityData.Leafs["passive"] = types.YLeaf{"Passive", cxp.Passive}
    cxp.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", cxp.IsDataAvailable}
    return &(cxp.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-1])'.
    TxChannelId interface{}

    // The type is string.
    TxStatusFlag interface{}

    // The type is string.
    TxErrorFlag interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (txInfo *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxInfo) GetEntityData() *types.CommonEntityData {
    txInfo.EntityData.YFilter = txInfo.YFilter
    txInfo.EntityData.YangName = "tx_info"
    txInfo.EntityData.BundleName = "cisco_ios_xr"
    txInfo.EntityData.ParentYangName = "optics"
    txInfo.EntityData.SegmentPath = "tx_info" + "[tx_channel_id='" + fmt.Sprintf("%v", txInfo.TxChannelId) + "']"
    txInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txInfo.EntityData.Children = make(map[string]types.YChild)
    txInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    txInfo.EntityData.Leafs["tx_channel_id"] = types.YLeaf{"TxChannelId", txInfo.TxChannelId}
    txInfo.EntityData.Leafs["tx_status_flag"] = types.YLeaf{"TxStatusFlag", txInfo.TxStatusFlag}
    txInfo.EntityData.Leafs["tx_error_flag"] = types.YLeaf{"TxErrorFlag", txInfo.TxErrorFlag}
    txInfo.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", txInfo.IsDataAvailable}
    return &(txInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-1])'.
    RxChannelId interface{}

    // The type is string.
    RxStatusFlag interface{}

    // The type is string.
    RxErrorFlag interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (rxInfo *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxInfo) GetEntityData() *types.CommonEntityData {
    rxInfo.EntityData.YFilter = rxInfo.YFilter
    rxInfo.EntityData.YangName = "rx_info"
    rxInfo.EntityData.BundleName = "cisco_ios_xr"
    rxInfo.EntityData.ParentYangName = "optics"
    rxInfo.EntityData.SegmentPath = "rx_info" + "[rx_channel_id='" + fmt.Sprintf("%v", rxInfo.RxChannelId) + "']"
    rxInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxInfo.EntityData.Children = make(map[string]types.YChild)
    rxInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rxInfo.EntityData.Leafs["rx_channel_id"] = types.YLeaf{"RxChannelId", rxInfo.RxChannelId}
    rxInfo.EntityData.Leafs["rx_status_flag"] = types.YLeaf{"RxStatusFlag", rxInfo.RxStatusFlag}
    rxInfo.EntityData.Leafs["rx_error_flag"] = types.YLeaf{"RxErrorFlag", rxInfo.RxErrorFlag}
    rxInfo.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", rxInfo.IsDataAvailable}
    return &(rxInfo.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-1])'.
    TxChannelId interface{}

    // The type is string.
    Equalization interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (txCoefficients *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_TxCoefficients) GetEntityData() *types.CommonEntityData {
    txCoefficients.EntityData.YFilter = txCoefficients.YFilter
    txCoefficients.EntityData.YangName = "tx_coefficients"
    txCoefficients.EntityData.BundleName = "cisco_ios_xr"
    txCoefficients.EntityData.ParentYangName = "optics"
    txCoefficients.EntityData.SegmentPath = "tx_coefficients" + "[tx_channel_id='" + fmt.Sprintf("%v", txCoefficients.TxChannelId) + "']"
    txCoefficients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txCoefficients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txCoefficients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txCoefficients.EntityData.Children = make(map[string]types.YChild)
    txCoefficients.EntityData.Leafs = make(map[string]types.YLeaf)
    txCoefficients.EntityData.Leafs["tx_channel_id"] = types.YLeaf{"TxChannelId", txCoefficients.TxChannelId}
    txCoefficients.EntityData.Leafs["equalization"] = types.YLeaf{"Equalization", txCoefficients.Equalization}
    txCoefficients.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", txCoefficients.IsDataAvailable}
    return &(txCoefficients.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-1])'.
    RxChannelId interface{}

    // The type is string.
    Amplitude interface{}

    // The type is string.
    DeEmphasis interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (rxCoefficients *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Optics_RxCoefficients) GetEntityData() *types.CommonEntityData {
    rxCoefficients.EntityData.YFilter = rxCoefficients.YFilter
    rxCoefficients.EntityData.YangName = "rx_coefficients"
    rxCoefficients.EntityData.BundleName = "cisco_ios_xr"
    rxCoefficients.EntityData.ParentYangName = "optics"
    rxCoefficients.EntityData.SegmentPath = "rx_coefficients" + "[rx_channel_id='" + fmt.Sprintf("%v", rxCoefficients.RxChannelId) + "']"
    rxCoefficients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxCoefficients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxCoefficients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxCoefficients.EntityData.Children = make(map[string]types.YChild)
    rxCoefficients.EntityData.Leafs = make(map[string]types.YLeaf)
    rxCoefficients.EntityData.Leafs["rx_channel_id"] = types.YLeaf{"RxChannelId", rxCoefficients.RxChannelId}
    rxCoefficients.EntityData.Leafs["amplitude"] = types.YLeaf{"Amplitude", rxCoefficients.Amplitude}
    rxCoefficients.EntityData.Leafs["de_emphasis"] = types.YLeaf{"DeEmphasis", rxCoefficients.DeEmphasis}
    rxCoefficients.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", rxCoefficients.IsDataAvailable}
    return &(rxCoefficients.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-9]'.
    PhyId interface{}

    // The type is string.
    PhyType interface{}

    // The type is string.
    PhyBus interface{}

    // The type is string.
    PhyI2CRegs interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (phy *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Phy) GetEntityData() *types.CommonEntityData {
    phy.EntityData.YFilter = phy.YFilter
    phy.EntityData.YangName = "phy"
    phy.EntityData.BundleName = "cisco_ios_xr"
    phy.EntityData.ParentYangName = "slice"
    phy.EntityData.SegmentPath = "phy" + "[phy_id='" + fmt.Sprintf("%v", phy.PhyId) + "']"
    phy.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    phy.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    phy.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    phy.EntityData.Children = make(map[string]types.YChild)
    phy.EntityData.Leafs = make(map[string]types.YLeaf)
    phy.EntityData.Leafs["phy_id"] = types.YLeaf{"PhyId", phy.PhyId}
    phy.EntityData.Leafs["phy_type"] = types.YLeaf{"PhyType", phy.PhyType}
    phy.EntityData.Leafs["phy_bus"] = types.YLeaf{"PhyBus", phy.PhyBus}
    phy.EntityData.Leafs["phy_i2c_regs"] = types.YLeaf{"PhyI2CRegs", phy.PhyI2CRegs}
    phy.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", phy.IsDataAvailable}
    return &(phy.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-9]|2[0-1])'.
    SensorId interface{}

    // The type is string.
    TempSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    TempDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    TempPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    TempDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    TempRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    TempLastValue interface{}

    // The type is bool. The default value is false.
    TempSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    TempNum1SecIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (tempSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_TempSensor) GetEntityData() *types.CommonEntityData {
    tempSensor.EntityData.YFilter = tempSensor.YFilter
    tempSensor.EntityData.YangName = "temp_sensor"
    tempSensor.EntityData.BundleName = "cisco_ios_xr"
    tempSensor.EntityData.ParentYangName = "slice"
    tempSensor.EntityData.SegmentPath = "temp_sensor" + "[sensor_id='" + fmt.Sprintf("%v", tempSensor.SensorId) + "']"
    tempSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tempSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tempSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tempSensor.EntityData.Children = make(map[string]types.YChild)
    tempSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    tempSensor.EntityData.Leafs["sensor_id"] = types.YLeaf{"SensorId", tempSensor.SensorId}
    tempSensor.EntityData.Leafs["temp_sensor_id"] = types.YLeaf{"TempSensorId", tempSensor.TempSensorId}
    tempSensor.EntityData.Leafs["temp_dev_addr"] = types.YLeaf{"TempDevAddr", tempSensor.TempDevAddr}
    tempSensor.EntityData.Leafs["temp_poll_intvl"] = types.YLeaf{"TempPollIntvl", tempSensor.TempPollIntvl}
    tempSensor.EntityData.Leafs["temp_delta"] = types.YLeaf{"TempDelta", tempSensor.TempDelta}
    tempSensor.EntityData.Leafs["temp_raw_data"] = types.YLeaf{"TempRawData", tempSensor.TempRawData}
    tempSensor.EntityData.Leafs["temp_sensor_value"] = types.YLeaf{"TempSensorValue", tempSensor.TempSensorValue}
    tempSensor.EntityData.Leafs["temp_unit"] = types.YLeaf{"TempUnit", tempSensor.TempUnit}
    tempSensor.EntityData.Leafs["temp_last_value"] = types.YLeaf{"TempLastValue", tempSensor.TempLastValue}
    tempSensor.EntityData.Leafs["temp_send_update"] = types.YLeaf{"TempSendUpdate", tempSensor.TempSendUpdate}
    tempSensor.EntityData.Leafs["temp_num_1sec_intervals"] = types.YLeaf{"TempNum1SecIntervals", tempSensor.TempNum1SecIntervals}
    tempSensor.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", tempSensor.IsDataAvailable}
    return &(tempSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'all|(0?[0-9]|1[0-9]|2[0-1])'.
    SensorId interface{}

    // The type is string.
    VoltSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    VoltLastValue interface{}

    // The type is bool. The default value is false.
    VoltSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    VoltNum1SecIntervals interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}
}

func (voltSensor *Controller_Oper_SliceControl_LocationList_FPGA_Slice_VoltSensor) GetEntityData() *types.CommonEntityData {
    voltSensor.EntityData.YFilter = voltSensor.YFilter
    voltSensor.EntityData.YangName = "volt_sensor"
    voltSensor.EntityData.BundleName = "cisco_ios_xr"
    voltSensor.EntityData.ParentYangName = "slice"
    voltSensor.EntityData.SegmentPath = "volt_sensor" + "[sensor_id='" + fmt.Sprintf("%v", voltSensor.SensorId) + "']"
    voltSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    voltSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    voltSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    voltSensor.EntityData.Children = make(map[string]types.YChild)
    voltSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    voltSensor.EntityData.Leafs["sensor_id"] = types.YLeaf{"SensorId", voltSensor.SensorId}
    voltSensor.EntityData.Leafs["volt_sensor_id"] = types.YLeaf{"VoltSensorId", voltSensor.VoltSensorId}
    voltSensor.EntityData.Leafs["volt_dev_addr"] = types.YLeaf{"VoltDevAddr", voltSensor.VoltDevAddr}
    voltSensor.EntityData.Leafs["volt_poll_intvl"] = types.YLeaf{"VoltPollIntvl", voltSensor.VoltPollIntvl}
    voltSensor.EntityData.Leafs["volt_delta"] = types.YLeaf{"VoltDelta", voltSensor.VoltDelta}
    voltSensor.EntityData.Leafs["volt_raw_data"] = types.YLeaf{"VoltRawData", voltSensor.VoltRawData}
    voltSensor.EntityData.Leafs["volt_sensor_value"] = types.YLeaf{"VoltSensorValue", voltSensor.VoltSensorValue}
    voltSensor.EntityData.Leafs["volt_unit"] = types.YLeaf{"VoltUnit", voltSensor.VoltUnit}
    voltSensor.EntityData.Leafs["volt_last_value"] = types.YLeaf{"VoltLastValue", voltSensor.VoltLastValue}
    voltSensor.EntityData.Leafs["volt_send_update"] = types.YLeaf{"VoltSendUpdate", voltSensor.VoltSendUpdate}
    voltSensor.EntityData.Leafs["volt_num_1sec_intervals"] = types.YLeaf{"VoltNum1SecIntervals", voltSensor.VoltNum1SecIntervals}
    voltSensor.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", voltSensor.IsDataAvailable}
    return &(voltSensor.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-1]'.
    GearboxId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gnext interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    Syslanelosmask interface{}

    // The type is string.
    Linelanelosmask interface{}

    // The type is string.
    Syslaneenablemask interface{}

    // The type is string.
    Linelaneenablemask interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}

    // The type is string.
    LineSideTxPll interface{}

    // The type is string.
    LineTxVco interface{}

    // The type is string.
    LineTxVcoState interface{}

    // The type is string.
    LineSideRxPll interface{}

    // The type is string.
    LineRxVco interface{}

    // The type is string.
    LineRxVcoState interface{}
}

func (gearboxSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_GearboxSummary) GetEntityData() *types.CommonEntityData {
    gearboxSummary.EntityData.YFilter = gearboxSummary.YFilter
    gearboxSummary.EntityData.YangName = "gearbox_summary"
    gearboxSummary.EntityData.BundleName = "cisco_ios_xr"
    gearboxSummary.EntityData.ParentYangName = "slice"
    gearboxSummary.EntityData.SegmentPath = "gearbox_summary" + "[gearbox_id='" + fmt.Sprintf("%v", gearboxSummary.GearboxId) + "']"
    gearboxSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearboxSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearboxSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearboxSummary.EntityData.Children = make(map[string]types.YChild)
    gearboxSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    gearboxSummary.EntityData.Leafs["gearbox_id"] = types.YLeaf{"GearboxId", gearboxSummary.GearboxId}
    gearboxSummary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", gearboxSummary.IsDataAvailable}
    gearboxSummary.EntityData.Leafs["inited"] = types.YLeaf{"Inited", gearboxSummary.Inited}
    gearboxSummary.EntityData.Leafs["gopaque"] = types.YLeaf{"Gopaque", gearboxSummary.Gopaque}
    gearboxSummary.EntityData.Leafs["gnodeid"] = types.YLeaf{"Gnodeid", gearboxSummary.Gnodeid}
    gearboxSummary.EntityData.Leafs["gslice"] = types.YLeaf{"Gslice", gearboxSummary.Gslice}
    gearboxSummary.EntityData.Leafs["gport"] = types.YLeaf{"Gport", gearboxSummary.Gport}
    gearboxSummary.EntityData.Leafs["gdev_addr"] = types.YLeaf{"GdevAddr", gearboxSummary.GdevAddr}
    gearboxSummary.EntityData.Leafs["gdev_type"] = types.YLeaf{"GdevType", gearboxSummary.GdevType}
    gearboxSummary.EntityData.Leafs["gctrace_err_hdl"] = types.YLeaf{"GctraceErrHdl", gearboxSummary.GctraceErrHdl}
    gearboxSummary.EntityData.Leafs["gctrace_evt_hdl"] = types.YLeaf{"GctraceEvtHdl", gearboxSummary.GctraceEvtHdl}
    gearboxSummary.EntityData.Leafs["gctrace_intr_hdl"] = types.YLeaf{"GctraceIntrHdl", gearboxSummary.GctraceIntrHdl}
    gearboxSummary.EntityData.Leafs["gnext"] = types.YLeaf{"Gnext", gearboxSummary.Gnext}
    gearboxSummary.EntityData.Leafs["gparent"] = types.YLeaf{"Gparent", gearboxSummary.Gparent}
    gearboxSummary.EntityData.Leafs["syslaneLOSMask"] = types.YLeaf{"Syslanelosmask", gearboxSummary.Syslanelosmask}
    gearboxSummary.EntityData.Leafs["linelaneLOSMask"] = types.YLeaf{"Linelanelosmask", gearboxSummary.Linelanelosmask}
    gearboxSummary.EntityData.Leafs["syslaneEnableMask"] = types.YLeaf{"Syslaneenablemask", gearboxSummary.Syslaneenablemask}
    gearboxSummary.EntityData.Leafs["linelaneEnableMask"] = types.YLeaf{"Linelaneenablemask", gearboxSummary.Linelaneenablemask}
    gearboxSummary.EntityData.Leafs["line_lane_cnt"] = types.YLeaf{"LineLaneCnt", gearboxSummary.LineLaneCnt}
    gearboxSummary.EntityData.Leafs["sys_lane_cnt"] = types.YLeaf{"SysLaneCnt", gearboxSummary.SysLaneCnt}
    gearboxSummary.EntityData.Leafs["verbose"] = types.YLeaf{"Verbose", gearboxSummary.Verbose}
    gearboxSummary.EntityData.Leafs["dwnld_done"] = types.YLeaf{"DwnldDone", gearboxSummary.DwnldDone}
    gearboxSummary.EntityData.Leafs["chip_version"] = types.YLeaf{"ChipVersion", gearboxSummary.ChipVersion}
    gearboxSummary.EntityData.Leafs["reversion"] = types.YLeaf{"Reversion", gearboxSummary.Reversion}
    gearboxSummary.EntityData.Leafs["firmware_version"] = types.YLeaf{"FirmwareVersion", gearboxSummary.FirmwareVersion}
    gearboxSummary.EntityData.Leafs["ucode_checksum"] = types.YLeaf{"UcodeChecksum", gearboxSummary.UcodeChecksum}
    gearboxSummary.EntityData.Leafs["chip_modesel"] = types.YLeaf{"ChipModesel", gearboxSummary.ChipModesel}
    gearboxSummary.EntityData.Leafs["chip_ref_clocksel"] = types.YLeaf{"ChipRefClocksel", gearboxSummary.ChipRefClocksel}
    gearboxSummary.EntityData.Leafs["line_side_tx_pll"] = types.YLeaf{"LineSideTxPll", gearboxSummary.LineSideTxPll}
    gearboxSummary.EntityData.Leafs["line_tx_vco"] = types.YLeaf{"LineTxVco", gearboxSummary.LineTxVco}
    gearboxSummary.EntityData.Leafs["line_tx_vco_state"] = types.YLeaf{"LineTxVcoState", gearboxSummary.LineTxVcoState}
    gearboxSummary.EntityData.Leafs["line_side_rx_pll"] = types.YLeaf{"LineSideRxPll", gearboxSummary.LineSideRxPll}
    gearboxSummary.EntityData.Leafs["line_rx_vco"] = types.YLeaf{"LineRxVco", gearboxSummary.LineRxVco}
    gearboxSummary.EntityData.Leafs["line_rx_vco_state"] = types.YLeaf{"LineRxVcoState", gearboxSummary.LineRxVcoState}
    return &(gearboxSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-3]'.
    Gearbox2Id interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}
}

func (gearbox2Summary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2Summary) GetEntityData() *types.CommonEntityData {
    gearbox2Summary.EntityData.YFilter = gearbox2Summary.YFilter
    gearbox2Summary.EntityData.YangName = "gearbox2_summary"
    gearbox2Summary.EntityData.BundleName = "cisco_ios_xr"
    gearbox2Summary.EntityData.ParentYangName = "slice"
    gearbox2Summary.EntityData.SegmentPath = "gearbox2_summary" + "[gearbox2_id='" + fmt.Sprintf("%v", gearbox2Summary.Gearbox2Id) + "']"
    gearbox2Summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2Summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2Summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2Summary.EntityData.Children = make(map[string]types.YChild)
    gearbox2Summary.EntityData.Leafs = make(map[string]types.YLeaf)
    gearbox2Summary.EntityData.Leafs["gearbox2_id"] = types.YLeaf{"Gearbox2Id", gearbox2Summary.Gearbox2Id}
    gearbox2Summary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", gearbox2Summary.IsDataAvailable}
    gearbox2Summary.EntityData.Leafs["inited"] = types.YLeaf{"Inited", gearbox2Summary.Inited}
    gearbox2Summary.EntityData.Leafs["gopaque"] = types.YLeaf{"Gopaque", gearbox2Summary.Gopaque}
    gearbox2Summary.EntityData.Leafs["gnodeid"] = types.YLeaf{"Gnodeid", gearbox2Summary.Gnodeid}
    gearbox2Summary.EntityData.Leafs["gslice"] = types.YLeaf{"Gslice", gearbox2Summary.Gslice}
    gearbox2Summary.EntityData.Leafs["gport"] = types.YLeaf{"Gport", gearbox2Summary.Gport}
    gearbox2Summary.EntityData.Leafs["gdev_addr"] = types.YLeaf{"GdevAddr", gearbox2Summary.GdevAddr}
    gearbox2Summary.EntityData.Leafs["gdev_type"] = types.YLeaf{"GdevType", gearbox2Summary.GdevType}
    gearbox2Summary.EntityData.Leafs["gctrace_err_hdl"] = types.YLeaf{"GctraceErrHdl", gearbox2Summary.GctraceErrHdl}
    gearbox2Summary.EntityData.Leafs["gctrace_evt_hdl"] = types.YLeaf{"GctraceEvtHdl", gearbox2Summary.GctraceEvtHdl}
    gearbox2Summary.EntityData.Leafs["gctrace_intr_hdl"] = types.YLeaf{"GctraceIntrHdl", gearbox2Summary.GctraceIntrHdl}
    gearbox2Summary.EntityData.Leafs["gparent"] = types.YLeaf{"Gparent", gearbox2Summary.Gparent}
    gearbox2Summary.EntityData.Leafs["line_lane_cnt"] = types.YLeaf{"LineLaneCnt", gearbox2Summary.LineLaneCnt}
    gearbox2Summary.EntityData.Leafs["sys_lane_cnt"] = types.YLeaf{"SysLaneCnt", gearbox2Summary.SysLaneCnt}
    gearbox2Summary.EntityData.Leafs["verbose"] = types.YLeaf{"Verbose", gearbox2Summary.Verbose}
    gearbox2Summary.EntityData.Leafs["dwnld_done"] = types.YLeaf{"DwnldDone", gearbox2Summary.DwnldDone}
    gearbox2Summary.EntityData.Leafs["chip_version"] = types.YLeaf{"ChipVersion", gearbox2Summary.ChipVersion}
    gearbox2Summary.EntityData.Leafs["reversion"] = types.YLeaf{"Reversion", gearbox2Summary.Reversion}
    gearbox2Summary.EntityData.Leafs["firmware_version"] = types.YLeaf{"FirmwareVersion", gearbox2Summary.FirmwareVersion}
    gearbox2Summary.EntityData.Leafs["ucode_checksum"] = types.YLeaf{"UcodeChecksum", gearbox2Summary.UcodeChecksum}
    gearbox2Summary.EntityData.Leafs["chip_modesel"] = types.YLeaf{"ChipModesel", gearbox2Summary.ChipModesel}
    gearbox2Summary.EntityData.Leafs["chip_ref_clocksel"] = types.YLeaf{"ChipRefClocksel", gearbox2Summary.ChipRefClocksel}
    return &(gearbox2Summary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-1]'.
    DualGearboxId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Inited interface{}

    // The type is string.
    Gopaque interface{}

    // The type is string.
    Gnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Gslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Gport interface{}

    // The type is interface{} with range: 0..255.
    GdevAddr interface{}

    // The type is interface{} with range: 0..255.
    GdevType interface{}

    // The type is string.
    GctraceErrHdl interface{}

    // The type is string.
    GctraceEvtHdl interface{}

    // The type is string.
    GctraceIntrHdl interface{}

    // The type is string.
    Gnext interface{}

    // The type is string.
    Gparent interface{}

    // The type is string.
    Syslanelosmask interface{}

    // The type is string.
    Linelanelosmask interface{}

    // The type is string.
    Syslaneenablemask interface{}

    // The type is string.
    Linelaneenablemask interface{}

    // The type is string.
    LineLaneCnt interface{}

    // The type is string.
    SysLaneCnt interface{}

    // The type is bool. The default value is false.
    Verbose interface{}

    // The type is bool. The default value is false.
    DwnldDone interface{}

    // The type is string.
    ChipVersion interface{}

    // The type is string.
    Reversion interface{}

    // The type is string.
    FirmwareVersion interface{}

    // The type is string.
    UcodeChecksum interface{}

    // The type is string.
    ChipModesel interface{}

    // The type is string.
    ChipRefClocksel interface{}

    // The type is string.
    LineSideTxPll interface{}

    // The type is string.
    LineTxVco interface{}

    // The type is string.
    LineTxVcoState interface{}

    // The type is string.
    LineSideRxPll interface{}

    // The type is string.
    LineRxVco interface{}

    // The type is string.
    LineRxVcoState interface{}
}

func (dualGearboxSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearboxSummary) GetEntityData() *types.CommonEntityData {
    dualGearboxSummary.EntityData.YFilter = dualGearboxSummary.YFilter
    dualGearboxSummary.EntityData.YangName = "dual_gearbox_summary"
    dualGearboxSummary.EntityData.BundleName = "cisco_ios_xr"
    dualGearboxSummary.EntityData.ParentYangName = "slice"
    dualGearboxSummary.EntityData.SegmentPath = "dual_gearbox_summary" + "[dual_gearbox_id='" + fmt.Sprintf("%v", dualGearboxSummary.DualGearboxId) + "']"
    dualGearboxSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearboxSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearboxSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearboxSummary.EntityData.Children = make(map[string]types.YChild)
    dualGearboxSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    dualGearboxSummary.EntityData.Leafs["dual_gearbox_id"] = types.YLeaf{"DualGearboxId", dualGearboxSummary.DualGearboxId}
    dualGearboxSummary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", dualGearboxSummary.IsDataAvailable}
    dualGearboxSummary.EntityData.Leafs["inited"] = types.YLeaf{"Inited", dualGearboxSummary.Inited}
    dualGearboxSummary.EntityData.Leafs["gopaque"] = types.YLeaf{"Gopaque", dualGearboxSummary.Gopaque}
    dualGearboxSummary.EntityData.Leafs["gnodeid"] = types.YLeaf{"Gnodeid", dualGearboxSummary.Gnodeid}
    dualGearboxSummary.EntityData.Leafs["gslice"] = types.YLeaf{"Gslice", dualGearboxSummary.Gslice}
    dualGearboxSummary.EntityData.Leafs["gport"] = types.YLeaf{"Gport", dualGearboxSummary.Gport}
    dualGearboxSummary.EntityData.Leafs["gdev_addr"] = types.YLeaf{"GdevAddr", dualGearboxSummary.GdevAddr}
    dualGearboxSummary.EntityData.Leafs["gdev_type"] = types.YLeaf{"GdevType", dualGearboxSummary.GdevType}
    dualGearboxSummary.EntityData.Leafs["gctrace_err_hdl"] = types.YLeaf{"GctraceErrHdl", dualGearboxSummary.GctraceErrHdl}
    dualGearboxSummary.EntityData.Leafs["gctrace_evt_hdl"] = types.YLeaf{"GctraceEvtHdl", dualGearboxSummary.GctraceEvtHdl}
    dualGearboxSummary.EntityData.Leafs["gctrace_intr_hdl"] = types.YLeaf{"GctraceIntrHdl", dualGearboxSummary.GctraceIntrHdl}
    dualGearboxSummary.EntityData.Leafs["gnext"] = types.YLeaf{"Gnext", dualGearboxSummary.Gnext}
    dualGearboxSummary.EntityData.Leafs["gparent"] = types.YLeaf{"Gparent", dualGearboxSummary.Gparent}
    dualGearboxSummary.EntityData.Leafs["syslaneLOSMask"] = types.YLeaf{"Syslanelosmask", dualGearboxSummary.Syslanelosmask}
    dualGearboxSummary.EntityData.Leafs["linelaneLOSMask"] = types.YLeaf{"Linelanelosmask", dualGearboxSummary.Linelanelosmask}
    dualGearboxSummary.EntityData.Leafs["syslaneEnableMask"] = types.YLeaf{"Syslaneenablemask", dualGearboxSummary.Syslaneenablemask}
    dualGearboxSummary.EntityData.Leafs["linelaneEnableMask"] = types.YLeaf{"Linelaneenablemask", dualGearboxSummary.Linelaneenablemask}
    dualGearboxSummary.EntityData.Leafs["line_lane_cnt"] = types.YLeaf{"LineLaneCnt", dualGearboxSummary.LineLaneCnt}
    dualGearboxSummary.EntityData.Leafs["sys_lane_cnt"] = types.YLeaf{"SysLaneCnt", dualGearboxSummary.SysLaneCnt}
    dualGearboxSummary.EntityData.Leafs["verbose"] = types.YLeaf{"Verbose", dualGearboxSummary.Verbose}
    dualGearboxSummary.EntityData.Leafs["dwnld_done"] = types.YLeaf{"DwnldDone", dualGearboxSummary.DwnldDone}
    dualGearboxSummary.EntityData.Leafs["chip_version"] = types.YLeaf{"ChipVersion", dualGearboxSummary.ChipVersion}
    dualGearboxSummary.EntityData.Leafs["reversion"] = types.YLeaf{"Reversion", dualGearboxSummary.Reversion}
    dualGearboxSummary.EntityData.Leafs["firmware_version"] = types.YLeaf{"FirmwareVersion", dualGearboxSummary.FirmwareVersion}
    dualGearboxSummary.EntityData.Leafs["ucode_checksum"] = types.YLeaf{"UcodeChecksum", dualGearboxSummary.UcodeChecksum}
    dualGearboxSummary.EntityData.Leafs["chip_modesel"] = types.YLeaf{"ChipModesel", dualGearboxSummary.ChipModesel}
    dualGearboxSummary.EntityData.Leafs["chip_ref_clocksel"] = types.YLeaf{"ChipRefClocksel", dualGearboxSummary.ChipRefClocksel}
    dualGearboxSummary.EntityData.Leafs["line_side_tx_pll"] = types.YLeaf{"LineSideTxPll", dualGearboxSummary.LineSideTxPll}
    dualGearboxSummary.EntityData.Leafs["line_tx_vco"] = types.YLeaf{"LineTxVco", dualGearboxSummary.LineTxVco}
    dualGearboxSummary.EntityData.Leafs["line_tx_vco_state"] = types.YLeaf{"LineTxVcoState", dualGearboxSummary.LineTxVcoState}
    dualGearboxSummary.EntityData.Leafs["line_side_rx_pll"] = types.YLeaf{"LineSideRxPll", dualGearboxSummary.LineSideRxPll}
    dualGearboxSummary.EntityData.Leafs["line_rx_vco"] = types.YLeaf{"LineRxVco", dualGearboxSummary.LineRxVco}
    dualGearboxSummary.EntityData.Leafs["line_rx_vco_state"] = types.YLeaf{"LineRxVcoState", dualGearboxSummary.LineRxVcoState}
    return &(dualGearboxSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-1]'.
    GearboxId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane.
    GearboxLane []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane
}

func (gearbox *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox) GetEntityData() *types.CommonEntityData {
    gearbox.EntityData.YFilter = gearbox.YFilter
    gearbox.EntityData.YangName = "gearbox"
    gearbox.EntityData.BundleName = "cisco_ios_xr"
    gearbox.EntityData.ParentYangName = "slice"
    gearbox.EntityData.SegmentPath = "gearbox" + "[gearbox_id='" + fmt.Sprintf("%v", gearbox.GearboxId) + "']"
    gearbox.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox.EntityData.Children = make(map[string]types.YChild)
    gearbox.EntityData.Children["gearbox_lane"] = types.YChild{"GearboxLane", nil}
    for i := range gearbox.GearboxLane {
        gearbox.EntityData.Children[types.GetSegmentPath(&gearbox.GearboxLane[i])] = types.YChild{"GearboxLane", &gearbox.GearboxLane[i]}
    }
    gearbox.EntityData.Leafs = make(map[string]types.YLeaf)
    gearbox.EntityData.Leafs["gearbox_id"] = types.YLeaf{"GearboxId", gearbox.GearboxId}
    return &(gearbox.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-9]'.
    GearboxLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (gearboxLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox_GearboxLane) GetEntityData() *types.CommonEntityData {
    gearboxLane.EntityData.YFilter = gearboxLane.YFilter
    gearboxLane.EntityData.YangName = "gearbox_lane"
    gearboxLane.EntityData.BundleName = "cisco_ios_xr"
    gearboxLane.EntityData.ParentYangName = "gearbox"
    gearboxLane.EntityData.SegmentPath = "gearbox_lane" + "[gearbox_lane_id='" + fmt.Sprintf("%v", gearboxLane.GearboxLaneId) + "']"
    gearboxLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearboxLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearboxLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearboxLane.EntityData.Children = make(map[string]types.YChild)
    gearboxLane.EntityData.Leafs = make(map[string]types.YLeaf)
    gearboxLane.EntityData.Leafs["gearbox_lane_id"] = types.YLeaf{"GearboxLaneId", gearboxLane.GearboxLaneId}
    gearboxLane.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", gearboxLane.IsDataAvailable}
    gearboxLane.EntityData.Leafs["system_side_lanes"] = types.YLeaf{"SystemSideLanes", gearboxLane.SystemSideLanes}
    gearboxLane.EntityData.Leafs["cdr_lock_status_caui"] = types.YLeaf{"CdrLockStatusCaui", gearboxLane.CdrLockStatusCaui}
    gearboxLane.EntityData.Leafs["line_side_lanes"] = types.YLeaf{"LineSideLanes", gearboxLane.LineSideLanes}
    gearboxLane.EntityData.Leafs["lane_status_cdr"] = types.YLeaf{"LaneStatusCdr", gearboxLane.LaneStatusCdr}
    gearboxLane.EntityData.Leafs["lane_status_sig"] = types.YLeaf{"LaneStatusSig", gearboxLane.LaneStatusSig}
    gearboxLane.EntityData.Leafs["los_status"] = types.YLeaf{"LosStatus", gearboxLane.LosStatus}
    gearboxLane.EntityData.Leafs["system_side_loopback"] = types.YLeaf{"SystemSideLoopback", gearboxLane.SystemSideLoopback}
    gearboxLane.EntityData.Leafs["lane_side_loopback"] = types.YLeaf{"LaneSideLoopback", gearboxLane.LaneSideLoopback}
    return &(gearboxLane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-3]'.
    Gearbox2Id interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane.
    Gearbox2Lane []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane
}

func (gearbox2 *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2) GetEntityData() *types.CommonEntityData {
    gearbox2.EntityData.YFilter = gearbox2.YFilter
    gearbox2.EntityData.YangName = "gearbox2"
    gearbox2.EntityData.BundleName = "cisco_ios_xr"
    gearbox2.EntityData.ParentYangName = "slice"
    gearbox2.EntityData.SegmentPath = "gearbox2" + "[gearbox2_id='" + fmt.Sprintf("%v", gearbox2.Gearbox2Id) + "']"
    gearbox2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2.EntityData.Children = make(map[string]types.YChild)
    gearbox2.EntityData.Children["gearbox2_lane"] = types.YChild{"Gearbox2Lane", nil}
    for i := range gearbox2.Gearbox2Lane {
        gearbox2.EntityData.Children[types.GetSegmentPath(&gearbox2.Gearbox2Lane[i])] = types.YChild{"Gearbox2Lane", &gearbox2.Gearbox2Lane[i]}
    }
    gearbox2.EntityData.Leafs = make(map[string]types.YLeaf)
    gearbox2.EntityData.Leafs["gearbox2_id"] = types.YLeaf{"Gearbox2Id", gearbox2.Gearbox2Id}
    return &(gearbox2.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-9]'.
    Gearbox2LaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (gearbox2Lane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Gearbox2_Gearbox2Lane) GetEntityData() *types.CommonEntityData {
    gearbox2Lane.EntityData.YFilter = gearbox2Lane.YFilter
    gearbox2Lane.EntityData.YangName = "gearbox2_lane"
    gearbox2Lane.EntityData.BundleName = "cisco_ios_xr"
    gearbox2Lane.EntityData.ParentYangName = "gearbox2"
    gearbox2Lane.EntityData.SegmentPath = "gearbox2_lane" + "[gearbox2_lane_id='" + fmt.Sprintf("%v", gearbox2Lane.Gearbox2LaneId) + "']"
    gearbox2Lane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gearbox2Lane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gearbox2Lane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gearbox2Lane.EntityData.Children = make(map[string]types.YChild)
    gearbox2Lane.EntityData.Leafs = make(map[string]types.YLeaf)
    gearbox2Lane.EntityData.Leafs["gearbox2_lane_id"] = types.YLeaf{"Gearbox2LaneId", gearbox2Lane.Gearbox2LaneId}
    gearbox2Lane.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", gearbox2Lane.IsDataAvailable}
    gearbox2Lane.EntityData.Leafs["system_side_lanes"] = types.YLeaf{"SystemSideLanes", gearbox2Lane.SystemSideLanes}
    gearbox2Lane.EntityData.Leafs["cdr_lock_status_caui"] = types.YLeaf{"CdrLockStatusCaui", gearbox2Lane.CdrLockStatusCaui}
    gearbox2Lane.EntityData.Leafs["line_side_lanes"] = types.YLeaf{"LineSideLanes", gearbox2Lane.LineSideLanes}
    gearbox2Lane.EntityData.Leafs["lane_status_cdr"] = types.YLeaf{"LaneStatusCdr", gearbox2Lane.LaneStatusCdr}
    gearbox2Lane.EntityData.Leafs["lane_status_sig"] = types.YLeaf{"LaneStatusSig", gearbox2Lane.LaneStatusSig}
    gearbox2Lane.EntityData.Leafs["los_status"] = types.YLeaf{"LosStatus", gearbox2Lane.LosStatus}
    gearbox2Lane.EntityData.Leafs["system_side_loopback"] = types.YLeaf{"SystemSideLoopback", gearbox2Lane.SystemSideLoopback}
    gearbox2Lane.EntityData.Leafs["lane_side_loopback"] = types.YLeaf{"LaneSideLoopback", gearbox2Lane.LaneSideLoopback}
    return &(gearbox2Lane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-1]'.
    DualGearboxId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane.
    DualGearboxLane []Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane
}

func (dualGearbox *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox) GetEntityData() *types.CommonEntityData {
    dualGearbox.EntityData.YFilter = dualGearbox.YFilter
    dualGearbox.EntityData.YangName = "dual_gearbox"
    dualGearbox.EntityData.BundleName = "cisco_ios_xr"
    dualGearbox.EntityData.ParentYangName = "slice"
    dualGearbox.EntityData.SegmentPath = "dual_gearbox" + "[dual_gearbox_id='" + fmt.Sprintf("%v", dualGearbox.DualGearboxId) + "']"
    dualGearbox.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearbox.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearbox.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearbox.EntityData.Children = make(map[string]types.YChild)
    dualGearbox.EntityData.Children["dual_gearbox_lane"] = types.YChild{"DualGearboxLane", nil}
    for i := range dualGearbox.DualGearboxLane {
        dualGearbox.EntityData.Children[types.GetSegmentPath(&dualGearbox.DualGearboxLane[i])] = types.YChild{"DualGearboxLane", &dualGearbox.DualGearboxLane[i]}
    }
    dualGearbox.EntityData.Leafs = make(map[string]types.YLeaf)
    dualGearbox.EntityData.Leafs["dual_gearbox_id"] = types.YLeaf{"DualGearboxId", dualGearbox.DualGearboxId}
    return &(dualGearbox.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-9]'.
    DualGearboxLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    SystemSideLanes interface{}

    // The type is string.
    CdrLockStatusCaui interface{}

    // The type is string.
    LineSideLanes interface{}

    // The type is string.
    LaneStatusCdr interface{}

    // The type is string.
    LaneStatusSig interface{}

    // The type is string.
    LosStatus interface{}

    // The type is string.
    SystemSideLoopback interface{}

    // The type is string.
    LaneSideLoopback interface{}
}

func (dualGearboxLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_DualGearbox_DualGearboxLane) GetEntityData() *types.CommonEntityData {
    dualGearboxLane.EntityData.YFilter = dualGearboxLane.YFilter
    dualGearboxLane.EntityData.YangName = "dual_gearbox_lane"
    dualGearboxLane.EntityData.BundleName = "cisco_ios_xr"
    dualGearboxLane.EntityData.ParentYangName = "dual_gearbox"
    dualGearboxLane.EntityData.SegmentPath = "dual_gearbox_lane" + "[dual_gearbox_lane_id='" + fmt.Sprintf("%v", dualGearboxLane.DualGearboxLaneId) + "']"
    dualGearboxLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dualGearboxLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dualGearboxLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dualGearboxLane.EntityData.Children = make(map[string]types.YChild)
    dualGearboxLane.EntityData.Leafs = make(map[string]types.YLeaf)
    dualGearboxLane.EntityData.Leafs["dual_gearbox_lane_id"] = types.YLeaf{"DualGearboxLaneId", dualGearboxLane.DualGearboxLaneId}
    dualGearboxLane.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", dualGearboxLane.IsDataAvailable}
    dualGearboxLane.EntityData.Leafs["system_side_lanes"] = types.YLeaf{"SystemSideLanes", dualGearboxLane.SystemSideLanes}
    dualGearboxLane.EntityData.Leafs["cdr_lock_status_caui"] = types.YLeaf{"CdrLockStatusCaui", dualGearboxLane.CdrLockStatusCaui}
    dualGearboxLane.EntityData.Leafs["line_side_lanes"] = types.YLeaf{"LineSideLanes", dualGearboxLane.LineSideLanes}
    dualGearboxLane.EntityData.Leafs["lane_status_cdr"] = types.YLeaf{"LaneStatusCdr", dualGearboxLane.LaneStatusCdr}
    dualGearboxLane.EntityData.Leafs["lane_status_sig"] = types.YLeaf{"LaneStatusSig", dualGearboxLane.LaneStatusSig}
    dualGearboxLane.EntityData.Leafs["los_status"] = types.YLeaf{"LosStatus", dualGearboxLane.LosStatus}
    dualGearboxLane.EntityData.Leafs["system_side_loopback"] = types.YLeaf{"SystemSideLoopback", dualGearboxLane.SystemSideLoopback}
    dualGearboxLane.EntityData.Leafs["lane_side_loopback"] = types.YLeaf{"LaneSideLoopback", dualGearboxLane.LaneSideLoopback}
    return &(dualGearboxLane.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-3]'.
    CpakId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    Csignature interface{}

    // The type is bool. The default value is false.
    Cready interface{}

    // The type is bool. The default value is false.
    Cpassive interface{}

    // The type is interface{} with range: 0..255.
    ChwVerMajor interface{}

    // The type is interface{} with range: 0..255.
    ChwVerMinor interface{}

    // The type is string.
    Copaque interface{}

    // The type is string.
    Cnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Cslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Cport interface{}

    // The type is interface{} with range: 0..255.
    CprtAddr interface{}

    // The type is interface{} with range: 0..255.
    CdevAddr interface{}

    // The type is interface{} with range: 0..255.
    CdevSel interface{}

    // The type is interface{} with range: 0..255.
    CupgradeInprogress interface{}

    // The type is string.
    CopticsType interface{}

    // The type is string.
    CctraceErrHdl interface{}

    // The type is string.
    CctraceEvtHdl interface{}

    // The type is string.
    Cnext interface{}

    // The type is string.
    Cparent interface{}

    // The type is string.
    CrunningImage interface{}

    // The type is string.
    CcommittedImage interface{}
}

func (cpak *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Cpak) GetEntityData() *types.CommonEntityData {
    cpak.EntityData.YFilter = cpak.YFilter
    cpak.EntityData.YangName = "cpak"
    cpak.EntityData.BundleName = "cisco_ios_xr"
    cpak.EntityData.ParentYangName = "slice"
    cpak.EntityData.SegmentPath = "cpak" + "[cpak_id='" + fmt.Sprintf("%v", cpak.CpakId) + "']"
    cpak.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpak.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpak.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpak.EntityData.Children = make(map[string]types.YChild)
    cpak.EntityData.Leafs = make(map[string]types.YLeaf)
    cpak.EntityData.Leafs["cpak_id"] = types.YLeaf{"CpakId", cpak.CpakId}
    cpak.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", cpak.IsDataAvailable}
    cpak.EntityData.Leafs["csignature"] = types.YLeaf{"Csignature", cpak.Csignature}
    cpak.EntityData.Leafs["cready"] = types.YLeaf{"Cready", cpak.Cready}
    cpak.EntityData.Leafs["cpassive"] = types.YLeaf{"Cpassive", cpak.Cpassive}
    cpak.EntityData.Leafs["chw_ver_major"] = types.YLeaf{"ChwVerMajor", cpak.ChwVerMajor}
    cpak.EntityData.Leafs["chw_ver_minor"] = types.YLeaf{"ChwVerMinor", cpak.ChwVerMinor}
    cpak.EntityData.Leafs["copaque"] = types.YLeaf{"Copaque", cpak.Copaque}
    cpak.EntityData.Leafs["cnodeid"] = types.YLeaf{"Cnodeid", cpak.Cnodeid}
    cpak.EntityData.Leafs["cslice"] = types.YLeaf{"Cslice", cpak.Cslice}
    cpak.EntityData.Leafs["cport"] = types.YLeaf{"Cport", cpak.Cport}
    cpak.EntityData.Leafs["cprt_addr"] = types.YLeaf{"CprtAddr", cpak.CprtAddr}
    cpak.EntityData.Leafs["cdev_addr"] = types.YLeaf{"CdevAddr", cpak.CdevAddr}
    cpak.EntityData.Leafs["cdev_sel"] = types.YLeaf{"CdevSel", cpak.CdevSel}
    cpak.EntityData.Leafs["cupgrade_inprogress"] = types.YLeaf{"CupgradeInprogress", cpak.CupgradeInprogress}
    cpak.EntityData.Leafs["coptics_type"] = types.YLeaf{"CopticsType", cpak.CopticsType}
    cpak.EntityData.Leafs["cctrace_err_hdl"] = types.YLeaf{"CctraceErrHdl", cpak.CctraceErrHdl}
    cpak.EntityData.Leafs["cctrace_evt_hdl"] = types.YLeaf{"CctraceEvtHdl", cpak.CctraceEvtHdl}
    cpak.EntityData.Leafs["cnext"] = types.YLeaf{"Cnext", cpak.Cnext}
    cpak.EntityData.Leafs["cparent"] = types.YLeaf{"Cparent", cpak.Cparent}
    cpak.EntityData.Leafs["crunning_image"] = types.YLeaf{"CrunningImage", cpak.CrunningImage}
    cpak.EntityData.Leafs["ccommitted_image"] = types.YLeaf{"CcommittedImage", cpak.CcommittedImage}
    return &(cpak.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-19]'.
    ModenaId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is bool. The default value is false.
    Mready interface{}

    // The type is string.
    MportCtxP interface{}

    // The type is string.
    Mlevm interface{}

    // The type is string.
    MctraceErrHdl interface{}

    // The type is string.
    MctraceEvtHdl interface{}

    // The type is string.
    Msignature interface{}

    // The type is bool. The default value is false.
    MlpcReady interface{}

    // The type is string.
    Mopaque interface{}

    // The type is string.
    Mnodeid interface{}

    // The type is interface{} with range: 0..4294967295.
    Mslice interface{}

    // The type is interface{} with range: 0..4294967295.
    Mport interface{}

    // The type is interface{} with range: 0..255.
    MdevAddr interface{}

    // The type is string.
    MrdFunc interface{}

    // The type is string.
    MwrFunc interface{}

    // The type is string.
    Mnext interface{}
}

func (modenaSummary *Controller_Oper_SliceControl_LocationList_FPGA_Slice_ModenaSummary) GetEntityData() *types.CommonEntityData {
    modenaSummary.EntityData.YFilter = modenaSummary.YFilter
    modenaSummary.EntityData.YangName = "modena_summary"
    modenaSummary.EntityData.BundleName = "cisco_ios_xr"
    modenaSummary.EntityData.ParentYangName = "slice"
    modenaSummary.EntityData.SegmentPath = "modena_summary" + "[modena_id='" + fmt.Sprintf("%v", modenaSummary.ModenaId) + "']"
    modenaSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modenaSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modenaSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modenaSummary.EntityData.Children = make(map[string]types.YChild)
    modenaSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    modenaSummary.EntityData.Leafs["modena_id"] = types.YLeaf{"ModenaId", modenaSummary.ModenaId}
    modenaSummary.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", modenaSummary.IsDataAvailable}
    modenaSummary.EntityData.Leafs["mready"] = types.YLeaf{"Mready", modenaSummary.Mready}
    modenaSummary.EntityData.Leafs["mport_ctx_p"] = types.YLeaf{"MportCtxP", modenaSummary.MportCtxP}
    modenaSummary.EntityData.Leafs["mlevm"] = types.YLeaf{"Mlevm", modenaSummary.Mlevm}
    modenaSummary.EntityData.Leafs["mctrace_err_hdl"] = types.YLeaf{"MctraceErrHdl", modenaSummary.MctraceErrHdl}
    modenaSummary.EntityData.Leafs["mctrace_evt_hdl"] = types.YLeaf{"MctraceEvtHdl", modenaSummary.MctraceEvtHdl}
    modenaSummary.EntityData.Leafs["msignature"] = types.YLeaf{"Msignature", modenaSummary.Msignature}
    modenaSummary.EntityData.Leafs["mlpc_ready"] = types.YLeaf{"MlpcReady", modenaSummary.MlpcReady}
    modenaSummary.EntityData.Leafs["mopaque"] = types.YLeaf{"Mopaque", modenaSummary.Mopaque}
    modenaSummary.EntityData.Leafs["mnodeid"] = types.YLeaf{"Mnodeid", modenaSummary.Mnodeid}
    modenaSummary.EntityData.Leafs["mslice"] = types.YLeaf{"Mslice", modenaSummary.Mslice}
    modenaSummary.EntityData.Leafs["mport"] = types.YLeaf{"Mport", modenaSummary.Mport}
    modenaSummary.EntityData.Leafs["mdev_addr"] = types.YLeaf{"MdevAddr", modenaSummary.MdevAddr}
    modenaSummary.EntityData.Leafs["mrd_func"] = types.YLeaf{"MrdFunc", modenaSummary.MrdFunc}
    modenaSummary.EntityData.Leafs["mwr_func"] = types.YLeaf{"MwrFunc", modenaSummary.MwrFunc}
    modenaSummary.EntityData.Leafs["mnext"] = types.YLeaf{"Mnext", modenaSummary.Mnext}
    return &(modenaSummary.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-19]'.
    ModenaId interface{}

    // The type is slice of
    // Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane.
    ModenaLane []Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane
}

func (modena *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena) GetEntityData() *types.CommonEntityData {
    modena.EntityData.YFilter = modena.YFilter
    modena.EntityData.YangName = "modena"
    modena.EntityData.BundleName = "cisco_ios_xr"
    modena.EntityData.ParentYangName = "slice"
    modena.EntityData.SegmentPath = "modena" + "[modena_id='" + fmt.Sprintf("%v", modena.ModenaId) + "']"
    modena.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modena.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modena.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modena.EntityData.Children = make(map[string]types.YChild)
    modena.EntityData.Children["modena_lane"] = types.YChild{"ModenaLane", nil}
    for i := range modena.ModenaLane {
        modena.EntityData.Children[types.GetSegmentPath(&modena.ModenaLane[i])] = types.YChild{"ModenaLane", &modena.ModenaLane[i]}
    }
    modena.EntityData.Leafs = make(map[string]types.YLeaf)
    modena.EntityData.Leafs["modena_id"] = types.YLeaf{"ModenaId", modena.ModenaId}
    return &(modena.EntityData)
}

// Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane
type Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-3]'.
    ModenaLaneId interface{}

    // The type is bool. The default value is false.
    IsDataAvailable interface{}

    // The type is string.
    OperMode interface{}
}

func (modenaLane *Controller_Oper_SliceControl_LocationList_FPGA_Slice_Modena_ModenaLane) GetEntityData() *types.CommonEntityData {
    modenaLane.EntityData.YFilter = modenaLane.YFilter
    modenaLane.EntityData.YangName = "modena_lane"
    modenaLane.EntityData.BundleName = "cisco_ios_xr"
    modenaLane.EntityData.ParentYangName = "modena"
    modenaLane.EntityData.SegmentPath = "modena_lane" + "[modena_lane_id='" + fmt.Sprintf("%v", modenaLane.ModenaLaneId) + "']"
    modenaLane.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    modenaLane.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    modenaLane.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    modenaLane.EntityData.Children = make(map[string]types.YChild)
    modenaLane.EntityData.Leafs = make(map[string]types.YLeaf)
    modenaLane.EntityData.Leafs["modena_lane_id"] = types.YLeaf{"ModenaLaneId", modenaLane.ModenaLaneId}
    modenaLane.EntityData.Leafs["is_data_available"] = types.YLeaf{"IsDataAvailable", modenaLane.IsDataAvailable}
    modenaLane.EntityData.Leafs["oper_mode"] = types.YLeaf{"OperMode", modenaLane.OperMode}
    return &(modenaLane.EntityData)
}

// Controller_Zen
type Controller_Zen struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenOper Controller_Zen_ZenOper

    // show traceable processes. The type is slice of Controller_Zen_Trace.
    Trace []Controller_Zen_Trace
}

func (zen *Controller_Zen) GetEntityData() *types.CommonEntityData {
    zen.EntityData.YFilter = zen.YFilter
    zen.EntityData.YangName = "zen"
    zen.EntityData.BundleName = "cisco_ios_xr"
    zen.EntityData.ParentYangName = "controller"
    zen.EntityData.SegmentPath = "zen"
    zen.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zen.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zen.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zen.EntityData.Children = make(map[string]types.YChild)
    zen.EntityData.Children["zen_oper"] = types.YChild{"ZenOper", &zen.ZenOper}
    zen.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range zen.Trace {
        zen.EntityData.Children[types.GetSegmentPath(&zen.Trace[i])] = types.YChild{"Trace", &zen.Trace[i]}
    }
    zen.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zen.EntityData)
}

// Controller_Zen_ZenOper
type Controller_Zen_ZenOper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Zen_ZenOper_ZenLocation.
    ZenLocation []Controller_Zen_ZenOper_ZenLocation
}

func (zenOper *Controller_Zen_ZenOper) GetEntityData() *types.CommonEntityData {
    zenOper.EntityData.YFilter = zenOper.YFilter
    zenOper.EntityData.YangName = "zen_oper"
    zenOper.EntityData.BundleName = "cisco_ios_xr"
    zenOper.EntityData.ParentYangName = "zen"
    zenOper.EntityData.SegmentPath = "zen_oper"
    zenOper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenOper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenOper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenOper.EntityData.Children = make(map[string]types.YChild)
    zenOper.EntityData.Children["zen_location"] = types.YChild{"ZenLocation", nil}
    for i := range zenOper.ZenLocation {
        zenOper.EntityData.Children[types.GetSegmentPath(&zenOper.ZenLocation[i])] = types.YChild{"ZenLocation", &zenOper.ZenLocation[i]}
    }
    zenOper.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenOper.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation
type Controller_Zen_ZenOper_ZenLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ZenLocation interface{}

    // The type is string.
    ZenPciBaseAddress interface{}

    // The type is string.
    ZenPciDevVendorId interface{}

    // The type is string.
    ZenPciDevDeviceId interface{}

    // The type is string.
    ZenHpDesc interface{}

    // The type is string.
    ZenHandle interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenMsi interface{}

    // The type is string.
    ZenIrq interface{}

    // The type is string.
    ZenRegs interface{}

    // The type is string.
    ZenTrace interface{}

    // The type is string.
    ZenLevm interface{}

    // The type is string.
    ZenSensorPollTimerTree interface{}

    // The type is string.
    ZenSensorPollTimer interface{}

    // The type is string.
    ZenSensorData interface{}

    // The type is bool. The default value is false.
    ZenSim interface{}

    // The type is bool. The default value is false.
    ZenDebug interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenSlotNum interface{}

    // The type is string.
    ZenPmHdl interface{}

    // The type is string.
    ZenHdl interface{}

    // The type is string.
    ZenCccHdl interface{}

    // The type is string.
    ZenPlatformLocalHdl interface{}

    // The type is string.
    ZenCduiSrvrHdl interface{}

    
    ZenTempSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault

    
    ZenVoltSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault

    
    ZenCurrSensorDefault Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault
}

func (zenLocation *Controller_Zen_ZenOper_ZenLocation) GetEntityData() *types.CommonEntityData {
    zenLocation.EntityData.YFilter = zenLocation.YFilter
    zenLocation.EntityData.YangName = "zen_location"
    zenLocation.EntityData.BundleName = "cisco_ios_xr"
    zenLocation.EntityData.ParentYangName = "zen_oper"
    zenLocation.EntityData.SegmentPath = "zen_location" + "[zen_location='" + fmt.Sprintf("%v", zenLocation.ZenLocation) + "']"
    zenLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenLocation.EntityData.Children = make(map[string]types.YChild)
    zenLocation.EntityData.Children["zen_temp_sensor_default"] = types.YChild{"ZenTempSensorDefault", &zenLocation.ZenTempSensorDefault}
    zenLocation.EntityData.Children["zen_volt_sensor_default"] = types.YChild{"ZenVoltSensorDefault", &zenLocation.ZenVoltSensorDefault}
    zenLocation.EntityData.Children["zen_curr_sensor_default"] = types.YChild{"ZenCurrSensorDefault", &zenLocation.ZenCurrSensorDefault}
    zenLocation.EntityData.Leafs = make(map[string]types.YLeaf)
    zenLocation.EntityData.Leafs["zen_location"] = types.YLeaf{"ZenLocation", zenLocation.ZenLocation}
    zenLocation.EntityData.Leafs["zen_pci_base_address"] = types.YLeaf{"ZenPciBaseAddress", zenLocation.ZenPciBaseAddress}
    zenLocation.EntityData.Leafs["zen_pci_dev_vendor_id"] = types.YLeaf{"ZenPciDevVendorId", zenLocation.ZenPciDevVendorId}
    zenLocation.EntityData.Leafs["zen_pci_dev_device_id"] = types.YLeaf{"ZenPciDevDeviceId", zenLocation.ZenPciDevDeviceId}
    zenLocation.EntityData.Leafs["zen_hp_desc"] = types.YLeaf{"ZenHpDesc", zenLocation.ZenHpDesc}
    zenLocation.EntityData.Leafs["zen_handle"] = types.YLeaf{"ZenHandle", zenLocation.ZenHandle}
    zenLocation.EntityData.Leafs["zen_msi"] = types.YLeaf{"ZenMsi", zenLocation.ZenMsi}
    zenLocation.EntityData.Leafs["zen_irq"] = types.YLeaf{"ZenIrq", zenLocation.ZenIrq}
    zenLocation.EntityData.Leafs["zen_regs"] = types.YLeaf{"ZenRegs", zenLocation.ZenRegs}
    zenLocation.EntityData.Leafs["zen_trace"] = types.YLeaf{"ZenTrace", zenLocation.ZenTrace}
    zenLocation.EntityData.Leafs["zen_levm"] = types.YLeaf{"ZenLevm", zenLocation.ZenLevm}
    zenLocation.EntityData.Leafs["zen_sensor_poll_timer_tree"] = types.YLeaf{"ZenSensorPollTimerTree", zenLocation.ZenSensorPollTimerTree}
    zenLocation.EntityData.Leafs["zen_sensor_poll_timer"] = types.YLeaf{"ZenSensorPollTimer", zenLocation.ZenSensorPollTimer}
    zenLocation.EntityData.Leafs["zen_sensor_data"] = types.YLeaf{"ZenSensorData", zenLocation.ZenSensorData}
    zenLocation.EntityData.Leafs["zen_sim"] = types.YLeaf{"ZenSim", zenLocation.ZenSim}
    zenLocation.EntityData.Leafs["zen_debug"] = types.YLeaf{"ZenDebug", zenLocation.ZenDebug}
    zenLocation.EntityData.Leafs["zen_card_type"] = types.YLeaf{"ZenCardType", zenLocation.ZenCardType}
    zenLocation.EntityData.Leafs["zen_slot_num"] = types.YLeaf{"ZenSlotNum", zenLocation.ZenSlotNum}
    zenLocation.EntityData.Leafs["zen_pm_hdl"] = types.YLeaf{"ZenPmHdl", zenLocation.ZenPmHdl}
    zenLocation.EntityData.Leafs["zen_hdl"] = types.YLeaf{"ZenHdl", zenLocation.ZenHdl}
    zenLocation.EntityData.Leafs["zen_ccc_hdl"] = types.YLeaf{"ZenCccHdl", zenLocation.ZenCccHdl}
    zenLocation.EntityData.Leafs["zen_platform_local_hdl"] = types.YLeaf{"ZenPlatformLocalHdl", zenLocation.ZenPlatformLocalHdl}
    zenLocation.EntityData.Leafs["zen_cdui_srvr_hdl"] = types.YLeaf{"ZenCduiSrvrHdl", zenLocation.ZenCduiSrvrHdl}
    return &(zenLocation.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenTempSensorData Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData
}

func (zenTempSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault) GetEntityData() *types.CommonEntityData {
    zenTempSensorDefault.EntityData.YFilter = zenTempSensorDefault.YFilter
    zenTempSensorDefault.EntityData.YangName = "zen_temp_sensor_default"
    zenTempSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensorDefault.EntityData.ParentYangName = "zen_location"
    zenTempSensorDefault.EntityData.SegmentPath = "zen_temp_sensor_default"
    zenTempSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensorDefault.EntityData.Children = make(map[string]types.YChild)
    zenTempSensorDefault.EntityData.Children["zen_temp_sensor_data"] = types.YChild{"ZenTempSensorData", &zenTempSensorDefault.ZenTempSensorData}
    zenTempSensorDefault.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenTempSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor.
    ZenTempSensor []Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor
}

func (zenTempSensorData *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData) GetEntityData() *types.CommonEntityData {
    zenTempSensorData.EntityData.YFilter = zenTempSensorData.YFilter
    zenTempSensorData.EntityData.YangName = "zen_temp_sensor_data"
    zenTempSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensorData.EntityData.ParentYangName = "zen_temp_sensor_default"
    zenTempSensorData.EntityData.SegmentPath = "zen_temp_sensor_data"
    zenTempSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensorData.EntityData.Children = make(map[string]types.YChild)
    zenTempSensorData.EntityData.Children["zen_temp_sensor"] = types.YChild{"ZenTempSensor", nil}
    for i := range zenTempSensorData.ZenTempSensor {
        zenTempSensorData.EntityData.Children[types.GetSegmentPath(&zenTempSensorData.ZenTempSensor[i])] = types.YChild{"ZenTempSensor", &zenTempSensorData.ZenTempSensor[i]}
    }
    zenTempSensorData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenTempSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor
type Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-4]'.
    ZenTempSensor interface{}

    // The type is string.
    ZenTempSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenTempLastValue interface{}

    // The type is bool. The default value is false.
    ZenTempSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenTempNum1SecIntervals interface{}
}

func (zenTempSensor *Controller_Zen_ZenOper_ZenLocation_ZenTempSensorDefault_ZenTempSensorData_ZenTempSensor) GetEntityData() *types.CommonEntityData {
    zenTempSensor.EntityData.YFilter = zenTempSensor.YFilter
    zenTempSensor.EntityData.YangName = "zen_temp_sensor"
    zenTempSensor.EntityData.BundleName = "cisco_ios_xr"
    zenTempSensor.EntityData.ParentYangName = "zen_temp_sensor_data"
    zenTempSensor.EntityData.SegmentPath = "zen_temp_sensor" + "[zen_temp_sensor='" + fmt.Sprintf("%v", zenTempSensor.ZenTempSensor) + "']"
    zenTempSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenTempSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenTempSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenTempSensor.EntityData.Children = make(map[string]types.YChild)
    zenTempSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    zenTempSensor.EntityData.Leafs["zen_temp_sensor"] = types.YLeaf{"ZenTempSensor", zenTempSensor.ZenTempSensor}
    zenTempSensor.EntityData.Leafs["zen_temp_sensor_id"] = types.YLeaf{"ZenTempSensorId", zenTempSensor.ZenTempSensorId}
    zenTempSensor.EntityData.Leafs["zen_temp_dev_addr"] = types.YLeaf{"ZenTempDevAddr", zenTempSensor.ZenTempDevAddr}
    zenTempSensor.EntityData.Leafs["zen_temp_poll_intvl"] = types.YLeaf{"ZenTempPollIntvl", zenTempSensor.ZenTempPollIntvl}
    zenTempSensor.EntityData.Leafs["zen_temp_delta"] = types.YLeaf{"ZenTempDelta", zenTempSensor.ZenTempDelta}
    zenTempSensor.EntityData.Leafs["zen_temp_raw_data"] = types.YLeaf{"ZenTempRawData", zenTempSensor.ZenTempRawData}
    zenTempSensor.EntityData.Leafs["zen_temp_sensor_value"] = types.YLeaf{"ZenTempSensorValue", zenTempSensor.ZenTempSensorValue}
    zenTempSensor.EntityData.Leafs["zen_temp_unit"] = types.YLeaf{"ZenTempUnit", zenTempSensor.ZenTempUnit}
    zenTempSensor.EntityData.Leafs["zen_temp_last_value"] = types.YLeaf{"ZenTempLastValue", zenTempSensor.ZenTempLastValue}
    zenTempSensor.EntityData.Leafs["zen_temp_send_update"] = types.YLeaf{"ZenTempSendUpdate", zenTempSensor.ZenTempSendUpdate}
    zenTempSensor.EntityData.Leafs["zen_temp_num_1sec_intervals"] = types.YLeaf{"ZenTempNum1SecIntervals", zenTempSensor.ZenTempNum1SecIntervals}
    return &(zenTempSensor.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenVoltSensorData Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData
}

func (zenVoltSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault) GetEntityData() *types.CommonEntityData {
    zenVoltSensorDefault.EntityData.YFilter = zenVoltSensorDefault.YFilter
    zenVoltSensorDefault.EntityData.YangName = "zen_volt_sensor_default"
    zenVoltSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensorDefault.EntityData.ParentYangName = "zen_location"
    zenVoltSensorDefault.EntityData.SegmentPath = "zen_volt_sensor_default"
    zenVoltSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensorDefault.EntityData.Children = make(map[string]types.YChild)
    zenVoltSensorDefault.EntityData.Children["zen_volt_sensor_data"] = types.YChild{"ZenVoltSensorData", &zenVoltSensorDefault.ZenVoltSensorData}
    zenVoltSensorDefault.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenVoltSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor.
    ZenVoltSensor []Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor
}

func (zenVoltSensorData *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData) GetEntityData() *types.CommonEntityData {
    zenVoltSensorData.EntityData.YFilter = zenVoltSensorData.YFilter
    zenVoltSensorData.EntityData.YangName = "zen_volt_sensor_data"
    zenVoltSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensorData.EntityData.ParentYangName = "zen_volt_sensor_default"
    zenVoltSensorData.EntityData.SegmentPath = "zen_volt_sensor_data"
    zenVoltSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensorData.EntityData.Children = make(map[string]types.YChild)
    zenVoltSensorData.EntityData.Children["zen_volt_sensor"] = types.YChild{"ZenVoltSensor", nil}
    for i := range zenVoltSensorData.ZenVoltSensor {
        zenVoltSensorData.EntityData.Children[types.GetSegmentPath(&zenVoltSensorData.ZenVoltSensor[i])] = types.YChild{"ZenVoltSensor", &zenVoltSensorData.ZenVoltSensor[i]}
    }
    zenVoltSensorData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenVoltSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor
type Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..17.
    ZenVoltSensor interface{}

    // The type is string.
    ZenVoltSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenVoltLastValue interface{}

    // The type is bool. The default value is false.
    ZenVoltSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenVoltNum1SecIntervals interface{}
}

func (zenVoltSensor *Controller_Zen_ZenOper_ZenLocation_ZenVoltSensorDefault_ZenVoltSensorData_ZenVoltSensor) GetEntityData() *types.CommonEntityData {
    zenVoltSensor.EntityData.YFilter = zenVoltSensor.YFilter
    zenVoltSensor.EntityData.YangName = "zen_volt_sensor"
    zenVoltSensor.EntityData.BundleName = "cisco_ios_xr"
    zenVoltSensor.EntityData.ParentYangName = "zen_volt_sensor_data"
    zenVoltSensor.EntityData.SegmentPath = "zen_volt_sensor" + "[zen_volt_sensor='" + fmt.Sprintf("%v", zenVoltSensor.ZenVoltSensor) + "']"
    zenVoltSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenVoltSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenVoltSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenVoltSensor.EntityData.Children = make(map[string]types.YChild)
    zenVoltSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    zenVoltSensor.EntityData.Leafs["zen_volt_sensor"] = types.YLeaf{"ZenVoltSensor", zenVoltSensor.ZenVoltSensor}
    zenVoltSensor.EntityData.Leafs["zen_volt_sensor_id"] = types.YLeaf{"ZenVoltSensorId", zenVoltSensor.ZenVoltSensorId}
    zenVoltSensor.EntityData.Leafs["zen_volt_dev_addr"] = types.YLeaf{"ZenVoltDevAddr", zenVoltSensor.ZenVoltDevAddr}
    zenVoltSensor.EntityData.Leafs["zen_volt_poll_intvl"] = types.YLeaf{"ZenVoltPollIntvl", zenVoltSensor.ZenVoltPollIntvl}
    zenVoltSensor.EntityData.Leafs["zen_volt_delta"] = types.YLeaf{"ZenVoltDelta", zenVoltSensor.ZenVoltDelta}
    zenVoltSensor.EntityData.Leafs["zen_volt_raw_data"] = types.YLeaf{"ZenVoltRawData", zenVoltSensor.ZenVoltRawData}
    zenVoltSensor.EntityData.Leafs["zen_volt_sensor_value"] = types.YLeaf{"ZenVoltSensorValue", zenVoltSensor.ZenVoltSensorValue}
    zenVoltSensor.EntityData.Leafs["zen_volt_unit"] = types.YLeaf{"ZenVoltUnit", zenVoltSensor.ZenVoltUnit}
    zenVoltSensor.EntityData.Leafs["zen_volt_last_value"] = types.YLeaf{"ZenVoltLastValue", zenVoltSensor.ZenVoltLastValue}
    zenVoltSensor.EntityData.Leafs["zen_volt_send_update"] = types.YLeaf{"ZenVoltSendUpdate", zenVoltSensor.ZenVoltSendUpdate}
    zenVoltSensor.EntityData.Leafs["zen_volt_num_1sec_intervals"] = types.YLeaf{"ZenVoltNum1SecIntervals", zenVoltSensor.ZenVoltNum1SecIntervals}
    return &(zenVoltSensor.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ZenCurrSensorData Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData
}

func (zenCurrSensorDefault *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault) GetEntityData() *types.CommonEntityData {
    zenCurrSensorDefault.EntityData.YFilter = zenCurrSensorDefault.YFilter
    zenCurrSensorDefault.EntityData.YangName = "zen_curr_sensor_default"
    zenCurrSensorDefault.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensorDefault.EntityData.ParentYangName = "zen_location"
    zenCurrSensorDefault.EntityData.SegmentPath = "zen_curr_sensor_default"
    zenCurrSensorDefault.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensorDefault.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensorDefault.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensorDefault.EntityData.Children = make(map[string]types.YChild)
    zenCurrSensorDefault.EntityData.Children["zen_curr_sensor_data"] = types.YChild{"ZenCurrSensorData", &zenCurrSensorDefault.ZenCurrSensorData}
    zenCurrSensorDefault.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenCurrSensorDefault.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor.
    ZenCurrSensor []Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor
}

func (zenCurrSensorData *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData) GetEntityData() *types.CommonEntityData {
    zenCurrSensorData.EntityData.YFilter = zenCurrSensorData.YFilter
    zenCurrSensorData.EntityData.YangName = "zen_curr_sensor_data"
    zenCurrSensorData.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensorData.EntityData.ParentYangName = "zen_curr_sensor_default"
    zenCurrSensorData.EntityData.SegmentPath = "zen_curr_sensor_data"
    zenCurrSensorData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensorData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensorData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensorData.EntityData.Children = make(map[string]types.YChild)
    zenCurrSensorData.EntityData.Children["zen_curr_sensor"] = types.YChild{"ZenCurrSensor", nil}
    for i := range zenCurrSensorData.ZenCurrSensor {
        zenCurrSensorData.EntityData.Children[types.GetSegmentPath(&zenCurrSensorData.ZenCurrSensor[i])] = types.YChild{"ZenCurrSensor", &zenCurrSensorData.ZenCurrSensor[i]}
    }
    zenCurrSensorData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(zenCurrSensorData.EntityData)
}

// Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor
type Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern: b'all|[0-8]'.
    ZenCurrSensor interface{}

    // The type is string.
    ZenCurrSensorId interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrDevAddr interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrPollIntvl interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrDelta interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrRawData interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrSensorValue interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrUnit interface{}

    // The type is interface{} with range: 0..4294967295.
    ZenCurrLastValue interface{}

    // The type is bool. The default value is false.
    ZenCurrSendUpdate interface{}

    // The type is interface{} with range: -2147483648..2147483647.
    ZenCurrNum1SecIntervals interface{}
}

func (zenCurrSensor *Controller_Zen_ZenOper_ZenLocation_ZenCurrSensorDefault_ZenCurrSensorData_ZenCurrSensor) GetEntityData() *types.CommonEntityData {
    zenCurrSensor.EntityData.YFilter = zenCurrSensor.YFilter
    zenCurrSensor.EntityData.YangName = "zen_curr_sensor"
    zenCurrSensor.EntityData.BundleName = "cisco_ios_xr"
    zenCurrSensor.EntityData.ParentYangName = "zen_curr_sensor_data"
    zenCurrSensor.EntityData.SegmentPath = "zen_curr_sensor" + "[zen_curr_sensor='" + fmt.Sprintf("%v", zenCurrSensor.ZenCurrSensor) + "']"
    zenCurrSensor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    zenCurrSensor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    zenCurrSensor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    zenCurrSensor.EntityData.Children = make(map[string]types.YChild)
    zenCurrSensor.EntityData.Leafs = make(map[string]types.YLeaf)
    zenCurrSensor.EntityData.Leafs["zen_curr_sensor"] = types.YLeaf{"ZenCurrSensor", zenCurrSensor.ZenCurrSensor}
    zenCurrSensor.EntityData.Leafs["zen_curr_sensor_id"] = types.YLeaf{"ZenCurrSensorId", zenCurrSensor.ZenCurrSensorId}
    zenCurrSensor.EntityData.Leafs["zen_curr_dev_addr"] = types.YLeaf{"ZenCurrDevAddr", zenCurrSensor.ZenCurrDevAddr}
    zenCurrSensor.EntityData.Leafs["zen_curr_poll_intvl"] = types.YLeaf{"ZenCurrPollIntvl", zenCurrSensor.ZenCurrPollIntvl}
    zenCurrSensor.EntityData.Leafs["zen_curr_delta"] = types.YLeaf{"ZenCurrDelta", zenCurrSensor.ZenCurrDelta}
    zenCurrSensor.EntityData.Leafs["zen_curr_raw_data"] = types.YLeaf{"ZenCurrRawData", zenCurrSensor.ZenCurrRawData}
    zenCurrSensor.EntityData.Leafs["zen_curr_sensor_value"] = types.YLeaf{"ZenCurrSensorValue", zenCurrSensor.ZenCurrSensorValue}
    zenCurrSensor.EntityData.Leafs["zen_curr_unit"] = types.YLeaf{"ZenCurrUnit", zenCurrSensor.ZenCurrUnit}
    zenCurrSensor.EntityData.Leafs["zen_curr_last_value"] = types.YLeaf{"ZenCurrLastValue", zenCurrSensor.ZenCurrLastValue}
    zenCurrSensor.EntityData.Leafs["zen_curr_send_update"] = types.YLeaf{"ZenCurrSendUpdate", zenCurrSensor.ZenCurrSendUpdate}
    zenCurrSensor.EntityData.Leafs["zen_curr_num_1sec_intervals"] = types.YLeaf{"ZenCurrNum1SecIntervals", zenCurrSensor.ZenCurrNum1SecIntervals}
    return &(zenCurrSensor.EntityData)
}

// Controller_Zen_Trace
// show traceable processes
type Controller_Zen_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Zen_Trace_Location.
    Location []Controller_Zen_Trace_Location
}

func (trace *Controller_Zen_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "zen"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Zen_Trace_Location
type Controller_Zen_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_Zen_Trace_Location_AllOptions.
    AllOptions []Controller_Zen_Trace_Location_AllOptions
}

func (location *Controller_Zen_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Zen_Trace_Location_AllOptions
type Controller_Zen_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of Controller_Zen_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Zen_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Zen_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Zen_Trace_Location_AllOptions_TraceBlocks
type Controller_Zen_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Zen_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_CccDriver
type Controller_CccDriver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of Controller_CccDriver_Trace.
    Trace []Controller_CccDriver_Trace

    
    Bootflash Controller_CccDriver_Bootflash

    
    Inventory Controller_CccDriver_Inventory

    
    Power Controller_CccDriver_Power

    
    ResetHistory Controller_CccDriver_ResetHistory

    
    Register Controller_CccDriver_Register

    
    Ejector Controller_CccDriver_Ejector

    
    I2CDev Controller_CccDriver_I2CDev

    
    Ethernet Controller_CccDriver_Ethernet

    
    EventHistory Controller_CccDriver_EventHistory

    
    OirHistory Controller_CccDriver_OirHistory

    
    NotifHistory Controller_CccDriver_NotifHistory

    
    Slave Controller_CccDriver_Slave

    
    Action Controller_CccDriver_Action
}

func (cccDriver *Controller_CccDriver) GetEntityData() *types.CommonEntityData {
    cccDriver.EntityData.YFilter = cccDriver.YFilter
    cccDriver.EntityData.YangName = "ccc_driver"
    cccDriver.EntityData.BundleName = "cisco_ios_xr"
    cccDriver.EntityData.ParentYangName = "controller"
    cccDriver.EntityData.SegmentPath = "ccc_driver"
    cccDriver.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccDriver.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccDriver.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccDriver.EntityData.Children = make(map[string]types.YChild)
    cccDriver.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range cccDriver.Trace {
        cccDriver.EntityData.Children[types.GetSegmentPath(&cccDriver.Trace[i])] = types.YChild{"Trace", &cccDriver.Trace[i]}
    }
    cccDriver.EntityData.Children["bootflash"] = types.YChild{"Bootflash", &cccDriver.Bootflash}
    cccDriver.EntityData.Children["inventory"] = types.YChild{"Inventory", &cccDriver.Inventory}
    cccDriver.EntityData.Children["power"] = types.YChild{"Power", &cccDriver.Power}
    cccDriver.EntityData.Children["reset-history"] = types.YChild{"ResetHistory", &cccDriver.ResetHistory}
    cccDriver.EntityData.Children["register"] = types.YChild{"Register", &cccDriver.Register}
    cccDriver.EntityData.Children["ejector"] = types.YChild{"Ejector", &cccDriver.Ejector}
    cccDriver.EntityData.Children["i2c-dev"] = types.YChild{"I2CDev", &cccDriver.I2CDev}
    cccDriver.EntityData.Children["ethernet"] = types.YChild{"Ethernet", &cccDriver.Ethernet}
    cccDriver.EntityData.Children["event-history"] = types.YChild{"EventHistory", &cccDriver.EventHistory}
    cccDriver.EntityData.Children["oir-history"] = types.YChild{"OirHistory", &cccDriver.OirHistory}
    cccDriver.EntityData.Children["notif-history"] = types.YChild{"NotifHistory", &cccDriver.NotifHistory}
    cccDriver.EntityData.Children["slave"] = types.YChild{"Slave", &cccDriver.Slave}
    cccDriver.EntityData.Children["action"] = types.YChild{"Action", &cccDriver.Action}
    cccDriver.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cccDriver.EntityData)
}

// Controller_CccDriver_Trace
// show traceable processes
type Controller_CccDriver_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_CccDriver_Trace_Location.
    Location []Controller_CccDriver_Trace_Location
}

func (trace *Controller_CccDriver_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "ccc_driver"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_CccDriver_Trace_Location
type Controller_CccDriver_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_CccDriver_Trace_Location_AllOptions.
    AllOptions []Controller_CccDriver_Trace_Location_AllOptions
}

func (location *Controller_CccDriver_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_CccDriver_Trace_Location_AllOptions
type Controller_CccDriver_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_CccDriver_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks
type Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_CccDriver_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_CccDriver_Bootflash
type Controller_CccDriver_Bootflash struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_CccDriver_Bootflash_Info

    
    Status Controller_CccDriver_Bootflash_Status

    
    CreStatus Controller_CccDriver_Bootflash_CreStatus
}

func (bootflash *Controller_CccDriver_Bootflash) GetEntityData() *types.CommonEntityData {
    bootflash.EntityData.YFilter = bootflash.YFilter
    bootflash.EntityData.YangName = "bootflash"
    bootflash.EntityData.BundleName = "cisco_ios_xr"
    bootflash.EntityData.ParentYangName = "ccc_driver"
    bootflash.EntityData.SegmentPath = "bootflash"
    bootflash.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bootflash.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bootflash.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bootflash.EntityData.Children = make(map[string]types.YChild)
    bootflash.EntityData.Children["info"] = types.YChild{"Info", &bootflash.Info}
    bootflash.EntityData.Children["status"] = types.YChild{"Status", &bootflash.Status}
    bootflash.EntityData.Children["cre_status"] = types.YChild{"CreStatus", &bootflash.CreStatus}
    bootflash.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bootflash.EntityData)
}

// Controller_CccDriver_Bootflash_Info
type Controller_CccDriver_Bootflash_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_Info_Location.
    Location []Controller_CccDriver_Bootflash_Info_Location
}

func (info *Controller_CccDriver_Bootflash_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "bootflash"
    info.EntityData.SegmentPath = "info"
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = make(map[string]types.YChild)
    info.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range info.Location {
        info.EntityData.Children[types.GetSegmentPath(&info.Location[i])] = types.YChild{"Location", &info.Location[i]}
    }
    info.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(info.EntityData)
}

// Controller_CccDriver_Bootflash_Info_Location
type Controller_CccDriver_Bootflash_Info_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfInfo Controller_CccDriver_Bootflash_Info_Location_BfInfo
}

func (location *Controller_CccDriver_Bootflash_Info_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "info"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["bf_info"] = types.YChild{"BfInfo", &location.BfInfo}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_Info_Location_BfInfo
type Controller_CccDriver_Bootflash_Info_Location_BfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfInfoValues []interface{}
}

func (bfInfo *Controller_CccDriver_Bootflash_Info_Location_BfInfo) GetEntityData() *types.CommonEntityData {
    bfInfo.EntityData.YFilter = bfInfo.YFilter
    bfInfo.EntityData.YangName = "bf_info"
    bfInfo.EntityData.BundleName = "cisco_ios_xr"
    bfInfo.EntityData.ParentYangName = "location"
    bfInfo.EntityData.SegmentPath = "bf_info"
    bfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfInfo.EntityData.Children = make(map[string]types.YChild)
    bfInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bfInfo.EntityData.Leafs["bf_info_values"] = types.YLeaf{"BfInfoValues", bfInfo.BfInfoValues}
    return &(bfInfo.EntityData)
}

// Controller_CccDriver_Bootflash_Status
type Controller_CccDriver_Bootflash_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_Status_Location.
    Location []Controller_CccDriver_Bootflash_Status_Location
}

func (status *Controller_CccDriver_Bootflash_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "bootflash"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = make(map[string]types.YChild)
    status.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range status.Location {
        status.EntityData.Children[types.GetSegmentPath(&status.Location[i])] = types.YChild{"Location", &status.Location[i]}
    }
    status.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(status.EntityData)
}

// Controller_CccDriver_Bootflash_Status_Location
type Controller_CccDriver_Bootflash_Status_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfStatus Controller_CccDriver_Bootflash_Status_Location_BfStatus
}

func (location *Controller_CccDriver_Bootflash_Status_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "status"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["bf_status"] = types.YChild{"BfStatus", &location.BfStatus}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_Status_Location_BfStatus
type Controller_CccDriver_Bootflash_Status_Location_BfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfStatusValues []interface{}
}

func (bfStatus *Controller_CccDriver_Bootflash_Status_Location_BfStatus) GetEntityData() *types.CommonEntityData {
    bfStatus.EntityData.YFilter = bfStatus.YFilter
    bfStatus.EntityData.YangName = "bf_status"
    bfStatus.EntityData.BundleName = "cisco_ios_xr"
    bfStatus.EntityData.ParentYangName = "location"
    bfStatus.EntityData.SegmentPath = "bf_status"
    bfStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfStatus.EntityData.Children = make(map[string]types.YChild)
    bfStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    bfStatus.EntityData.Leafs["bf_status_values"] = types.YLeaf{"BfStatusValues", bfStatus.BfStatusValues}
    return &(bfStatus.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus
type Controller_CccDriver_Bootflash_CreStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Bootflash_CreStatus_Location.
    Location []Controller_CccDriver_Bootflash_CreStatus_Location
}

func (creStatus *Controller_CccDriver_Bootflash_CreStatus) GetEntityData() *types.CommonEntityData {
    creStatus.EntityData.YFilter = creStatus.YFilter
    creStatus.EntityData.YangName = "cre_status"
    creStatus.EntityData.BundleName = "cisco_ios_xr"
    creStatus.EntityData.ParentYangName = "bootflash"
    creStatus.EntityData.SegmentPath = "cre_status"
    creStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    creStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    creStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    creStatus.EntityData.Children = make(map[string]types.YChild)
    creStatus.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range creStatus.Location {
        creStatus.EntityData.Children[types.GetSegmentPath(&creStatus.Location[i])] = types.YChild{"Location", &creStatus.Location[i]}
    }
    creStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(creStatus.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus_Location
type Controller_CccDriver_Bootflash_CreStatus_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    BfStatus Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus
}

func (location *Controller_CccDriver_Bootflash_CreStatus_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "cre_status"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["bf_status"] = types.YChild{"BfStatus", &location.BfStatus}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus
type Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    BfStatusValues []interface{}
}

func (bfStatus *Controller_CccDriver_Bootflash_CreStatus_Location_BfStatus) GetEntityData() *types.CommonEntityData {
    bfStatus.EntityData.YFilter = bfStatus.YFilter
    bfStatus.EntityData.YangName = "bf_status"
    bfStatus.EntityData.BundleName = "cisco_ios_xr"
    bfStatus.EntityData.ParentYangName = "location"
    bfStatus.EntityData.SegmentPath = "bf_status"
    bfStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfStatus.EntityData.Children = make(map[string]types.YChild)
    bfStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    bfStatus.EntityData.Leafs["bf_status_values"] = types.YLeaf{"BfStatusValues", bfStatus.BfStatusValues}
    return &(bfStatus.EntityData)
}

// Controller_CccDriver_Inventory
type Controller_CccDriver_Inventory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_CccDriver_Inventory_Summary

    
    Version Controller_CccDriver_Inventory_Version

    
    Status Controller_CccDriver_Inventory_Status

    
    Detail Controller_CccDriver_Inventory_Detail
}

func (inventory *Controller_CccDriver_Inventory) GetEntityData() *types.CommonEntityData {
    inventory.EntityData.YFilter = inventory.YFilter
    inventory.EntityData.YangName = "inventory"
    inventory.EntityData.BundleName = "cisco_ios_xr"
    inventory.EntityData.ParentYangName = "ccc_driver"
    inventory.EntityData.SegmentPath = "inventory"
    inventory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inventory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inventory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inventory.EntityData.Children = make(map[string]types.YChild)
    inventory.EntityData.Children["summary"] = types.YChild{"Summary", &inventory.Summary}
    inventory.EntityData.Children["version"] = types.YChild{"Version", &inventory.Version}
    inventory.EntityData.Children["status"] = types.YChild{"Status", &inventory.Status}
    inventory.EntityData.Children["detail"] = types.YChild{"Detail", &inventory.Detail}
    inventory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(inventory.EntityData)
}

// Controller_CccDriver_Inventory_Summary
type Controller_CccDriver_Inventory_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Summary_CccInvSummary.
    CccInvSummary []Controller_CccDriver_Inventory_Summary_CccInvSummary
}

func (summary *Controller_CccDriver_Inventory_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "inventory"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["ccc_inv_summary"] = types.YChild{"CccInvSummary", nil}
    for i := range summary.CccInvSummary {
        summary.EntityData.Children[types.GetSegmentPath(&summary.CccInvSummary[i])] = types.YChild{"CccInvSummary", &summary.CccInvSummary[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_CccDriver_Inventory_Summary_CccInvSummary
type Controller_CccDriver_Inventory_Summary_CccInvSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    // The type is string.
    CccInvPidString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccInvSlotNumber interface{}

    // The type is string.
    CccInvSerialNumber interface{}

    // The type is string.
    CccInvHwVersion interface{}

    // The type is string.
    CccInvCardState interface{}
}

func (cccInvSummary *Controller_CccDriver_Inventory_Summary_CccInvSummary) GetEntityData() *types.CommonEntityData {
    cccInvSummary.EntityData.YFilter = cccInvSummary.YFilter
    cccInvSummary.EntityData.YangName = "ccc_inv_summary"
    cccInvSummary.EntityData.BundleName = "cisco_ios_xr"
    cccInvSummary.EntityData.ParentYangName = "summary"
    cccInvSummary.EntityData.SegmentPath = "ccc_inv_summary" + "[location='" + fmt.Sprintf("%v", cccInvSummary.Location) + "']"
    cccInvSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvSummary.EntityData.Children = make(map[string]types.YChild)
    cccInvSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvSummary.EntityData.Leafs["location"] = types.YLeaf{"Location", cccInvSummary.Location}
    cccInvSummary.EntityData.Leafs["ccc_inv_PID_string"] = types.YLeaf{"CccInvPidString", cccInvSummary.CccInvPidString}
    cccInvSummary.EntityData.Leafs["ccc_inv_slot_number"] = types.YLeaf{"CccInvSlotNumber", cccInvSummary.CccInvSlotNumber}
    cccInvSummary.EntityData.Leafs["ccc_inv_serial_number"] = types.YLeaf{"CccInvSerialNumber", cccInvSummary.CccInvSerialNumber}
    cccInvSummary.EntityData.Leafs["ccc_inv_hw_version"] = types.YLeaf{"CccInvHwVersion", cccInvSummary.CccInvHwVersion}
    cccInvSummary.EntityData.Leafs["ccc_inv_card_state"] = types.YLeaf{"CccInvCardState", cccInvSummary.CccInvCardState}
    return &(cccInvSummary.EntityData)
}

// Controller_CccDriver_Inventory_Version
type Controller_CccDriver_Inventory_Version struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Version_CccInvVersion.
    CccInvVersion []Controller_CccDriver_Inventory_Version_CccInvVersion
}

func (version *Controller_CccDriver_Inventory_Version) GetEntityData() *types.CommonEntityData {
    version.EntityData.YFilter = version.YFilter
    version.EntityData.YangName = "version"
    version.EntityData.BundleName = "cisco_ios_xr"
    version.EntityData.ParentYangName = "inventory"
    version.EntityData.SegmentPath = "version"
    version.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    version.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    version.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    version.EntityData.Children = make(map[string]types.YChild)
    version.EntityData.Children["ccc_inv_version"] = types.YChild{"CccInvVersion", nil}
    for i := range version.CccInvVersion {
        version.EntityData.Children[types.GetSegmentPath(&version.CccInvVersion[i])] = types.YChild{"CccInvVersion", &version.CccInvVersion[i]}
    }
    version.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(version.EntityData)
}

// Controller_CccDriver_Inventory_Version_CccInvVersion
type Controller_CccDriver_Inventory_Version_CccInvVersion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    // The type is string.
    CccInvPidString interface{}

    // The type is string.
    CccInvCccVersion interface{}

    // The type is string.
    CccInvFpgaVersion interface{}

    // The type is string.
    CccInvPonVersion interface{}

    // The type is string.
    CccInvSwitchVersion interface{}
}

func (cccInvVersion *Controller_CccDriver_Inventory_Version_CccInvVersion) GetEntityData() *types.CommonEntityData {
    cccInvVersion.EntityData.YFilter = cccInvVersion.YFilter
    cccInvVersion.EntityData.YangName = "ccc_inv_version"
    cccInvVersion.EntityData.BundleName = "cisco_ios_xr"
    cccInvVersion.EntityData.ParentYangName = "version"
    cccInvVersion.EntityData.SegmentPath = "ccc_inv_version" + "[location='" + fmt.Sprintf("%v", cccInvVersion.Location) + "']"
    cccInvVersion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvVersion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvVersion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvVersion.EntityData.Children = make(map[string]types.YChild)
    cccInvVersion.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvVersion.EntityData.Leafs["location"] = types.YLeaf{"Location", cccInvVersion.Location}
    cccInvVersion.EntityData.Leafs["ccc_inv_PID_string"] = types.YLeaf{"CccInvPidString", cccInvVersion.CccInvPidString}
    cccInvVersion.EntityData.Leafs["ccc_inv_ccc_version"] = types.YLeaf{"CccInvCccVersion", cccInvVersion.CccInvCccVersion}
    cccInvVersion.EntityData.Leafs["ccc_inv_FPGA_version"] = types.YLeaf{"CccInvFpgaVersion", cccInvVersion.CccInvFpgaVersion}
    cccInvVersion.EntityData.Leafs["ccc_inv_pon_version"] = types.YLeaf{"CccInvPonVersion", cccInvVersion.CccInvPonVersion}
    cccInvVersion.EntityData.Leafs["ccc_inv_switch_version"] = types.YLeaf{"CccInvSwitchVersion", cccInvVersion.CccInvSwitchVersion}
    return &(cccInvVersion.EntityData)
}

// Controller_CccDriver_Inventory_Status
type Controller_CccDriver_Inventory_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Status_CccInvStatus.
    CccInvStatus []Controller_CccDriver_Inventory_Status_CccInvStatus
}

func (status *Controller_CccDriver_Inventory_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "inventory"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = make(map[string]types.YChild)
    status.EntityData.Children["ccc_inv_status"] = types.YChild{"CccInvStatus", nil}
    for i := range status.CccInvStatus {
        status.EntityData.Children[types.GetSegmentPath(&status.CccInvStatus[i])] = types.YChild{"CccInvStatus", &status.CccInvStatus[i]}
    }
    status.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(status.EntityData)
}

// Controller_CccDriver_Inventory_Status_CccInvStatus
type Controller_CccDriver_Inventory_Status_CccInvStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    Location interface{}

    
    CccInvStatusList Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList
}

func (cccInvStatus *Controller_CccDriver_Inventory_Status_CccInvStatus) GetEntityData() *types.CommonEntityData {
    cccInvStatus.EntityData.YFilter = cccInvStatus.YFilter
    cccInvStatus.EntityData.YangName = "ccc_inv_status"
    cccInvStatus.EntityData.BundleName = "cisco_ios_xr"
    cccInvStatus.EntityData.ParentYangName = "status"
    cccInvStatus.EntityData.SegmentPath = "ccc_inv_status" + "[location='" + fmt.Sprintf("%v", cccInvStatus.Location) + "']"
    cccInvStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvStatus.EntityData.Children = make(map[string]types.YChild)
    cccInvStatus.EntityData.Children["ccc_inv_status_list"] = types.YChild{"CccInvStatusList", &cccInvStatus.CccInvStatusList}
    cccInvStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvStatus.EntityData.Leafs["location"] = types.YLeaf{"Location", cccInvStatus.Location}
    return &(cccInvStatus.EntityData)
}

// Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList
type Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CccInvStatusValues []interface{}
}

func (cccInvStatusList *Controller_CccDriver_Inventory_Status_CccInvStatus_CccInvStatusList) GetEntityData() *types.CommonEntityData {
    cccInvStatusList.EntityData.YFilter = cccInvStatusList.YFilter
    cccInvStatusList.EntityData.YangName = "ccc_inv_status_list"
    cccInvStatusList.EntityData.BundleName = "cisco_ios_xr"
    cccInvStatusList.EntityData.ParentYangName = "ccc_inv_status"
    cccInvStatusList.EntityData.SegmentPath = "ccc_inv_status_list"
    cccInvStatusList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvStatusList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvStatusList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvStatusList.EntityData.Children = make(map[string]types.YChild)
    cccInvStatusList.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvStatusList.EntityData.Leafs["ccc_inv_status_values"] = types.YLeaf{"CccInvStatusValues", cccInvStatusList.CccInvStatusValues}
    return &(cccInvStatusList.EntityData)
}

// Controller_CccDriver_Inventory_Detail
type Controller_CccDriver_Inventory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Inventory_Detail_CccInvDetail.
    CccInvDetail []Controller_CccDriver_Inventory_Detail_CccInvDetail
}

func (detail *Controller_CccDriver_Inventory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "inventory"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["ccc_inv_detail"] = types.YChild{"CccInvDetail", nil}
    for i := range detail.CccInvDetail {
        detail.EntityData.Children[types.GetSegmentPath(&detail.CccInvDetail[i])] = types.YChild{"CccInvDetail", &detail.CccInvDetail[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_Inventory_Detail_CccInvDetail
type Controller_CccDriver_Inventory_Detail_CccInvDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CccInvDetailList Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList
}

func (cccInvDetail *Controller_CccDriver_Inventory_Detail_CccInvDetail) GetEntityData() *types.CommonEntityData {
    cccInvDetail.EntityData.YFilter = cccInvDetail.YFilter
    cccInvDetail.EntityData.YangName = "ccc_inv_detail"
    cccInvDetail.EntityData.BundleName = "cisco_ios_xr"
    cccInvDetail.EntityData.ParentYangName = "detail"
    cccInvDetail.EntityData.SegmentPath = "ccc_inv_detail" + "[location='" + fmt.Sprintf("%v", cccInvDetail.Location) + "']"
    cccInvDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvDetail.EntityData.Children = make(map[string]types.YChild)
    cccInvDetail.EntityData.Children["ccc_inv_detail_list"] = types.YChild{"CccInvDetailList", &cccInvDetail.CccInvDetailList}
    cccInvDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvDetail.EntityData.Leafs["location"] = types.YLeaf{"Location", cccInvDetail.Location}
    return &(cccInvDetail.EntityData)
}

// Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList
type Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CccInvDetailValues []interface{}
}

func (cccInvDetailList *Controller_CccDriver_Inventory_Detail_CccInvDetail_CccInvDetailList) GetEntityData() *types.CommonEntityData {
    cccInvDetailList.EntityData.YFilter = cccInvDetailList.YFilter
    cccInvDetailList.EntityData.YangName = "ccc_inv_detail_list"
    cccInvDetailList.EntityData.BundleName = "cisco_ios_xr"
    cccInvDetailList.EntityData.ParentYangName = "ccc_inv_detail"
    cccInvDetailList.EntityData.SegmentPath = "ccc_inv_detail_list"
    cccInvDetailList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccInvDetailList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccInvDetailList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccInvDetailList.EntityData.Children = make(map[string]types.YChild)
    cccInvDetailList.EntityData.Leafs = make(map[string]types.YLeaf)
    cccInvDetailList.EntityData.Leafs["ccc_inv_detail_values"] = types.YLeaf{"CccInvDetailValues", cccInvDetailList.CccInvDetailValues}
    return &(cccInvDetailList.EntityData)
}

// Controller_CccDriver_Power
type Controller_CccDriver_Power struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    MasterAccess Controller_CccDriver_Power_MasterAccess
}

func (power *Controller_CccDriver_Power) GetEntityData() *types.CommonEntityData {
    power.EntityData.YFilter = power.YFilter
    power.EntityData.YangName = "power"
    power.EntityData.BundleName = "cisco_ios_xr"
    power.EntityData.ParentYangName = "ccc_driver"
    power.EntityData.SegmentPath = "power"
    power.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    power.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    power.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    power.EntityData.Children = make(map[string]types.YChild)
    power.EntityData.Children["master-access"] = types.YChild{"MasterAccess", &power.MasterAccess}
    power.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(power.EntityData)
}

// Controller_CccDriver_Power_MasterAccess
type Controller_CccDriver_Power_MasterAccess struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_CccDriver_Power_MasterAccess_Summary

    
    Detail Controller_CccDriver_Power_MasterAccess_Detail
}

func (masterAccess *Controller_CccDriver_Power_MasterAccess) GetEntityData() *types.CommonEntityData {
    masterAccess.EntityData.YFilter = masterAccess.YFilter
    masterAccess.EntityData.YangName = "master-access"
    masterAccess.EntityData.BundleName = "cisco_ios_xr"
    masterAccess.EntityData.ParentYangName = "power"
    masterAccess.EntityData.SegmentPath = "master-access"
    masterAccess.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    masterAccess.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    masterAccess.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    masterAccess.EntityData.Children = make(map[string]types.YChild)
    masterAccess.EntityData.Children["summary"] = types.YChild{"Summary", &masterAccess.Summary}
    masterAccess.EntityData.Children["detail"] = types.YChild{"Detail", &masterAccess.Detail}
    masterAccess.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(masterAccess.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Summary
type Controller_CccDriver_Power_MasterAccess_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary.
    PowerSummary []Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary
}

func (summary *Controller_CccDriver_Power_MasterAccess_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "master-access"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["power_summary"] = types.YChild{"PowerSummary", nil}
    for i := range summary.PowerSummary {
        summary.EntityData.Children[types.GetSegmentPath(&summary.PowerSummary[i])] = types.YChild{"PowerSummary", &summary.PowerSummary[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary
type Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string. This attribute is mandatory.
    CccPowerLocation interface{}

    // The type is string.
    CardType interface{}

    // The type is string.
    PowerState interface{}
}

func (powerSummary *Controller_CccDriver_Power_MasterAccess_Summary_PowerSummary) GetEntityData() *types.CommonEntityData {
    powerSummary.EntityData.YFilter = powerSummary.YFilter
    powerSummary.EntityData.YangName = "power_summary"
    powerSummary.EntityData.BundleName = "cisco_ios_xr"
    powerSummary.EntityData.ParentYangName = "summary"
    powerSummary.EntityData.SegmentPath = "power_summary" + "[ccc_power_location='" + fmt.Sprintf("%v", powerSummary.CccPowerLocation) + "']"
    powerSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    powerSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    powerSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    powerSummary.EntityData.Children = make(map[string]types.YChild)
    powerSummary.EntityData.Leafs = make(map[string]types.YLeaf)
    powerSummary.EntityData.Leafs["ccc_power_location"] = types.YLeaf{"CccPowerLocation", powerSummary.CccPowerLocation}
    powerSummary.EntityData.Leafs["card_type"] = types.YLeaf{"CardType", powerSummary.CardType}
    powerSummary.EntityData.Leafs["power_state"] = types.YLeaf{"PowerState", powerSummary.PowerState}
    return &(powerSummary.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail
type Controller_CccDriver_Power_MasterAccess_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Power_MasterAccess_Detail_Location.
    Location []Controller_CccDriver_Power_MasterAccess_Detail_Location
}

func (detail *Controller_CccDriver_Power_MasterAccess_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "master-access"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail_Location
type Controller_CccDriver_Power_MasterAccess_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    PowerDetails Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails
}

func (location *Controller_CccDriver_Power_MasterAccess_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["power_details"] = types.YChild{"PowerDetails", &location.PowerDetails}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails
type Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    PowerDetailsValues []interface{}
}

func (powerDetails *Controller_CccDriver_Power_MasterAccess_Detail_Location_PowerDetails) GetEntityData() *types.CommonEntityData {
    powerDetails.EntityData.YFilter = powerDetails.YFilter
    powerDetails.EntityData.YangName = "power_details"
    powerDetails.EntityData.BundleName = "cisco_ios_xr"
    powerDetails.EntityData.ParentYangName = "location"
    powerDetails.EntityData.SegmentPath = "power_details"
    powerDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    powerDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    powerDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    powerDetails.EntityData.Children = make(map[string]types.YChild)
    powerDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    powerDetails.EntityData.Leafs["power_details_values"] = types.YLeaf{"PowerDetailsValues", powerDetails.PowerDetailsValues}
    return &(powerDetails.EntityData)
}

// Controller_CccDriver_ResetHistory
type Controller_CccDriver_ResetHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Onchip Controller_CccDriver_ResetHistory_Onchip

    
    Onboard Controller_CccDriver_ResetHistory_Onboard
}

func (resetHistory *Controller_CccDriver_ResetHistory) GetEntityData() *types.CommonEntityData {
    resetHistory.EntityData.YFilter = resetHistory.YFilter
    resetHistory.EntityData.YangName = "reset-history"
    resetHistory.EntityData.BundleName = "cisco_ios_xr"
    resetHistory.EntityData.ParentYangName = "ccc_driver"
    resetHistory.EntityData.SegmentPath = "reset-history"
    resetHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    resetHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    resetHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    resetHistory.EntityData.Children = make(map[string]types.YChild)
    resetHistory.EntityData.Children["onchip"] = types.YChild{"Onchip", &resetHistory.Onchip}
    resetHistory.EntityData.Children["onboard"] = types.YChild{"Onboard", &resetHistory.Onboard}
    resetHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(resetHistory.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip
type Controller_CccDriver_ResetHistory_Onchip struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_ResetHistory_Onchip_Location.
    Location []Controller_CccDriver_ResetHistory_Onchip_Location
}

func (onchip *Controller_CccDriver_ResetHistory_Onchip) GetEntityData() *types.CommonEntityData {
    onchip.EntityData.YFilter = onchip.YFilter
    onchip.EntityData.YangName = "onchip"
    onchip.EntityData.BundleName = "cisco_ios_xr"
    onchip.EntityData.ParentYangName = "reset-history"
    onchip.EntityData.SegmentPath = "onchip"
    onchip.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    onchip.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    onchip.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    onchip.EntityData.Children = make(map[string]types.YChild)
    onchip.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range onchip.Location {
        onchip.EntityData.Children[types.GetSegmentPath(&onchip.Location[i])] = types.YChild{"Location", &onchip.Location[i]}
    }
    onchip.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(onchip.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip_Location
type Controller_CccDriver_ResetHistory_Onchip_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Loc interface{}

    // The type is string.
    CccResetTimeofday interface{}

    // The type is string.
    CccResetUptime interface{}

    // The type is interface{} with range: 0..4294967295.
    CccHwResetCount interface{}

    // The type is slice of
    // Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry.
    CccResetEntry []Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry
}

func (location *Controller_CccDriver_ResetHistory_Onchip_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "onchip"
    location.EntityData.SegmentPath = "location" + "[loc='" + fmt.Sprintf("%v", location.Loc) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["ccc_reset_entry"] = types.YChild{"CccResetEntry", nil}
    for i := range location.CccResetEntry {
        location.EntityData.Children[types.GetSegmentPath(&location.CccResetEntry[i])] = types.YChild{"CccResetEntry", &location.CccResetEntry[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc"] = types.YLeaf{"Loc", location.Loc}
    location.EntityData.Leafs["ccc_reset_timeofday"] = types.YLeaf{"CccResetTimeofday", location.CccResetTimeofday}
    location.EntityData.Leafs["ccc_reset_uptime"] = types.YLeaf{"CccResetUptime", location.CccResetUptime}
    location.EntityData.Leafs["ccc_hw_reset_count"] = types.YLeaf{"CccHwResetCount", location.CccHwResetCount}
    return &(location.EntityData)
}

// Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry
type Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CccResetEntry interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPos interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetIdx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord0 interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPidx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSor interface{}

    // The type is string.
    CccResetSorString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetCmd interface{}

    // The type is string.
    CccResetCmdString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord1 interface{}

    // The type is string.
    CccResetDate interface{}
}

func (cccResetEntry *Controller_CccDriver_ResetHistory_Onchip_Location_CccResetEntry) GetEntityData() *types.CommonEntityData {
    cccResetEntry.EntityData.YFilter = cccResetEntry.YFilter
    cccResetEntry.EntityData.YangName = "ccc_reset_entry"
    cccResetEntry.EntityData.BundleName = "cisco_ios_xr"
    cccResetEntry.EntityData.ParentYangName = "location"
    cccResetEntry.EntityData.SegmentPath = "ccc_reset_entry" + "[ccc_reset_entry='" + fmt.Sprintf("%v", cccResetEntry.CccResetEntry) + "']"
    cccResetEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccResetEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccResetEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccResetEntry.EntityData.Children = make(map[string]types.YChild)
    cccResetEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    cccResetEntry.EntityData.Leafs["ccc_reset_entry"] = types.YLeaf{"CccResetEntry", cccResetEntry.CccResetEntry}
    cccResetEntry.EntityData.Leafs["ccc_reset_pos"] = types.YLeaf{"CccResetPos", cccResetEntry.CccResetPos}
    cccResetEntry.EntityData.Leafs["ccc_reset_idx"] = types.YLeaf{"CccResetIdx", cccResetEntry.CccResetIdx}
    cccResetEntry.EntityData.Leafs["ccc_reset_word0"] = types.YLeaf{"CccResetWord0", cccResetEntry.CccResetWord0}
    cccResetEntry.EntityData.Leafs["ccc_reset_pidx"] = types.YLeaf{"CccResetPidx", cccResetEntry.CccResetPidx}
    cccResetEntry.EntityData.Leafs["ccc_reset_sor"] = types.YLeaf{"CccResetSor", cccResetEntry.CccResetSor}
    cccResetEntry.EntityData.Leafs["ccc_reset_sor_string"] = types.YLeaf{"CccResetSorString", cccResetEntry.CccResetSorString}
    cccResetEntry.EntityData.Leafs["ccc_reset_cmd"] = types.YLeaf{"CccResetCmd", cccResetEntry.CccResetCmd}
    cccResetEntry.EntityData.Leafs["ccc_reset_cmd_string"] = types.YLeaf{"CccResetCmdString", cccResetEntry.CccResetCmdString}
    cccResetEntry.EntityData.Leafs["ccc_reset_hrm"] = types.YLeaf{"CccResetHrm", cccResetEntry.CccResetHrm}
    cccResetEntry.EntityData.Leafs["ccc_reset_srm"] = types.YLeaf{"CccResetSrm", cccResetEntry.CccResetSrm}
    cccResetEntry.EntityData.Leafs["ccc_reset_hr"] = types.YLeaf{"CccResetHr", cccResetEntry.CccResetHr}
    cccResetEntry.EntityData.Leafs["ccc_reset_sr"] = types.YLeaf{"CccResetSr", cccResetEntry.CccResetSr}
    cccResetEntry.EntityData.Leafs["ccc_reset_word1"] = types.YLeaf{"CccResetWord1", cccResetEntry.CccResetWord1}
    cccResetEntry.EntityData.Leafs["ccc_reset_date"] = types.YLeaf{"CccResetDate", cccResetEntry.CccResetDate}
    return &(cccResetEntry.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard
type Controller_CccDriver_ResetHistory_Onboard struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_ResetHistory_Onboard_Location.
    Location []Controller_CccDriver_ResetHistory_Onboard_Location
}

func (onboard *Controller_CccDriver_ResetHistory_Onboard) GetEntityData() *types.CommonEntityData {
    onboard.EntityData.YFilter = onboard.YFilter
    onboard.EntityData.YangName = "onboard"
    onboard.EntityData.BundleName = "cisco_ios_xr"
    onboard.EntityData.ParentYangName = "reset-history"
    onboard.EntityData.SegmentPath = "onboard"
    onboard.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    onboard.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    onboard.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    onboard.EntityData.Children = make(map[string]types.YChild)
    onboard.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range onboard.Location {
        onboard.EntityData.Children[types.GetSegmentPath(&onboard.Location[i])] = types.YChild{"Location", &onboard.Location[i]}
    }
    onboard.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(onboard.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard_Location
type Controller_CccDriver_ResetHistory_Onboard_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Loc interface{}

    // The type is string.
    CccResetScratchSig interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetScratchVersion interface{}

    // The type is string.
    CccResetHistorySig interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHistoryCount interface{}

    // The type is slice of
    // Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry.
    CccResetOnboardEntry []Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry
}

func (location *Controller_CccDriver_ResetHistory_Onboard_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "onboard"
    location.EntityData.SegmentPath = "location" + "[loc='" + fmt.Sprintf("%v", location.Loc) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["ccc_reset_onboard_entry"] = types.YChild{"CccResetOnboardEntry", nil}
    for i := range location.CccResetOnboardEntry {
        location.EntityData.Children[types.GetSegmentPath(&location.CccResetOnboardEntry[i])] = types.YChild{"CccResetOnboardEntry", &location.CccResetOnboardEntry[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["loc"] = types.YLeaf{"Loc", location.Loc}
    location.EntityData.Leafs["ccc_reset_scratch_sig"] = types.YLeaf{"CccResetScratchSig", location.CccResetScratchSig}
    location.EntityData.Leafs["ccc_reset_scratch_version"] = types.YLeaf{"CccResetScratchVersion", location.CccResetScratchVersion}
    location.EntityData.Leafs["ccc_reset_history_sig"] = types.YLeaf{"CccResetHistorySig", location.CccResetHistorySig}
    location.EntityData.Leafs["ccc_reset_history_count"] = types.YLeaf{"CccResetHistoryCount", location.CccResetHistoryCount}
    return &(location.EntityData)
}

// Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry
type Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    CccResetOnboardEntry interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPos interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetIdx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord0 interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetPidx interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSor interface{}

    // The type is string.
    CccResetSorString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetCmd interface{}

    // The type is string.
    CccResetCmdString interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSrm interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetHr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetSr interface{}

    // The type is interface{} with range: 0..4294967295.
    CccResetWord1 interface{}

    // The type is string.
    CccResetDate interface{}
}

func (cccResetOnboardEntry *Controller_CccDriver_ResetHistory_Onboard_Location_CccResetOnboardEntry) GetEntityData() *types.CommonEntityData {
    cccResetOnboardEntry.EntityData.YFilter = cccResetOnboardEntry.YFilter
    cccResetOnboardEntry.EntityData.YangName = "ccc_reset_onboard_entry"
    cccResetOnboardEntry.EntityData.BundleName = "cisco_ios_xr"
    cccResetOnboardEntry.EntityData.ParentYangName = "location"
    cccResetOnboardEntry.EntityData.SegmentPath = "ccc_reset_onboard_entry" + "[ccc_reset_onboard_entry='" + fmt.Sprintf("%v", cccResetOnboardEntry.CccResetOnboardEntry) + "']"
    cccResetOnboardEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccResetOnboardEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccResetOnboardEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccResetOnboardEntry.EntityData.Children = make(map[string]types.YChild)
    cccResetOnboardEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_onboard_entry"] = types.YLeaf{"CccResetOnboardEntry", cccResetOnboardEntry.CccResetOnboardEntry}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_pos"] = types.YLeaf{"CccResetPos", cccResetOnboardEntry.CccResetPos}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_idx"] = types.YLeaf{"CccResetIdx", cccResetOnboardEntry.CccResetIdx}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_word0"] = types.YLeaf{"CccResetWord0", cccResetOnboardEntry.CccResetWord0}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_pidx"] = types.YLeaf{"CccResetPidx", cccResetOnboardEntry.CccResetPidx}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_sor"] = types.YLeaf{"CccResetSor", cccResetOnboardEntry.CccResetSor}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_sor_string"] = types.YLeaf{"CccResetSorString", cccResetOnboardEntry.CccResetSorString}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_cmd"] = types.YLeaf{"CccResetCmd", cccResetOnboardEntry.CccResetCmd}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_cmd_string"] = types.YLeaf{"CccResetCmdString", cccResetOnboardEntry.CccResetCmdString}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_hrm"] = types.YLeaf{"CccResetHrm", cccResetOnboardEntry.CccResetHrm}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_srm"] = types.YLeaf{"CccResetSrm", cccResetOnboardEntry.CccResetSrm}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_hr"] = types.YLeaf{"CccResetHr", cccResetOnboardEntry.CccResetHr}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_sr"] = types.YLeaf{"CccResetSr", cccResetOnboardEntry.CccResetSr}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_word1"] = types.YLeaf{"CccResetWord1", cccResetOnboardEntry.CccResetWord1}
    cccResetOnboardEntry.EntityData.Leafs["ccc_reset_date"] = types.YLeaf{"CccResetDate", cccResetOnboardEntry.CccResetDate}
    return &(cccResetOnboardEntry.EntityData)
}

// Controller_CccDriver_Register
type Controller_CccDriver_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Register_RegisterLocation.
    RegisterLocation []Controller_CccDriver_Register_RegisterLocation
}

func (register *Controller_CccDriver_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "ccc_driver"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = make(map[string]types.YChild)
    register.EntityData.Children["register_location"] = types.YChild{"RegisterLocation", nil}
    for i := range register.RegisterLocation {
        register.EntityData.Children[types.GetSegmentPath(&register.RegisterLocation[i])] = types.YChild{"RegisterLocation", &register.RegisterLocation[i]}
    }
    register.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(register.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation
type Controller_CccDriver_Register_RegisterLocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    RegisterLocation interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber.
    CccBlockNumber []Controller_CccDriver_Register_RegisterLocation_CccBlockNumber

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccOffset.
    CccOffset []Controller_CccDriver_Register_RegisterLocation_CccOffset

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress.
    CccAddress []Controller_CccDriver_Register_RegisterLocation_CccAddress
}

func (registerLocation *Controller_CccDriver_Register_RegisterLocation) GetEntityData() *types.CommonEntityData {
    registerLocation.EntityData.YFilter = registerLocation.YFilter
    registerLocation.EntityData.YangName = "register_location"
    registerLocation.EntityData.BundleName = "cisco_ios_xr"
    registerLocation.EntityData.ParentYangName = "register"
    registerLocation.EntityData.SegmentPath = "register_location" + "[register_location='" + fmt.Sprintf("%v", registerLocation.RegisterLocation) + "']"
    registerLocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    registerLocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    registerLocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    registerLocation.EntityData.Children = make(map[string]types.YChild)
    registerLocation.EntityData.Children["ccc_block_number"] = types.YChild{"CccBlockNumber", nil}
    for i := range registerLocation.CccBlockNumber {
        registerLocation.EntityData.Children[types.GetSegmentPath(&registerLocation.CccBlockNumber[i])] = types.YChild{"CccBlockNumber", &registerLocation.CccBlockNumber[i]}
    }
    registerLocation.EntityData.Children["ccc_offset"] = types.YChild{"CccOffset", nil}
    for i := range registerLocation.CccOffset {
        registerLocation.EntityData.Children[types.GetSegmentPath(&registerLocation.CccOffset[i])] = types.YChild{"CccOffset", &registerLocation.CccOffset[i]}
    }
    registerLocation.EntityData.Children["ccc_address"] = types.YChild{"CccAddress", nil}
    for i := range registerLocation.CccAddress {
        registerLocation.EntityData.Children[types.GetSegmentPath(&registerLocation.CccAddress[i])] = types.YChild{"CccAddress", &registerLocation.CccAddress[i]}
    }
    registerLocation.EntityData.Leafs = make(map[string]types.YLeaf)
    registerLocation.EntityData.Leafs["register_location"] = types.YLeaf{"RegisterLocation", registerLocation.RegisterLocation}
    return &(registerLocation.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    CccBlockNum interface{}

    // The type is string.
    BlockLocation interface{}

    // The type is string.
    CccBlockNm interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber.
    CccRegisterNumber []Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber
}

func (cccBlockNumber *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber) GetEntityData() *types.CommonEntityData {
    cccBlockNumber.EntityData.YFilter = cccBlockNumber.YFilter
    cccBlockNumber.EntityData.YangName = "ccc_block_number"
    cccBlockNumber.EntityData.BundleName = "cisco_ios_xr"
    cccBlockNumber.EntityData.ParentYangName = "register_location"
    cccBlockNumber.EntityData.SegmentPath = "ccc_block_number" + "[ccc_block_num='" + fmt.Sprintf("%v", cccBlockNumber.CccBlockNum) + "']"
    cccBlockNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccBlockNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccBlockNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccBlockNumber.EntityData.Children = make(map[string]types.YChild)
    cccBlockNumber.EntityData.Children["ccc_register_number"] = types.YChild{"CccRegisterNumber", nil}
    for i := range cccBlockNumber.CccRegisterNumber {
        cccBlockNumber.EntityData.Children[types.GetSegmentPath(&cccBlockNumber.CccRegisterNumber[i])] = types.YChild{"CccRegisterNumber", &cccBlockNumber.CccRegisterNumber[i]}
    }
    cccBlockNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    cccBlockNumber.EntityData.Leafs["ccc_block_num"] = types.YLeaf{"CccBlockNum", cccBlockNumber.CccBlockNum}
    cccBlockNumber.EntityData.Leafs["block_location"] = types.YLeaf{"BlockLocation", cccBlockNumber.BlockLocation}
    cccBlockNumber.EntityData.Leafs["ccc_block_nm"] = types.YLeaf{"CccBlockNm", cccBlockNumber.CccBlockNm}
    return &(cccBlockNumber.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // The type is string.
    CccRegisterName interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData.
    CccData []Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData
}

func (cccRegisterNumber *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber) GetEntityData() *types.CommonEntityData {
    cccRegisterNumber.EntityData.YFilter = cccRegisterNumber.YFilter
    cccRegisterNumber.EntityData.YangName = "ccc_register_number"
    cccRegisterNumber.EntityData.BundleName = "cisco_ios_xr"
    cccRegisterNumber.EntityData.ParentYangName = "ccc_block_number"
    cccRegisterNumber.EntityData.SegmentPath = "ccc_register_number" + "[index='" + fmt.Sprintf("%v", cccRegisterNumber.Index) + "']"
    cccRegisterNumber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegisterNumber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegisterNumber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegisterNumber.EntityData.Children = make(map[string]types.YChild)
    cccRegisterNumber.EntityData.Children["ccc_data"] = types.YChild{"CccData", nil}
    for i := range cccRegisterNumber.CccData {
        cccRegisterNumber.EntityData.Children[types.GetSegmentPath(&cccRegisterNumber.CccData[i])] = types.YChild{"CccData", &cccRegisterNumber.CccData[i]}
    }
    cccRegisterNumber.EntityData.Leafs = make(map[string]types.YLeaf)
    cccRegisterNumber.EntityData.Leafs["index"] = types.YLeaf{"Index", cccRegisterNumber.Index}
    cccRegisterNumber.EntityData.Leafs["ccc_register_name"] = types.YLeaf{"CccRegisterName", cccRegisterNumber.CccRegisterName}
    return &(cccRegisterNumber.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData
type Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    Name interface{}

    // The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // The type is interface{} with range: 0..4294967295.
    Value interface{}
}

func (cccData *Controller_CccDriver_Register_RegisterLocation_CccBlockNumber_CccRegisterNumber_CccData) GetEntityData() *types.CommonEntityData {
    cccData.EntityData.YFilter = cccData.YFilter
    cccData.EntityData.YangName = "ccc_data"
    cccData.EntityData.BundleName = "cisco_ios_xr"
    cccData.EntityData.ParentYangName = "ccc_register_number"
    cccData.EntityData.SegmentPath = "ccc_data"
    cccData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccData.EntityData.Children = make(map[string]types.YChild)
    cccData.EntityData.Leafs = make(map[string]types.YLeaf)
    cccData.EntityData.Leafs["name"] = types.YLeaf{"Name", cccData.Name}
    cccData.EntityData.Leafs["offset"] = types.YLeaf{"Offset", cccData.Offset}
    cccData.EntityData.Leafs["value"] = types.YLeaf{"Value", cccData.Value}
    return &(cccData.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccOffset
type Controller_CccDriver_Register_RegisterLocation_CccOffset struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    HexOffset interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData.
    CccRegOffsetData []Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData
}

func (cccOffset *Controller_CccDriver_Register_RegisterLocation_CccOffset) GetEntityData() *types.CommonEntityData {
    cccOffset.EntityData.YFilter = cccOffset.YFilter
    cccOffset.EntityData.YangName = "ccc_offset"
    cccOffset.EntityData.BundleName = "cisco_ios_xr"
    cccOffset.EntityData.ParentYangName = "register_location"
    cccOffset.EntityData.SegmentPath = "ccc_offset" + "[hex_offset='" + fmt.Sprintf("%v", cccOffset.HexOffset) + "']"
    cccOffset.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccOffset.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccOffset.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccOffset.EntityData.Children = make(map[string]types.YChild)
    cccOffset.EntityData.Children["ccc_reg_offset_data"] = types.YChild{"CccRegOffsetData", nil}
    for i := range cccOffset.CccRegOffsetData {
        cccOffset.EntityData.Children[types.GetSegmentPath(&cccOffset.CccRegOffsetData[i])] = types.YChild{"CccRegOffsetData", &cccOffset.CccRegOffsetData[i]}
    }
    cccOffset.EntityData.Leafs = make(map[string]types.YLeaf)
    cccOffset.EntityData.Leafs["hex_offset"] = types.YLeaf{"HexOffset", cccOffset.HexOffset}
    return &(cccOffset.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData
type Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    CccRegOffAddr interface{}

    // The type is string.
    RegOffValue interface{}
}

func (cccRegOffsetData *Controller_CccDriver_Register_RegisterLocation_CccOffset_CccRegOffsetData) GetEntityData() *types.CommonEntityData {
    cccRegOffsetData.EntityData.YFilter = cccRegOffsetData.YFilter
    cccRegOffsetData.EntityData.YangName = "ccc_reg_offset_data"
    cccRegOffsetData.EntityData.BundleName = "cisco_ios_xr"
    cccRegOffsetData.EntityData.ParentYangName = "ccc_offset"
    cccRegOffsetData.EntityData.SegmentPath = "ccc_reg_offset_data"
    cccRegOffsetData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegOffsetData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegOffsetData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegOffsetData.EntityData.Children = make(map[string]types.YChild)
    cccRegOffsetData.EntityData.Leafs = make(map[string]types.YLeaf)
    cccRegOffsetData.EntityData.Leafs["ccc_reg_off_addr"] = types.YLeaf{"CccRegOffAddr", cccRegOffsetData.CccRegOffAddr}
    cccRegOffsetData.EntityData.Leafs["reg_off_value"] = types.YLeaf{"RegOffValue", cccRegOffsetData.RegOffValue}
    return &(cccRegOffsetData.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress
type Controller_CccDriver_Register_RegisterLocation_CccAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    StartHexAddr interface{}

    // This attribute is a key. The type is string.
    EndHexAddr interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList.
    CccRegRangeAddrList []Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList
}

func (cccAddress *Controller_CccDriver_Register_RegisterLocation_CccAddress) GetEntityData() *types.CommonEntityData {
    cccAddress.EntityData.YFilter = cccAddress.YFilter
    cccAddress.EntityData.YangName = "ccc_address"
    cccAddress.EntityData.BundleName = "cisco_ios_xr"
    cccAddress.EntityData.ParentYangName = "register_location"
    cccAddress.EntityData.SegmentPath = "ccc_address" + "[start_hex_addr='" + fmt.Sprintf("%v", cccAddress.StartHexAddr) + "']" + "[end_hex_addr='" + fmt.Sprintf("%v", cccAddress.EndHexAddr) + "']"
    cccAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccAddress.EntityData.Children = make(map[string]types.YChild)
    cccAddress.EntityData.Children["ccc_reg_range_addr_list"] = types.YChild{"CccRegRangeAddrList", nil}
    for i := range cccAddress.CccRegRangeAddrList {
        cccAddress.EntityData.Children[types.GetSegmentPath(&cccAddress.CccRegRangeAddrList[i])] = types.YChild{"CccRegRangeAddrList", &cccAddress.CccRegRangeAddrList[i]}
    }
    cccAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    cccAddress.EntityData.Leafs["start_hex_addr"] = types.YLeaf{"StartHexAddr", cccAddress.StartHexAddr}
    cccAddress.EntityData.Leafs["end_hex_addr"] = types.YLeaf{"EndHexAddr", cccAddress.EndHexAddr}
    return &(cccAddress.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList
type Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    CccRegRangeAddr interface{}

    // The type is slice of
    // Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData.
    CccRegData []Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData
}

func (cccRegRangeAddrList *Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList) GetEntityData() *types.CommonEntityData {
    cccRegRangeAddrList.EntityData.YFilter = cccRegRangeAddrList.YFilter
    cccRegRangeAddrList.EntityData.YangName = "ccc_reg_range_addr_list"
    cccRegRangeAddrList.EntityData.BundleName = "cisco_ios_xr"
    cccRegRangeAddrList.EntityData.ParentYangName = "ccc_address"
    cccRegRangeAddrList.EntityData.SegmentPath = "ccc_reg_range_addr_list" + "[ccc_reg_range_addr='" + fmt.Sprintf("%v", cccRegRangeAddrList.CccRegRangeAddr) + "']"
    cccRegRangeAddrList.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegRangeAddrList.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegRangeAddrList.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegRangeAddrList.EntityData.Children = make(map[string]types.YChild)
    cccRegRangeAddrList.EntityData.Children["ccc_reg_data"] = types.YChild{"CccRegData", nil}
    for i := range cccRegRangeAddrList.CccRegData {
        cccRegRangeAddrList.EntityData.Children[types.GetSegmentPath(&cccRegRangeAddrList.CccRegData[i])] = types.YChild{"CccRegData", &cccRegRangeAddrList.CccRegData[i]}
    }
    cccRegRangeAddrList.EntityData.Leafs = make(map[string]types.YLeaf)
    cccRegRangeAddrList.EntityData.Leafs["ccc_reg_range_addr"] = types.YLeaf{"CccRegRangeAddr", cccRegRangeAddrList.CccRegRangeAddr}
    return &(cccRegRangeAddrList.EntityData)
}

// Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData
type Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    CccRegAddr interface{}

    // The type is string.
    RegValue interface{}
}

func (cccRegData *Controller_CccDriver_Register_RegisterLocation_CccAddress_CccRegRangeAddrList_CccRegData) GetEntityData() *types.CommonEntityData {
    cccRegData.EntityData.YFilter = cccRegData.YFilter
    cccRegData.EntityData.YangName = "ccc_reg_data"
    cccRegData.EntityData.BundleName = "cisco_ios_xr"
    cccRegData.EntityData.ParentYangName = "ccc_reg_range_addr_list"
    cccRegData.EntityData.SegmentPath = "ccc_reg_data"
    cccRegData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccRegData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccRegData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccRegData.EntityData.Children = make(map[string]types.YChild)
    cccRegData.EntityData.Leafs = make(map[string]types.YLeaf)
    cccRegData.EntityData.Leafs["ccc_reg_addr"] = types.YLeaf{"CccRegAddr", cccRegData.CccRegAddr}
    cccRegData.EntityData.Leafs["reg_value"] = types.YLeaf{"RegValue", cccRegData.RegValue}
    return &(cccRegData.EntityData)
}

// Controller_CccDriver_Ejector
type Controller_CccDriver_Ejector struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Status Controller_CccDriver_Ejector_Status
}

func (ejector *Controller_CccDriver_Ejector) GetEntityData() *types.CommonEntityData {
    ejector.EntityData.YFilter = ejector.YFilter
    ejector.EntityData.YangName = "ejector"
    ejector.EntityData.BundleName = "cisco_ios_xr"
    ejector.EntityData.ParentYangName = "ccc_driver"
    ejector.EntityData.SegmentPath = "ejector"
    ejector.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ejector.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ejector.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ejector.EntityData.Children = make(map[string]types.YChild)
    ejector.EntityData.Children["status"] = types.YChild{"Status", &ejector.Status}
    ejector.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ejector.EntityData)
}

// Controller_CccDriver_Ejector_Status
type Controller_CccDriver_Ejector_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Ejector_Status_CccEjectorStatus.
    CccEjectorStatus []Controller_CccDriver_Ejector_Status_CccEjectorStatus
}

func (status *Controller_CccDriver_Ejector_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "ejector"
    status.EntityData.SegmentPath = "status"
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = make(map[string]types.YChild)
    status.EntityData.Children["ccc_ejector_status"] = types.YChild{"CccEjectorStatus", nil}
    for i := range status.CccEjectorStatus {
        status.EntityData.Children[types.GetSegmentPath(&status.CccEjectorStatus[i])] = types.YChild{"CccEjectorStatus", &status.CccEjectorStatus[i]}
    }
    status.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(status.EntityData)
}

// Controller_CccDriver_Ejector_Status_CccEjectorStatus
type Controller_CccDriver_Ejector_Status_CccEjectorStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    // The type is bool. The default value is false.
    CccIsFcCardType interface{}

    // The type is bool. The default value is false.
    CccIsLcCardType interface{}

    // The type is bool. The default value is false.
    CccIsRpScCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcCardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcPlatform interface{}

    // The type is string.
    CccEjcBoardType interface{}

    // The type is interface{} with range: 0..4294967295.
    CccEjcCardSlot interface{}

    // The type is string.
    CccEjcCardVersion interface{}

    // The type is string.
    CccEjcBoardVersion interface{}

    // The type is string.
    CccEjcHwVersion interface{}

    // The type is string.
    CccEjcCoreVersion interface{}

    // The type is string.
    CccEjcPonVersion interface{}

    // The type is string.
    CccEjcRpSupported interface{}

    // The type is string.
    CccEjcEnable interface{}

    // The type is string.
    CccEjcStatus interface{}

    // The type is string.
    CccEjcRpPexCsr interface{}

    // The type is string.
    CccEjcGpLive interface{}

    // The type is string.
    CccEjcGpStatus interface{}

    // The type is string.
    CccEjcFcPexCsr interface{}

    // The type is string.
    CccEjcFcEjectorSupport interface{}

    // The type is string.
    CccEjcLcPexCsr interface{}

    // The type is string.
    CccEjcLcEjectorSupport interface{}
}

func (cccEjectorStatus *Controller_CccDriver_Ejector_Status_CccEjectorStatus) GetEntityData() *types.CommonEntityData {
    cccEjectorStatus.EntityData.YFilter = cccEjectorStatus.YFilter
    cccEjectorStatus.EntityData.YangName = "ccc_ejector_status"
    cccEjectorStatus.EntityData.BundleName = "cisco_ios_xr"
    cccEjectorStatus.EntityData.ParentYangName = "status"
    cccEjectorStatus.EntityData.SegmentPath = "ccc_ejector_status" + "[location='" + fmt.Sprintf("%v", cccEjectorStatus.Location) + "']"
    cccEjectorStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cccEjectorStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cccEjectorStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cccEjectorStatus.EntityData.Children = make(map[string]types.YChild)
    cccEjectorStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    cccEjectorStatus.EntityData.Leafs["location"] = types.YLeaf{"Location", cccEjectorStatus.Location}
    cccEjectorStatus.EntityData.Leafs["ccc_is_fc_card_type"] = types.YLeaf{"CccIsFcCardType", cccEjectorStatus.CccIsFcCardType}
    cccEjectorStatus.EntityData.Leafs["ccc_is_lc_card_type"] = types.YLeaf{"CccIsLcCardType", cccEjectorStatus.CccIsLcCardType}
    cccEjectorStatus.EntityData.Leafs["ccc_is_rp_sc_card_type"] = types.YLeaf{"CccIsRpScCardType", cccEjectorStatus.CccIsRpScCardType}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_card_type"] = types.YLeaf{"CccEjcCardType", cccEjectorStatus.CccEjcCardType}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_platform"] = types.YLeaf{"CccEjcPlatform", cccEjectorStatus.CccEjcPlatform}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_board_type"] = types.YLeaf{"CccEjcBoardType", cccEjectorStatus.CccEjcBoardType}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_card_slot"] = types.YLeaf{"CccEjcCardSlot", cccEjectorStatus.CccEjcCardSlot}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_card_version"] = types.YLeaf{"CccEjcCardVersion", cccEjectorStatus.CccEjcCardVersion}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_board_version"] = types.YLeaf{"CccEjcBoardVersion", cccEjectorStatus.CccEjcBoardVersion}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_hw_version"] = types.YLeaf{"CccEjcHwVersion", cccEjectorStatus.CccEjcHwVersion}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_core_version"] = types.YLeaf{"CccEjcCoreVersion", cccEjectorStatus.CccEjcCoreVersion}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_pon_version"] = types.YLeaf{"CccEjcPonVersion", cccEjectorStatus.CccEjcPonVersion}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_rp_supported"] = types.YLeaf{"CccEjcRpSupported", cccEjectorStatus.CccEjcRpSupported}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_enable"] = types.YLeaf{"CccEjcEnable", cccEjectorStatus.CccEjcEnable}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_status"] = types.YLeaf{"CccEjcStatus", cccEjectorStatus.CccEjcStatus}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_rp_pex_csr"] = types.YLeaf{"CccEjcRpPexCsr", cccEjectorStatus.CccEjcRpPexCsr}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_gp_live"] = types.YLeaf{"CccEjcGpLive", cccEjectorStatus.CccEjcGpLive}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_gp_status"] = types.YLeaf{"CccEjcGpStatus", cccEjectorStatus.CccEjcGpStatus}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_fc_pex_csr"] = types.YLeaf{"CccEjcFcPexCsr", cccEjectorStatus.CccEjcFcPexCsr}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_fc_ejector_support"] = types.YLeaf{"CccEjcFcEjectorSupport", cccEjectorStatus.CccEjcFcEjectorSupport}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_lc_pex_csr"] = types.YLeaf{"CccEjcLcPexCsr", cccEjectorStatus.CccEjcLcPexCsr}
    cccEjectorStatus.EntityData.Leafs["ccc_ejc_lc_ejector_support"] = types.YLeaf{"CccEjcLcEjectorSupport", cccEjectorStatus.CccEjcLcEjectorSupport}
    return &(cccEjectorStatus.EntityData)
}

// Controller_CccDriver_I2CDev
type Controller_CccDriver_I2CDev struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CpuComplex Controller_CccDriver_I2CDev_CpuComplex

    
    Ioexpander Controller_CccDriver_I2CDev_Ioexpander
}

func (i2CDev *Controller_CccDriver_I2CDev) GetEntityData() *types.CommonEntityData {
    i2CDev.EntityData.YFilter = i2CDev.YFilter
    i2CDev.EntityData.YangName = "i2c-dev"
    i2CDev.EntityData.BundleName = "cisco_ios_xr"
    i2CDev.EntityData.ParentYangName = "ccc_driver"
    i2CDev.EntityData.SegmentPath = "i2c-dev"
    i2CDev.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    i2CDev.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    i2CDev.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    i2CDev.EntityData.Children = make(map[string]types.YChild)
    i2CDev.EntityData.Children["cpu-complex"] = types.YChild{"CpuComplex", &i2CDev.CpuComplex}
    i2CDev.EntityData.Children["ioexpander"] = types.YChild{"Ioexpander", &i2CDev.Ioexpander}
    i2CDev.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(i2CDev.EntityData)
}

// Controller_CccDriver_I2CDev_CpuComplex
type Controller_CccDriver_I2CDev_CpuComplex struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_I2CDev_CpuComplex_Location.
    Location []Controller_CccDriver_I2CDev_CpuComplex_Location
}

func (cpuComplex *Controller_CccDriver_I2CDev_CpuComplex) GetEntityData() *types.CommonEntityData {
    cpuComplex.EntityData.YFilter = cpuComplex.YFilter
    cpuComplex.EntityData.YangName = "cpu-complex"
    cpuComplex.EntityData.BundleName = "cisco_ios_xr"
    cpuComplex.EntityData.ParentYangName = "i2c-dev"
    cpuComplex.EntityData.SegmentPath = "cpu-complex"
    cpuComplex.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpuComplex.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpuComplex.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpuComplex.EntityData.Children = make(map[string]types.YChild)
    cpuComplex.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range cpuComplex.Location {
        cpuComplex.EntityData.Children[types.GetSegmentPath(&cpuComplex.Location[i])] = types.YChild{"Location", &cpuComplex.Location[i]}
    }
    cpuComplex.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cpuComplex.EntityData)
}

// Controller_CccDriver_I2CDev_CpuComplex_Location
type Controller_CccDriver_I2CDev_CpuComplex_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CpuComplexDetail Controller_CccDriver_I2CDev_CpuComplex_Location_CpuComplexDetail
}

func (location *Controller_CccDriver_I2CDev_CpuComplex_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "cpu-complex"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["cpu_complex_detail"] = types.YChild{"CpuComplexDetail", &location.CpuComplexDetail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_I2CDev_CpuComplex_Location_CpuComplexDetail
type Controller_CccDriver_I2CDev_CpuComplex_Location_CpuComplexDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CpuComplexValues []interface{}
}

func (cpuComplexDetail *Controller_CccDriver_I2CDev_CpuComplex_Location_CpuComplexDetail) GetEntityData() *types.CommonEntityData {
    cpuComplexDetail.EntityData.YFilter = cpuComplexDetail.YFilter
    cpuComplexDetail.EntityData.YangName = "cpu_complex_detail"
    cpuComplexDetail.EntityData.BundleName = "cisco_ios_xr"
    cpuComplexDetail.EntityData.ParentYangName = "location"
    cpuComplexDetail.EntityData.SegmentPath = "cpu_complex_detail"
    cpuComplexDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cpuComplexDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cpuComplexDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cpuComplexDetail.EntityData.Children = make(map[string]types.YChild)
    cpuComplexDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cpuComplexDetail.EntityData.Leafs["cpu_complex_values"] = types.YLeaf{"CpuComplexValues", cpuComplexDetail.CpuComplexValues}
    return &(cpuComplexDetail.EntityData)
}

// Controller_CccDriver_I2CDev_Ioexpander
type Controller_CccDriver_I2CDev_Ioexpander struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_I2CDev_Ioexpander_Location.
    Location []Controller_CccDriver_I2CDev_Ioexpander_Location
}

func (ioexpander *Controller_CccDriver_I2CDev_Ioexpander) GetEntityData() *types.CommonEntityData {
    ioexpander.EntityData.YFilter = ioexpander.YFilter
    ioexpander.EntityData.YangName = "ioexpander"
    ioexpander.EntityData.BundleName = "cisco_ios_xr"
    ioexpander.EntityData.ParentYangName = "i2c-dev"
    ioexpander.EntityData.SegmentPath = "ioexpander"
    ioexpander.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ioexpander.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ioexpander.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ioexpander.EntityData.Children = make(map[string]types.YChild)
    ioexpander.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range ioexpander.Location {
        ioexpander.EntityData.Children[types.GetSegmentPath(&ioexpander.Location[i])] = types.YChild{"Location", &ioexpander.Location[i]}
    }
    ioexpander.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ioexpander.EntityData)
}

// Controller_CccDriver_I2CDev_Ioexpander_Location
type Controller_CccDriver_I2CDev_Ioexpander_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    IoExpVal Controller_CccDriver_I2CDev_Ioexpander_Location_IoExpVal
}

func (location *Controller_CccDriver_I2CDev_Ioexpander_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ioexpander"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["io_exp_val"] = types.YChild{"IoExpVal", &location.IoExpVal}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_I2CDev_Ioexpander_Location_IoExpVal
type Controller_CccDriver_I2CDev_Ioexpander_Location_IoExpVal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    IoExpDetails []interface{}
}

func (ioExpVal *Controller_CccDriver_I2CDev_Ioexpander_Location_IoExpVal) GetEntityData() *types.CommonEntityData {
    ioExpVal.EntityData.YFilter = ioExpVal.YFilter
    ioExpVal.EntityData.YangName = "io_exp_val"
    ioExpVal.EntityData.BundleName = "cisco_ios_xr"
    ioExpVal.EntityData.ParentYangName = "location"
    ioExpVal.EntityData.SegmentPath = "io_exp_val"
    ioExpVal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ioExpVal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ioExpVal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ioExpVal.EntityData.Children = make(map[string]types.YChild)
    ioExpVal.EntityData.Leafs = make(map[string]types.YLeaf)
    ioExpVal.EntityData.Leafs["io_exp_details"] = types.YLeaf{"IoExpDetails", ioExpVal.IoExpDetails}
    return &(ioExpVal.EntityData)
}

// Controller_CccDriver_Ethernet
type Controller_CccDriver_Ethernet struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    EthernetStatus Controller_CccDriver_Ethernet_EthernetStatus

    
    EthernetCounters Controller_CccDriver_Ethernet_EthernetCounters
}

func (ethernet *Controller_CccDriver_Ethernet) GetEntityData() *types.CommonEntityData {
    ethernet.EntityData.YFilter = ethernet.YFilter
    ethernet.EntityData.YangName = "ethernet"
    ethernet.EntityData.BundleName = "cisco_ios_xr"
    ethernet.EntityData.ParentYangName = "ccc_driver"
    ethernet.EntityData.SegmentPath = "ethernet"
    ethernet.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernet.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernet.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernet.EntityData.Children = make(map[string]types.YChild)
    ethernet.EntityData.Children["ethernet_status"] = types.YChild{"EthernetStatus", &ethernet.EthernetStatus}
    ethernet.EntityData.Children["ethernet_counters"] = types.YChild{"EthernetCounters", &ethernet.EthernetCounters}
    ethernet.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernet.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus
type Controller_CccDriver_Ethernet_EthernetStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Ethernet_EthernetStatus_Location.
    Location []Controller_CccDriver_Ethernet_EthernetStatus_Location
}

func (ethernetStatus *Controller_CccDriver_Ethernet_EthernetStatus) GetEntityData() *types.CommonEntityData {
    ethernetStatus.EntityData.YFilter = ethernetStatus.YFilter
    ethernetStatus.EntityData.YangName = "ethernet_status"
    ethernetStatus.EntityData.BundleName = "cisco_ios_xr"
    ethernetStatus.EntityData.ParentYangName = "ethernet"
    ethernetStatus.EntityData.SegmentPath = "ethernet_status"
    ethernetStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetStatus.EntityData.Children = make(map[string]types.YChild)
    ethernetStatus.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range ethernetStatus.Location {
        ethernetStatus.EntityData.Children[types.GetSegmentPath(&ethernetStatus.Location[i])] = types.YChild{"Location", &ethernetStatus.Location[i]}
    }
    ethernetStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetStatus.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus_Location
type Controller_CccDriver_Ethernet_EthernetStatus_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    EthernetStatus Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus_
}

func (location *Controller_CccDriver_Ethernet_EthernetStatus_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ethernet_status"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["ethernet_status"] = types.YChild{"EthernetStatus", &location.EthernetStatus}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus_
type Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    EthernetStatusValues []interface{}
}

func (ethernetStatus_ *Controller_CccDriver_Ethernet_EthernetStatus_Location_EthernetStatus_) GetEntityData() *types.CommonEntityData {
    ethernetStatus_.EntityData.YFilter = ethernetStatus_.YFilter
    ethernetStatus_.EntityData.YangName = "ethernet_status"
    ethernetStatus_.EntityData.BundleName = "cisco_ios_xr"
    ethernetStatus_.EntityData.ParentYangName = "location"
    ethernetStatus_.EntityData.SegmentPath = "ethernet_status"
    ethernetStatus_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetStatus_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetStatus_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetStatus_.EntityData.Children = make(map[string]types.YChild)
    ethernetStatus_.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernetStatus_.EntityData.Leafs["ethernet_status_values"] = types.YLeaf{"EthernetStatusValues", ethernetStatus_.EthernetStatusValues}
    return &(ethernetStatus_.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters
type Controller_CccDriver_Ethernet_EthernetCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Ethernet_EthernetCounters_Location.
    Location []Controller_CccDriver_Ethernet_EthernetCounters_Location
}

func (ethernetCounters *Controller_CccDriver_Ethernet_EthernetCounters) GetEntityData() *types.CommonEntityData {
    ethernetCounters.EntityData.YFilter = ethernetCounters.YFilter
    ethernetCounters.EntityData.YangName = "ethernet_counters"
    ethernetCounters.EntityData.BundleName = "cisco_ios_xr"
    ethernetCounters.EntityData.ParentYangName = "ethernet"
    ethernetCounters.EntityData.SegmentPath = "ethernet_counters"
    ethernetCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetCounters.EntityData.Children = make(map[string]types.YChild)
    ethernetCounters.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range ethernetCounters.Location {
        ethernetCounters.EntityData.Children[types.GetSegmentPath(&ethernetCounters.Location[i])] = types.YChild{"Location", &ethernetCounters.Location[i]}
    }
    ethernetCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ethernetCounters.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters_Location
type Controller_CccDriver_Ethernet_EthernetCounters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    EthernetCounters Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters_
}

func (location *Controller_CccDriver_Ethernet_EthernetCounters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "ethernet_counters"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["ethernet_counters"] = types.YChild{"EthernetCounters", &location.EthernetCounters}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters_
type Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    EthernetCounterValues []interface{}
}

func (ethernetCounters_ *Controller_CccDriver_Ethernet_EthernetCounters_Location_EthernetCounters_) GetEntityData() *types.CommonEntityData {
    ethernetCounters_.EntityData.YFilter = ethernetCounters_.YFilter
    ethernetCounters_.EntityData.YangName = "ethernet_counters"
    ethernetCounters_.EntityData.BundleName = "cisco_ios_xr"
    ethernetCounters_.EntityData.ParentYangName = "location"
    ethernetCounters_.EntityData.SegmentPath = "ethernet_counters"
    ethernetCounters_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ethernetCounters_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ethernetCounters_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ethernetCounters_.EntityData.Children = make(map[string]types.YChild)
    ethernetCounters_.EntityData.Leafs = make(map[string]types.YLeaf)
    ethernetCounters_.EntityData.Leafs["ethernet_counter_values"] = types.YLeaf{"EthernetCounterValues", ethernetCounters_.EthernetCounterValues}
    return &(ethernetCounters_.EntityData)
}

// Controller_CccDriver_EventHistory
type Controller_CccDriver_EventHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_EventHistory_Brief

    
    Detail Controller_CccDriver_EventHistory_Detail
}

func (eventHistory *Controller_CccDriver_EventHistory) GetEntityData() *types.CommonEntityData {
    eventHistory.EntityData.YFilter = eventHistory.YFilter
    eventHistory.EntityData.YangName = "event-history"
    eventHistory.EntityData.BundleName = "cisco_ios_xr"
    eventHistory.EntityData.ParentYangName = "ccc_driver"
    eventHistory.EntityData.SegmentPath = "event-history"
    eventHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventHistory.EntityData.Children = make(map[string]types.YChild)
    eventHistory.EntityData.Children["brief"] = types.YChild{"Brief", &eventHistory.Brief}
    eventHistory.EntityData.Children["detail"] = types.YChild{"Detail", &eventHistory.Detail}
    eventHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventHistory.EntityData)
}

// Controller_CccDriver_EventHistory_Brief
type Controller_CccDriver_EventHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_EventHistory_Brief_Location.
    Location []Controller_CccDriver_EventHistory_Brief_Location
}

func (brief *Controller_CccDriver_EventHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "event-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range brief.Location {
        brief.EntityData.Children[types.GetSegmentPath(&brief.Location[i])] = types.YChild{"Location", &brief.Location[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_CccDriver_EventHistory_Brief_Location
type Controller_CccDriver_EventHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistBrief Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief
}

func (location *Controller_CccDriver_EventHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_event_hist_brief"] = types.YChild{"CardEventHistBrief", &location.CardEventHistBrief}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief
type Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistBriefValues []interface{}
}

func (cardEventHistBrief *Controller_CccDriver_EventHistory_Brief_Location_CardEventHistBrief) GetEntityData() *types.CommonEntityData {
    cardEventHistBrief.EntityData.YFilter = cardEventHistBrief.YFilter
    cardEventHistBrief.EntityData.YangName = "card_event_hist_brief"
    cardEventHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistBrief.EntityData.ParentYangName = "location"
    cardEventHistBrief.EntityData.SegmentPath = "card_event_hist_brief"
    cardEventHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistBrief.EntityData.Children = make(map[string]types.YChild)
    cardEventHistBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    cardEventHistBrief.EntityData.Leafs["card_event_hist_brief_values"] = types.YLeaf{"CardEventHistBriefValues", cardEventHistBrief.CardEventHistBriefValues}
    return &(cardEventHistBrief.EntityData)
}

// Controller_CccDriver_EventHistory_Detail
type Controller_CccDriver_EventHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_EventHistory_Detail_Location.
    Location []Controller_CccDriver_EventHistory_Detail_Location
}

func (detail *Controller_CccDriver_EventHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "event-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_EventHistory_Detail_Location
type Controller_CccDriver_EventHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistDetail Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail
}

func (location *Controller_CccDriver_EventHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_event_hist_detail"] = types.YChild{"CardEventHistDetail", &location.CardEventHistDetail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail
type Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistDetailValues []interface{}
}

func (cardEventHistDetail *Controller_CccDriver_EventHistory_Detail_Location_CardEventHistDetail) GetEntityData() *types.CommonEntityData {
    cardEventHistDetail.EntityData.YFilter = cardEventHistDetail.YFilter
    cardEventHistDetail.EntityData.YangName = "card_event_hist_detail"
    cardEventHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistDetail.EntityData.ParentYangName = "location"
    cardEventHistDetail.EntityData.SegmentPath = "card_event_hist_detail"
    cardEventHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistDetail.EntityData.Children = make(map[string]types.YChild)
    cardEventHistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cardEventHistDetail.EntityData.Leafs["card_event_hist_detail_values"] = types.YLeaf{"CardEventHistDetailValues", cardEventHistDetail.CardEventHistDetailValues}
    return &(cardEventHistDetail.EntityData)
}

// Controller_CccDriver_OirHistory
type Controller_CccDriver_OirHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_OirHistory_Rack.
    Rack []Controller_CccDriver_OirHistory_Rack
}

func (oirHistory *Controller_CccDriver_OirHistory) GetEntityData() *types.CommonEntityData {
    oirHistory.EntityData.YFilter = oirHistory.YFilter
    oirHistory.EntityData.YangName = "oir-history"
    oirHistory.EntityData.BundleName = "cisco_ios_xr"
    oirHistory.EntityData.ParentYangName = "ccc_driver"
    oirHistory.EntityData.SegmentPath = "oir-history"
    oirHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oirHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oirHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oirHistory.EntityData.Children = make(map[string]types.YChild)
    oirHistory.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range oirHistory.Rack {
        oirHistory.EntityData.Children[types.GetSegmentPath(&oirHistory.Rack[i])] = types.YChild{"Rack", &oirHistory.Rack[i]}
    }
    oirHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oirHistory.EntityData)
}

// Controller_CccDriver_OirHistory_Rack
type Controller_CccDriver_OirHistory_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Rack interface{}

    
    CardOirHist Controller_CccDriver_OirHistory_Rack_CardOirHist
}

func (rack *Controller_CccDriver_OirHistory_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "oir-history"
    rack.EntityData.SegmentPath = "rack" + "[rack='" + fmt.Sprintf("%v", rack.Rack) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["card_oir_hist"] = types.YChild{"CardOirHist", &rack.CardOirHist}
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack"] = types.YLeaf{"Rack", rack.Rack}
    return &(rack.EntityData)
}

// Controller_CccDriver_OirHistory_Rack_CardOirHist
type Controller_CccDriver_OirHistory_Rack_CardOirHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardOirEvents []interface{}
}

func (cardOirHist *Controller_CccDriver_OirHistory_Rack_CardOirHist) GetEntityData() *types.CommonEntityData {
    cardOirHist.EntityData.YFilter = cardOirHist.YFilter
    cardOirHist.EntityData.YangName = "card_oir_hist"
    cardOirHist.EntityData.BundleName = "cisco_ios_xr"
    cardOirHist.EntityData.ParentYangName = "rack"
    cardOirHist.EntityData.SegmentPath = "card_oir_hist"
    cardOirHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardOirHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardOirHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardOirHist.EntityData.Children = make(map[string]types.YChild)
    cardOirHist.EntityData.Leafs = make(map[string]types.YLeaf)
    cardOirHist.EntityData.Leafs["card_oir_events"] = types.YLeaf{"CardOirEvents", cardOirHist.CardOirEvents}
    return &(cardOirHist.EntityData)
}

// Controller_CccDriver_NotifHistory
type Controller_CccDriver_NotifHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_NotifHistory_Brief

    
    Detail Controller_CccDriver_NotifHistory_Detail
}

func (notifHistory *Controller_CccDriver_NotifHistory) GetEntityData() *types.CommonEntityData {
    notifHistory.EntityData.YFilter = notifHistory.YFilter
    notifHistory.EntityData.YangName = "notif-history"
    notifHistory.EntityData.BundleName = "cisco_ios_xr"
    notifHistory.EntityData.ParentYangName = "ccc_driver"
    notifHistory.EntityData.SegmentPath = "notif-history"
    notifHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifHistory.EntityData.Children = make(map[string]types.YChild)
    notifHistory.EntityData.Children["brief"] = types.YChild{"Brief", &notifHistory.Brief}
    notifHistory.EntityData.Children["detail"] = types.YChild{"Detail", &notifHistory.Detail}
    notifHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(notifHistory.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief
type Controller_CccDriver_NotifHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_NotifHistory_Brief_Location.
    Location []Controller_CccDriver_NotifHistory_Brief_Location
}

func (brief *Controller_CccDriver_NotifHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "notif-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range brief.Location {
        brief.EntityData.Children[types.GetSegmentPath(&brief.Location[i])] = types.YChild{"Location", &brief.Location[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief_Location
type Controller_CccDriver_NotifHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistBrief Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief
}

func (location *Controller_CccDriver_NotifHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_notif_hist_brief"] = types.YChild{"CardNotifHistBrief", &location.CardNotifHistBrief}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief
type Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistBriefValues []interface{}
}

func (cardNotifHistBrief *Controller_CccDriver_NotifHistory_Brief_Location_CardNotifHistBrief) GetEntityData() *types.CommonEntityData {
    cardNotifHistBrief.EntityData.YFilter = cardNotifHistBrief.YFilter
    cardNotifHistBrief.EntityData.YangName = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistBrief.EntityData.ParentYangName = "location"
    cardNotifHistBrief.EntityData.SegmentPath = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistBrief.EntityData.Children = make(map[string]types.YChild)
    cardNotifHistBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    cardNotifHistBrief.EntityData.Leafs["card_notif_hist_brief_values"] = types.YLeaf{"CardNotifHistBriefValues", cardNotifHistBrief.CardNotifHistBriefValues}
    return &(cardNotifHistBrief.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail
type Controller_CccDriver_NotifHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_NotifHistory_Detail_Location.
    Location []Controller_CccDriver_NotifHistory_Detail_Location
}

func (detail *Controller_CccDriver_NotifHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "notif-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail_Location
type Controller_CccDriver_NotifHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistDetail Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail
}

func (location *Controller_CccDriver_NotifHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_notif_hist_detail"] = types.YChild{"CardNotifHistDetail", &location.CardNotifHistDetail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail
type Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistDetailValues []interface{}
}

func (cardNotifHistDetail *Controller_CccDriver_NotifHistory_Detail_Location_CardNotifHistDetail) GetEntityData() *types.CommonEntityData {
    cardNotifHistDetail.EntityData.YFilter = cardNotifHistDetail.YFilter
    cardNotifHistDetail.EntityData.YangName = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistDetail.EntityData.ParentYangName = "location"
    cardNotifHistDetail.EntityData.SegmentPath = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistDetail.EntityData.Children = make(map[string]types.YChild)
    cardNotifHistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cardNotifHistDetail.EntityData.Leafs["card_notif_hist_detail_values"] = types.YLeaf{"CardNotifHistDetailValues", cardNotifHistDetail.CardNotifHistDetailValues}
    return &(cardNotifHistDetail.EntityData)
}

// Controller_CccDriver_Slave
type Controller_CccDriver_Slave struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    EventHistory Controller_CccDriver_Slave_EventHistory

    
    NotifHistory Controller_CccDriver_Slave_NotifHistory

    
    OirHistory Controller_CccDriver_Slave_OirHistory
}

func (slave *Controller_CccDriver_Slave) GetEntityData() *types.CommonEntityData {
    slave.EntityData.YFilter = slave.YFilter
    slave.EntityData.YangName = "slave"
    slave.EntityData.BundleName = "cisco_ios_xr"
    slave.EntityData.ParentYangName = "ccc_driver"
    slave.EntityData.SegmentPath = "slave"
    slave.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    slave.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    slave.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    slave.EntityData.Children = make(map[string]types.YChild)
    slave.EntityData.Children["event-history"] = types.YChild{"EventHistory", &slave.EventHistory}
    slave.EntityData.Children["notif-history"] = types.YChild{"NotifHistory", &slave.NotifHistory}
    slave.EntityData.Children["oir-history"] = types.YChild{"OirHistory", &slave.OirHistory}
    slave.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(slave.EntityData)
}

// Controller_CccDriver_Slave_EventHistory
type Controller_CccDriver_Slave_EventHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_Slave_EventHistory_Brief

    
    Detail Controller_CccDriver_Slave_EventHistory_Detail
}

func (eventHistory *Controller_CccDriver_Slave_EventHistory) GetEntityData() *types.CommonEntityData {
    eventHistory.EntityData.YFilter = eventHistory.YFilter
    eventHistory.EntityData.YangName = "event-history"
    eventHistory.EntityData.BundleName = "cisco_ios_xr"
    eventHistory.EntityData.ParentYangName = "slave"
    eventHistory.EntityData.SegmentPath = "event-history"
    eventHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventHistory.EntityData.Children = make(map[string]types.YChild)
    eventHistory.EntityData.Children["brief"] = types.YChild{"Brief", &eventHistory.Brief}
    eventHistory.EntityData.Children["detail"] = types.YChild{"Detail", &eventHistory.Detail}
    eventHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventHistory.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief
type Controller_CccDriver_Slave_EventHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_EventHistory_Brief_Location.
    Location []Controller_CccDriver_Slave_EventHistory_Brief_Location
}

func (brief *Controller_CccDriver_Slave_EventHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "event-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range brief.Location {
        brief.EntityData.Children[types.GetSegmentPath(&brief.Location[i])] = types.YChild{"Location", &brief.Location[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief_Location
type Controller_CccDriver_Slave_EventHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistBrief Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief
}

func (location *Controller_CccDriver_Slave_EventHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_event_hist_brief"] = types.YChild{"CardEventHistBrief", &location.CardEventHistBrief}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief
type Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistBriefValues []interface{}
}

func (cardEventHistBrief *Controller_CccDriver_Slave_EventHistory_Brief_Location_CardEventHistBrief) GetEntityData() *types.CommonEntityData {
    cardEventHistBrief.EntityData.YFilter = cardEventHistBrief.YFilter
    cardEventHistBrief.EntityData.YangName = "card_event_hist_brief"
    cardEventHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistBrief.EntityData.ParentYangName = "location"
    cardEventHistBrief.EntityData.SegmentPath = "card_event_hist_brief"
    cardEventHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistBrief.EntityData.Children = make(map[string]types.YChild)
    cardEventHistBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    cardEventHistBrief.EntityData.Leafs["card_event_hist_brief_values"] = types.YLeaf{"CardEventHistBriefValues", cardEventHistBrief.CardEventHistBriefValues}
    return &(cardEventHistBrief.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail
type Controller_CccDriver_Slave_EventHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_EventHistory_Detail_Location.
    Location []Controller_CccDriver_Slave_EventHistory_Detail_Location
}

func (detail *Controller_CccDriver_Slave_EventHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "event-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail_Location
type Controller_CccDriver_Slave_EventHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardEventHistDetail Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail
}

func (location *Controller_CccDriver_Slave_EventHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_event_hist_detail"] = types.YChild{"CardEventHistDetail", &location.CardEventHistDetail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail
type Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardEventHistDetailValues []interface{}
}

func (cardEventHistDetail *Controller_CccDriver_Slave_EventHistory_Detail_Location_CardEventHistDetail) GetEntityData() *types.CommonEntityData {
    cardEventHistDetail.EntityData.YFilter = cardEventHistDetail.YFilter
    cardEventHistDetail.EntityData.YangName = "card_event_hist_detail"
    cardEventHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardEventHistDetail.EntityData.ParentYangName = "location"
    cardEventHistDetail.EntityData.SegmentPath = "card_event_hist_detail"
    cardEventHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardEventHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardEventHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardEventHistDetail.EntityData.Children = make(map[string]types.YChild)
    cardEventHistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cardEventHistDetail.EntityData.Leafs["card_event_hist_detail_values"] = types.YLeaf{"CardEventHistDetailValues", cardEventHistDetail.CardEventHistDetailValues}
    return &(cardEventHistDetail.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory
type Controller_CccDriver_Slave_NotifHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Brief Controller_CccDriver_Slave_NotifHistory_Brief

    
    Detail Controller_CccDriver_Slave_NotifHistory_Detail
}

func (notifHistory *Controller_CccDriver_Slave_NotifHistory) GetEntityData() *types.CommonEntityData {
    notifHistory.EntityData.YFilter = notifHistory.YFilter
    notifHistory.EntityData.YangName = "notif-history"
    notifHistory.EntityData.BundleName = "cisco_ios_xr"
    notifHistory.EntityData.ParentYangName = "slave"
    notifHistory.EntityData.SegmentPath = "notif-history"
    notifHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    notifHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    notifHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    notifHistory.EntityData.Children = make(map[string]types.YChild)
    notifHistory.EntityData.Children["brief"] = types.YChild{"Brief", &notifHistory.Brief}
    notifHistory.EntityData.Children["detail"] = types.YChild{"Detail", &notifHistory.Detail}
    notifHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(notifHistory.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief
type Controller_CccDriver_Slave_NotifHistory_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_NotifHistory_Brief_Location.
    Location []Controller_CccDriver_Slave_NotifHistory_Brief_Location
}

func (brief *Controller_CccDriver_Slave_NotifHistory_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "notif-history"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range brief.Location {
        brief.EntityData.Children[types.GetSegmentPath(&brief.Location[i])] = types.YChild{"Location", &brief.Location[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief_Location
type Controller_CccDriver_Slave_NotifHistory_Brief_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistBrief Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief
}

func (location *Controller_CccDriver_Slave_NotifHistory_Brief_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "brief"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_notif_hist_brief"] = types.YChild{"CardNotifHistBrief", &location.CardNotifHistBrief}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief
type Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistBriefValues []interface{}
}

func (cardNotifHistBrief *Controller_CccDriver_Slave_NotifHistory_Brief_Location_CardNotifHistBrief) GetEntityData() *types.CommonEntityData {
    cardNotifHistBrief.EntityData.YFilter = cardNotifHistBrief.YFilter
    cardNotifHistBrief.EntityData.YangName = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistBrief.EntityData.ParentYangName = "location"
    cardNotifHistBrief.EntityData.SegmentPath = "card_notif_hist_brief"
    cardNotifHistBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistBrief.EntityData.Children = make(map[string]types.YChild)
    cardNotifHistBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    cardNotifHistBrief.EntityData.Leafs["card_notif_hist_brief_values"] = types.YLeaf{"CardNotifHistBriefValues", cardNotifHistBrief.CardNotifHistBriefValues}
    return &(cardNotifHistBrief.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail
type Controller_CccDriver_Slave_NotifHistory_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_CccDriver_Slave_NotifHistory_Detail_Location.
    Location []Controller_CccDriver_Slave_NotifHistory_Detail_Location
}

func (detail *Controller_CccDriver_Slave_NotifHistory_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "notif-history"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail_Location
type Controller_CccDriver_Slave_NotifHistory_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}

    
    CardNotifHistDetail Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail
}

func (location *Controller_CccDriver_Slave_NotifHistory_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["card_notif_hist_detail"] = types.YChild{"CardNotifHistDetail", &location.CardNotifHistDetail}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail
type Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardNotifHistDetailValues []interface{}
}

func (cardNotifHistDetail *Controller_CccDriver_Slave_NotifHistory_Detail_Location_CardNotifHistDetail) GetEntityData() *types.CommonEntityData {
    cardNotifHistDetail.EntityData.YFilter = cardNotifHistDetail.YFilter
    cardNotifHistDetail.EntityData.YangName = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.BundleName = "cisco_ios_xr"
    cardNotifHistDetail.EntityData.ParentYangName = "location"
    cardNotifHistDetail.EntityData.SegmentPath = "card_notif_hist_detail"
    cardNotifHistDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardNotifHistDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardNotifHistDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardNotifHistDetail.EntityData.Children = make(map[string]types.YChild)
    cardNotifHistDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    cardNotifHistDetail.EntityData.Leafs["card_notif_hist_detail_values"] = types.YLeaf{"CardNotifHistDetailValues", cardNotifHistDetail.CardNotifHistDetailValues}
    return &(cardNotifHistDetail.EntityData)
}

// Controller_CccDriver_Slave_OirHistory
type Controller_CccDriver_Slave_OirHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Slave_OirHistory_Rack.
    Rack []Controller_CccDriver_Slave_OirHistory_Rack
}

func (oirHistory *Controller_CccDriver_Slave_OirHistory) GetEntityData() *types.CommonEntityData {
    oirHistory.EntityData.YFilter = oirHistory.YFilter
    oirHistory.EntityData.YangName = "oir-history"
    oirHistory.EntityData.BundleName = "cisco_ios_xr"
    oirHistory.EntityData.ParentYangName = "slave"
    oirHistory.EntityData.SegmentPath = "oir-history"
    oirHistory.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oirHistory.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oirHistory.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oirHistory.EntityData.Children = make(map[string]types.YChild)
    oirHistory.EntityData.Children["rack"] = types.YChild{"Rack", nil}
    for i := range oirHistory.Rack {
        oirHistory.EntityData.Children[types.GetSegmentPath(&oirHistory.Rack[i])] = types.YChild{"Rack", &oirHistory.Rack[i]}
    }
    oirHistory.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oirHistory.EntityData)
}

// Controller_CccDriver_Slave_OirHistory_Rack
type Controller_CccDriver_Slave_OirHistory_Rack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Rack interface{}

    
    CardOirHist Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist
}

func (rack *Controller_CccDriver_Slave_OirHistory_Rack) GetEntityData() *types.CommonEntityData {
    rack.EntityData.YFilter = rack.YFilter
    rack.EntityData.YangName = "rack"
    rack.EntityData.BundleName = "cisco_ios_xr"
    rack.EntityData.ParentYangName = "oir-history"
    rack.EntityData.SegmentPath = "rack" + "[rack='" + fmt.Sprintf("%v", rack.Rack) + "']"
    rack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rack.EntityData.Children = make(map[string]types.YChild)
    rack.EntityData.Children["card_oir_hist"] = types.YChild{"CardOirHist", &rack.CardOirHist}
    rack.EntityData.Leafs = make(map[string]types.YLeaf)
    rack.EntityData.Leafs["rack"] = types.YLeaf{"Rack", rack.Rack}
    return &(rack.EntityData)
}

// Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist
type Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of string.
    CardOirEvents []interface{}
}

func (cardOirHist *Controller_CccDriver_Slave_OirHistory_Rack_CardOirHist) GetEntityData() *types.CommonEntityData {
    cardOirHist.EntityData.YFilter = cardOirHist.YFilter
    cardOirHist.EntityData.YangName = "card_oir_hist"
    cardOirHist.EntityData.BundleName = "cisco_ios_xr"
    cardOirHist.EntityData.ParentYangName = "rack"
    cardOirHist.EntityData.SegmentPath = "card_oir_hist"
    cardOirHist.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cardOirHist.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cardOirHist.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cardOirHist.EntityData.Children = make(map[string]types.YChild)
    cardOirHist.EntityData.Leafs = make(map[string]types.YLeaf)
    cardOirHist.EntityData.Leafs["card_oir_events"] = types.YLeaf{"CardOirEvents", cardOirHist.CardOirEvents}
    return &(cardOirHist.EntityData)
}

// Controller_CccDriver_Action
type Controller_CccDriver_Action struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Register Controller_CccDriver_Action_Register
}

func (action *Controller_CccDriver_Action) GetEntityData() *types.CommonEntityData {
    action.EntityData.YFilter = action.YFilter
    action.EntityData.YangName = "action"
    action.EntityData.BundleName = "cisco_ios_xr"
    action.EntityData.ParentYangName = "ccc_driver"
    action.EntityData.SegmentPath = "action"
    action.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    action.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    action.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    action.EntityData.Children = make(map[string]types.YChild)
    action.EntityData.Children["register"] = types.YChild{"Register", &action.Register}
    action.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(action.EntityData)
}

// Controller_CccDriver_Action_Register
type Controller_CccDriver_Action_Register struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_CccDriver_Action_Register_Location.
    Location []Controller_CccDriver_Action_Register_Location
}

func (register *Controller_CccDriver_Action_Register) GetEntityData() *types.CommonEntityData {
    register.EntityData.YFilter = register.YFilter
    register.EntityData.YangName = "register"
    register.EntityData.BundleName = "cisco_ios_xr"
    register.EntityData.ParentYangName = "action"
    register.EntityData.SegmentPath = "register"
    register.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    register.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    register.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    register.EntityData.Children = make(map[string]types.YChild)
    register.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range register.Location {
        register.EntityData.Children[types.GetSegmentPath(&register.Location[i])] = types.YChild{"Location", &register.Location[i]}
    }
    register.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(register.EntityData)
}

// Controller_CccDriver_Action_Register_Location
type Controller_CccDriver_Action_Register_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Location interface{}
}

func (location *Controller_CccDriver_Action_Register_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "register"
    location.EntityData.SegmentPath = "location" + "[location='" + fmt.Sprintf("%v", location.Location) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location"] = types.YLeaf{"Location", location.Location}
    return &(location.EntityData)
}

// Controller_Switch
type Controller_Switch struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Control Ethernet switch operational data.
    Oper Controller_Switch_Oper
}

func (self *Controller_Switch) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "switch"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "controller"
    self.EntityData.SegmentPath = "switch"
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = make(map[string]types.YChild)
    self.EntityData.Children["oper"] = types.YChild{"Oper", &self.Oper}
    self.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(self.EntityData)
}

// Controller_Switch_Oper
// Control Ethernet switch operational data.
type Controller_Switch_Oper struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Reachable Controller_Switch_Oper_Reachable

    
    Summary Controller_Switch_Oper_Summary

    
    Statistics Controller_Switch_Oper_Statistics

    
    Serdes Controller_Switch_Oper_Serdes

    
    Mac Controller_Switch_Oper_Mac

    
    Bridge Controller_Switch_Oper_Bridge

    
    Fdb Controller_Switch_Oper_Fdb

    
    Vlan Controller_Switch_Oper_Vlan

    
    Sdr Controller_Switch_Oper_Sdr

    
    Sfp Controller_Switch_Oper_Sfp

    // MLAP switch data.
    Mlap Controller_Switch_Oper_Mlap

    
    SwitchDebugCont Controller_Switch_Oper_SwitchDebugCont

    
    Esd Controller_Switch_Oper_Esd

    
    MgmtAgent Controller_Switch_Oper_MgmtAgent

    
    PortState Controller_Switch_Oper_PortState

    
    Trunk Controller_Switch_Oper_Trunk
}

func (oper *Controller_Switch_Oper) GetEntityData() *types.CommonEntityData {
    oper.EntityData.YFilter = oper.YFilter
    oper.EntityData.YangName = "oper"
    oper.EntityData.BundleName = "cisco_ios_xr"
    oper.EntityData.ParentYangName = "switch"
    oper.EntityData.SegmentPath = "oper"
    oper.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    oper.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    oper.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    oper.EntityData.Children = make(map[string]types.YChild)
    oper.EntityData.Children["reachable"] = types.YChild{"Reachable", &oper.Reachable}
    oper.EntityData.Children["summary"] = types.YChild{"Summary", &oper.Summary}
    oper.EntityData.Children["statistics"] = types.YChild{"Statistics", &oper.Statistics}
    oper.EntityData.Children["serdes"] = types.YChild{"Serdes", &oper.Serdes}
    oper.EntityData.Children["mac"] = types.YChild{"Mac", &oper.Mac}
    oper.EntityData.Children["bridge"] = types.YChild{"Bridge", &oper.Bridge}
    oper.EntityData.Children["fdb"] = types.YChild{"Fdb", &oper.Fdb}
    oper.EntityData.Children["vlan"] = types.YChild{"Vlan", &oper.Vlan}
    oper.EntityData.Children["sdr"] = types.YChild{"Sdr", &oper.Sdr}
    oper.EntityData.Children["sfp"] = types.YChild{"Sfp", &oper.Sfp}
    oper.EntityData.Children["mlap"] = types.YChild{"Mlap", &oper.Mlap}
    oper.EntityData.Children["switch-debug-cont"] = types.YChild{"SwitchDebugCont", &oper.SwitchDebugCont}
    oper.EntityData.Children["esd"] = types.YChild{"Esd", &oper.Esd}
    oper.EntityData.Children["mgmt-agent"] = types.YChild{"MgmtAgent", &oper.MgmtAgent}
    oper.EntityData.Children["port-state"] = types.YChild{"PortState", &oper.PortState}
    oper.EntityData.Children["trunk"] = types.YChild{"Trunk", &oper.Trunk}
    oper.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(oper.EntityData)
}

// Controller_Switch_Oper_Reachable
type Controller_Switch_Oper_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Reachable_Location.
    Location []Controller_Switch_Oper_Reachable_Location
}

func (reachable *Controller_Switch_Oper_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "oper"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = make(map[string]types.YChild)
    reachable.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range reachable.Location {
        reachable.EntityData.Children[types.GetSegmentPath(&reachable.Location[i])] = types.YChild{"Location", &reachable.Location[i]}
    }
    reachable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(reachable.EntityData)
}

// Controller_Switch_Oper_Reachable_Location
type Controller_Switch_Oper_Reachable_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}
}

func (location *Controller_Switch_Oper_Reachable_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "reachable"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Summary
type Controller_Switch_Oper_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Summary_Location.
    Location []Controller_Switch_Oper_Summary_Location
}

func (summary *Controller_Switch_Oper_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "oper"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range summary.Location {
        summary.EntityData.Children[types.GetSegmentPath(&summary.Location[i])] = types.YChild{"Location", &summary.Location[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Switch_Oper_Summary_Location
type Controller_Switch_Oper_Summary_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of Controller_Switch_Oper_Summary_Location_PortIter.
    PortIter []Controller_Switch_Oper_Summary_Location_PortIter
}

func (location *Controller_Switch_Oper_Summary_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", location.SerialNum}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Summary_Location_PortIter
type Controller_Switch_Oper_Summary_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Indicates the port speed in bits per second. The type is string.
    PortSpeed interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Summary_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    portIter.EntityData.Leafs["phys-state"] = types.YLeaf{"PhysState", portIter.PhysState}
    portIter.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", portIter.AdminState}
    portIter.EntityData.Leafs["port-speed"] = types.YLeaf{"PortSpeed", portIter.PortSpeed}
    portIter.EntityData.Leafs["protocol-state"] = types.YLeaf{"ProtocolState", portIter.ProtocolState}
    portIter.EntityData.Leafs["forwarding"] = types.YLeaf{"Forwarding", portIter.Forwarding}
    portIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", portIter.ConnectsTo}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics
type Controller_Switch_Oper_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SummaryStatistics Controller_Switch_Oper_Statistics_SummaryStatistics

    
    Detail Controller_Switch_Oper_Statistics_Detail
}

func (statistics *Controller_Switch_Oper_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "oper"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["summary-statistics"] = types.YChild{"SummaryStatistics", &statistics.SummaryStatistics}
    statistics.EntityData.Children["detail"] = types.YChild{"Detail", &statistics.Detail}
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics
type Controller_Switch_Oper_Statistics_SummaryStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Statistics_SummaryStatistics_Location.
    Location []Controller_Switch_Oper_Statistics_SummaryStatistics_Location
}

func (summaryStatistics *Controller_Switch_Oper_Statistics_SummaryStatistics) GetEntityData() *types.CommonEntityData {
    summaryStatistics.EntityData.YFilter = summaryStatistics.YFilter
    summaryStatistics.EntityData.YangName = "summary-statistics"
    summaryStatistics.EntityData.BundleName = "cisco_ios_xr"
    summaryStatistics.EntityData.ParentYangName = "statistics"
    summaryStatistics.EntityData.SegmentPath = "summary-statistics"
    summaryStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryStatistics.EntityData.Children = make(map[string]types.YChild)
    summaryStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range summaryStatistics.Location {
        summaryStatistics.EntityData.Children[types.GetSegmentPath(&summaryStatistics.Location[i])] = types.YChild{"Location", &summaryStatistics.Location[i]}
    }
    summaryStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summaryStatistics.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics_Location
type Controller_Switch_Oper_Statistics_SummaryStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Statistics_SummaryStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", location.SerialNum}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter
type Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Physical port state changes. The type is interface{} with range:
    // 0..4294967295.
    StateChanges interface{}

    // Packets transmitted on this switch port. The type is interface{} with
    // range: 0..18446744073709551615.
    SwSumTxPackets interface{}

    // Indicates the port speed in bits per second. The type is interface{} with
    // range: 0..18446744073709551615.
    SwSumRxPackets interface{}

    // Indicates the number of transmitted packets that had an error or were
    // dropped by the policer. The type is interface{} with range:
    // 0..18446744073709551615.
    SwSumTxDropsErrors interface{}

    // Indicates the number of received packets that had an error or were dropped
    // by the policer. The type is interface{} with range:
    // 0..18446744073709551615.
    SwSumRxDropsErrors interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Statistics_SummaryStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    portIter.EntityData.Leafs["phys-state"] = types.YLeaf{"PhysState", portIter.PhysState}
    portIter.EntityData.Leafs["state-changes"] = types.YLeaf{"StateChanges", portIter.StateChanges}
    portIter.EntityData.Leafs["sw-sum-tx-packets"] = types.YLeaf{"SwSumTxPackets", portIter.SwSumTxPackets}
    portIter.EntityData.Leafs["sw-sum-rx-packets"] = types.YLeaf{"SwSumRxPackets", portIter.SwSumRxPackets}
    portIter.EntityData.Leafs["sw-sum-tx-drops-errors"] = types.YLeaf{"SwSumTxDropsErrors", portIter.SwSumTxDropsErrors}
    portIter.EntityData.Leafs["sw-sum-rx-drops-errors"] = types.YLeaf{"SwSumRxDropsErrors", portIter.SwSumRxDropsErrors}
    portIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", portIter.ConnectsTo}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail
type Controller_Switch_Oper_Statistics_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Statistics_Detail_Location.
    Location []Controller_Switch_Oper_Statistics_Detail_Location
}

func (detail *Controller_Switch_Oper_Statistics_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "statistics"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location
type Controller_Switch_Oper_Statistics_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Statistics_Detail_Location_PortIter.
    PortIter []Controller_Switch_Oper_Statistics_Detail_Location_PortIter
}

func (location *Controller_Switch_Oper_Statistics_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location_PortIter
type Controller_Switch_Oper_Statistics_Detail_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Indicates the port speed in bits per second. The type is string.
    PortSpeed interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}

    
    Counters Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters
}

func (portIter *Controller_Switch_Oper_Statistics_Detail_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["counters"] = types.YChild{"Counters", &portIter.Counters}
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    portIter.EntityData.Leafs["phys-state"] = types.YLeaf{"PhysState", portIter.PhysState}
    portIter.EntityData.Leafs["port-speed"] = types.YLeaf{"PortSpeed", portIter.PortSpeed}
    portIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", portIter.ConnectsTo}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters
type Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxUcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxMcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFlowControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxGoodOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBadOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFifoOverrun interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxUndersize interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxFragments interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxOversize interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxJabber interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxBadCrc interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxCollisions interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxPolicingDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxUcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxMcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxBcastPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxFlowControl interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxGoodOctets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxDeferred interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxFifoUnrun interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxMultCollision interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxExcessCollision interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxLateCollisions interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxPolicingDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetTxqDrops interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets64 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets65127 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets128255 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets256511 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets5121023 interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    SwDetRxtxPackets1024Max interface{}
}

func (counters *Controller_Switch_Oper_Statistics_Detail_Location_PortIter_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "port-iter"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["sw-det-rx-ucast-packets"] = types.YLeaf{"SwDetRxUcastPackets", counters.SwDetRxUcastPackets}
    counters.EntityData.Leafs["sw-det-rx-mcast-packets"] = types.YLeaf{"SwDetRxMcastPackets", counters.SwDetRxMcastPackets}
    counters.EntityData.Leafs["sw-det-rx-bcast-packets"] = types.YLeaf{"SwDetRxBcastPackets", counters.SwDetRxBcastPackets}
    counters.EntityData.Leafs["sw-det-rx-flow-control"] = types.YLeaf{"SwDetRxFlowControl", counters.SwDetRxFlowControl}
    counters.EntityData.Leafs["sw-det-rx-good-octets"] = types.YLeaf{"SwDetRxGoodOctets", counters.SwDetRxGoodOctets}
    counters.EntityData.Leafs["sw-det-rx-bad-octets"] = types.YLeaf{"SwDetRxBadOctets", counters.SwDetRxBadOctets}
    counters.EntityData.Leafs["sw-det-rx-fifo-overrun"] = types.YLeaf{"SwDetRxFifoOverrun", counters.SwDetRxFifoOverrun}
    counters.EntityData.Leafs["sw-det-rx-undersize"] = types.YLeaf{"SwDetRxUndersize", counters.SwDetRxUndersize}
    counters.EntityData.Leafs["sw-det-rx-fragments"] = types.YLeaf{"SwDetRxFragments", counters.SwDetRxFragments}
    counters.EntityData.Leafs["sw-det-rx-oversize"] = types.YLeaf{"SwDetRxOversize", counters.SwDetRxOversize}
    counters.EntityData.Leafs["sw-det-rx-jabber"] = types.YLeaf{"SwDetRxJabber", counters.SwDetRxJabber}
    counters.EntityData.Leafs["sw-det-rx-errors"] = types.YLeaf{"SwDetRxErrors", counters.SwDetRxErrors}
    counters.EntityData.Leafs["sw-det-rx-bad-crc"] = types.YLeaf{"SwDetRxBadCrc", counters.SwDetRxBadCrc}
    counters.EntityData.Leafs["sw-det-rx-collisions"] = types.YLeaf{"SwDetRxCollisions", counters.SwDetRxCollisions}
    counters.EntityData.Leafs["sw-det-rx-policing-drops"] = types.YLeaf{"SwDetRxPolicingDrops", counters.SwDetRxPolicingDrops}
    counters.EntityData.Leafs["sw-det-tx-ucast-packets"] = types.YLeaf{"SwDetTxUcastPackets", counters.SwDetTxUcastPackets}
    counters.EntityData.Leafs["sw-det-tx-mcast-packets"] = types.YLeaf{"SwDetTxMcastPackets", counters.SwDetTxMcastPackets}
    counters.EntityData.Leafs["sw-det-tx-bcast-packets"] = types.YLeaf{"SwDetTxBcastPackets", counters.SwDetTxBcastPackets}
    counters.EntityData.Leafs["sw-det-tx-flow-control"] = types.YLeaf{"SwDetTxFlowControl", counters.SwDetTxFlowControl}
    counters.EntityData.Leafs["sw-det-tx-good-octets"] = types.YLeaf{"SwDetTxGoodOctets", counters.SwDetTxGoodOctets}
    counters.EntityData.Leafs["sw-det-tx-deferred"] = types.YLeaf{"SwDetTxDeferred", counters.SwDetTxDeferred}
    counters.EntityData.Leafs["sw-det-tx-fifo-unrun"] = types.YLeaf{"SwDetTxFifoUnrun", counters.SwDetTxFifoUnrun}
    counters.EntityData.Leafs["sw-det-tx-mult-collision"] = types.YLeaf{"SwDetTxMultCollision", counters.SwDetTxMultCollision}
    counters.EntityData.Leafs["sw-det-tx-excess-collision"] = types.YLeaf{"SwDetTxExcessCollision", counters.SwDetTxExcessCollision}
    counters.EntityData.Leafs["sw-det-tx-late-collisions"] = types.YLeaf{"SwDetTxLateCollisions", counters.SwDetTxLateCollisions}
    counters.EntityData.Leafs["sw-det-tx-policing-drops"] = types.YLeaf{"SwDetTxPolicingDrops", counters.SwDetTxPolicingDrops}
    counters.EntityData.Leafs["sw-det-txq-drops"] = types.YLeaf{"SwDetTxqDrops", counters.SwDetTxqDrops}
    counters.EntityData.Leafs["sw-det-rxtx-packets-64"] = types.YLeaf{"SwDetRxtxPackets64", counters.SwDetRxtxPackets64}
    counters.EntityData.Leafs["sw-det-rxtx-packets-65-127"] = types.YLeaf{"SwDetRxtxPackets65127", counters.SwDetRxtxPackets65127}
    counters.EntityData.Leafs["sw-det-rxtx-packets-128-255"] = types.YLeaf{"SwDetRxtxPackets128255", counters.SwDetRxtxPackets128255}
    counters.EntityData.Leafs["sw-det-rxtx-packets-256-511"] = types.YLeaf{"SwDetRxtxPackets256511", counters.SwDetRxtxPackets256511}
    counters.EntityData.Leafs["sw-det-rxtx-packets-512-1023"] = types.YLeaf{"SwDetRxtxPackets5121023", counters.SwDetRxtxPackets5121023}
    counters.EntityData.Leafs["sw-det-rxtx-packets-1024-max"] = types.YLeaf{"SwDetRxtxPackets1024Max", counters.SwDetRxtxPackets1024Max}
    return &(counters.EntityData)
}

// Controller_Switch_Oper_Serdes
type Controller_Switch_Oper_Serdes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SerdesStatistics Controller_Switch_Oper_Serdes_SerdesStatistics
}

func (serdes *Controller_Switch_Oper_Serdes) GetEntityData() *types.CommonEntityData {
    serdes.EntityData.YFilter = serdes.YFilter
    serdes.EntityData.YangName = "serdes"
    serdes.EntityData.BundleName = "cisco_ios_xr"
    serdes.EntityData.ParentYangName = "oper"
    serdes.EntityData.SegmentPath = "serdes"
    serdes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdes.EntityData.Children = make(map[string]types.YChild)
    serdes.EntityData.Children["serdes-statistics"] = types.YChild{"SerdesStatistics", &serdes.SerdesStatistics}
    serdes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(serdes.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics
type Controller_Switch_Oper_Serdes_SerdesStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location.
    Location []Controller_Switch_Oper_Serdes_SerdesStatistics_Location
}

func (serdesStatistics *Controller_Switch_Oper_Serdes_SerdesStatistics) GetEntityData() *types.CommonEntityData {
    serdesStatistics.EntityData.YFilter = serdesStatistics.YFilter
    serdesStatistics.EntityData.YangName = "serdes-statistics"
    serdesStatistics.EntityData.BundleName = "cisco_ios_xr"
    serdesStatistics.EntityData.ParentYangName = "serdes"
    serdesStatistics.EntityData.SegmentPath = "serdes-statistics"
    serdesStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdesStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdesStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdesStatistics.EntityData.Children = make(map[string]types.YChild)
    serdesStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range serdesStatistics.Location {
        serdesStatistics.EntityData.Children[types.GetSegmentPath(&serdesStatistics.Location[i])] = types.YChild{"Location", &serdesStatistics.Location[i]}
    }
    serdesStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(serdesStatistics.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch Serdes information for.
    // The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Serdes_SerdesStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "serdes-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry.
    SerdesEntry []Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry
}

func (portIter *Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["serdes-entry"] = types.YChild{"SerdesEntry", nil}
    for i := range portIter.SerdesEntry {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.SerdesEntry[i])] = types.YChild{"SerdesEntry", &portIter.SerdesEntry[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry
type Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Id interface{}

    // The type is string.
    BaseReg interface{}

    // The type is string.
    Desc interface{}

    // The type is string.
    Lane0 interface{}

    // The type is string.
    Lane1 interface{}

    // The type is string.
    Lane2 interface{}

    // The type is string.
    Lane3 interface{}
}

func (serdesEntry *Controller_Switch_Oper_Serdes_SerdesStatistics_Location_PortIter_SerdesEntry) GetEntityData() *types.CommonEntityData {
    serdesEntry.EntityData.YFilter = serdesEntry.YFilter
    serdesEntry.EntityData.YangName = "serdes-entry"
    serdesEntry.EntityData.BundleName = "cisco_ios_xr"
    serdesEntry.EntityData.ParentYangName = "port-iter"
    serdesEntry.EntityData.SegmentPath = "serdes-entry" + "[id='" + fmt.Sprintf("%v", serdesEntry.Id) + "']"
    serdesEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    serdesEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    serdesEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    serdesEntry.EntityData.Children = make(map[string]types.YChild)
    serdesEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    serdesEntry.EntityData.Leafs["id"] = types.YLeaf{"Id", serdesEntry.Id}
    serdesEntry.EntityData.Leafs["base-reg"] = types.YLeaf{"BaseReg", serdesEntry.BaseReg}
    serdesEntry.EntityData.Leafs["desc"] = types.YLeaf{"Desc", serdesEntry.Desc}
    serdesEntry.EntityData.Leafs["lane-0"] = types.YLeaf{"Lane0", serdesEntry.Lane0}
    serdesEntry.EntityData.Leafs["lane-1"] = types.YLeaf{"Lane1", serdesEntry.Lane1}
    serdesEntry.EntityData.Leafs["lane-2"] = types.YLeaf{"Lane2", serdesEntry.Lane2}
    serdesEntry.EntityData.Leafs["lane-3"] = types.YLeaf{"Lane3", serdesEntry.Lane3}
    return &(serdesEntry.EntityData)
}

// Controller_Switch_Oper_Mac
type Controller_Switch_Oper_Mac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    MacStatistics Controller_Switch_Oper_Mac_MacStatistics
}

func (mac *Controller_Switch_Oper_Mac) GetEntityData() *types.CommonEntityData {
    mac.EntityData.YFilter = mac.YFilter
    mac.EntityData.YangName = "mac"
    mac.EntityData.BundleName = "cisco_ios_xr"
    mac.EntityData.ParentYangName = "oper"
    mac.EntityData.SegmentPath = "mac"
    mac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mac.EntityData.Children = make(map[string]types.YChild)
    mac.EntityData.Children["mac-statistics"] = types.YChild{"MacStatistics", &mac.MacStatistics}
    mac.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mac.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics
type Controller_Switch_Oper_Mac_MacStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mac_MacStatistics_Location.
    Location []Controller_Switch_Oper_Mac_MacStatistics_Location
}

func (macStatistics *Controller_Switch_Oper_Mac_MacStatistics) GetEntityData() *types.CommonEntityData {
    macStatistics.EntityData.YFilter = macStatistics.YFilter
    macStatistics.EntityData.YangName = "mac-statistics"
    macStatistics.EntityData.BundleName = "cisco_ios_xr"
    macStatistics.EntityData.ParentYangName = "mac"
    macStatistics.EntityData.SegmentPath = "mac-statistics"
    macStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macStatistics.EntityData.Children = make(map[string]types.YChild)
    macStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range macStatistics.Location {
        macStatistics.EntityData.Children[types.GetSegmentPath(&macStatistics.Location[i])] = types.YChild{"Location", &macStatistics.Location[i]}
    }
    macStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macStatistics.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location
type Controller_Switch_Oper_Mac_MacStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch MAC information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Mac_MacStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "mac-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter
type Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry.
    MacEntry []Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry
}

func (portIter *Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["mac-entry"] = types.YChild{"MacEntry", nil}
    for i := range portIter.MacEntry {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.MacEntry[i])] = types.YChild{"MacEntry", &portIter.MacEntry[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry
type Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    Id interface{}

    // The type is string.
    BaseReg interface{}

    // The type is string.
    Desc interface{}

    // The type is string.
    Value interface{}
}

func (macEntry *Controller_Switch_Oper_Mac_MacStatistics_Location_PortIter_MacEntry) GetEntityData() *types.CommonEntityData {
    macEntry.EntityData.YFilter = macEntry.YFilter
    macEntry.EntityData.YangName = "mac-entry"
    macEntry.EntityData.BundleName = "cisco_ios_xr"
    macEntry.EntityData.ParentYangName = "port-iter"
    macEntry.EntityData.SegmentPath = "mac-entry" + "[id='" + fmt.Sprintf("%v", macEntry.Id) + "']"
    macEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macEntry.EntityData.Children = make(map[string]types.YChild)
    macEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    macEntry.EntityData.Leafs["id"] = types.YLeaf{"Id", macEntry.Id}
    macEntry.EntityData.Leafs["base-reg"] = types.YLeaf{"BaseReg", macEntry.BaseReg}
    macEntry.EntityData.Leafs["desc"] = types.YLeaf{"Desc", macEntry.Desc}
    macEntry.EntityData.Leafs["value"] = types.YLeaf{"Value", macEntry.Value}
    return &(macEntry.EntityData)
}

// Controller_Switch_Oper_Bridge
type Controller_Switch_Oper_Bridge struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Statistics Controller_Switch_Oper_Bridge_Statistics
}

func (bridge *Controller_Switch_Oper_Bridge) GetEntityData() *types.CommonEntityData {
    bridge.EntityData.YFilter = bridge.YFilter
    bridge.EntityData.YangName = "bridge"
    bridge.EntityData.BundleName = "cisco_ios_xr"
    bridge.EntityData.ParentYangName = "oper"
    bridge.EntityData.SegmentPath = "bridge"
    bridge.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bridge.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bridge.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bridge.EntityData.Children = make(map[string]types.YChild)
    bridge.EntityData.Children["statistics"] = types.YChild{"Statistics", &bridge.Statistics}
    bridge.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bridge.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics
type Controller_Switch_Oper_Bridge_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Bridge_Statistics_Location.
    Location []Controller_Switch_Oper_Bridge_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Bridge_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "bridge"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range statistics.Location {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Location[i])] = types.YChild{"Location", &statistics.Location[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location
type Controller_Switch_Oper_Bridge_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId.
    IngressSetId []Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId

    // The type is slice of
    // Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId.
    EgressSetId []Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId
}

func (location *Controller_Switch_Oper_Bridge_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["ingress-set-id"] = types.YChild{"IngressSetId", nil}
    for i := range location.IngressSetId {
        location.EntityData.Children[types.GetSegmentPath(&location.IngressSetId[i])] = types.YChild{"IngressSetId", &location.IngressSetId[i]}
    }
    location.EntityData.Children["egress-set-id"] = types.YChild{"EgressSetId", nil}
    for i := range location.EgressSetId {
        location.EntityData.Children[types.GetSegmentPath(&location.EgressSetId[i])] = types.YChild{"EgressSetId", &location.EgressSetId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId
type Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    IngressSet interface{}

    // The type is string.
    IngressSetName interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressVlanDiscards interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressSecurityDiscards interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    IngressOtherDiscards interface{}
}

func (ingressSetId *Controller_Switch_Oper_Bridge_Statistics_Location_IngressSetId) GetEntityData() *types.CommonEntityData {
    ingressSetId.EntityData.YFilter = ingressSetId.YFilter
    ingressSetId.EntityData.YangName = "ingress-set-id"
    ingressSetId.EntityData.BundleName = "cisco_ios_xr"
    ingressSetId.EntityData.ParentYangName = "location"
    ingressSetId.EntityData.SegmentPath = "ingress-set-id" + "[ingress-set='" + fmt.Sprintf("%v", ingressSetId.IngressSet) + "']"
    ingressSetId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ingressSetId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ingressSetId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ingressSetId.EntityData.Children = make(map[string]types.YChild)
    ingressSetId.EntityData.Leafs = make(map[string]types.YLeaf)
    ingressSetId.EntityData.Leafs["ingress-set"] = types.YLeaf{"IngressSet", ingressSetId.IngressSet}
    ingressSetId.EntityData.Leafs["ingress-set-name"] = types.YLeaf{"IngressSetName", ingressSetId.IngressSetName}
    ingressSetId.EntityData.Leafs["ingress-frames"] = types.YLeaf{"IngressFrames", ingressSetId.IngressFrames}
    ingressSetId.EntityData.Leafs["ingress-vlan-discards"] = types.YLeaf{"IngressVlanDiscards", ingressSetId.IngressVlanDiscards}
    ingressSetId.EntityData.Leafs["ingress-security-discards"] = types.YLeaf{"IngressSecurityDiscards", ingressSetId.IngressSecurityDiscards}
    ingressSetId.EntityData.Leafs["ingress-other-discards"] = types.YLeaf{"IngressOtherDiscards", ingressSetId.IngressOtherDiscards}
    return &(ingressSetId.EntityData)
}

// Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId
type Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    EgressSet interface{}

    // The type is string.
    EgressSetName interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressUcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressMcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressBcastFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressDiscardedFrames interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressTxqCongestion interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressCtrlPackets interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EgressOtherDrops interface{}
}

func (egressSetId *Controller_Switch_Oper_Bridge_Statistics_Location_EgressSetId) GetEntityData() *types.CommonEntityData {
    egressSetId.EntityData.YFilter = egressSetId.YFilter
    egressSetId.EntityData.YangName = "egress-set-id"
    egressSetId.EntityData.BundleName = "cisco_ios_xr"
    egressSetId.EntityData.ParentYangName = "location"
    egressSetId.EntityData.SegmentPath = "egress-set-id" + "[egress-set='" + fmt.Sprintf("%v", egressSetId.EgressSet) + "']"
    egressSetId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    egressSetId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    egressSetId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    egressSetId.EntityData.Children = make(map[string]types.YChild)
    egressSetId.EntityData.Leafs = make(map[string]types.YLeaf)
    egressSetId.EntityData.Leafs["egress-set"] = types.YLeaf{"EgressSet", egressSetId.EgressSet}
    egressSetId.EntityData.Leafs["egress-set-name"] = types.YLeaf{"EgressSetName", egressSetId.EgressSetName}
    egressSetId.EntityData.Leafs["egress-ucast-frames"] = types.YLeaf{"EgressUcastFrames", egressSetId.EgressUcastFrames}
    egressSetId.EntityData.Leafs["egress-mcast-frames"] = types.YLeaf{"EgressMcastFrames", egressSetId.EgressMcastFrames}
    egressSetId.EntityData.Leafs["egress-bcast-frames"] = types.YLeaf{"EgressBcastFrames", egressSetId.EgressBcastFrames}
    egressSetId.EntityData.Leafs["egress-discarded-frames"] = types.YLeaf{"EgressDiscardedFrames", egressSetId.EgressDiscardedFrames}
    egressSetId.EntityData.Leafs["egress-txq-congestion"] = types.YLeaf{"EgressTxqCongestion", egressSetId.EgressTxqCongestion}
    egressSetId.EntityData.Leafs["egress-ctrl-packets"] = types.YLeaf{"EgressCtrlPackets", egressSetId.EgressCtrlPackets}
    egressSetId.EntityData.Leafs["egress-other-drops"] = types.YLeaf{"EgressOtherDrops", egressSetId.EgressOtherDrops}
    return &(egressSetId.EntityData)
}

// Controller_Switch_Oper_Fdb
type Controller_Switch_Oper_Fdb struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Vlan Controller_Switch_Oper_Fdb_Vlan

    
    Mac Controller_Switch_Oper_Fdb_Mac

    
    Port Controller_Switch_Oper_Fdb_Port

    
    Statistics Controller_Switch_Oper_Fdb_Statistics

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_SwitchFdbCommon
}

func (fdb *Controller_Switch_Oper_Fdb) GetEntityData() *types.CommonEntityData {
    fdb.EntityData.YFilter = fdb.YFilter
    fdb.EntityData.YangName = "fdb"
    fdb.EntityData.BundleName = "cisco_ios_xr"
    fdb.EntityData.ParentYangName = "oper"
    fdb.EntityData.SegmentPath = "fdb"
    fdb.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdb.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdb.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdb.EntityData.Children = make(map[string]types.YChild)
    fdb.EntityData.Children["vlan"] = types.YChild{"Vlan", &fdb.Vlan}
    fdb.EntityData.Children["mac"] = types.YChild{"Mac", &fdb.Mac}
    fdb.EntityData.Children["port"] = types.YChild{"Port", &fdb.Port}
    fdb.EntityData.Children["statistics"] = types.YChild{"Statistics", &fdb.Statistics}
    fdb.EntityData.Children["switch-fdb-common"] = types.YChild{"SwitchFdbCommon", &fdb.SwitchFdbCommon}
    fdb.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdb.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan
type Controller_Switch_Oper_Fdb_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Vlan_VlanIter.
    VlanIter []Controller_Switch_Oper_Fdb_Vlan_VlanIter
}

func (vlan *Controller_Switch_Oper_Fdb_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "cisco_ios_xr"
    vlan.EntityData.ParentYangName = "fdb"
    vlan.EntityData.SegmentPath = "vlan"
    vlan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlan.EntityData.Children = make(map[string]types.YChild)
    vlan.EntityData.Children["vlan-iter"] = types.YChild{"VlanIter", nil}
    for i := range vlan.VlanIter {
        vlan.EntityData.Children[types.GetSegmentPath(&vlan.VlanIter[i])] = types.YChild{"VlanIter", &vlan.VlanIter[i]}
    }
    vlan.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vlan.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter
type Controller_Switch_Oper_Fdb_Vlan_VlanIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon
}

func (vlanIter *Controller_Switch_Oper_Fdb_Vlan_VlanIter) GetEntityData() *types.CommonEntityData {
    vlanIter.EntityData.YFilter = vlanIter.YFilter
    vlanIter.EntityData.YangName = "vlan-iter"
    vlanIter.EntityData.BundleName = "cisco_ios_xr"
    vlanIter.EntityData.ParentYangName = "vlan"
    vlanIter.EntityData.SegmentPath = "vlan-iter" + "[vlan='" + fmt.Sprintf("%v", vlanIter.Vlan) + "']"
    vlanIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanIter.EntityData.Children = make(map[string]types.YChild)
    vlanIter.EntityData.Children["switch-fdb-common"] = types.YChild{"SwitchFdbCommon", &vlanIter.SwitchFdbCommon}
    vlanIter.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanIter.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanIter.Vlan}
    return &(vlanIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location.
    Location []Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "vlan-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = make(map[string]types.YChild)
    switchFdbCommon.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children[types.GetSegmentPath(&switchFdbCommon.Location[i])] = types.YChild{"Location", &switchFdbCommon.Location[i]}
    }
    switchFdbCommon.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["fdb-block"] = types.YChild{"FdbBlock", &location.FdbBlock}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", location.NumEntries}
    location.EntityData.Leafs["has-trunk-entry"] = types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry}
    location.EntityData.Leafs["trunk-entry-message"] = types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = make(map[string]types.YChild)
    fdbBlock.EntityData.Children["fdb-entry"] = types.YChild{"FdbEntry", nil}
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children[types.GetSegmentPath(&fdbBlock.FdbEntry[i])] = types.YChild{"FdbEntry", &fdbBlock.FdbEntry[i]}
    }
    fdbBlock.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Vlan_VlanIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + "[fdb-index='" + fmt.Sprintf("%v", fdbEntry.FdbIndex) + "']"
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = make(map[string]types.YChild)
    fdbEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    fdbEntry.EntityData.Leafs["fdb-index"] = types.YLeaf{"FdbIndex", fdbEntry.FdbIndex}
    fdbEntry.EntityData.Leafs["fdb-mac-addr"] = types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr}
    fdbEntry.EntityData.Leafs["fdb-vlan"] = types.YLeaf{"FdbVlan", fdbEntry.FdbVlan}
    fdbEntry.EntityData.Leafs["fdb-vlan-hex"] = types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex}
    fdbEntry.EntityData.Leafs["fdb-port"] = types.YLeaf{"FdbPort", fdbEntry.FdbPort}
    fdbEntry.EntityData.Leafs["fdb-trap-entry"] = types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry}
    fdbEntry.EntityData.Leafs["fdb-static-entry"] = types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry}
    fdbEntry.EntityData.Leafs["fdb-synced-cores"] = types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores}
    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac
type Controller_Switch_Oper_Fdb_Mac struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Mac_MacIter.
    MacIter []Controller_Switch_Oper_Fdb_Mac_MacIter
}

func (mac *Controller_Switch_Oper_Fdb_Mac) GetEntityData() *types.CommonEntityData {
    mac.EntityData.YFilter = mac.YFilter
    mac.EntityData.YangName = "mac"
    mac.EntityData.BundleName = "cisco_ios_xr"
    mac.EntityData.ParentYangName = "fdb"
    mac.EntityData.SegmentPath = "mac"
    mac.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mac.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mac.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mac.EntityData.Children = make(map[string]types.YChild)
    mac.EntityData.Children["mac-iter"] = types.YChild{"MacIter", nil}
    for i := range mac.MacIter {
        mac.EntityData.Children[types.GetSegmentPath(&mac.MacIter[i])] = types.YChild{"MacIter", &mac.MacIter[i]}
    }
    mac.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mac.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter
type Controller_Switch_Oper_Fdb_Mac_MacIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Mac interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon
}

func (macIter *Controller_Switch_Oper_Fdb_Mac_MacIter) GetEntityData() *types.CommonEntityData {
    macIter.EntityData.YFilter = macIter.YFilter
    macIter.EntityData.YangName = "mac-iter"
    macIter.EntityData.BundleName = "cisco_ios_xr"
    macIter.EntityData.ParentYangName = "mac"
    macIter.EntityData.SegmentPath = "mac-iter" + "[mac='" + fmt.Sprintf("%v", macIter.Mac) + "']"
    macIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macIter.EntityData.Children = make(map[string]types.YChild)
    macIter.EntityData.Children["switch-fdb-common"] = types.YChild{"SwitchFdbCommon", &macIter.SwitchFdbCommon}
    macIter.EntityData.Leafs = make(map[string]types.YLeaf)
    macIter.EntityData.Leafs["mac"] = types.YLeaf{"Mac", macIter.Mac}
    return &(macIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location.
    Location []Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "mac-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = make(map[string]types.YChild)
    switchFdbCommon.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children[types.GetSegmentPath(&switchFdbCommon.Location[i])] = types.YChild{"Location", &switchFdbCommon.Location[i]}
    }
    switchFdbCommon.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["fdb-block"] = types.YChild{"FdbBlock", &location.FdbBlock}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", location.NumEntries}
    location.EntityData.Leafs["has-trunk-entry"] = types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry}
    location.EntityData.Leafs["trunk-entry-message"] = types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = make(map[string]types.YChild)
    fdbBlock.EntityData.Children["fdb-entry"] = types.YChild{"FdbEntry", nil}
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children[types.GetSegmentPath(&fdbBlock.FdbEntry[i])] = types.YChild{"FdbEntry", &fdbBlock.FdbEntry[i]}
    }
    fdbBlock.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Mac_MacIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + "[fdb-index='" + fmt.Sprintf("%v", fdbEntry.FdbIndex) + "']"
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = make(map[string]types.YChild)
    fdbEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    fdbEntry.EntityData.Leafs["fdb-index"] = types.YLeaf{"FdbIndex", fdbEntry.FdbIndex}
    fdbEntry.EntityData.Leafs["fdb-mac-addr"] = types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr}
    fdbEntry.EntityData.Leafs["fdb-vlan"] = types.YLeaf{"FdbVlan", fdbEntry.FdbVlan}
    fdbEntry.EntityData.Leafs["fdb-vlan-hex"] = types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex}
    fdbEntry.EntityData.Leafs["fdb-port"] = types.YLeaf{"FdbPort", fdbEntry.FdbPort}
    fdbEntry.EntityData.Leafs["fdb-trap-entry"] = types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry}
    fdbEntry.EntityData.Leafs["fdb-static-entry"] = types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry}
    fdbEntry.EntityData.Leafs["fdb-synced-cores"] = types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores}
    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Port
type Controller_Switch_Oper_Fdb_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Port_PortIter.
    PortIter []Controller_Switch_Oper_Fdb_Port_PortIter
}

func (port *Controller_Switch_Oper_Fdb_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "fdb"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range port.PortIter {
        port.EntityData.Children[types.GetSegmentPath(&port.PortIter[i])] = types.YChild{"PortIter", &port.PortIter[i]}
    }
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(port.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter
type Controller_Switch_Oper_Fdb_Port_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port used for filtering. The type is
    // interface{} with range: 0..127.
    Port interface{}

    
    SwitchFdbCommon Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon
}

func (portIter *Controller_Switch_Oper_Fdb_Port_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "port"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["switch-fdb-common"] = types.YChild{"SwitchFdbCommon", &portIter.SwitchFdbCommon}
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location.
    Location []Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "port-iter"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = make(map[string]types.YChild)
    switchFdbCommon.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children[types.GetSegmentPath(&switchFdbCommon.Location[i])] = types.YChild{"Location", &switchFdbCommon.Location[i]}
    }
    switchFdbCommon.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["fdb-block"] = types.YChild{"FdbBlock", &location.FdbBlock}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", location.NumEntries}
    location.EntityData.Leafs["has-trunk-entry"] = types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry}
    location.EntityData.Leafs["trunk-entry-message"] = types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = make(map[string]types.YChild)
    fdbBlock.EntityData.Children["fdb-entry"] = types.YChild{"FdbEntry", nil}
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children[types.GetSegmentPath(&fdbBlock.FdbEntry[i])] = types.YChild{"FdbEntry", &fdbBlock.FdbEntry[i]}
    }
    fdbBlock.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_Port_PortIter_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + "[fdb-index='" + fmt.Sprintf("%v", fdbEntry.FdbIndex) + "']"
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = make(map[string]types.YChild)
    fdbEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    fdbEntry.EntityData.Leafs["fdb-index"] = types.YLeaf{"FdbIndex", fdbEntry.FdbIndex}
    fdbEntry.EntityData.Leafs["fdb-mac-addr"] = types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr}
    fdbEntry.EntityData.Leafs["fdb-vlan"] = types.YLeaf{"FdbVlan", fdbEntry.FdbVlan}
    fdbEntry.EntityData.Leafs["fdb-vlan-hex"] = types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex}
    fdbEntry.EntityData.Leafs["fdb-port"] = types.YLeaf{"FdbPort", fdbEntry.FdbPort}
    fdbEntry.EntityData.Leafs["fdb-trap-entry"] = types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry}
    fdbEntry.EntityData.Leafs["fdb-static-entry"] = types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry}
    fdbEntry.EntityData.Leafs["fdb-synced-cores"] = types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores}
    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics
type Controller_Switch_Oper_Fdb_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_Statistics_Location.
    Location []Controller_Switch_Oper_Fdb_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Fdb_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "fdb"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range statistics.Location {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Location[i])] = types.YChild{"Location", &statistics.Location[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location
type Controller_Switch_Oper_Fdb_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    CounterInfo Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo

    // The type is slice of Controller_Switch_Oper_Fdb_Statistics_Location_CoreId.
    CoreId []Controller_Switch_Oper_Fdb_Statistics_Location_CoreId
}

func (location *Controller_Switch_Oper_Fdb_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["counter-info"] = types.YChild{"CounterInfo", &location.CounterInfo}
    location.EntityData.Children["core-id"] = types.YChild{"CoreId", nil}
    for i := range location.CoreId {
        location.EntityData.Children[types.GetSegmentPath(&location.CoreId[i])] = types.YChild{"CoreId", &location.CoreId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo
type Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    FdbShadowEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMaxShadowEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMaxHashChain interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesAdded interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesDeleted interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbEntriesUpdated interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbFlushes interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbNewAddresses interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAgedUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbTransplantUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbForwardingUpdates interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressInsertErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdateErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbMemoryErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAllocationErrors interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbAddressUpdatesQueued interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbAddressQueueFull interface{}

    // The type is interface{} with range: 0..4294967295.
    FdbForwardingUpdatesQueued interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbForwardingQueueFull interface{}
}

func (counterInfo *Controller_Switch_Oper_Fdb_Statistics_Location_CounterInfo) GetEntityData() *types.CommonEntityData {
    counterInfo.EntityData.YFilter = counterInfo.YFilter
    counterInfo.EntityData.YangName = "counter-info"
    counterInfo.EntityData.BundleName = "cisco_ios_xr"
    counterInfo.EntityData.ParentYangName = "location"
    counterInfo.EntityData.SegmentPath = "counter-info"
    counterInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counterInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counterInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counterInfo.EntityData.Children = make(map[string]types.YChild)
    counterInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    counterInfo.EntityData.Leafs["fdb-shadow-entries"] = types.YLeaf{"FdbShadowEntries", counterInfo.FdbShadowEntries}
    counterInfo.EntityData.Leafs["fdb-max-shadow-entries"] = types.YLeaf{"FdbMaxShadowEntries", counterInfo.FdbMaxShadowEntries}
    counterInfo.EntityData.Leafs["fdb-max-hash-chain"] = types.YLeaf{"FdbMaxHashChain", counterInfo.FdbMaxHashChain}
    counterInfo.EntityData.Leafs["fdb-entries-added"] = types.YLeaf{"FdbEntriesAdded", counterInfo.FdbEntriesAdded}
    counterInfo.EntityData.Leafs["fdb-entries-deleted"] = types.YLeaf{"FdbEntriesDeleted", counterInfo.FdbEntriesDeleted}
    counterInfo.EntityData.Leafs["fdb-entries-updated"] = types.YLeaf{"FdbEntriesUpdated", counterInfo.FdbEntriesUpdated}
    counterInfo.EntityData.Leafs["fdb-flushes"] = types.YLeaf{"FdbFlushes", counterInfo.FdbFlushes}
    counterInfo.EntityData.Leafs["fdb-address-updates"] = types.YLeaf{"FdbAddressUpdates", counterInfo.FdbAddressUpdates}
    counterInfo.EntityData.Leafs["fdb-new-addresses"] = types.YLeaf{"FdbNewAddresses", counterInfo.FdbNewAddresses}
    counterInfo.EntityData.Leafs["fdb-aged-updates"] = types.YLeaf{"FdbAgedUpdates", counterInfo.FdbAgedUpdates}
    counterInfo.EntityData.Leafs["fdb-transplant-updates"] = types.YLeaf{"FdbTransplantUpdates", counterInfo.FdbTransplantUpdates}
    counterInfo.EntityData.Leafs["fdb-forwarding-updates"] = types.YLeaf{"FdbForwardingUpdates", counterInfo.FdbForwardingUpdates}
    counterInfo.EntityData.Leafs["fdb-address-insert-errors"] = types.YLeaf{"FdbAddressInsertErrors", counterInfo.FdbAddressInsertErrors}
    counterInfo.EntityData.Leafs["fdb-address-update-errors"] = types.YLeaf{"FdbAddressUpdateErrors", counterInfo.FdbAddressUpdateErrors}
    counterInfo.EntityData.Leafs["fdb-memory-errors"] = types.YLeaf{"FdbMemoryErrors", counterInfo.FdbMemoryErrors}
    counterInfo.EntityData.Leafs["fdb-allocation-errors"] = types.YLeaf{"FdbAllocationErrors", counterInfo.FdbAllocationErrors}
    counterInfo.EntityData.Leafs["fdb-address-updates-queued"] = types.YLeaf{"FdbAddressUpdatesQueued", counterInfo.FdbAddressUpdatesQueued}
    counterInfo.EntityData.Leafs["fdb-address-queue-full"] = types.YLeaf{"FdbAddressQueueFull", counterInfo.FdbAddressQueueFull}
    counterInfo.EntityData.Leafs["fdb-forwarding-updates-queued"] = types.YLeaf{"FdbForwardingUpdatesQueued", counterInfo.FdbForwardingUpdatesQueued}
    counterInfo.EntityData.Leafs["fdb-forwarding-queue-full"] = types.YLeaf{"FdbForwardingQueueFull", counterInfo.FdbForwardingQueueFull}
    return &(counterInfo.EntityData)
}

// Controller_Switch_Oper_Fdb_Statistics_Location_CoreId
type Controller_Switch_Oper_Fdb_Statistics_Location_CoreId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range:
    // -2147483648..2147483647.
    Core interface{}

    // The type is interface{} with range: 0..4294967295.
    CoreEntries interface{}

    // The type is interface{} with range: 0..4294967295.
    CoreStaticEntries interface{}
}

func (coreId *Controller_Switch_Oper_Fdb_Statistics_Location_CoreId) GetEntityData() *types.CommonEntityData {
    coreId.EntityData.YFilter = coreId.YFilter
    coreId.EntityData.YangName = "core-id"
    coreId.EntityData.BundleName = "cisco_ios_xr"
    coreId.EntityData.ParentYangName = "location"
    coreId.EntityData.SegmentPath = "core-id" + "[core='" + fmt.Sprintf("%v", coreId.Core) + "']"
    coreId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    coreId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    coreId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    coreId.EntityData.Children = make(map[string]types.YChild)
    coreId.EntityData.Leafs = make(map[string]types.YLeaf)
    coreId.EntityData.Leafs["core"] = types.YLeaf{"Core", coreId.Core}
    coreId.EntityData.Leafs["core-entries"] = types.YLeaf{"CoreEntries", coreId.CoreEntries}
    coreId.EntityData.Leafs["core-static-entries"] = types.YLeaf{"CoreStaticEntries", coreId.CoreStaticEntries}
    return &(coreId.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon
type Controller_Switch_Oper_Fdb_SwitchFdbCommon struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location.
    Location []Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location
}

func (switchFdbCommon *Controller_Switch_Oper_Fdb_SwitchFdbCommon) GetEntityData() *types.CommonEntityData {
    switchFdbCommon.EntityData.YFilter = switchFdbCommon.YFilter
    switchFdbCommon.EntityData.YangName = "switch-fdb-common"
    switchFdbCommon.EntityData.BundleName = "cisco_ios_xr"
    switchFdbCommon.EntityData.ParentYangName = "fdb"
    switchFdbCommon.EntityData.SegmentPath = "switch-fdb-common"
    switchFdbCommon.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchFdbCommon.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchFdbCommon.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchFdbCommon.EntityData.Children = make(map[string]types.YChild)
    switchFdbCommon.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range switchFdbCommon.Location {
        switchFdbCommon.EntityData.Children[types.GetSegmentPath(&switchFdbCommon.Location[i])] = types.YChild{"Location", &switchFdbCommon.Location[i]}
    }
    switchFdbCommon.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switchFdbCommon.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch FDB information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of FDB entries in the table. The type is interface{} with range:
    // 0..4294967295.
    NumEntries interface{}

    // FDB entries contain an entry from the trunk. The type is interface{} with
    // range: 0..255.
    HasTrunkEntry interface{}

    // Message displayed when an FDB entry contains an entry for a trunk member
    // port. The type is string.
    TrunkEntryMessage interface{}

    
    FdbBlock Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock
}

func (location *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "switch-fdb-common"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["fdb-block"] = types.YChild{"FdbBlock", &location.FdbBlock}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["num-entries"] = types.YLeaf{"NumEntries", location.NumEntries}
    location.EntityData.Leafs["has-trunk-entry"] = types.YLeaf{"HasTrunkEntry", location.HasTrunkEntry}
    location.EntityData.Leafs["trunk-entry-message"] = types.YLeaf{"TrunkEntryMessage", location.TrunkEntryMessage}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry.
    FdbEntry []Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry
}

func (fdbBlock *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock) GetEntityData() *types.CommonEntityData {
    fdbBlock.EntityData.YFilter = fdbBlock.YFilter
    fdbBlock.EntityData.YangName = "fdb-block"
    fdbBlock.EntityData.BundleName = "cisco_ios_xr"
    fdbBlock.EntityData.ParentYangName = "location"
    fdbBlock.EntityData.SegmentPath = "fdb-block"
    fdbBlock.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbBlock.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbBlock.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbBlock.EntityData.Children = make(map[string]types.YChild)
    fdbBlock.EntityData.Children["fdb-entry"] = types.YChild{"FdbEntry", nil}
    for i := range fdbBlock.FdbEntry {
        fdbBlock.EntityData.Children[types.GetSegmentPath(&fdbBlock.FdbEntry[i])] = types.YChild{"FdbEntry", &fdbBlock.FdbEntry[i]}
    }
    fdbBlock.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fdbBlock.EntityData)
}

// Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry
type Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4294967295.
    FdbIndex interface{}

    // The type is string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    FdbMacAddr interface{}

    // The type is interface{} with range: 0..4095.
    FdbVlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry_FdbVlan
    FdbVlanHex interface{}

    // Switch port MAC address learned on. The type is interface{} with range:
    // 0..127.
    FdbPort interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbTrapEntry interface{}

    // The type is EsdmaSwitchYesNoEnum.
    FdbStaticEntry interface{}

    // The type is slice of interface{} with range: 0..255.
    FdbSyncedCores []interface{}
}

func (fdbEntry *Controller_Switch_Oper_Fdb_SwitchFdbCommon_Location_FdbBlock_FdbEntry) GetEntityData() *types.CommonEntityData {
    fdbEntry.EntityData.YFilter = fdbEntry.YFilter
    fdbEntry.EntityData.YangName = "fdb-entry"
    fdbEntry.EntityData.BundleName = "cisco_ios_xr"
    fdbEntry.EntityData.ParentYangName = "fdb-block"
    fdbEntry.EntityData.SegmentPath = "fdb-entry" + "[fdb-index='" + fmt.Sprintf("%v", fdbEntry.FdbIndex) + "']"
    fdbEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fdbEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fdbEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fdbEntry.EntityData.Children = make(map[string]types.YChild)
    fdbEntry.EntityData.Leafs = make(map[string]types.YLeaf)
    fdbEntry.EntityData.Leafs["fdb-index"] = types.YLeaf{"FdbIndex", fdbEntry.FdbIndex}
    fdbEntry.EntityData.Leafs["fdb-mac-addr"] = types.YLeaf{"FdbMacAddr", fdbEntry.FdbMacAddr}
    fdbEntry.EntityData.Leafs["fdb-vlan"] = types.YLeaf{"FdbVlan", fdbEntry.FdbVlan}
    fdbEntry.EntityData.Leafs["fdb-vlan-hex"] = types.YLeaf{"FdbVlanHex", fdbEntry.FdbVlanHex}
    fdbEntry.EntityData.Leafs["fdb-port"] = types.YLeaf{"FdbPort", fdbEntry.FdbPort}
    fdbEntry.EntityData.Leafs["fdb-trap-entry"] = types.YLeaf{"FdbTrapEntry", fdbEntry.FdbTrapEntry}
    fdbEntry.EntityData.Leafs["fdb-static-entry"] = types.YLeaf{"FdbStaticEntry", fdbEntry.FdbStaticEntry}
    fdbEntry.EntityData.Leafs["fdb-synced-cores"] = types.YLeaf{"FdbSyncedCores", fdbEntry.FdbSyncedCores}
    return &(fdbEntry.EntityData)
}

// Controller_Switch_Oper_Vlan
type Controller_Switch_Oper_Vlan struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Rules Controller_Switch_Oper_Vlan_Rules

    
    Information Controller_Switch_Oper_Vlan_Information

    
    VlanDetail Controller_Switch_Oper_Vlan_VlanDetail

    
    Membership Controller_Switch_Oper_Vlan_Membership
}

func (vlan *Controller_Switch_Oper_Vlan) GetEntityData() *types.CommonEntityData {
    vlan.EntityData.YFilter = vlan.YFilter
    vlan.EntityData.YangName = "vlan"
    vlan.EntityData.BundleName = "cisco_ios_xr"
    vlan.EntityData.ParentYangName = "oper"
    vlan.EntityData.SegmentPath = "vlan"
    vlan.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlan.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlan.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlan.EntityData.Children = make(map[string]types.YChild)
    vlan.EntityData.Children["rules"] = types.YChild{"Rules", &vlan.Rules}
    vlan.EntityData.Children["information"] = types.YChild{"Information", &vlan.Information}
    vlan.EntityData.Children["vlan-detail"] = types.YChild{"VlanDetail", &vlan.VlanDetail}
    vlan.EntityData.Children["membership"] = types.YChild{"Membership", &vlan.Membership}
    vlan.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vlan.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules
type Controller_Switch_Oper_Vlan_Rules struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Rules_Location.
    Location []Controller_Switch_Oper_Vlan_Rules_Location
}

func (rules *Controller_Switch_Oper_Vlan_Rules) GetEntityData() *types.CommonEntityData {
    rules.EntityData.YFilter = rules.YFilter
    rules.EntityData.YangName = "rules"
    rules.EntityData.BundleName = "cisco_ios_xr"
    rules.EntityData.ParentYangName = "vlan"
    rules.EntityData.SegmentPath = "rules"
    rules.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rules.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rules.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rules.EntityData.Children = make(map[string]types.YChild)
    rules.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range rules.Location {
        rules.EntityData.Children[types.GetSegmentPath(&rules.Location[i])] = types.YChild{"Location", &rules.Location[i]}
    }
    rules.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rules.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location
type Controller_Switch_Oper_Vlan_Rules_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // VLAN configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_Vlan_Rules_Location_PortIter.
    PortIter []Controller_Switch_Oper_Vlan_Rules_Location_PortIter
}

func (location *Controller_Switch_Oper_Vlan_Rules_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "rules"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId.
    VlanId []Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId
}

func (portIter *Controller_Switch_Oper_Vlan_Rules_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["vlan-id"] = types.YChild{"VlanId", nil}
    for i := range portIter.VlanId {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.VlanId[i])] = types.YChild{"VlanId", &portIter.VlanId[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This VLAN represents a VLAN membership for this
    // switch port. Multiple rules may exist to support this VLAN. The type is
    // interface{} with range: 0..4095.
    Vlan interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId.
    RuleId []Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId
}

func (vlanId *Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "port-iter"
    vlanId.EntityData.SegmentPath = "vlan-id" + "[vlan='" + fmt.Sprintf("%v", vlanId.Vlan) + "']"
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = make(map[string]types.YChild)
    vlanId.EntityData.Children["rule-id"] = types.YChild{"RuleId", nil}
    for i := range vlanId.RuleId {
        vlanId.EntityData.Children[types.GetSegmentPath(&vlanId.RuleId[i])] = types.YChild{"RuleId", &vlanId.RuleId[i]}
    }
    vlanId.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanId.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanId.Vlan}
    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId
type Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet direction this rule applies to. The type is SwitchDataDirectionEnum.
    Direction interface{}

    // The type is SwitchTableTypeEnum.
    MatchTable interface{}

    // The type is SwitchMatchTypeEnum.
    MatchType interface{}

    // The type is interface{} with range: 0..4095.
    MatchVlanId interface{}

    // The type is SwitchActionTypeEnum.
    Action interface{}

    // The type is interface{} with range: 0..4095.
    ActionVlanId interface{}
}

func (ruleId *Controller_Switch_Oper_Vlan_Rules_Location_PortIter_VlanId_RuleId) GetEntityData() *types.CommonEntityData {
    ruleId.EntityData.YFilter = ruleId.YFilter
    ruleId.EntityData.YangName = "rule-id"
    ruleId.EntityData.BundleName = "cisco_ios_xr"
    ruleId.EntityData.ParentYangName = "vlan-id"
    ruleId.EntityData.SegmentPath = "rule-id"
    ruleId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ruleId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ruleId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ruleId.EntityData.Children = make(map[string]types.YChild)
    ruleId.EntityData.Leafs = make(map[string]types.YLeaf)
    ruleId.EntityData.Leafs["direction"] = types.YLeaf{"Direction", ruleId.Direction}
    ruleId.EntityData.Leafs["match-table"] = types.YLeaf{"MatchTable", ruleId.MatchTable}
    ruleId.EntityData.Leafs["match-type"] = types.YLeaf{"MatchType", ruleId.MatchType}
    ruleId.EntityData.Leafs["match-vlan-id"] = types.YLeaf{"MatchVlanId", ruleId.MatchVlanId}
    ruleId.EntityData.Leafs["action"] = types.YLeaf{"Action", ruleId.Action}
    ruleId.EntityData.Leafs["action-vlan-id"] = types.YLeaf{"ActionVlanId", ruleId.ActionVlanId}
    return &(ruleId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information
type Controller_Switch_Oper_Vlan_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Information_Location.
    Location []Controller_Switch_Oper_Vlan_Information_Location

    
    Summary Controller_Switch_Oper_Vlan_Information_Summary
}

func (information *Controller_Switch_Oper_Vlan_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "vlan"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = make(map[string]types.YChild)
    information.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range information.Location {
        information.EntityData.Children[types.GetSegmentPath(&information.Location[i])] = types.YChild{"Location", &information.Location[i]}
    }
    information.EntityData.Children["summary"] = types.YChild{"Summary", &information.Summary}
    information.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(information.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location
type Controller_Switch_Oper_Vlan_Information_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to list the switch VLAN information for. The
    // type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Location_SdrId.
    SdrId []Controller_Switch_Oper_Vlan_Information_Location_SdrId
}

func (location *Controller_Switch_Oper_Vlan_Information_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "information"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range location.SdrId {
        location.EntityData.Children[types.GetSegmentPath(&location.SdrId[i])] = types.YChild{"SdrId", &location.SdrId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", location.SerialNum}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location_SdrId
type Controller_Switch_Oper_Vlan_Information_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId.
    VlanId []Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId
}

func (sdrId *Controller_Switch_Oper_Vlan_Information_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["vlan-id"] = types.YChild{"VlanId", nil}
    for i := range sdrId.VlanId {
        sdrId.EntityData.Children[types.GetSegmentPath(&sdrId.VlanId[i])] = types.YChild{"VlanId", &sdrId.VlanId[i]}
    }
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    sdrId.EntityData.Leafs["esd-sdr-name"] = types.YLeaf{"EsdSdrName", sdrId.EsdSdrName}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId
type Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId_Vlan
    VlanHex interface{}

    // The type is string.
    VlanUse interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Information_Location_SdrId_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "sdr-id"
    vlanId.EntityData.SegmentPath = "vlan-id" + "[vlan='" + fmt.Sprintf("%v", vlanId.Vlan) + "']"
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = make(map[string]types.YChild)
    vlanId.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanId.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanId.Vlan}
    vlanId.EntityData.Leafs["vlan-hex"] = types.YLeaf{"VlanHex", vlanId.VlanHex}
    vlanId.EntityData.Leafs["vlan-use"] = types.YLeaf{"VlanUse", vlanId.VlanUse}
    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary
type Controller_Switch_Oper_Vlan_Information_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Information_Summary_SdrId.
    SdrId []Controller_Switch_Oper_Vlan_Information_Summary_SdrId
}

func (summary *Controller_Switch_Oper_Vlan_Information_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "information"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range summary.SdrId {
        summary.EntityData.Children[types.GetSegmentPath(&summary.SdrId[i])] = types.YChild{"SdrId", &summary.SdrId[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary_SdrId
type Controller_Switch_Oper_Vlan_Information_Summary_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId.
    VlanId []Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId
}

func (sdrId *Controller_Switch_Oper_Vlan_Information_Summary_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "summary"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["vlan-id"] = types.YChild{"VlanId", nil}
    for i := range sdrId.VlanId {
        sdrId.EntityData.Children[types.GetSegmentPath(&sdrId.VlanId[i])] = types.YChild{"VlanId", &sdrId.VlanId[i]}
    }
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    sdrId.EntityData.Leafs["esd-sdr-name"] = types.YLeaf{"EsdSdrName", sdrId.EsdSdrName}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId
type Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId_Vlan
    VlanHex interface{}

    // The type is string.
    VlanUse interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Information_Summary_SdrId_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "sdr-id"
    vlanId.EntityData.SegmentPath = "vlan-id" + "[vlan='" + fmt.Sprintf("%v", vlanId.Vlan) + "']"
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = make(map[string]types.YChild)
    vlanId.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanId.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanId.Vlan}
    vlanId.EntityData.Leafs["vlan-hex"] = types.YLeaf{"VlanHex", vlanId.VlanHex}
    vlanId.EntityData.Leafs["vlan-use"] = types.YLeaf{"VlanUse", vlanId.VlanUse}
    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail
type Controller_Switch_Oper_Vlan_VlanDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_VlanDetail_VlanId.
    VlanId []Controller_Switch_Oper_Vlan_VlanDetail_VlanId
}

func (vlanDetail *Controller_Switch_Oper_Vlan_VlanDetail) GetEntityData() *types.CommonEntityData {
    vlanDetail.EntityData.YFilter = vlanDetail.YFilter
    vlanDetail.EntityData.YangName = "vlan-detail"
    vlanDetail.EntityData.BundleName = "cisco_ios_xr"
    vlanDetail.EntityData.ParentYangName = "vlan"
    vlanDetail.EntityData.SegmentPath = "vlan-detail"
    vlanDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanDetail.EntityData.Children = make(map[string]types.YChild)
    vlanDetail.EntityData.Children["vlan-id"] = types.YChild{"VlanId", nil}
    for i := range vlanDetail.VlanId {
        vlanDetail.EntityData.Children[types.GetSegmentPath(&vlanDetail.VlanId[i])] = types.YChild{"VlanId", &vlanDetail.VlanId[i]}
    }
    vlanDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(vlanDetail.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    
    Rules Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules
}

func (vlanId *Controller_Switch_Oper_Vlan_VlanDetail_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "vlan-detail"
    vlanId.EntityData.SegmentPath = "vlan-id" + "[vlan='" + fmt.Sprintf("%v", vlanId.Vlan) + "']"
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = make(map[string]types.YChild)
    vlanId.EntityData.Children["rules"] = types.YChild{"Rules", &vlanId.Rules}
    vlanId.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanId.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanId.Vlan}
    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location.
    Location []Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location
}

func (rules *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules) GetEntityData() *types.CommonEntityData {
    rules.EntityData.YFilter = rules.YFilter
    rules.EntityData.YangName = "rules"
    rules.EntityData.BundleName = "cisco_ios_xr"
    rules.EntityData.ParentYangName = "vlan-id"
    rules.EntityData.SegmentPath = "rules"
    rules.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rules.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rules.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rules.EntityData.Children = make(map[string]types.YChild)
    rules.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range rules.Location {
        rules.EntityData.Children[types.GetSegmentPath(&rules.Location[i])] = types.YChild{"Location", &rules.Location[i]}
    }
    rules.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(rules.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter.
    PortIter []Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter
}

func (location *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "rules"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId.
    RuleId []Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId
}

func (portIter *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["rule-id"] = types.YChild{"RuleId", nil}
    for i := range portIter.RuleId {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.RuleId[i])] = types.YChild{"RuleId", &portIter.RuleId[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId
type Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Packet direction this rule applies to. The type is SwitchDataDirectionEnum.
    Direction interface{}

    // The type is SwitchTableTypeEnum.
    MatchTable interface{}

    // The type is SwitchMatchTypeEnum.
    MatchType interface{}

    // The type is interface{} with range: 0..4095.
    MatchVlanId interface{}

    // The type is SwitchActionTypeEnum.
    Action interface{}

    // The type is interface{} with range: 0..4095.
    ActionVlanId interface{}
}

func (ruleId *Controller_Switch_Oper_Vlan_VlanDetail_VlanId_Rules_Location_PortIter_RuleId) GetEntityData() *types.CommonEntityData {
    ruleId.EntityData.YFilter = ruleId.YFilter
    ruleId.EntityData.YangName = "rule-id"
    ruleId.EntityData.BundleName = "cisco_ios_xr"
    ruleId.EntityData.ParentYangName = "port-iter"
    ruleId.EntityData.SegmentPath = "rule-id"
    ruleId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ruleId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ruleId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ruleId.EntityData.Children = make(map[string]types.YChild)
    ruleId.EntityData.Leafs = make(map[string]types.YLeaf)
    ruleId.EntityData.Leafs["direction"] = types.YLeaf{"Direction", ruleId.Direction}
    ruleId.EntityData.Leafs["match-table"] = types.YLeaf{"MatchTable", ruleId.MatchTable}
    ruleId.EntityData.Leafs["match-type"] = types.YLeaf{"MatchType", ruleId.MatchType}
    ruleId.EntityData.Leafs["match-vlan-id"] = types.YLeaf{"MatchVlanId", ruleId.MatchVlanId}
    ruleId.EntityData.Leafs["action"] = types.YLeaf{"Action", ruleId.Action}
    ruleId.EntityData.Leafs["action-vlan-id"] = types.YLeaf{"ActionVlanId", ruleId.ActionVlanId}
    return &(ruleId.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership
type Controller_Switch_Oper_Vlan_Membership struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Vlan_Membership_Location.
    Location []Controller_Switch_Oper_Vlan_Membership_Location
}

func (membership *Controller_Switch_Oper_Vlan_Membership) GetEntityData() *types.CommonEntityData {
    membership.EntityData.YFilter = membership.YFilter
    membership.EntityData.YangName = "membership"
    membership.EntityData.BundleName = "cisco_ios_xr"
    membership.EntityData.ParentYangName = "vlan"
    membership.EntityData.SegmentPath = "membership"
    membership.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    membership.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    membership.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    membership.EntityData.Children = make(map[string]types.YChild)
    membership.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range membership.Location {
        membership.EntityData.Children[types.GetSegmentPath(&membership.Location[i])] = types.YChild{"Location", &membership.Location[i]}
    }
    membership.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(membership.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership_Location
type Controller_Switch_Oper_Vlan_Membership_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // VLAN configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Vlan_Membership_Location_VlanId.
    VlanId []Controller_Switch_Oper_Vlan_Membership_Location_VlanId
}

func (location *Controller_Switch_Oper_Vlan_Membership_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "membership"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["vlan-id"] = types.YChild{"VlanId", nil}
    for i := range location.VlanId {
        location.EntityData.Children[types.GetSegmentPath(&location.VlanId[i])] = types.YChild{"VlanId", &location.VlanId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Vlan_Membership_Location_VlanId
type Controller_Switch_Oper_Vlan_Membership_Location_VlanId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..4095.
    Vlan interface{}

    // The type is string with range: 0..4095. Refers to
    // sysadmin_controllers.Controller_Switch_Oper_Vlan_Membership_Location_VlanId_Vlan
    VlanHex interface{}

    // The type is slice of interface{} with range: 0..255.
    Port []interface{}
}

func (vlanId *Controller_Switch_Oper_Vlan_Membership_Location_VlanId) GetEntityData() *types.CommonEntityData {
    vlanId.EntityData.YFilter = vlanId.YFilter
    vlanId.EntityData.YangName = "vlan-id"
    vlanId.EntityData.BundleName = "cisco_ios_xr"
    vlanId.EntityData.ParentYangName = "location"
    vlanId.EntityData.SegmentPath = "vlan-id" + "[vlan='" + fmt.Sprintf("%v", vlanId.Vlan) + "']"
    vlanId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vlanId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vlanId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vlanId.EntityData.Children = make(map[string]types.YChild)
    vlanId.EntityData.Leafs = make(map[string]types.YLeaf)
    vlanId.EntityData.Leafs["vlan"] = types.YLeaf{"Vlan", vlanId.Vlan}
    vlanId.EntityData.Leafs["vlan-hex"] = types.YLeaf{"VlanHex", vlanId.VlanHex}
    vlanId.EntityData.Leafs["port"] = types.YLeaf{"Port", vlanId.Port}
    return &(vlanId.EntityData)
}

// Controller_Switch_Oper_Sdr
type Controller_Switch_Oper_Sdr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    PortStatistics Controller_Switch_Oper_Sdr_PortStatistics

    
    GlobalStatistics Controller_Switch_Oper_Sdr_GlobalStatistics

    
    Policers Controller_Switch_Oper_Sdr_Policers

    
    SdrDetail Controller_Switch_Oper_Sdr_SdrDetail
}

func (sdr *Controller_Switch_Oper_Sdr) GetEntityData() *types.CommonEntityData {
    sdr.EntityData.YFilter = sdr.YFilter
    sdr.EntityData.YangName = "sdr"
    sdr.EntityData.BundleName = "cisco_ios_xr"
    sdr.EntityData.ParentYangName = "oper"
    sdr.EntityData.SegmentPath = "sdr"
    sdr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdr.EntityData.Children = make(map[string]types.YChild)
    sdr.EntityData.Children["port-statistics"] = types.YChild{"PortStatistics", &sdr.PortStatistics}
    sdr.EntityData.Children["global-statistics"] = types.YChild{"GlobalStatistics", &sdr.GlobalStatistics}
    sdr.EntityData.Children["policers"] = types.YChild{"Policers", &sdr.Policers}
    sdr.EntityData.Children["sdr-detail"] = types.YChild{"SdrDetail", &sdr.SdrDetail}
    sdr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sdr.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics
type Controller_Switch_Oper_Sdr_PortStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_PortStatistics_Location.
    Location []Controller_Switch_Oper_Sdr_PortStatistics_Location
}

func (portStatistics *Controller_Switch_Oper_Sdr_PortStatistics) GetEntityData() *types.CommonEntityData {
    portStatistics.EntityData.YFilter = portStatistics.YFilter
    portStatistics.EntityData.YangName = "port-statistics"
    portStatistics.EntityData.BundleName = "cisco_ios_xr"
    portStatistics.EntityData.ParentYangName = "sdr"
    portStatistics.EntityData.SegmentPath = "port-statistics"
    portStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portStatistics.EntityData.Children = make(map[string]types.YChild)
    portStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range portStatistics.Location {
        portStatistics.EntityData.Children[types.GetSegmentPath(&portStatistics.Location[i])] = types.YChild{"Location", &portStatistics.Location[i]}
    }
    portStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(portStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location
type Controller_Switch_Oper_Sdr_PortStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // SDR configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Sdr_PortStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId.
    SdrId []Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId
}

func (portIter *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range portIter.SdrId {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.SdrId[i])] = types.YChild{"SdrId", &portIter.SdrId[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId.
    TrafficTypeId []Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId
}

func (sdrId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "port-iter"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["traffic-type-id"] = types.YChild{"TrafficTypeId", nil}
    for i := range sdrId.TrafficTypeId {
        sdrId.EntityData.Children[types.GetSegmentPath(&sdrId.TrafficTypeId[i])] = types.YChild{"TrafficTypeId", &sdrId.TrafficTypeId[i]}
    }
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    sdrId.EntityData.Leafs["esd-sdr-name"] = types.YLeaf{"EsdSdrName", sdrId.EsdSdrName}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId.
    DirectionId []Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "sdr-id"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + "[traffic-type='" + fmt.Sprintf("%v", trafficTypeId.TrafficType) + "']"
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = make(map[string]types.YChild)
    trafficTypeId.EntityData.Children["direction-id"] = types.YChild{"DirectionId", nil}
    for i := range trafficTypeId.DirectionId {
        trafficTypeId.EntityData.Children[types.GetSegmentPath(&trafficTypeId.DirectionId[i])] = types.YChild{"DirectionId", &trafficTypeId.DirectionId[i]}
    }
    trafficTypeId.EntityData.Leafs = make(map[string]types.YLeaf)
    trafficTypeId.EntityData.Leafs["traffic-type"] = types.YLeaf{"TrafficType", trafficTypeId.TrafficType}
    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId
type Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Packet direction this rule applies to. The type is
    // SwitchDataDirectionEnum.
    Direction interface{}

    // Counts packets within the committed information rate for all traffic
    // classes on this SDR. The type is interface{} with range:
    // 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for all traffic classes on this SDR. The type is
    // interface{} with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for all traffic classes on
    // this SDR. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (directionId *Controller_Switch_Oper_Sdr_PortStatistics_Location_PortIter_SdrId_TrafficTypeId_DirectionId) GetEntityData() *types.CommonEntityData {
    directionId.EntityData.YFilter = directionId.YFilter
    directionId.EntityData.YangName = "direction-id"
    directionId.EntityData.BundleName = "cisco_ios_xr"
    directionId.EntityData.ParentYangName = "traffic-type-id"
    directionId.EntityData.SegmentPath = "direction-id" + "[direction='" + fmt.Sprintf("%v", directionId.Direction) + "']"
    directionId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionId.EntityData.Children = make(map[string]types.YChild)
    directionId.EntityData.Leafs = make(map[string]types.YLeaf)
    directionId.EntityData.Leafs["direction"] = types.YLeaf{"Direction", directionId.Direction}
    directionId.EntityData.Leafs["green-packets"] = types.YLeaf{"GreenPackets", directionId.GreenPackets}
    directionId.EntityData.Leafs["yellow-packets"] = types.YLeaf{"YellowPackets", directionId.YellowPackets}
    directionId.EntityData.Leafs["red-packets"] = types.YLeaf{"RedPackets", directionId.RedPackets}
    return &(directionId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics
type Controller_Switch_Oper_Sdr_GlobalStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_GlobalStatistics_Location.
    Location []Controller_Switch_Oper_Sdr_GlobalStatistics_Location
}

func (globalStatistics *Controller_Switch_Oper_Sdr_GlobalStatistics) GetEntityData() *types.CommonEntityData {
    globalStatistics.EntityData.YFilter = globalStatistics.YFilter
    globalStatistics.EntityData.YangName = "global-statistics"
    globalStatistics.EntityData.BundleName = "cisco_ios_xr"
    globalStatistics.EntityData.ParentYangName = "sdr"
    globalStatistics.EntityData.SegmentPath = "global-statistics"
    globalStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalStatistics.EntityData.Children = make(map[string]types.YChild)
    globalStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range globalStatistics.Location {
        globalStatistics.EntityData.Children[types.GetSegmentPath(&globalStatistics.Location[i])] = types.YChild{"Location", &globalStatistics.Location[i]}
    }
    globalStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(globalStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest to display the
    // SDR configuration for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId.
    SdrId []Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId
}

func (location *Controller_Switch_Oper_Sdr_GlobalStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "global-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range location.SdrId {
        location.EntityData.Children[types.GetSegmentPath(&location.SdrId[i])] = types.YChild{"SdrId", &location.SdrId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId.
    TrafficTypeId []Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId
}

func (sdrId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["traffic-type-id"] = types.YChild{"TrafficTypeId", nil}
    for i := range sdrId.TrafficTypeId {
        sdrId.EntityData.Children[types.GetSegmentPath(&sdrId.TrafficTypeId[i])] = types.YChild{"TrafficTypeId", &sdrId.TrafficTypeId[i]}
    }
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    sdrId.EntityData.Leafs["esd-sdr-name"] = types.YLeaf{"EsdSdrName", sdrId.EsdSdrName}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId.
    TrafficClassId []Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "sdr-id"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + "[traffic-type='" + fmt.Sprintf("%v", trafficTypeId.TrafficType) + "']"
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = make(map[string]types.YChild)
    trafficTypeId.EntityData.Children["traffic-class-id"] = types.YChild{"TrafficClassId", nil}
    for i := range trafficTypeId.TrafficClassId {
        trafficTypeId.EntityData.Children[types.GetSegmentPath(&trafficTypeId.TrafficClassId[i])] = types.YChild{"TrafficClassId", &trafficTypeId.TrafficClassId[i]}
    }
    trafficTypeId.EntityData.Leafs = make(map[string]types.YLeaf)
    trafficTypeId.EntityData.Leafs["traffic-type"] = types.YLeaf{"TrafficType", trafficTypeId.TrafficType}
    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId
type Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Traffic class (0->7) for these statistics. The
    // type is interface{} with range: -1..7.
    Tc interface{}

    // Counts packets within the committed information rate for a traffic class on
    // this VLAN. The type is interface{} with range: 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for a traffic class on this VLAN. The type is interface{}
    // with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for a traffic class on
    // this VLAN. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (trafficClassId *Controller_Switch_Oper_Sdr_GlobalStatistics_Location_SdrId_TrafficTypeId_TrafficClassId) GetEntityData() *types.CommonEntityData {
    trafficClassId.EntityData.YFilter = trafficClassId.YFilter
    trafficClassId.EntityData.YangName = "traffic-class-id"
    trafficClassId.EntityData.BundleName = "cisco_ios_xr"
    trafficClassId.EntityData.ParentYangName = "traffic-type-id"
    trafficClassId.EntityData.SegmentPath = "traffic-class-id" + "[tc='" + fmt.Sprintf("%v", trafficClassId.Tc) + "']"
    trafficClassId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficClassId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficClassId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficClassId.EntityData.Children = make(map[string]types.YChild)
    trafficClassId.EntityData.Leafs = make(map[string]types.YLeaf)
    trafficClassId.EntityData.Leafs["tc"] = types.YLeaf{"Tc", trafficClassId.Tc}
    trafficClassId.EntityData.Leafs["green-packets"] = types.YLeaf{"GreenPackets", trafficClassId.GreenPackets}
    trafficClassId.EntityData.Leafs["yellow-packets"] = types.YLeaf{"YellowPackets", trafficClassId.YellowPackets}
    trafficClassId.EntityData.Leafs["red-packets"] = types.YLeaf{"RedPackets", trafficClassId.RedPackets}
    return &(trafficClassId.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers
type Controller_Switch_Oper_Sdr_Policers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_Policers_Location.
    Location []Controller_Switch_Oper_Sdr_Policers_Location
}

func (policers *Controller_Switch_Oper_Sdr_Policers) GetEntityData() *types.CommonEntityData {
    policers.EntityData.YFilter = policers.YFilter
    policers.EntityData.YangName = "policers"
    policers.EntityData.BundleName = "cisco_ios_xr"
    policers.EntityData.ParentYangName = "sdr"
    policers.EntityData.SegmentPath = "policers"
    policers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policers.EntityData.Children = make(map[string]types.YChild)
    policers.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range policers.Location {
        policers.EntityData.Children[types.GetSegmentPath(&policers.Location[i])] = types.YChild{"Location", &policers.Location[i]}
    }
    policers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(policers.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location
type Controller_Switch_Oper_Sdr_Policers_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    EsdPolicerStatus Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus

    // The type is slice of Controller_Switch_Oper_Sdr_Policers_Location_SdrId.
    SdrId []Controller_Switch_Oper_Sdr_Policers_Location_SdrId
}

func (location *Controller_Switch_Oper_Sdr_Policers_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "policers"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["esd-policer-status"] = types.YChild{"EsdPolicerStatus", &location.EsdPolicerStatus}
    location.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range location.SdrId {
        location.EntityData.Children[types.GetSegmentPath(&location.SdrId[i])] = types.YChild{"SdrId", &location.SdrId[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus
type Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    IndentGroup Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup
}

func (esdPolicerStatus *Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus) GetEntityData() *types.CommonEntityData {
    esdPolicerStatus.EntityData.YFilter = esdPolicerStatus.YFilter
    esdPolicerStatus.EntityData.YangName = "esd-policer-status"
    esdPolicerStatus.EntityData.BundleName = "cisco_ios_xr"
    esdPolicerStatus.EntityData.ParentYangName = "location"
    esdPolicerStatus.EntityData.SegmentPath = "esd-policer-status"
    esdPolicerStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdPolicerStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdPolicerStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdPolicerStatus.EntityData.Children = make(map[string]types.YChild)
    esdPolicerStatus.EntityData.Children["indent-group"] = types.YChild{"IndentGroup", &esdPolicerStatus.IndentGroup}
    esdPolicerStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(esdPolicerStatus.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup
type Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchYesNoEnum.
    EsdPortPolicingEnabled interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortCommittedBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortPeakBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdPortPolicerMru interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdGlobalPolicingEnabled interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalCommittedBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalPeakBurstSize interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdGlobalPolicerMru interface{}
}

func (indentGroup *Controller_Switch_Oper_Sdr_Policers_Location_EsdPolicerStatus_IndentGroup) GetEntityData() *types.CommonEntityData {
    indentGroup.EntityData.YFilter = indentGroup.YFilter
    indentGroup.EntityData.YangName = "indent-group"
    indentGroup.EntityData.BundleName = "cisco_ios_xr"
    indentGroup.EntityData.ParentYangName = "esd-policer-status"
    indentGroup.EntityData.SegmentPath = "indent-group"
    indentGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    indentGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    indentGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    indentGroup.EntityData.Children = make(map[string]types.YChild)
    indentGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    indentGroup.EntityData.Leafs["esd-port-policing-enabled"] = types.YLeaf{"EsdPortPolicingEnabled", indentGroup.EsdPortPolicingEnabled}
    indentGroup.EntityData.Leafs["esd-port-committed-burst-size"] = types.YLeaf{"EsdPortCommittedBurstSize", indentGroup.EsdPortCommittedBurstSize}
    indentGroup.EntityData.Leafs["esd-port-peak-burst-size"] = types.YLeaf{"EsdPortPeakBurstSize", indentGroup.EsdPortPeakBurstSize}
    indentGroup.EntityData.Leafs["esd-port-policer-mru"] = types.YLeaf{"EsdPortPolicerMru", indentGroup.EsdPortPolicerMru}
    indentGroup.EntityData.Leafs["esd-global-policing-enabled"] = types.YLeaf{"EsdGlobalPolicingEnabled", indentGroup.EsdGlobalPolicingEnabled}
    indentGroup.EntityData.Leafs["esd-global-committed-burst-size"] = types.YLeaf{"EsdGlobalCommittedBurstSize", indentGroup.EsdGlobalCommittedBurstSize}
    indentGroup.EntityData.Leafs["esd-global-peak-burst-size"] = types.YLeaf{"EsdGlobalPeakBurstSize", indentGroup.EsdGlobalPeakBurstSize}
    indentGroup.EntityData.Leafs["esd-global-policer-mru"] = types.YLeaf{"EsdGlobalPolicerMru", indentGroup.EsdGlobalPolicerMru}
    return &(indentGroup.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_SdrId
type Controller_Switch_Oper_Sdr_Policers_Location_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    // The type is string.
    EsdSdrName interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCir interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrPir interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter.
    EsdSdrCosTypeIter []Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter
}

func (sdrId *Controller_Switch_Oper_Sdr_Policers_Location_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "location"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["esd-sdr-cos-type-iter"] = types.YChild{"EsdSdrCosTypeIter", nil}
    for i := range sdrId.EsdSdrCosTypeIter {
        sdrId.EntityData.Children[types.GetSegmentPath(&sdrId.EsdSdrCosTypeIter[i])] = types.YChild{"EsdSdrCosTypeIter", &sdrId.EsdSdrCosTypeIter[i]}
    }
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    sdrId.EntityData.Leafs["esd-sdr-name"] = types.YLeaf{"EsdSdrName", sdrId.EsdSdrName}
    sdrId.EntityData.Leafs["esd-sdr-cir"] = types.YLeaf{"EsdSdrCir", sdrId.EsdSdrCir}
    sdrId.EntityData.Leafs["esd-sdr-pir"] = types.YLeaf{"EsdSdrPir", sdrId.EsdSdrPir}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter
type Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdCirEirType.
    EsdSdrCosType interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos0 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos1 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos2 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos3 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos4 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos5 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos6 interface{}

    // The type is interface{} with range: 0..100.
    EsdSdrCos7 interface{}
}

func (esdSdrCosTypeIter *Controller_Switch_Oper_Sdr_Policers_Location_SdrId_EsdSdrCosTypeIter) GetEntityData() *types.CommonEntityData {
    esdSdrCosTypeIter.EntityData.YFilter = esdSdrCosTypeIter.YFilter
    esdSdrCosTypeIter.EntityData.YangName = "esd-sdr-cos-type-iter"
    esdSdrCosTypeIter.EntityData.BundleName = "cisco_ios_xr"
    esdSdrCosTypeIter.EntityData.ParentYangName = "sdr-id"
    esdSdrCosTypeIter.EntityData.SegmentPath = "esd-sdr-cos-type-iter" + "[esd-sdr-cos-type='" + fmt.Sprintf("%v", esdSdrCosTypeIter.EsdSdrCosType) + "']"
    esdSdrCosTypeIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdSdrCosTypeIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdSdrCosTypeIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdSdrCosTypeIter.EntityData.Children = make(map[string]types.YChild)
    esdSdrCosTypeIter.EntityData.Leafs = make(map[string]types.YLeaf)
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-type"] = types.YLeaf{"EsdSdrCosType", esdSdrCosTypeIter.EsdSdrCosType}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-0"] = types.YLeaf{"EsdSdrCos0", esdSdrCosTypeIter.EsdSdrCos0}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-1"] = types.YLeaf{"EsdSdrCos1", esdSdrCosTypeIter.EsdSdrCos1}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-2"] = types.YLeaf{"EsdSdrCos2", esdSdrCosTypeIter.EsdSdrCos2}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-3"] = types.YLeaf{"EsdSdrCos3", esdSdrCosTypeIter.EsdSdrCos3}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-4"] = types.YLeaf{"EsdSdrCos4", esdSdrCosTypeIter.EsdSdrCos4}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-5"] = types.YLeaf{"EsdSdrCos5", esdSdrCosTypeIter.EsdSdrCos5}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-6"] = types.YLeaf{"EsdSdrCos6", esdSdrCosTypeIter.EsdSdrCos6}
    esdSdrCosTypeIter.EntityData.Leafs["esd-sdr-cos-7"] = types.YLeaf{"EsdSdrCos7", esdSdrCosTypeIter.EsdSdrCos7}
    return &(esdSdrCosTypeIter.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail
type Controller_Switch_Oper_Sdr_SdrDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sdr_SdrDetail_SdrId.
    SdrId []Controller_Switch_Oper_Sdr_SdrDetail_SdrId
}

func (sdrDetail *Controller_Switch_Oper_Sdr_SdrDetail) GetEntityData() *types.CommonEntityData {
    sdrDetail.EntityData.YFilter = sdrDetail.YFilter
    sdrDetail.EntityData.YangName = "sdr-detail"
    sdrDetail.EntityData.BundleName = "cisco_ios_xr"
    sdrDetail.EntityData.ParentYangName = "sdr"
    sdrDetail.EntityData.SegmentPath = "sdr-detail"
    sdrDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrDetail.EntityData.Children = make(map[string]types.YChild)
    sdrDetail.EntityData.Children["sdr-id"] = types.YChild{"SdrId", nil}
    for i := range sdrDetail.SdrId {
        sdrDetail.EntityData.Children[types.GetSegmentPath(&sdrDetail.SdrId[i])] = types.YChild{"SdrId", &sdrDetail.SdrId[i]}
    }
    sdrDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sdrDetail.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Sdr interface{}

    
    PortStatistics Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics
}

func (sdrId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId) GetEntityData() *types.CommonEntityData {
    sdrId.EntityData.YFilter = sdrId.YFilter
    sdrId.EntityData.YangName = "sdr-id"
    sdrId.EntityData.BundleName = "cisco_ios_xr"
    sdrId.EntityData.ParentYangName = "sdr-detail"
    sdrId.EntityData.SegmentPath = "sdr-id" + "[sdr='" + fmt.Sprintf("%v", sdrId.Sdr) + "']"
    sdrId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrId.EntityData.Children = make(map[string]types.YChild)
    sdrId.EntityData.Children["port-statistics"] = types.YChild{"PortStatistics", &sdrId.PortStatistics}
    sdrId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrId.EntityData.Leafs["sdr"] = types.YLeaf{"Sdr", sdrId.Sdr}
    return &(sdrId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location.
    Location []Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location
}

func (portStatistics *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics) GetEntityData() *types.CommonEntityData {
    portStatistics.EntityData.YFilter = portStatistics.YFilter
    portStatistics.EntityData.YangName = "port-statistics"
    portStatistics.EntityData.BundleName = "cisco_ios_xr"
    portStatistics.EntityData.ParentYangName = "sdr-id"
    portStatistics.EntityData.SegmentPath = "port-statistics"
    portStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portStatistics.EntityData.Children = make(map[string]types.YChild)
    portStatistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range portStatistics.Location {
        portStatistics.EntityData.Children[types.GetSegmentPath(&portStatistics.Location[i])] = types.YChild{"Location", &portStatistics.Location[i]}
    }
    portStatistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(portStatistics.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId.
    TrafficTypeId []Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId
}

func (portIter *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["traffic-type-id"] = types.YChild{"TrafficTypeId", nil}
    for i := range portIter.TrafficTypeId {
        portIter.EntityData.Children[types.GetSegmentPath(&portIter.TrafficTypeId[i])] = types.YChild{"TrafficTypeId", &portIter.TrafficTypeId[i]}
    }
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaSdrTrafficType.
    TrafficType interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId.
    DirectionId []Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId
}

func (trafficTypeId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId) GetEntityData() *types.CommonEntityData {
    trafficTypeId.EntityData.YFilter = trafficTypeId.YFilter
    trafficTypeId.EntityData.YangName = "traffic-type-id"
    trafficTypeId.EntityData.BundleName = "cisco_ios_xr"
    trafficTypeId.EntityData.ParentYangName = "port-iter"
    trafficTypeId.EntityData.SegmentPath = "traffic-type-id" + "[traffic-type='" + fmt.Sprintf("%v", trafficTypeId.TrafficType) + "']"
    trafficTypeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficTypeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficTypeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficTypeId.EntityData.Children = make(map[string]types.YChild)
    trafficTypeId.EntityData.Children["direction-id"] = types.YChild{"DirectionId", nil}
    for i := range trafficTypeId.DirectionId {
        trafficTypeId.EntityData.Children[types.GetSegmentPath(&trafficTypeId.DirectionId[i])] = types.YChild{"DirectionId", &trafficTypeId.DirectionId[i]}
    }
    trafficTypeId.EntityData.Leafs = make(map[string]types.YLeaf)
    trafficTypeId.EntityData.Leafs["traffic-type"] = types.YLeaf{"TrafficType", trafficTypeId.TrafficType}
    return &(trafficTypeId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Packet direction this rule applies to. The type is
    // SwitchDataDirectionEnum.
    Direction interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId.
    TrafficClassId []Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId
}

func (directionId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId) GetEntityData() *types.CommonEntityData {
    directionId.EntityData.YFilter = directionId.YFilter
    directionId.EntityData.YangName = "direction-id"
    directionId.EntityData.BundleName = "cisco_ios_xr"
    directionId.EntityData.ParentYangName = "traffic-type-id"
    directionId.EntityData.SegmentPath = "direction-id" + "[direction='" + fmt.Sprintf("%v", directionId.Direction) + "']"
    directionId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionId.EntityData.Children = make(map[string]types.YChild)
    directionId.EntityData.Children["traffic-class-id"] = types.YChild{"TrafficClassId", nil}
    for i := range directionId.TrafficClassId {
        directionId.EntityData.Children[types.GetSegmentPath(&directionId.TrafficClassId[i])] = types.YChild{"TrafficClassId", &directionId.TrafficClassId[i]}
    }
    directionId.EntityData.Leafs = make(map[string]types.YLeaf)
    directionId.EntityData.Leafs["direction"] = types.YLeaf{"Direction", directionId.Direction}
    return &(directionId.EntityData)
}

// Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId
type Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Traffic class (0->7) for these statistics. The
    // type is interface{} with range: -1..7.
    Tc interface{}

    // Counts packets within the committed information rate for a traffic class on
    // this VLAN. The type is interface{} with range: 0..18446744073709551615.
    GreenPackets interface{}

    // Counts packets above the committed information rate, but within the excess
    // information rate for a traffic class on this VLAN. The type is interface{}
    // with range: 0..18446744073709551615.
    YellowPackets interface{}

    // Counts packets above the excess information rate for a traffic class on
    // this VLAN. Generally, these packets are dropped. The type is interface{}
    // with range: 0..18446744073709551615.
    RedPackets interface{}
}

func (trafficClassId *Controller_Switch_Oper_Sdr_SdrDetail_SdrId_PortStatistics_Location_PortIter_TrafficTypeId_DirectionId_TrafficClassId) GetEntityData() *types.CommonEntityData {
    trafficClassId.EntityData.YFilter = trafficClassId.YFilter
    trafficClassId.EntityData.YangName = "traffic-class-id"
    trafficClassId.EntityData.BundleName = "cisco_ios_xr"
    trafficClassId.EntityData.ParentYangName = "direction-id"
    trafficClassId.EntityData.SegmentPath = "traffic-class-id" + "[tc='" + fmt.Sprintf("%v", trafficClassId.Tc) + "']"
    trafficClassId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficClassId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficClassId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficClassId.EntityData.Children = make(map[string]types.YChild)
    trafficClassId.EntityData.Leafs = make(map[string]types.YLeaf)
    trafficClassId.EntityData.Leafs["tc"] = types.YLeaf{"Tc", trafficClassId.Tc}
    trafficClassId.EntityData.Leafs["green-packets"] = types.YLeaf{"GreenPackets", trafficClassId.GreenPackets}
    trafficClassId.EntityData.Leafs["yellow-packets"] = types.YLeaf{"YellowPackets", trafficClassId.YellowPackets}
    trafficClassId.EntityData.Leafs["red-packets"] = types.YLeaf{"RedPackets", trafficClassId.RedPackets}
    return &(trafficClassId.EntityData)
}

// Controller_Switch_Oper_Sfp
type Controller_Switch_Oper_Sfp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Summary Controller_Switch_Oper_Sfp_Summary

    
    Detail Controller_Switch_Oper_Sfp_Detail
}

func (sfp *Controller_Switch_Oper_Sfp) GetEntityData() *types.CommonEntityData {
    sfp.EntityData.YFilter = sfp.YFilter
    sfp.EntityData.YangName = "sfp"
    sfp.EntityData.BundleName = "cisco_ios_xr"
    sfp.EntityData.ParentYangName = "oper"
    sfp.EntityData.SegmentPath = "sfp"
    sfp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfp.EntityData.Children = make(map[string]types.YChild)
    sfp.EntityData.Children["summary"] = types.YChild{"Summary", &sfp.Summary}
    sfp.EntityData.Children["detail"] = types.YChild{"Detail", &sfp.Detail}
    sfp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfp.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary
type Controller_Switch_Oper_Sfp_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sfp_Summary_Location.
    Location []Controller_Switch_Oper_Sfp_Summary_Location
}

func (summary *Controller_Switch_Oper_Sfp_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "sfp"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = make(map[string]types.YChild)
    summary.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range summary.Location {
        summary.EntityData.Children[types.GetSegmentPath(&summary.Location[i])] = types.YChild{"Location", &summary.Location[i]}
    }
    summary.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summary.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary_Location
type Controller_Switch_Oper_Sfp_Summary_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter.
    SfpPortIter []Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter
}

func (location *Controller_Switch_Oper_Sfp_Summary_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["sfp-port-iter"] = types.YChild{"SfpPortIter", nil}
    for i := range location.SfpPortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.SfpPortIter[i])] = types.YChild{"SfpPortIter", &location.SfpPortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter
type Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    SfpPort interface{}

    // The type is EsdmaSwitchSfpInsertedEnum.
    SfpInserted interface{}

    // The type is EsdmaSwitchSfpControllerEnum.
    SfpController interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpType interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (sfpPortIter *Controller_Switch_Oper_Sfp_Summary_Location_SfpPortIter) GetEntityData() *types.CommonEntityData {
    sfpPortIter.EntityData.YFilter = sfpPortIter.YFilter
    sfpPortIter.EntityData.YangName = "sfp-port-iter"
    sfpPortIter.EntityData.BundleName = "cisco_ios_xr"
    sfpPortIter.EntityData.ParentYangName = "location"
    sfpPortIter.EntityData.SegmentPath = "sfp-port-iter" + "[sfp-port='" + fmt.Sprintf("%v", sfpPortIter.SfpPort) + "']"
    sfpPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortIter.EntityData.Children = make(map[string]types.YChild)
    sfpPortIter.EntityData.Leafs = make(map[string]types.YLeaf)
    sfpPortIter.EntityData.Leafs["sfp-port"] = types.YLeaf{"SfpPort", sfpPortIter.SfpPort}
    sfpPortIter.EntityData.Leafs["sfp-inserted"] = types.YLeaf{"SfpInserted", sfpPortIter.SfpInserted}
    sfpPortIter.EntityData.Leafs["sfp-controller"] = types.YLeaf{"SfpController", sfpPortIter.SfpController}
    sfpPortIter.EntityData.Leafs["sfp-type"] = types.YLeaf{"SfpType", sfpPortIter.SfpType}
    sfpPortIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", sfpPortIter.ConnectsTo}
    return &(sfpPortIter.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail
type Controller_Switch_Oper_Sfp_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Sfp_Detail_Location.
    Location []Controller_Switch_Oper_Sfp_Detail_Location
}

func (detail *Controller_Switch_Oper_Sfp_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "sfp"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location
type Controller_Switch_Oper_Sfp_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of
    // Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter.
    SfpPortIter []Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter
}

func (location *Controller_Switch_Oper_Sfp_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["sfp-port-iter"] = types.YChild{"SfpPortIter", nil}
    for i := range location.SfpPortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.SfpPortIter[i])] = types.YChild{"SfpPortIter", &location.SfpPortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    SfpPort interface{}

    // The type is EsdmaSwitchSfpInsertedEnum.
    SfpInserted interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpType interface{}

    
    SfpDetails Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails

    
    QsfpDetails Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails
}

func (sfpPortIter *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter) GetEntityData() *types.CommonEntityData {
    sfpPortIter.EntityData.YFilter = sfpPortIter.YFilter
    sfpPortIter.EntityData.YangName = "sfp-port-iter"
    sfpPortIter.EntityData.BundleName = "cisco_ios_xr"
    sfpPortIter.EntityData.ParentYangName = "location"
    sfpPortIter.EntityData.SegmentPath = "sfp-port-iter" + "[sfp-port='" + fmt.Sprintf("%v", sfpPortIter.SfpPort) + "']"
    sfpPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortIter.EntityData.Children = make(map[string]types.YChild)
    sfpPortIter.EntityData.Children["sfp-details"] = types.YChild{"SfpDetails", &sfpPortIter.SfpDetails}
    sfpPortIter.EntityData.Children["qsfp-details"] = types.YChild{"QsfpDetails", &sfpPortIter.QsfpDetails}
    sfpPortIter.EntityData.Leafs = make(map[string]types.YLeaf)
    sfpPortIter.EntityData.Leafs["sfp-port"] = types.YLeaf{"SfpPort", sfpPortIter.SfpPort}
    sfpPortIter.EntityData.Leafs["sfp-inserted"] = types.YLeaf{"SfpInserted", sfpPortIter.SfpInserted}
    sfpPortIter.EntityData.Leafs["sfp-type"] = types.YLeaf{"SfpType", sfpPortIter.SfpType}
    return &(sfpPortIter.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    SfpPortDetail Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail

    
    SfpMsaData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData

    
    SfpDiagAnalogInfo Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo

    
    SfpDiagData1 Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1

    
    SfpDiagUserInfo Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo

    
    SfpDiagData2 Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2
}

func (sfpDetails *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails) GetEntityData() *types.CommonEntityData {
    sfpDetails.EntityData.YFilter = sfpDetails.YFilter
    sfpDetails.EntityData.YangName = "sfp-details"
    sfpDetails.EntityData.BundleName = "cisco_ios_xr"
    sfpDetails.EntityData.ParentYangName = "sfp-port-iter"
    sfpDetails.EntityData.SegmentPath = "sfp-details"
    sfpDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDetails.EntityData.Children = make(map[string]types.YChild)
    sfpDetails.EntityData.Children["sfp-port-detail"] = types.YChild{"SfpPortDetail", &sfpDetails.SfpPortDetail}
    sfpDetails.EntityData.Children["sfp-msa-data"] = types.YChild{"SfpMsaData", &sfpDetails.SfpMsaData}
    sfpDetails.EntityData.Children["sfp-diag-analog-info"] = types.YChild{"SfpDiagAnalogInfo", &sfpDetails.SfpDiagAnalogInfo}
    sfpDetails.EntityData.Children["sfp-diag-data1"] = types.YChild{"SfpDiagData1", &sfpDetails.SfpDiagData1}
    sfpDetails.EntityData.Children["sfp-diag-user-info"] = types.YChild{"SfpDiagUserInfo", &sfpDetails.SfpDiagUserInfo}
    sfpDetails.EntityData.Children["sfp-diag-data2"] = types.YChild{"SfpDiagData2", &sfpDetails.SfpDiagData2}
    sfpDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfpDetails.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchSfpTranceiverTypeEnum.
    SfpTranceiverType interface{}

    // The type is EsdmaSwitchSfpTypeEnum.
    SfpTranceiverCode interface{}

    // The type is EsdmaSfpEncodingEnum.
    SfpEncoding interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpBitRate interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach9UFiberKm interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach9UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach50UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReach625UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLinkReachCopperM interface{}

    // The type is string.
    SfpVendorName interface{}

    // The type is string.
    SfpVendorOui interface{}

    // The type is string.
    SfpVendorPartNum interface{}

    // The type is interface{} with range: 0..4294967295.
    SfpLaserWavelength interface{}

    // The type is map[string]bool.
    SfpOptions interface{}

    // The type is string.
    SfpVendorSerialNum interface{}

    // The type is string.
    SfpDataCode interface{}

    // The type is map[string]bool.
    SfpDiagMonitoring interface{}

    // The type is map[string]bool.
    SfpEnhancedOptions interface{}
}

func (sfpPortDetail *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpPortDetail) GetEntityData() *types.CommonEntityData {
    sfpPortDetail.EntityData.YFilter = sfpPortDetail.YFilter
    sfpPortDetail.EntityData.YangName = "sfp-port-detail"
    sfpPortDetail.EntityData.BundleName = "cisco_ios_xr"
    sfpPortDetail.EntityData.ParentYangName = "sfp-details"
    sfpPortDetail.EntityData.SegmentPath = "sfp-port-detail"
    sfpPortDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpPortDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpPortDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpPortDetail.EntityData.Children = make(map[string]types.YChild)
    sfpPortDetail.EntityData.Leafs = make(map[string]types.YLeaf)
    sfpPortDetail.EntityData.Leafs["sfp-tranceiver-type"] = types.YLeaf{"SfpTranceiverType", sfpPortDetail.SfpTranceiverType}
    sfpPortDetail.EntityData.Leafs["sfp-tranceiver-code"] = types.YLeaf{"SfpTranceiverCode", sfpPortDetail.SfpTranceiverCode}
    sfpPortDetail.EntityData.Leafs["sfp-encoding"] = types.YLeaf{"SfpEncoding", sfpPortDetail.SfpEncoding}
    sfpPortDetail.EntityData.Leafs["sfp-bit-rate"] = types.YLeaf{"SfpBitRate", sfpPortDetail.SfpBitRate}
    sfpPortDetail.EntityData.Leafs["sfp-link-reach-9u-fiber_KM"] = types.YLeaf{"SfpLinkReach9UFiberKm", sfpPortDetail.SfpLinkReach9UFiberKm}
    sfpPortDetail.EntityData.Leafs["sfp-link-reach-9u-fiber_M"] = types.YLeaf{"SfpLinkReach9UFiberM", sfpPortDetail.SfpLinkReach9UFiberM}
    sfpPortDetail.EntityData.Leafs["sfp-link-reach-50u-fiber_M"] = types.YLeaf{"SfpLinkReach50UFiberM", sfpPortDetail.SfpLinkReach50UFiberM}
    sfpPortDetail.EntityData.Leafs["sfp-link-reach-62_5u-fiber_M"] = types.YLeaf{"SfpLinkReach625UFiberM", sfpPortDetail.SfpLinkReach625UFiberM}
    sfpPortDetail.EntityData.Leafs["sfp-link-reach-copper_M"] = types.YLeaf{"SfpLinkReachCopperM", sfpPortDetail.SfpLinkReachCopperM}
    sfpPortDetail.EntityData.Leafs["sfp-vendor-name"] = types.YLeaf{"SfpVendorName", sfpPortDetail.SfpVendorName}
    sfpPortDetail.EntityData.Leafs["sfp-vendor-oui"] = types.YLeaf{"SfpVendorOui", sfpPortDetail.SfpVendorOui}
    sfpPortDetail.EntityData.Leafs["sfp-vendor-part-num"] = types.YLeaf{"SfpVendorPartNum", sfpPortDetail.SfpVendorPartNum}
    sfpPortDetail.EntityData.Leafs["sfp-laser-wavelength"] = types.YLeaf{"SfpLaserWavelength", sfpPortDetail.SfpLaserWavelength}
    sfpPortDetail.EntityData.Leafs["sfp-options"] = types.YLeaf{"SfpOptions", sfpPortDetail.SfpOptions}
    sfpPortDetail.EntityData.Leafs["sfp-vendor-serial-num"] = types.YLeaf{"SfpVendorSerialNum", sfpPortDetail.SfpVendorSerialNum}
    sfpPortDetail.EntityData.Leafs["sfp-data-code"] = types.YLeaf{"SfpDataCode", sfpPortDetail.SfpDataCode}
    sfpPortDetail.EntityData.Leafs["sfp-diag-monitoring"] = types.YLeaf{"SfpDiagMonitoring", sfpPortDetail.SfpDiagMonitoring}
    sfpPortDetail.EntityData.Leafs["sfp-enhanced-options"] = types.YLeaf{"SfpEnhancedOptions", sfpPortDetail.SfpEnhancedOptions}
    return &(sfpPortDetail.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpMsa0X00 interface{}

    // The type is string.
    SfpMsa0X10 interface{}

    // The type is string.
    SfpMsa0X20 interface{}

    // The type is string.
    SfpMsa0X30 interface{}

    // The type is string.
    SfpMsa0X40 interface{}

    // The type is string.
    SfpMsa0X50 interface{}
}

func (sfpMsaData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpMsaData) GetEntityData() *types.CommonEntityData {
    sfpMsaData.EntityData.YFilter = sfpMsaData.YFilter
    sfpMsaData.EntityData.YangName = "sfp-msa-data"
    sfpMsaData.EntityData.BundleName = "cisco_ios_xr"
    sfpMsaData.EntityData.ParentYangName = "sfp-details"
    sfpMsaData.EntityData.SegmentPath = "sfp-msa-data"
    sfpMsaData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpMsaData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpMsaData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpMsaData.EntityData.Children = make(map[string]types.YChild)
    sfpMsaData.EntityData.Leafs = make(map[string]types.YLeaf)
    sfpMsaData.EntityData.Leafs["sfp-msa-0x00"] = types.YLeaf{"SfpMsa0X00", sfpMsaData.SfpMsa0X00}
    sfpMsaData.EntityData.Leafs["sfp-msa-0x10"] = types.YLeaf{"SfpMsa0X10", sfpMsaData.SfpMsa0X10}
    sfpMsaData.EntityData.Leafs["sfp-msa-0x20"] = types.YLeaf{"SfpMsa0X20", sfpMsaData.SfpMsa0X20}
    sfpMsaData.EntityData.Leafs["sfp-msa-0x30"] = types.YLeaf{"SfpMsa0X30", sfpMsaData.SfpMsa0X30}
    sfpMsaData.EntityData.Leafs["sfp-msa-0x40"] = types.YLeaf{"SfpMsa0X40", sfpMsaData.SfpMsa0X40}
    sfpMsaData.EntityData.Leafs["sfp-msa-0x50"] = types.YLeaf{"SfpMsa0X50", sfpMsaData.SfpMsa0X50}
    return &(sfpMsaData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Thresholds Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds

    
    RealTimeData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData
}

func (sfpDiagAnalogInfo *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo) GetEntityData() *types.CommonEntityData {
    sfpDiagAnalogInfo.EntityData.YFilter = sfpDiagAnalogInfo.YFilter
    sfpDiagAnalogInfo.EntityData.YangName = "sfp-diag-analog-info"
    sfpDiagAnalogInfo.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagAnalogInfo.EntityData.ParentYangName = "sfp-details"
    sfpDiagAnalogInfo.EntityData.SegmentPath = "sfp-diag-analog-info"
    sfpDiagAnalogInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagAnalogInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagAnalogInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagAnalogInfo.EntityData.Children = make(map[string]types.YChild)
    sfpDiagAnalogInfo.EntityData.Children["Thresholds"] = types.YChild{"Thresholds", &sfpDiagAnalogInfo.Thresholds}
    sfpDiagAnalogInfo.EntityData.Children["Real-Time-Data"] = types.YChild{"RealTimeData", &sfpDiagAnalogInfo.RealTimeData}
    sfpDiagAnalogInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfpDiagAnalogInfo.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Temperature Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature

    
    Voltage Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage

    
    Bias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias

    
    TxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower

    
    RxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower
}

func (thresholds *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds) GetEntityData() *types.CommonEntityData {
    thresholds.EntityData.YFilter = thresholds.YFilter
    thresholds.EntityData.YangName = "Thresholds"
    thresholds.EntityData.BundleName = "cisco_ios_xr"
    thresholds.EntityData.ParentYangName = "sfp-diag-analog-info"
    thresholds.EntityData.SegmentPath = "Thresholds"
    thresholds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    thresholds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    thresholds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    thresholds.EntityData.Children = make(map[string]types.YChild)
    thresholds.EntityData.Children["Temperature"] = types.YChild{"Temperature", &thresholds.Temperature}
    thresholds.EntityData.Children["Voltage"] = types.YChild{"Voltage", &thresholds.Voltage}
    thresholds.EntityData.Children["Bias"] = types.YChild{"Bias", &thresholds.Bias}
    thresholds.EntityData.Children["Tx-Power"] = types.YChild{"TxPower", &thresholds.TxPower}
    thresholds.EntityData.Children["Rx-Power"] = types.YChild{"RxPower", &thresholds.RxPower}
    thresholds.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(thresholds.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    TempAlarmHigh interface{}

    // The type is string.
    TempWarningHigh interface{}

    // The type is string.
    TempWarningLow interface{}

    // The type is string.
    TempAlarmLow interface{}
}

func (temperature *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Temperature) GetEntityData() *types.CommonEntityData {
    temperature.EntityData.YFilter = temperature.YFilter
    temperature.EntityData.YangName = "Temperature"
    temperature.EntityData.BundleName = "cisco_ios_xr"
    temperature.EntityData.ParentYangName = "Thresholds"
    temperature.EntityData.SegmentPath = "Temperature"
    temperature.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    temperature.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    temperature.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    temperature.EntityData.Children = make(map[string]types.YChild)
    temperature.EntityData.Leafs = make(map[string]types.YLeaf)
    temperature.EntityData.Leafs["temp-alarm-high"] = types.YLeaf{"TempAlarmHigh", temperature.TempAlarmHigh}
    temperature.EntityData.Leafs["temp-warning-high"] = types.YLeaf{"TempWarningHigh", temperature.TempWarningHigh}
    temperature.EntityData.Leafs["temp-warning-low"] = types.YLeaf{"TempWarningLow", temperature.TempWarningLow}
    temperature.EntityData.Leafs["temp-alarm-low"] = types.YLeaf{"TempAlarmLow", temperature.TempAlarmLow}
    return &(temperature.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    VoltAlarmHigh interface{}

    // The type is string.
    VoltWarningHigh interface{}

    // The type is string.
    VoltWarningLow interface{}

    // The type is string.
    VoltAlarmLow interface{}
}

func (voltage *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Voltage) GetEntityData() *types.CommonEntityData {
    voltage.EntityData.YFilter = voltage.YFilter
    voltage.EntityData.YangName = "Voltage"
    voltage.EntityData.BundleName = "cisco_ios_xr"
    voltage.EntityData.ParentYangName = "Thresholds"
    voltage.EntityData.SegmentPath = "Voltage"
    voltage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    voltage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    voltage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    voltage.EntityData.Children = make(map[string]types.YChild)
    voltage.EntityData.Leafs = make(map[string]types.YLeaf)
    voltage.EntityData.Leafs["volt-alarm-high"] = types.YLeaf{"VoltAlarmHigh", voltage.VoltAlarmHigh}
    voltage.EntityData.Leafs["volt-warning-high"] = types.YLeaf{"VoltWarningHigh", voltage.VoltWarningHigh}
    voltage.EntityData.Leafs["volt-warning-low"] = types.YLeaf{"VoltWarningLow", voltage.VoltWarningLow}
    voltage.EntityData.Leafs["volt-alarm-low"] = types.YLeaf{"VoltAlarmLow", voltage.VoltAlarmLow}
    return &(voltage.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    BiasAlarmHigh interface{}

    // The type is string.
    BiasWarningHigh interface{}

    // The type is string.
    BiasWarningLow interface{}

    // The type is string.
    BiasAlarmLow interface{}
}

func (bias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_Bias) GetEntityData() *types.CommonEntityData {
    bias.EntityData.YFilter = bias.YFilter
    bias.EntityData.YangName = "Bias"
    bias.EntityData.BundleName = "cisco_ios_xr"
    bias.EntityData.ParentYangName = "Thresholds"
    bias.EntityData.SegmentPath = "Bias"
    bias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bias.EntityData.Children = make(map[string]types.YChild)
    bias.EntityData.Leafs = make(map[string]types.YLeaf)
    bias.EntityData.Leafs["bias-alarm-high"] = types.YLeaf{"BiasAlarmHigh", bias.BiasAlarmHigh}
    bias.EntityData.Leafs["bias-warning-high"] = types.YLeaf{"BiasWarningHigh", bias.BiasWarningHigh}
    bias.EntityData.Leafs["bias-warning-low"] = types.YLeaf{"BiasWarningLow", bias.BiasWarningLow}
    bias.EntityData.Leafs["bias-alarm-low"] = types.YLeaf{"BiasAlarmLow", bias.BiasAlarmLow}
    return &(bias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    TxPowerAlarmHigh interface{}

    // The type is string.
    TxPowerWarningHigh interface{}

    // The type is string.
    TxPowerWarningLow interface{}

    // The type is string.
    TxPowerAlarmLow interface{}
}

func (txPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_TxPower) GetEntityData() *types.CommonEntityData {
    txPower.EntityData.YFilter = txPower.YFilter
    txPower.EntityData.YangName = "Tx-Power"
    txPower.EntityData.BundleName = "cisco_ios_xr"
    txPower.EntityData.ParentYangName = "Thresholds"
    txPower.EntityData.SegmentPath = "Tx-Power"
    txPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    txPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    txPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    txPower.EntityData.Children = make(map[string]types.YChild)
    txPower.EntityData.Leafs = make(map[string]types.YLeaf)
    txPower.EntityData.Leafs["tx-power-alarm-high"] = types.YLeaf{"TxPowerAlarmHigh", txPower.TxPowerAlarmHigh}
    txPower.EntityData.Leafs["tx-power-warning-high"] = types.YLeaf{"TxPowerWarningHigh", txPower.TxPowerWarningHigh}
    txPower.EntityData.Leafs["tx-power-warning-low"] = types.YLeaf{"TxPowerWarningLow", txPower.TxPowerWarningLow}
    txPower.EntityData.Leafs["tx-power-alarm-low"] = types.YLeaf{"TxPowerAlarmLow", txPower.TxPowerAlarmLow}
    return &(txPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    RxPowerAlarmHigh interface{}

    // The type is string.
    RxPowerWarningHigh interface{}

    // The type is string.
    RxPowerWarningLow interface{}

    // The type is string.
    RxPowerAlarmLow interface{}
}

func (rxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_Thresholds_RxPower) GetEntityData() *types.CommonEntityData {
    rxPower.EntityData.YFilter = rxPower.YFilter
    rxPower.EntityData.YangName = "Rx-Power"
    rxPower.EntityData.BundleName = "cisco_ios_xr"
    rxPower.EntityData.ParentYangName = "Thresholds"
    rxPower.EntityData.SegmentPath = "Rx-Power"
    rxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxPower.EntityData.Children = make(map[string]types.YChild)
    rxPower.EntityData.Leafs = make(map[string]types.YLeaf)
    rxPower.EntityData.Leafs["rx-power-alarm-high"] = types.YLeaf{"RxPowerAlarmHigh", rxPower.RxPowerAlarmHigh}
    rxPower.EntityData.Leafs["rx-power-warning-high"] = types.YLeaf{"RxPowerWarningHigh", rxPower.RxPowerWarningHigh}
    rxPower.EntityData.Leafs["rx-power-warning-low"] = types.YLeaf{"RxPowerWarningLow", rxPower.RxPowerWarningLow}
    rxPower.EntityData.Leafs["rx-power-alarm-low"] = types.YLeaf{"RxPowerAlarmLow", rxPower.RxPowerAlarmLow}
    return &(rxPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Current Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current
}

func (realTimeData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData) GetEntityData() *types.CommonEntityData {
    realTimeData.EntityData.YFilter = realTimeData.YFilter
    realTimeData.EntityData.YangName = "Real-Time-Data"
    realTimeData.EntityData.BundleName = "cisco_ios_xr"
    realTimeData.EntityData.ParentYangName = "sfp-diag-analog-info"
    realTimeData.EntityData.SegmentPath = "Real-Time-Data"
    realTimeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    realTimeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    realTimeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    realTimeData.EntityData.Children = make(map[string]types.YChild)
    realTimeData.EntityData.Children["Current"] = types.YChild{"Current", &realTimeData.Current}
    realTimeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(realTimeData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    CurTemperature interface{}

    // The type is string.
    CurVoltage interface{}

    // The type is string.
    CurBias interface{}

    // The type is string.
    CurTxPower interface{}

    // The type is string.
    CurRxPower interface{}

    // The type is map[string]bool.
    OptionalStatusControl interface{}
}

func (current *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagAnalogInfo_RealTimeData_Current) GetEntityData() *types.CommonEntityData {
    current.EntityData.YFilter = current.YFilter
    current.EntityData.YangName = "Current"
    current.EntityData.BundleName = "cisco_ios_xr"
    current.EntityData.ParentYangName = "Real-Time-Data"
    current.EntityData.SegmentPath = "Current"
    current.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    current.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    current.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    current.EntityData.Children = make(map[string]types.YChild)
    current.EntityData.Leafs = make(map[string]types.YLeaf)
    current.EntityData.Leafs["cur-temperature"] = types.YLeaf{"CurTemperature", current.CurTemperature}
    current.EntityData.Leafs["cur-voltage"] = types.YLeaf{"CurVoltage", current.CurVoltage}
    current.EntityData.Leafs["cur-bias"] = types.YLeaf{"CurBias", current.CurBias}
    current.EntityData.Leafs["cur-tx-power"] = types.YLeaf{"CurTxPower", current.CurTxPower}
    current.EntityData.Leafs["cur-rx-power"] = types.YLeaf{"CurRxPower", current.CurRxPower}
    current.EntityData.Leafs["optional-status-control"] = types.YLeaf{"OptionalStatusControl", current.OptionalStatusControl}
    return &(current.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    OpticalSfpDiag Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag
}

func (sfpDiagData1 *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1) GetEntityData() *types.CommonEntityData {
    sfpDiagData1.EntityData.YFilter = sfpDiagData1.YFilter
    sfpDiagData1.EntityData.YangName = "sfp-diag-data1"
    sfpDiagData1.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagData1.EntityData.ParentYangName = "sfp-details"
    sfpDiagData1.EntityData.SegmentPath = "sfp-diag-data1"
    sfpDiagData1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagData1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagData1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagData1.EntityData.Children = make(map[string]types.YChild)
    sfpDiagData1.EntityData.Children["optical-sfp-diag"] = types.YChild{"OpticalSfpDiag", &sfpDiagData1.OpticalSfpDiag}
    sfpDiagData1.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfpDiagData1.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpDiag0X00 interface{}

    // The type is string.
    SfpDiag0X10 interface{}

    // The type is string.
    SfpDiag0X20 interface{}

    // The type is string.
    SfpDiag0X30 interface{}

    // The type is string.
    SfpDiag0X40 interface{}

    // The type is string.
    SfpDiag0X50 interface{}

    // The type is string.
    SfpDiag0X60 interface{}

    // The type is string.
    SfpDiag0X70 interface{}
}

func (opticalSfpDiag *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData1_OpticalSfpDiag) GetEntityData() *types.CommonEntityData {
    opticalSfpDiag.EntityData.YFilter = opticalSfpDiag.YFilter
    opticalSfpDiag.EntityData.YangName = "optical-sfp-diag"
    opticalSfpDiag.EntityData.BundleName = "cisco_ios_xr"
    opticalSfpDiag.EntityData.ParentYangName = "sfp-diag-data1"
    opticalSfpDiag.EntityData.SegmentPath = "optical-sfp-diag"
    opticalSfpDiag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalSfpDiag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalSfpDiag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalSfpDiag.EntityData.Children = make(map[string]types.YChild)
    opticalSfpDiag.EntityData.Leafs = make(map[string]types.YLeaf)
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x00"] = types.YLeaf{"SfpDiag0X00", opticalSfpDiag.SfpDiag0X00}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x10"] = types.YLeaf{"SfpDiag0X10", opticalSfpDiag.SfpDiag0X10}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x20"] = types.YLeaf{"SfpDiag0X20", opticalSfpDiag.SfpDiag0X20}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x30"] = types.YLeaf{"SfpDiag0X30", opticalSfpDiag.SfpDiag0X30}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x40"] = types.YLeaf{"SfpDiag0X40", opticalSfpDiag.SfpDiag0X40}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x50"] = types.YLeaf{"SfpDiag0X50", opticalSfpDiag.SfpDiag0X50}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x60"] = types.YLeaf{"SfpDiag0X60", opticalSfpDiag.SfpDiag0X60}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x70"] = types.YLeaf{"SfpDiag0X70", opticalSfpDiag.SfpDiag0X70}
    return &(opticalSfpDiag.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CiscoData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData
}

func (sfpDiagUserInfo *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo) GetEntityData() *types.CommonEntityData {
    sfpDiagUserInfo.EntityData.YFilter = sfpDiagUserInfo.YFilter
    sfpDiagUserInfo.EntityData.YangName = "sfp-diag-user-info"
    sfpDiagUserInfo.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagUserInfo.EntityData.ParentYangName = "sfp-details"
    sfpDiagUserInfo.EntityData.SegmentPath = "sfp-diag-user-info"
    sfpDiagUserInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagUserInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagUserInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagUserInfo.EntityData.Children = make(map[string]types.YChild)
    sfpDiagUserInfo.EntityData.Children["cisco-data"] = types.YChild{"CiscoData", &sfpDiagUserInfo.CiscoData}
    sfpDiagUserInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfpDiagUserInfo.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    CiscoCleiCode interface{}

    // The type is string.
    CiscoPartNumber interface{}

    // The type is interface{} with range: -128..127.
    CiscoMinTemperature interface{}

    // The type is interface{} with range: -128..127.
    CiscoMaxTemperature interface{}

    // The type is string.
    CiscoProductId interface{}
}

func (ciscoData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagUserInfo_CiscoData) GetEntityData() *types.CommonEntityData {
    ciscoData.EntityData.YFilter = ciscoData.YFilter
    ciscoData.EntityData.YangName = "cisco-data"
    ciscoData.EntityData.BundleName = "cisco_ios_xr"
    ciscoData.EntityData.ParentYangName = "sfp-diag-user-info"
    ciscoData.EntityData.SegmentPath = "cisco-data"
    ciscoData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ciscoData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ciscoData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ciscoData.EntityData.Children = make(map[string]types.YChild)
    ciscoData.EntityData.Leafs = make(map[string]types.YLeaf)
    ciscoData.EntityData.Leafs["cisco-clei-code"] = types.YLeaf{"CiscoCleiCode", ciscoData.CiscoCleiCode}
    ciscoData.EntityData.Leafs["cisco-part-number"] = types.YLeaf{"CiscoPartNumber", ciscoData.CiscoPartNumber}
    ciscoData.EntityData.Leafs["cisco-min-temperature"] = types.YLeaf{"CiscoMinTemperature", ciscoData.CiscoMinTemperature}
    ciscoData.EntityData.Leafs["cisco-max-temperature"] = types.YLeaf{"CiscoMaxTemperature", ciscoData.CiscoMaxTemperature}
    ciscoData.EntityData.Leafs["cisco-product-id"] = types.YLeaf{"CiscoProductId", ciscoData.CiscoProductId}
    return &(ciscoData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    OpticalSfpDiag Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag
}

func (sfpDiagData2 *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2) GetEntityData() *types.CommonEntityData {
    sfpDiagData2.EntityData.YFilter = sfpDiagData2.YFilter
    sfpDiagData2.EntityData.YangName = "sfp-diag-data2"
    sfpDiagData2.EntityData.BundleName = "cisco_ios_xr"
    sfpDiagData2.EntityData.ParentYangName = "sfp-details"
    sfpDiagData2.EntityData.SegmentPath = "sfp-diag-data2"
    sfpDiagData2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sfpDiagData2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sfpDiagData2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sfpDiagData2.EntityData.Children = make(map[string]types.YChild)
    sfpDiagData2.EntityData.Children["optical-sfp-diag"] = types.YChild{"OpticalSfpDiag", &sfpDiagData2.OpticalSfpDiag}
    sfpDiagData2.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(sfpDiagData2.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    SfpDiag0X80 interface{}

    // The type is string.
    SfpDiag0X90 interface{}

    // The type is string.
    SfpDiag0Xa0 interface{}

    // The type is string.
    SfpDiag0Xb0 interface{}

    // The type is string.
    SfpDiag0Xc0 interface{}

    // The type is string.
    SfpDiag0Xd0 interface{}

    // The type is string.
    SfpDiag0Xe0 interface{}

    // The type is string.
    SfpDiag0Xf0 interface{}
}

func (opticalSfpDiag *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_SfpDetails_SfpDiagData2_OpticalSfpDiag) GetEntityData() *types.CommonEntityData {
    opticalSfpDiag.EntityData.YFilter = opticalSfpDiag.YFilter
    opticalSfpDiag.EntityData.YangName = "optical-sfp-diag"
    opticalSfpDiag.EntityData.BundleName = "cisco_ios_xr"
    opticalSfpDiag.EntityData.ParentYangName = "sfp-diag-data2"
    opticalSfpDiag.EntityData.SegmentPath = "optical-sfp-diag"
    opticalSfpDiag.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    opticalSfpDiag.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    opticalSfpDiag.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    opticalSfpDiag.EntityData.Children = make(map[string]types.YChild)
    opticalSfpDiag.EntityData.Leafs = make(map[string]types.YLeaf)
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x80"] = types.YLeaf{"SfpDiag0X80", opticalSfpDiag.SfpDiag0X80}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0x90"] = types.YLeaf{"SfpDiag0X90", opticalSfpDiag.SfpDiag0X90}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xA0"] = types.YLeaf{"SfpDiag0Xa0", opticalSfpDiag.SfpDiag0Xa0}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xB0"] = types.YLeaf{"SfpDiag0Xb0", opticalSfpDiag.SfpDiag0Xb0}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xC0"] = types.YLeaf{"SfpDiag0Xc0", opticalSfpDiag.SfpDiag0Xc0}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xD0"] = types.YLeaf{"SfpDiag0Xd0", opticalSfpDiag.SfpDiag0Xd0}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xE0"] = types.YLeaf{"SfpDiag0Xe0", opticalSfpDiag.SfpDiag0Xe0}
    opticalSfpDiag.EntityData.Leafs["sfp-diag-0xF0"] = types.YLeaf{"SfpDiag0Xf0", opticalSfpDiag.SfpDiag0Xf0}
    return &(opticalSfpDiag.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpPageA0Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data

    
    QsfpPageA00Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data

    
    QsfpPageA03Data Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data
}

func (qsfpDetails *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails) GetEntityData() *types.CommonEntityData {
    qsfpDetails.EntityData.YFilter = qsfpDetails.YFilter
    qsfpDetails.EntityData.YangName = "qsfp-details"
    qsfpDetails.EntityData.BundleName = "cisco_ios_xr"
    qsfpDetails.EntityData.ParentYangName = "sfp-port-iter"
    qsfpDetails.EntityData.SegmentPath = "qsfp-details"
    qsfpDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpDetails.EntityData.Children = make(map[string]types.YChild)
    qsfpDetails.EntityData.Children["qsfp_page_A0_data"] = types.YChild{"QsfpPageA0Data", &qsfpDetails.QsfpPageA0Data}
    qsfpDetails.EntityData.Children["qsfp_page_A0_0_data"] = types.YChild{"QsfpPageA00Data", &qsfpDetails.QsfpPageA00Data}
    qsfpDetails.EntityData.Children["qsfp_page_A0_3_data"] = types.YChild{"QsfpPageA03Data", &qsfpDetails.QsfpPageA03Data}
    qsfpDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qsfpDetails.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpRealTimeData Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData

    
    QsfpRealTimeStatusFlags Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags
}

func (qsfpPageA0Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA0Data.EntityData.YFilter = qsfpPageA0Data.YFilter
    qsfpPageA0Data.EntityData.YangName = "qsfp_page_A0_data"
    qsfpPageA0Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA0Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA0Data.EntityData.SegmentPath = "qsfp_page_A0_data"
    qsfpPageA0Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA0Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA0Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA0Data.EntityData.Children = make(map[string]types.YChild)
    qsfpPageA0Data.EntityData.Children["qsfp-real-time-data"] = types.YChild{"QsfpRealTimeData", &qsfpPageA0Data.QsfpRealTimeData}
    qsfpPageA0Data.EntityData.Children["qsfp-real-time-status-flags"] = types.YChild{"QsfpRealTimeStatusFlags", &qsfpPageA0Data.QsfpRealTimeStatusFlags}
    qsfpPageA0Data.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qsfpPageA0Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpTempVolt Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt

    
    QsfpTxChannelBias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias

    
    QsfpTxOutputPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower

    
    QsfpRxInputPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower
}

func (qsfpRealTimeData *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeData.EntityData.YFilter = qsfpRealTimeData.YFilter
    qsfpRealTimeData.EntityData.YangName = "qsfp-real-time-data"
    qsfpRealTimeData.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeData.EntityData.ParentYangName = "qsfp_page_A0_data"
    qsfpRealTimeData.EntityData.SegmentPath = "qsfp-real-time-data"
    qsfpRealTimeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeData.EntityData.Children = make(map[string]types.YChild)
    qsfpRealTimeData.EntityData.Children["qsfp-temp-volt"] = types.YChild{"QsfpTempVolt", &qsfpRealTimeData.QsfpTempVolt}
    qsfpRealTimeData.EntityData.Children["qsfp-tx-channel-bias"] = types.YChild{"QsfpTxChannelBias", &qsfpRealTimeData.QsfpTxChannelBias}
    qsfpRealTimeData.EntityData.Children["qsfp-tx-output-power"] = types.YChild{"QsfpTxOutputPower", &qsfpRealTimeData.QsfpTxOutputPower}
    qsfpRealTimeData.EntityData.Children["qsfp-rx-input-power"] = types.YChild{"QsfpRxInputPower", &qsfpRealTimeData.QsfpRxInputPower}
    qsfpRealTimeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qsfpRealTimeData.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ModuleMonitorTemperature interface{}

    // The type is string.
    ModuleMonitorVoltage interface{}
}

func (qsfpTempVolt *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTempVolt) GetEntityData() *types.CommonEntityData {
    qsfpTempVolt.EntityData.YFilter = qsfpTempVolt.YFilter
    qsfpTempVolt.EntityData.YangName = "qsfp-temp-volt"
    qsfpTempVolt.EntityData.BundleName = "cisco_ios_xr"
    qsfpTempVolt.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTempVolt.EntityData.SegmentPath = "qsfp-temp-volt"
    qsfpTempVolt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTempVolt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTempVolt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTempVolt.EntityData.Children = make(map[string]types.YChild)
    qsfpTempVolt.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTempVolt.EntityData.Leafs["module-monitor-temperature"] = types.YLeaf{"ModuleMonitorTemperature", qsfpTempVolt.ModuleMonitorTemperature}
    qsfpTempVolt.EntityData.Leafs["module-monitor-voltage"] = types.YLeaf{"ModuleMonitorVoltage", qsfpTempVolt.ModuleMonitorVoltage}
    return &(qsfpTempVolt.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorTx1Bias interface{}

    // The type is string.
    ChannelMonitorTx2Bias interface{}

    // The type is string.
    ChannelMonitorTx3Bias interface{}

    // The type is string.
    ChannelMonitorTx4Bias interface{}
}

func (qsfpTxChannelBias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxChannelBias) GetEntityData() *types.CommonEntityData {
    qsfpTxChannelBias.EntityData.YFilter = qsfpTxChannelBias.YFilter
    qsfpTxChannelBias.EntityData.YangName = "qsfp-tx-channel-bias"
    qsfpTxChannelBias.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxChannelBias.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTxChannelBias.EntityData.SegmentPath = "qsfp-tx-channel-bias"
    qsfpTxChannelBias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxChannelBias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxChannelBias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxChannelBias.EntityData.Children = make(map[string]types.YChild)
    qsfpTxChannelBias.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTxChannelBias.EntityData.Leafs["channel-monitor-Tx1-Bias"] = types.YLeaf{"ChannelMonitorTx1Bias", qsfpTxChannelBias.ChannelMonitorTx1Bias}
    qsfpTxChannelBias.EntityData.Leafs["channel-monitor-Tx2-Bias"] = types.YLeaf{"ChannelMonitorTx2Bias", qsfpTxChannelBias.ChannelMonitorTx2Bias}
    qsfpTxChannelBias.EntityData.Leafs["channel-monitor-Tx3-Bias"] = types.YLeaf{"ChannelMonitorTx3Bias", qsfpTxChannelBias.ChannelMonitorTx3Bias}
    qsfpTxChannelBias.EntityData.Leafs["channel-monitor-Tx4-Bias"] = types.YLeaf{"ChannelMonitorTx4Bias", qsfpTxChannelBias.ChannelMonitorTx4Bias}
    return &(qsfpTxChannelBias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorTx1Power interface{}

    // The type is string.
    ChannelMonitorTx2Power interface{}

    // The type is string.
    ChannelMonitorTx3Power interface{}

    // The type is string.
    ChannelMonitorTx4Power interface{}
}

func (qsfpTxOutputPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpTxOutputPower) GetEntityData() *types.CommonEntityData {
    qsfpTxOutputPower.EntityData.YFilter = qsfpTxOutputPower.YFilter
    qsfpTxOutputPower.EntityData.YangName = "qsfp-tx-output-power"
    qsfpTxOutputPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxOutputPower.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpTxOutputPower.EntityData.SegmentPath = "qsfp-tx-output-power"
    qsfpTxOutputPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxOutputPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxOutputPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxOutputPower.EntityData.Children = make(map[string]types.YChild)
    qsfpTxOutputPower.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTxOutputPower.EntityData.Leafs["channel-monitor-Tx1-Power"] = types.YLeaf{"ChannelMonitorTx1Power", qsfpTxOutputPower.ChannelMonitorTx1Power}
    qsfpTxOutputPower.EntityData.Leafs["channel-monitor-Tx2-Power"] = types.YLeaf{"ChannelMonitorTx2Power", qsfpTxOutputPower.ChannelMonitorTx2Power}
    qsfpTxOutputPower.EntityData.Leafs["channel-monitor-Tx3-Power"] = types.YLeaf{"ChannelMonitorTx3Power", qsfpTxOutputPower.ChannelMonitorTx3Power}
    qsfpTxOutputPower.EntityData.Leafs["channel-monitor-Tx4-Power"] = types.YLeaf{"ChannelMonitorTx4Power", qsfpTxOutputPower.ChannelMonitorTx4Power}
    return &(qsfpTxOutputPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    ChannelMonitorRx1Power interface{}

    // The type is string.
    ChannelMonitorRx2Power interface{}

    // The type is string.
    ChannelMonitorRx3Power interface{}

    // The type is string.
    ChannelMonitorRx4Power interface{}
}

func (qsfpRxInputPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeData_QsfpRxInputPower) GetEntityData() *types.CommonEntityData {
    qsfpRxInputPower.EntityData.YFilter = qsfpRxInputPower.YFilter
    qsfpRxInputPower.EntityData.YangName = "qsfp-rx-input-power"
    qsfpRxInputPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpRxInputPower.EntityData.ParentYangName = "qsfp-real-time-data"
    qsfpRxInputPower.EntityData.SegmentPath = "qsfp-rx-input-power"
    qsfpRxInputPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRxInputPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRxInputPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRxInputPower.EntityData.Children = make(map[string]types.YChild)
    qsfpRxInputPower.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpRxInputPower.EntityData.Leafs["channel-monitor-Rx1-Power"] = types.YLeaf{"ChannelMonitorRx1Power", qsfpRxInputPower.ChannelMonitorRx1Power}
    qsfpRxInputPower.EntityData.Leafs["channel-monitor-Rx2-Power"] = types.YLeaf{"ChannelMonitorRx2Power", qsfpRxInputPower.ChannelMonitorRx2Power}
    qsfpRxInputPower.EntityData.Leafs["channel-monitor-Rx3-Power"] = types.YLeaf{"ChannelMonitorRx3Power", qsfpRxInputPower.ChannelMonitorRx3Power}
    qsfpRxInputPower.EntityData.Leafs["channel-monitor-Rx4-Power"] = types.YLeaf{"ChannelMonitorRx4Power", qsfpRxInputPower.ChannelMonitorRx4Power}
    return &(qsfpRxInputPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpRealTimeStatus Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus

    
    QsfpRealTimeInterruptFlags Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags
}

func (qsfpRealTimeStatusFlags *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeStatusFlags.EntityData.YFilter = qsfpRealTimeStatusFlags.YFilter
    qsfpRealTimeStatusFlags.EntityData.YangName = "qsfp-real-time-status-flags"
    qsfpRealTimeStatusFlags.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeStatusFlags.EntityData.ParentYangName = "qsfp_page_A0_data"
    qsfpRealTimeStatusFlags.EntityData.SegmentPath = "qsfp-real-time-status-flags"
    qsfpRealTimeStatusFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeStatusFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeStatusFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeStatusFlags.EntityData.Children = make(map[string]types.YChild)
    qsfpRealTimeStatusFlags.EntityData.Children["qsfp-real-time-status"] = types.YChild{"QsfpRealTimeStatus", &qsfpRealTimeStatusFlags.QsfpRealTimeStatus}
    qsfpRealTimeStatusFlags.EntityData.Children["qsfp-real-time-interrupt-flags"] = types.YChild{"QsfpRealTimeInterruptFlags", &qsfpRealTimeStatusFlags.QsfpRealTimeInterruptFlags}
    qsfpRealTimeStatusFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qsfpRealTimeStatusFlags.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpPageSelect interface{}

    // Status Indicator. The type is map[string]bool.
    QsfpStatus interface{}
}

func (qsfpRealTimeStatus *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeStatus) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeStatus.EntityData.YFilter = qsfpRealTimeStatus.YFilter
    qsfpRealTimeStatus.EntityData.YangName = "qsfp-real-time-status"
    qsfpRealTimeStatus.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeStatus.EntityData.ParentYangName = "qsfp-real-time-status-flags"
    qsfpRealTimeStatus.EntityData.SegmentPath = "qsfp-real-time-status"
    qsfpRealTimeStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeStatus.EntityData.Children = make(map[string]types.YChild)
    qsfpRealTimeStatus.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpRealTimeStatus.EntityData.Leafs["qsfp-page-select"] = types.YLeaf{"QsfpPageSelect", qsfpRealTimeStatus.QsfpPageSelect}
    qsfpRealTimeStatus.EntityData.Leafs["qsfp-status"] = types.YLeaf{"QsfpStatus", qsfpRealTimeStatus.QsfpStatus}
    return &(qsfpRealTimeStatus.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interrupt Flag for TX/RX LOS Indicator. The type is map[string]bool.
    QsfpIntFlagsLosIndicator interface{}

    // Interrupt Flag for TX Fault Indicator. The type is map[string]bool.
    QsfpIntFlagsFaultIndicator interface{}

    // Interrupt Flag for high/low alarm/warning temperature Indicator. The type
    // is map[string]bool.
    QsfpIntFlagsTemperatureIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Voltage Indicator. The type is
    // map[string]bool.
    QsfpIntFlagsSupplyVoltageIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Rx Power in Channel 1/2/3/4
    // Indicator. The type is map[string]bool.
    QsfpIntFlagsRxPowerIndicator interface{}

    // Interrupt Flag for high/low alarm/warning Tx Bias in Channel 1/2/3/4
    // Indicator. The type is map[string]bool.
    QsfpIntFlagsTxBiasIndicator interface{}
}

func (qsfpRealTimeInterruptFlags *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA0Data_QsfpRealTimeStatusFlags_QsfpRealTimeInterruptFlags) GetEntityData() *types.CommonEntityData {
    qsfpRealTimeInterruptFlags.EntityData.YFilter = qsfpRealTimeInterruptFlags.YFilter
    qsfpRealTimeInterruptFlags.EntityData.YangName = "qsfp-real-time-interrupt-flags"
    qsfpRealTimeInterruptFlags.EntityData.BundleName = "cisco_ios_xr"
    qsfpRealTimeInterruptFlags.EntityData.ParentYangName = "qsfp-real-time-status-flags"
    qsfpRealTimeInterruptFlags.EntityData.SegmentPath = "qsfp-real-time-interrupt-flags"
    qsfpRealTimeInterruptFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRealTimeInterruptFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRealTimeInterruptFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRealTimeInterruptFlags.EntityData.Children = make(map[string]types.YChild)
    qsfpRealTimeInterruptFlags.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-LOS-Indicator"] = types.YLeaf{"QsfpIntFlagsLosIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsLosIndicator}
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-Fault-Indicator"] = types.YLeaf{"QsfpIntFlagsFaultIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsFaultIndicator}
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-Temperature-Indicator"] = types.YLeaf{"QsfpIntFlagsTemperatureIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsTemperatureIndicator}
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-Supply-Voltage-Indicator"] = types.YLeaf{"QsfpIntFlagsSupplyVoltageIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsSupplyVoltageIndicator}
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-Rx-Power-Indicator"] = types.YLeaf{"QsfpIntFlagsRxPowerIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsRxPowerIndicator}
    qsfpRealTimeInterruptFlags.EntityData.Leafs["qsfp-int-flags-Tx-Bias-Indicator"] = types.YLeaf{"QsfpIntFlagsTxBiasIndicator", qsfpRealTimeInterruptFlags.QsfpIntFlagsTxBiasIndicator}
    return &(qsfpRealTimeInterruptFlags.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is EsdmaSwitchSfpTranceiverTypeEnum.
    QsfpIdentifier interface{}

    // The type is EsdmaQsfpTransceiverEnum.
    QsfpTransceiver interface{}

    // The type is string.
    QsfpExtendedTransceiver interface{}

    // The type is EsdmaSfpEncodingEnum.
    QsfpEncoding interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpBitRate interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthStandardSmFiberKm interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOm350UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOm250UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthOm1625UFiberM interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLinkLengthCopperCableAssemblyFiberM interface{}

    // The type is string.
    QsfpDeviceTech interface{}

    // The type is string.
    QsfpVendorName interface{}

    // The type is string.
    QsfpVendorOui interface{}

    // The type is string.
    QsfpVendorPartNum interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpLaserWavelength interface{}

    // The type is interface{} with range: 0..4294967295.
    QsfpWavelengthTolerance interface{}

    // The type is string.
    QsfpMaxCaseTemperature interface{}

    // Option value for Rx amplitude . The type is map[string]bool.
    QsfpOptionValueRxAmplitude interface{}

    // Options Implemented in the QSFP Module. The type is map[string]bool.
    QsfpOptionValuesIndicator interface{}

    // The type is string.
    QsfpVendorSerialNum interface{}

    // The type is string.
    QsfpDateCode interface{}

    // The type is map[string]bool.
    QsfpDiagMonitoringType interface{}
}

func (qsfpPageA00Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA00Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA00Data.EntityData.YFilter = qsfpPageA00Data.YFilter
    qsfpPageA00Data.EntityData.YangName = "qsfp_page_A0_0_data"
    qsfpPageA00Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA00Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA00Data.EntityData.SegmentPath = "qsfp_page_A0_0_data"
    qsfpPageA00Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA00Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA00Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA00Data.EntityData.Children = make(map[string]types.YChild)
    qsfpPageA00Data.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpPageA00Data.EntityData.Leafs["qsfp-identifier"] = types.YLeaf{"QsfpIdentifier", qsfpPageA00Data.QsfpIdentifier}
    qsfpPageA00Data.EntityData.Leafs["qsfp-transceiver"] = types.YLeaf{"QsfpTransceiver", qsfpPageA00Data.QsfpTransceiver}
    qsfpPageA00Data.EntityData.Leafs["qsfp-extended-transceiver"] = types.YLeaf{"QsfpExtendedTransceiver", qsfpPageA00Data.QsfpExtendedTransceiver}
    qsfpPageA00Data.EntityData.Leafs["qsfp-encoding"] = types.YLeaf{"QsfpEncoding", qsfpPageA00Data.QsfpEncoding}
    qsfpPageA00Data.EntityData.Leafs["qsfp-bit-rate"] = types.YLeaf{"QsfpBitRate", qsfpPageA00Data.QsfpBitRate}
    qsfpPageA00Data.EntityData.Leafs["qsfp-link-length-standard-SM-fiber_KM"] = types.YLeaf{"QsfpLinkLengthStandardSmFiberKm", qsfpPageA00Data.QsfpLinkLengthStandardSmFiberKm}
    qsfpPageA00Data.EntityData.Leafs["qsfp-link-length-OM3-50u-fiber_M"] = types.YLeaf{"QsfpLinkLengthOm350UFiberM", qsfpPageA00Data.QsfpLinkLengthOm350UFiberM}
    qsfpPageA00Data.EntityData.Leafs["qsfp-link-length-OM2-50u-fiber_M"] = types.YLeaf{"QsfpLinkLengthOm250UFiberM", qsfpPageA00Data.QsfpLinkLengthOm250UFiberM}
    qsfpPageA00Data.EntityData.Leafs["qsfp-link-length-OM1-62_5u-fiber_M"] = types.YLeaf{"QsfpLinkLengthOm1625UFiberM", qsfpPageA00Data.QsfpLinkLengthOm1625UFiberM}
    qsfpPageA00Data.EntityData.Leafs["qsfp-link-length-Copper-Cable-Assembly-fiber_M"] = types.YLeaf{"QsfpLinkLengthCopperCableAssemblyFiberM", qsfpPageA00Data.QsfpLinkLengthCopperCableAssemblyFiberM}
    qsfpPageA00Data.EntityData.Leafs["qsfp-device-tech"] = types.YLeaf{"QsfpDeviceTech", qsfpPageA00Data.QsfpDeviceTech}
    qsfpPageA00Data.EntityData.Leafs["qsfp-vendor-name"] = types.YLeaf{"QsfpVendorName", qsfpPageA00Data.QsfpVendorName}
    qsfpPageA00Data.EntityData.Leafs["qsfp-vendor-oui"] = types.YLeaf{"QsfpVendorOui", qsfpPageA00Data.QsfpVendorOui}
    qsfpPageA00Data.EntityData.Leafs["qsfp-vendor-part-num"] = types.YLeaf{"QsfpVendorPartNum", qsfpPageA00Data.QsfpVendorPartNum}
    qsfpPageA00Data.EntityData.Leafs["qsfp-laser-wavelength"] = types.YLeaf{"QsfpLaserWavelength", qsfpPageA00Data.QsfpLaserWavelength}
    qsfpPageA00Data.EntityData.Leafs["qsfp-wavelength_tolerance"] = types.YLeaf{"QsfpWavelengthTolerance", qsfpPageA00Data.QsfpWavelengthTolerance}
    qsfpPageA00Data.EntityData.Leafs["qsfp-max-case-temperature"] = types.YLeaf{"QsfpMaxCaseTemperature", qsfpPageA00Data.QsfpMaxCaseTemperature}
    qsfpPageA00Data.EntityData.Leafs["qsfp-option-value-Rx-amplitude"] = types.YLeaf{"QsfpOptionValueRxAmplitude", qsfpPageA00Data.QsfpOptionValueRxAmplitude}
    qsfpPageA00Data.EntityData.Leafs["qsfp-option-values-Indicator"] = types.YLeaf{"QsfpOptionValuesIndicator", qsfpPageA00Data.QsfpOptionValuesIndicator}
    qsfpPageA00Data.EntityData.Leafs["qsfp-vendor-serial-num"] = types.YLeaf{"QsfpVendorSerialNum", qsfpPageA00Data.QsfpVendorSerialNum}
    qsfpPageA00Data.EntityData.Leafs["qsfp-date-code"] = types.YLeaf{"QsfpDateCode", qsfpPageA00Data.QsfpDateCode}
    qsfpPageA00Data.EntityData.Leafs["qsfp-diag-monitoring-type"] = types.YLeaf{"QsfpDiagMonitoringType", qsfpPageA00Data.QsfpDiagMonitoringType}
    return &(qsfpPageA00Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    QsfpTemperature Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature

    
    QsfpVoltage Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage

    
    QsfpTxBias Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias

    
    QsfpTxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower

    
    QsfpRxPower Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower
}

func (qsfpPageA03Data *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data) GetEntityData() *types.CommonEntityData {
    qsfpPageA03Data.EntityData.YFilter = qsfpPageA03Data.YFilter
    qsfpPageA03Data.EntityData.YangName = "qsfp_page_A0_3_data"
    qsfpPageA03Data.EntityData.BundleName = "cisco_ios_xr"
    qsfpPageA03Data.EntityData.ParentYangName = "qsfp-details"
    qsfpPageA03Data.EntityData.SegmentPath = "qsfp_page_A0_3_data"
    qsfpPageA03Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpPageA03Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpPageA03Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpPageA03Data.EntityData.Children = make(map[string]types.YChild)
    qsfpPageA03Data.EntityData.Children["qsfp-temperature"] = types.YChild{"QsfpTemperature", &qsfpPageA03Data.QsfpTemperature}
    qsfpPageA03Data.EntityData.Children["qsfp-voltage"] = types.YChild{"QsfpVoltage", &qsfpPageA03Data.QsfpVoltage}
    qsfpPageA03Data.EntityData.Children["qsfp-tx-bias"] = types.YChild{"QsfpTxBias", &qsfpPageA03Data.QsfpTxBias}
    qsfpPageA03Data.EntityData.Children["qsfp-tx-power"] = types.YChild{"QsfpTxPower", &qsfpPageA03Data.QsfpTxPower}
    qsfpPageA03Data.EntityData.Children["qsfp-rx-power"] = types.YChild{"QsfpRxPower", &qsfpPageA03Data.QsfpRxPower}
    qsfpPageA03Data.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(qsfpPageA03Data.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTempAlarmHigh interface{}

    // The type is string.
    QsfpTempWarningHigh interface{}

    // The type is string.
    QsfpTempWarningLow interface{}

    // The type is string.
    QsfpTempAlarmLow interface{}
}

func (qsfpTemperature *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTemperature) GetEntityData() *types.CommonEntityData {
    qsfpTemperature.EntityData.YFilter = qsfpTemperature.YFilter
    qsfpTemperature.EntityData.YangName = "qsfp-temperature"
    qsfpTemperature.EntityData.BundleName = "cisco_ios_xr"
    qsfpTemperature.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTemperature.EntityData.SegmentPath = "qsfp-temperature"
    qsfpTemperature.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTemperature.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTemperature.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTemperature.EntityData.Children = make(map[string]types.YChild)
    qsfpTemperature.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTemperature.EntityData.Leafs["qsfp-temp-alarm-high"] = types.YLeaf{"QsfpTempAlarmHigh", qsfpTemperature.QsfpTempAlarmHigh}
    qsfpTemperature.EntityData.Leafs["qsfp-temp-warning-high"] = types.YLeaf{"QsfpTempWarningHigh", qsfpTemperature.QsfpTempWarningHigh}
    qsfpTemperature.EntityData.Leafs["qsfp-temp-warning-low"] = types.YLeaf{"QsfpTempWarningLow", qsfpTemperature.QsfpTempWarningLow}
    qsfpTemperature.EntityData.Leafs["qsfp-temp-alarm-low"] = types.YLeaf{"QsfpTempAlarmLow", qsfpTemperature.QsfpTempAlarmLow}
    return &(qsfpTemperature.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpVoltAlarmHigh interface{}

    // The type is string.
    QsfpVoltWarningHigh interface{}

    // The type is string.
    QsfpVoltWarningLow interface{}

    // The type is string.
    QsfpVoltAlarmLow interface{}
}

func (qsfpVoltage *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpVoltage) GetEntityData() *types.CommonEntityData {
    qsfpVoltage.EntityData.YFilter = qsfpVoltage.YFilter
    qsfpVoltage.EntityData.YangName = "qsfp-voltage"
    qsfpVoltage.EntityData.BundleName = "cisco_ios_xr"
    qsfpVoltage.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpVoltage.EntityData.SegmentPath = "qsfp-voltage"
    qsfpVoltage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpVoltage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpVoltage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpVoltage.EntityData.Children = make(map[string]types.YChild)
    qsfpVoltage.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpVoltage.EntityData.Leafs["qsfp-volt-alarm-high"] = types.YLeaf{"QsfpVoltAlarmHigh", qsfpVoltage.QsfpVoltAlarmHigh}
    qsfpVoltage.EntityData.Leafs["qsfp-volt-warning-high"] = types.YLeaf{"QsfpVoltWarningHigh", qsfpVoltage.QsfpVoltWarningHigh}
    qsfpVoltage.EntityData.Leafs["qsfp-volt-warning-low"] = types.YLeaf{"QsfpVoltWarningLow", qsfpVoltage.QsfpVoltWarningLow}
    qsfpVoltage.EntityData.Leafs["qsfp-volt-alarm-low"] = types.YLeaf{"QsfpVoltAlarmLow", qsfpVoltage.QsfpVoltAlarmLow}
    return &(qsfpVoltage.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTxBiasAlarmHigh interface{}

    // The type is string.
    QsfpTxBiasWarningHigh interface{}

    // The type is string.
    QsfpTxBiasWarningLow interface{}

    // The type is string.
    QsfpTxBiasAlarmLow interface{}
}

func (qsfpTxBias *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxBias) GetEntityData() *types.CommonEntityData {
    qsfpTxBias.EntityData.YFilter = qsfpTxBias.YFilter
    qsfpTxBias.EntityData.YangName = "qsfp-tx-bias"
    qsfpTxBias.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxBias.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTxBias.EntityData.SegmentPath = "qsfp-tx-bias"
    qsfpTxBias.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxBias.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxBias.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxBias.EntityData.Children = make(map[string]types.YChild)
    qsfpTxBias.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTxBias.EntityData.Leafs["qsfp-tx-bias-alarm-high"] = types.YLeaf{"QsfpTxBiasAlarmHigh", qsfpTxBias.QsfpTxBiasAlarmHigh}
    qsfpTxBias.EntityData.Leafs["qsfp-tx-bias-warning-high"] = types.YLeaf{"QsfpTxBiasWarningHigh", qsfpTxBias.QsfpTxBiasWarningHigh}
    qsfpTxBias.EntityData.Leafs["qsfp-tx-bias-warning-low"] = types.YLeaf{"QsfpTxBiasWarningLow", qsfpTxBias.QsfpTxBiasWarningLow}
    qsfpTxBias.EntityData.Leafs["qsfp-tx-bias-alarm-low"] = types.YLeaf{"QsfpTxBiasAlarmLow", qsfpTxBias.QsfpTxBiasAlarmLow}
    return &(qsfpTxBias.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpTxPowerAlarmHigh interface{}

    // The type is string.
    QsfpTxPowerWarningHigh interface{}

    // The type is string.
    QsfpTxPowerWarningLow interface{}

    // The type is string.
    QsfpTxPowerAlarmLow interface{}
}

func (qsfpTxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpTxPower) GetEntityData() *types.CommonEntityData {
    qsfpTxPower.EntityData.YFilter = qsfpTxPower.YFilter
    qsfpTxPower.EntityData.YangName = "qsfp-tx-power"
    qsfpTxPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpTxPower.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpTxPower.EntityData.SegmentPath = "qsfp-tx-power"
    qsfpTxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpTxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpTxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpTxPower.EntityData.Children = make(map[string]types.YChild)
    qsfpTxPower.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpTxPower.EntityData.Leafs["qsfp-tx-power-alarm-high"] = types.YLeaf{"QsfpTxPowerAlarmHigh", qsfpTxPower.QsfpTxPowerAlarmHigh}
    qsfpTxPower.EntityData.Leafs["qsfp-tx-power-warning-high"] = types.YLeaf{"QsfpTxPowerWarningHigh", qsfpTxPower.QsfpTxPowerWarningHigh}
    qsfpTxPower.EntityData.Leafs["qsfp-tx-power-warning-low"] = types.YLeaf{"QsfpTxPowerWarningLow", qsfpTxPower.QsfpTxPowerWarningLow}
    qsfpTxPower.EntityData.Leafs["qsfp-tx-power-alarm-low"] = types.YLeaf{"QsfpTxPowerAlarmLow", qsfpTxPower.QsfpTxPowerAlarmLow}
    return &(qsfpTxPower.EntityData)
}

// Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower
type Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string.
    QsfpRxPowerAlarmHigh interface{}

    // The type is string.
    QsfpRxPowerWarningHigh interface{}

    // The type is string.
    QsfpRxPowerWarningLow interface{}

    // The type is string.
    QsfpRxPowerAlarmLow interface{}
}

func (qsfpRxPower *Controller_Switch_Oper_Sfp_Detail_Location_SfpPortIter_QsfpDetails_QsfpPageA03Data_QsfpRxPower) GetEntityData() *types.CommonEntityData {
    qsfpRxPower.EntityData.YFilter = qsfpRxPower.YFilter
    qsfpRxPower.EntityData.YangName = "qsfp-rx-power"
    qsfpRxPower.EntityData.BundleName = "cisco_ios_xr"
    qsfpRxPower.EntityData.ParentYangName = "qsfp_page_A0_3_data"
    qsfpRxPower.EntityData.SegmentPath = "qsfp-rx-power"
    qsfpRxPower.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qsfpRxPower.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qsfpRxPower.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qsfpRxPower.EntityData.Children = make(map[string]types.YChild)
    qsfpRxPower.EntityData.Leafs = make(map[string]types.YLeaf)
    qsfpRxPower.EntityData.Leafs["qsfp-rx-power-alarm-high"] = types.YLeaf{"QsfpRxPowerAlarmHigh", qsfpRxPower.QsfpRxPowerAlarmHigh}
    qsfpRxPower.EntityData.Leafs["qsfp-rx-power-warning-high"] = types.YLeaf{"QsfpRxPowerWarningHigh", qsfpRxPower.QsfpRxPowerWarningHigh}
    qsfpRxPower.EntityData.Leafs["qsfp-rx-power-warning-low"] = types.YLeaf{"QsfpRxPowerWarningLow", qsfpRxPower.QsfpRxPowerWarningLow}
    qsfpRxPower.EntityData.Leafs["qsfp-rx-power-alarm-low"] = types.YLeaf{"QsfpRxPowerAlarmLow", qsfpRxPower.QsfpRxPowerAlarmLow}
    return &(qsfpRxPower.EntityData)
}

// Controller_Switch_Oper_Mlap
// MLAP switch data
type Controller_Switch_Oper_Mlap struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Reachable Controller_Switch_Oper_Mlap_Reachable

    
    Detail Controller_Switch_Oper_Mlap_Detail

    
    Statistics Controller_Switch_Oper_Mlap_Statistics

    
    SummaryData Controller_Switch_Oper_Mlap_SummaryData

    
    Debug Controller_Switch_Oper_Mlap_Debug

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_Mlap_Trace.
    Trace []Controller_Switch_Oper_Mlap_Trace
}

func (mlap *Controller_Switch_Oper_Mlap) GetEntityData() *types.CommonEntityData {
    mlap.EntityData.YFilter = mlap.YFilter
    mlap.EntityData.YangName = "mlap"
    mlap.EntityData.BundleName = "cisco_ios_xr"
    mlap.EntityData.ParentYangName = "oper"
    mlap.EntityData.SegmentPath = "mlap"
    mlap.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlap.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlap.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlap.EntityData.Children = make(map[string]types.YChild)
    mlap.EntityData.Children["reachable"] = types.YChild{"Reachable", &mlap.Reachable}
    mlap.EntityData.Children["detail"] = types.YChild{"Detail", &mlap.Detail}
    mlap.EntityData.Children["statistics"] = types.YChild{"Statistics", &mlap.Statistics}
    mlap.EntityData.Children["summary-data"] = types.YChild{"SummaryData", &mlap.SummaryData}
    mlap.EntityData.Children["debug"] = types.YChild{"Debug", &mlap.Debug}
    mlap.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range mlap.Trace {
        mlap.EntityData.Children[types.GetSegmentPath(&mlap.Trace[i])] = types.YChild{"Trace", &mlap.Trace[i]}
    }
    mlap.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlap.EntityData)
}

// Controller_Switch_Oper_Mlap_Reachable
type Controller_Switch_Oper_Mlap_Reachable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Reachable_Location.
    Location []Controller_Switch_Oper_Mlap_Reachable_Location
}

func (reachable *Controller_Switch_Oper_Mlap_Reachable) GetEntityData() *types.CommonEntityData {
    reachable.EntityData.YFilter = reachable.YFilter
    reachable.EntityData.YangName = "reachable"
    reachable.EntityData.BundleName = "cisco_ios_xr"
    reachable.EntityData.ParentYangName = "mlap"
    reachable.EntityData.SegmentPath = "reachable"
    reachable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reachable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reachable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reachable.EntityData.Children = make(map[string]types.YChild)
    reachable.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range reachable.Location {
        reachable.EntityData.Children[types.GetSegmentPath(&reachable.Location[i])] = types.YChild{"Location", &reachable.Location[i]}
    }
    reachable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(reachable.EntityData)
}

// Controller_Switch_Oper_Mlap_Reachable_Location
type Controller_Switch_Oper_Mlap_Reachable_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}
}

func (location *Controller_Switch_Oper_Mlap_Reachable_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "reachable"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail
type Controller_Switch_Oper_Mlap_Detail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Detail_Location.
    Location []Controller_Switch_Oper_Mlap_Detail_Location
}

func (detail *Controller_Switch_Oper_Mlap_Detail) GetEntityData() *types.CommonEntityData {
    detail.EntityData.YFilter = detail.YFilter
    detail.EntityData.YangName = "detail"
    detail.EntityData.BundleName = "cisco_ios_xr"
    detail.EntityData.ParentYangName = "mlap"
    detail.EntityData.SegmentPath = "detail"
    detail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detail.EntityData.Children = make(map[string]types.YChild)
    detail.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range detail.Location {
        detail.EntityData.Children[types.GetSegmentPath(&detail.Location[i])] = types.YChild{"Location", &detail.Location[i]}
    }
    detail.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(detail.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location
type Controller_Switch_Oper_Mlap_Detail_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Detail_Location_PortIter.
    PortIter []Controller_Switch_Oper_Mlap_Detail_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_Detail_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "detail"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    
    GenData Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData

    
    MlapInternalDetails Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails

    
    MlapExternalDetails Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails
}

func (portIter *Controller_Switch_Oper_Mlap_Detail_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Children["gen-data"] = types.YChild{"GenData", &portIter.GenData}
    portIter.EntityData.Children["mlap-internal-details"] = types.YChild{"MlapInternalDetails", &portIter.MlapInternalDetails}
    portIter.EntityData.Children["mlap-external-details"] = types.YChild{"MlapExternalDetails", &portIter.MlapExternalDetails}
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rack serial number. The type is string.
    SerialNum interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates whether the internal or external MLAP protocol is active on this
    // port. The type is MlapProtocolEnum.
    MlapProtocol interface{}

    // Number of protocol packets sent. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktSent interface{}

    // Number of protocol packets received. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktRecv interface{}

    // Number of set-active-VLAN requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsSent interface{}

    // Number of set-active-VLAN responses. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsRecv interface{}

    // Number of protocol packet send errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSendError interface{}

    // Number of protocol packet receive errors. The type is interface{} with
    // range: 0..18446744073709551615.
    ProtocolRecvError interface{}

    // Number of state changes. The type is interface{} with range: 0..4294967295.
    ProtocolStateChanges interface{}
}

func (genData *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_GenData) GetEntityData() *types.CommonEntityData {
    genData.EntityData.YFilter = genData.YFilter
    genData.EntityData.YangName = "gen-data"
    genData.EntityData.BundleName = "cisco_ios_xr"
    genData.EntityData.ParentYangName = "port-iter"
    genData.EntityData.SegmentPath = "gen-data"
    genData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genData.EntityData.Children = make(map[string]types.YChild)
    genData.EntityData.Leafs = make(map[string]types.YLeaf)
    genData.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", genData.SerialNum}
    genData.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", genData.ConnectsTo}
    genData.EntityData.Leafs["phys-state"] = types.YLeaf{"PhysState", genData.PhysState}
    genData.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", genData.AdminState}
    genData.EntityData.Leafs["protocol-state"] = types.YLeaf{"ProtocolState", genData.ProtocolState}
    genData.EntityData.Leafs["forwarding"] = types.YLeaf{"Forwarding", genData.Forwarding}
    genData.EntityData.Leafs["mlap-protocol"] = types.YLeaf{"MlapProtocol", genData.MlapProtocol}
    genData.EntityData.Leafs["protocol-pkt-sent"] = types.YLeaf{"ProtocolPktSent", genData.ProtocolPktSent}
    genData.EntityData.Leafs["protocol-pkt-recv"] = types.YLeaf{"ProtocolPktRecv", genData.ProtocolPktRecv}
    genData.EntityData.Leafs["protocol-set-color-pkts-sent"] = types.YLeaf{"ProtocolSetColorPktsSent", genData.ProtocolSetColorPktsSent}
    genData.EntityData.Leafs["protocol-set-color-pkts-recv"] = types.YLeaf{"ProtocolSetColorPktsRecv", genData.ProtocolSetColorPktsRecv}
    genData.EntityData.Leafs["protocol-send-error"] = types.YLeaf{"ProtocolSendError", genData.ProtocolSendError}
    genData.EntityData.Leafs["protocol-recv-error"] = types.YLeaf{"ProtocolRecvError", genData.ProtocolRecvError}
    genData.EntityData.Leafs["protocol-state-changes"] = types.YLeaf{"ProtocolStateChanges", genData.ProtocolStateChanges}
    return &(genData.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Info Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info
}

func (mlapInternalDetails *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails) GetEntityData() *types.CommonEntityData {
    mlapInternalDetails.EntityData.YFilter = mlapInternalDetails.YFilter
    mlapInternalDetails.EntityData.YangName = "mlap-internal-details"
    mlapInternalDetails.EntityData.BundleName = "cisco_ios_xr"
    mlapInternalDetails.EntityData.ParentYangName = "port-iter"
    mlapInternalDetails.EntityData.SegmentPath = "mlap-internal-details"
    mlapInternalDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapInternalDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapInternalDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapInternalDetails.EntityData.Children = make(map[string]types.YChild)
    mlapInternalDetails.EntityData.Children["info"] = types.YChild{"Info", &mlapInternalDetails.Info}
    mlapInternalDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlapInternalDetails.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates which switch data path the port belongs to. The type is EsdmaCpu.
    PortOwner interface{}

    // Indicates which switch is currently mastering chassis data. The type is
    // EsdmaCpu.
    CurrentActiveOwner interface{}

    // Peer's port MLAP protocol flags. The type is map[string]bool.
    MlapPeerFlags interface{}

    // Time intervals peer has not updated information. The type is interface{}
    // with range: 0..4294967295.
    MlapPeerIdleCount interface{}

    // My port active mask view. The type is interface{} with range:
    // 0..18446744073709551615.
    MyConnectionActiveMask interface{}

    // Peer's port active mask view. The type is interface{} with range:
    // 0..18446744073709551615.
    PeerConnectionActiveMask interface{}

    // Indicates the high-level card type this switch port is peering with. The
    // type is MlapEpType.
    EndpointCardType interface{}

    // MAC addess of device of the protocol peer for this switch port. The type is
    // string with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    EndpointMacAddress interface{}
}

func (info *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapInternalDetails_Info) GetEntityData() *types.CommonEntityData {
    info.EntityData.YFilter = info.YFilter
    info.EntityData.YangName = "info"
    info.EntityData.BundleName = "cisco_ios_xr"
    info.EntityData.ParentYangName = "mlap-internal-details"
    info.EntityData.SegmentPath = "info"
    info.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    info.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    info.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    info.EntityData.Children = make(map[string]types.YChild)
    info.EntityData.Leafs = make(map[string]types.YLeaf)
    info.EntityData.Leafs["port-owner"] = types.YLeaf{"PortOwner", info.PortOwner}
    info.EntityData.Leafs["current-active-owner"] = types.YLeaf{"CurrentActiveOwner", info.CurrentActiveOwner}
    info.EntityData.Leafs["mlap-peer-flags"] = types.YLeaf{"MlapPeerFlags", info.MlapPeerFlags}
    info.EntityData.Leafs["mlap-peer-idle-count"] = types.YLeaf{"MlapPeerIdleCount", info.MlapPeerIdleCount}
    info.EntityData.Leafs["my-connection-active-mask"] = types.YLeaf{"MyConnectionActiveMask", info.MyConnectionActiveMask}
    info.EntityData.Leafs["peer-connection-active-mask"] = types.YLeaf{"PeerConnectionActiveMask", info.PeerConnectionActiveMask}
    info.EntityData.Leafs["endpoint-card-type"] = types.YLeaf{"EndpointCardType", info.EndpointCardType}
    info.EntityData.Leafs["endpoint-mac-address"] = types.YLeaf{"EndpointMacAddress", info.EndpointMacAddress}
    return &(info.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MLAP state information from this port's perspective.
    LocalStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation

    // MLAP state information from peer port's perspective.
    PeerStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation

    // MLAP state information for peer's other uplink perspective (RP/SC only).
    PeerOtherLinkStateInformation Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation
}

func (mlapExternalDetails *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails) GetEntityData() *types.CommonEntityData {
    mlapExternalDetails.EntityData.YFilter = mlapExternalDetails.YFilter
    mlapExternalDetails.EntityData.YangName = "mlap-external-details"
    mlapExternalDetails.EntityData.BundleName = "cisco_ios_xr"
    mlapExternalDetails.EntityData.ParentYangName = "port-iter"
    mlapExternalDetails.EntityData.SegmentPath = "mlap-external-details"
    mlapExternalDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapExternalDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapExternalDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapExternalDetails.EntityData.Children = make(map[string]types.YChild)
    mlapExternalDetails.EntityData.Children["local-state-information"] = types.YChild{"LocalStateInformation", &mlapExternalDetails.LocalStateInformation}
    mlapExternalDetails.EntityData.Children["peer-state-information"] = types.YChild{"PeerStateInformation", &mlapExternalDetails.PeerStateInformation}
    mlapExternalDetails.EntityData.Children["peer-other-link-state-information"] = types.YChild{"PeerOtherLinkStateInformation", &mlapExternalDetails.PeerOtherLinkStateInformation}
    mlapExternalDetails.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlapExternalDetails.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation
// MLAP state information from this port's perspective
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (localStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_LocalStateInformation) GetEntityData() *types.CommonEntityData {
    localStateInformation.EntityData.YFilter = localStateInformation.YFilter
    localStateInformation.EntityData.YangName = "local-state-information"
    localStateInformation.EntityData.BundleName = "cisco_ios_xr"
    localStateInformation.EntityData.ParentYangName = "mlap-external-details"
    localStateInformation.EntityData.SegmentPath = "local-state-information"
    localStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localStateInformation.EntityData.Children = make(map[string]types.YChild)
    localStateInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    localStateInformation.EntityData.Leafs["valid"] = types.YLeaf{"Valid", localStateInformation.Valid}
    localStateInformation.EntityData.Leafs["chassis-type"] = types.YLeaf{"ChassisType", localStateInformation.ChassisType}
    localStateInformation.EntityData.Leafs["endpoint-type"] = types.YLeaf{"EndpointType", localStateInformation.EndpointType}
    localStateInformation.EntityData.Leafs["endpoint-slot-number"] = types.YLeaf{"EndpointSlotNumber", localStateInformation.EndpointSlotNumber}
    localStateInformation.EntityData.Leafs["endpoint-switch-number"] = types.YLeaf{"EndpointSwitchNumber", localStateInformation.EndpointSwitchNumber}
    localStateInformation.EntityData.Leafs["endpoint-switch-port-number"] = types.YLeaf{"EndpointSwitchPortNumber", localStateInformation.EndpointSwitchPortNumber}
    localStateInformation.EntityData.Leafs["endpoint-chassis-serial-number"] = types.YLeaf{"EndpointChassisSerialNumber", localStateInformation.EndpointChassisSerialNumber}
    localStateInformation.EntityData.Leafs["mlap-state"] = types.YLeaf{"MlapState", localStateInformation.MlapState}
    localStateInformation.EntityData.Leafs["inter-fcc_sw-port"] = types.YLeaf{"InterFccSwPort", localStateInformation.InterFccSwPort}
    localStateInformation.EntityData.Leafs["fcc_sw-indirectly-reachable"] = types.YLeaf{"FccSwIndirectlyReachable", localStateInformation.FccSwIndirectlyReachable}
    return &(localStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation
// MLAP state information from peer port's perspective
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (peerStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerStateInformation) GetEntityData() *types.CommonEntityData {
    peerStateInformation.EntityData.YFilter = peerStateInformation.YFilter
    peerStateInformation.EntityData.YangName = "peer-state-information"
    peerStateInformation.EntityData.BundleName = "cisco_ios_xr"
    peerStateInformation.EntityData.ParentYangName = "mlap-external-details"
    peerStateInformation.EntityData.SegmentPath = "peer-state-information"
    peerStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerStateInformation.EntityData.Children = make(map[string]types.YChild)
    peerStateInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    peerStateInformation.EntityData.Leafs["valid"] = types.YLeaf{"Valid", peerStateInformation.Valid}
    peerStateInformation.EntityData.Leafs["chassis-type"] = types.YLeaf{"ChassisType", peerStateInformation.ChassisType}
    peerStateInformation.EntityData.Leafs["endpoint-type"] = types.YLeaf{"EndpointType", peerStateInformation.EndpointType}
    peerStateInformation.EntityData.Leafs["endpoint-slot-number"] = types.YLeaf{"EndpointSlotNumber", peerStateInformation.EndpointSlotNumber}
    peerStateInformation.EntityData.Leafs["endpoint-switch-number"] = types.YLeaf{"EndpointSwitchNumber", peerStateInformation.EndpointSwitchNumber}
    peerStateInformation.EntityData.Leafs["endpoint-switch-port-number"] = types.YLeaf{"EndpointSwitchPortNumber", peerStateInformation.EndpointSwitchPortNumber}
    peerStateInformation.EntityData.Leafs["endpoint-chassis-serial-number"] = types.YLeaf{"EndpointChassisSerialNumber", peerStateInformation.EndpointChassisSerialNumber}
    peerStateInformation.EntityData.Leafs["mlap-state"] = types.YLeaf{"MlapState", peerStateInformation.MlapState}
    peerStateInformation.EntityData.Leafs["inter-fcc_sw-port"] = types.YLeaf{"InterFccSwPort", peerStateInformation.InterFccSwPort}
    peerStateInformation.EntityData.Leafs["fcc_sw-indirectly-reachable"] = types.YLeaf{"FccSwIndirectlyReachable", peerStateInformation.FccSwIndirectlyReachable}
    return &(peerStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation
// MLAP state information for peer's other uplink perspective (RP/SC only)
type Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates whether this endpoint information contains valid data. The type
    // is bool.
    Valid interface{}

    // The chassis type of this endpoint is in. The type is EsdmaRackTypeEnum.
    ChassisType interface{}

    // The type of endpoint this endpoint switch is on. The type is
    // EsdmaSwitchTypeEnum.
    EndpointType interface{}

    // Slot number of this endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSlotNumber interface{}

    // Switch number for the endpoint. The type is interface{} with range:
    // 0..4294967295.
    EndpointSwitchNumber interface{}

    // Port number on the switch for the endpoint. The type is interface{} with
    // range: 0..4294967295.
    EndpointSwitchPortNumber interface{}

    // Serial number for the endpoint. The type is string.
    EndpointChassisSerialNumber interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    MlapState interface{}

    // Indicates whether this port is used for an inter-F-SW connection. The type
    // is bool.
    InterFccSwPort interface{}

    // Indicates whether this port can indirectly reach an F-SW. The type is bool.
    FccSwIndirectlyReachable interface{}
}

func (peerOtherLinkStateInformation *Controller_Switch_Oper_Mlap_Detail_Location_PortIter_MlapExternalDetails_PeerOtherLinkStateInformation) GetEntityData() *types.CommonEntityData {
    peerOtherLinkStateInformation.EntityData.YFilter = peerOtherLinkStateInformation.YFilter
    peerOtherLinkStateInformation.EntityData.YangName = "peer-other-link-state-information"
    peerOtherLinkStateInformation.EntityData.BundleName = "cisco_ios_xr"
    peerOtherLinkStateInformation.EntityData.ParentYangName = "mlap-external-details"
    peerOtherLinkStateInformation.EntityData.SegmentPath = "peer-other-link-state-information"
    peerOtherLinkStateInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peerOtherLinkStateInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peerOtherLinkStateInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peerOtherLinkStateInformation.EntityData.Children = make(map[string]types.YChild)
    peerOtherLinkStateInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    peerOtherLinkStateInformation.EntityData.Leafs["valid"] = types.YLeaf{"Valid", peerOtherLinkStateInformation.Valid}
    peerOtherLinkStateInformation.EntityData.Leafs["chassis-type"] = types.YLeaf{"ChassisType", peerOtherLinkStateInformation.ChassisType}
    peerOtherLinkStateInformation.EntityData.Leafs["endpoint-type"] = types.YLeaf{"EndpointType", peerOtherLinkStateInformation.EndpointType}
    peerOtherLinkStateInformation.EntityData.Leafs["endpoint-slot-number"] = types.YLeaf{"EndpointSlotNumber", peerOtherLinkStateInformation.EndpointSlotNumber}
    peerOtherLinkStateInformation.EntityData.Leafs["endpoint-switch-number"] = types.YLeaf{"EndpointSwitchNumber", peerOtherLinkStateInformation.EndpointSwitchNumber}
    peerOtherLinkStateInformation.EntityData.Leafs["endpoint-switch-port-number"] = types.YLeaf{"EndpointSwitchPortNumber", peerOtherLinkStateInformation.EndpointSwitchPortNumber}
    peerOtherLinkStateInformation.EntityData.Leafs["endpoint-chassis-serial-number"] = types.YLeaf{"EndpointChassisSerialNumber", peerOtherLinkStateInformation.EndpointChassisSerialNumber}
    peerOtherLinkStateInformation.EntityData.Leafs["mlap-state"] = types.YLeaf{"MlapState", peerOtherLinkStateInformation.MlapState}
    peerOtherLinkStateInformation.EntityData.Leafs["inter-fcc_sw-port"] = types.YLeaf{"InterFccSwPort", peerOtherLinkStateInformation.InterFccSwPort}
    peerOtherLinkStateInformation.EntityData.Leafs["fcc_sw-indirectly-reachable"] = types.YLeaf{"FccSwIndirectlyReachable", peerOtherLinkStateInformation.FccSwIndirectlyReachable}
    return &(peerOtherLinkStateInformation.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics
type Controller_Switch_Oper_Mlap_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Statistics_Location.
    Location []Controller_Switch_Oper_Mlap_Statistics_Location
}

func (statistics *Controller_Switch_Oper_Mlap_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "mlap"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = make(map[string]types.YChild)
    statistics.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range statistics.Location {
        statistics.EntityData.Children[types.GetSegmentPath(&statistics.Location[i])] = types.YChild{"Location", &statistics.Location[i]}
    }
    statistics.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(statistics.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics_Location
type Controller_Switch_Oper_Mlap_Statistics_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_Statistics_Location_PortIter.
    PortIter []Controller_Switch_Oper_Mlap_Statistics_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_Statistics_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "statistics"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", location.SerialNum}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Statistics_Location_PortIter
type Controller_Switch_Oper_Mlap_Statistics_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Number of state changes. The type is interface{} with range: 0..4294967295.
    ProtocolStateChanges interface{}

    // Number of protocol packets sent. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktSent interface{}

    // Number of protocol packets received. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolPktRecv interface{}

    // Number of set-active-VLAN requests. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsSent interface{}

    // Number of set-active-VLAN responses. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSetColorPktsRecv interface{}

    // Number of protocol packet send errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ProtocolSendError interface{}

    // Number of protocol packet receive errors. The type is interface{} with
    // range: 0..18446744073709551615.
    ProtocolRecvError interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Mlap_Statistics_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    portIter.EntityData.Leafs["protocol-state"] = types.YLeaf{"ProtocolState", portIter.ProtocolState}
    portIter.EntityData.Leafs["protocol-state-changes"] = types.YLeaf{"ProtocolStateChanges", portIter.ProtocolStateChanges}
    portIter.EntityData.Leafs["protocol-pkt-sent"] = types.YLeaf{"ProtocolPktSent", portIter.ProtocolPktSent}
    portIter.EntityData.Leafs["protocol-pkt-recv"] = types.YLeaf{"ProtocolPktRecv", portIter.ProtocolPktRecv}
    portIter.EntityData.Leafs["protocol-set-color-pkts-sent"] = types.YLeaf{"ProtocolSetColorPktsSent", portIter.ProtocolSetColorPktsSent}
    portIter.EntityData.Leafs["protocol-set-color-pkts-recv"] = types.YLeaf{"ProtocolSetColorPktsRecv", portIter.ProtocolSetColorPktsRecv}
    portIter.EntityData.Leafs["protocol-send-error"] = types.YLeaf{"ProtocolSendError", portIter.ProtocolSendError}
    portIter.EntityData.Leafs["protocol-recv-error"] = types.YLeaf{"ProtocolRecvError", portIter.ProtocolRecvError}
    portIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", portIter.ConnectsTo}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData
type Controller_Switch_Oper_Mlap_SummaryData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_SummaryData_Location.
    Location []Controller_Switch_Oper_Mlap_SummaryData_Location
}

func (summaryData *Controller_Switch_Oper_Mlap_SummaryData) GetEntityData() *types.CommonEntityData {
    summaryData.EntityData.YFilter = summaryData.YFilter
    summaryData.EntityData.YangName = "summary-data"
    summaryData.EntityData.BundleName = "cisco_ios_xr"
    summaryData.EntityData.ParentYangName = "mlap"
    summaryData.EntityData.SegmentPath = "summary-data"
    summaryData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryData.EntityData.Children = make(map[string]types.YChild)
    summaryData.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range summaryData.Location {
        summaryData.EntityData.Children[types.GetSegmentPath(&summaryData.Location[i])] = types.YChild{"Location", &summaryData.Location[i]}
    }
    summaryData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(summaryData.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData_Location
type Controller_Switch_Oper_Mlap_SummaryData_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Rack serial number. The type is string.
    SerialNum interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter.
    PortIter []Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter
}

func (location *Controller_Switch_Oper_Mlap_SummaryData_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "summary-data"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["serial-num"] = types.YLeaf{"SerialNum", location.SerialNum}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter
type Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}

    // Physical port state. The type is EsdmaSwitchPortState.
    PhysState interface{}

    // Administrative port state. The type is EsdmaSwitchPortState.
    AdminState interface{}

    // Protocol invoked port state. The type is MlapStateEnum.
    ProtocolState interface{}

    // Indicates whether this port is allowed to forward traffic. The type is
    // SwitchForwardingState.
    Forwarding interface{}

    // Indicates whether the internal or external MLAP protocol is active on this
    // port. The type is MlapProtocolEnum.
    MlapProtocol interface{}

    // Indicates what this port connects to. The type is string.
    ConnectsTo interface{}
}

func (portIter *Controller_Switch_Oper_Mlap_SummaryData_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    portIter.EntityData.Leafs["phys-state"] = types.YLeaf{"PhysState", portIter.PhysState}
    portIter.EntityData.Leafs["admin-state"] = types.YLeaf{"AdminState", portIter.AdminState}
    portIter.EntityData.Leafs["protocol-state"] = types.YLeaf{"ProtocolState", portIter.ProtocolState}
    portIter.EntityData.Leafs["forwarding"] = types.YLeaf{"Forwarding", portIter.Forwarding}
    portIter.EntityData.Leafs["mlap-protocol"] = types.YLeaf{"MlapProtocol", portIter.MlapProtocol}
    portIter.EntityData.Leafs["connects-to"] = types.YLeaf{"ConnectsTo", portIter.ConnectsTo}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug
type Controller_Switch_Oper_Mlap_Debug struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Counters Controller_Switch_Oper_Mlap_Debug_Counters
}

func (debug *Controller_Switch_Oper_Mlap_Debug) GetEntityData() *types.CommonEntityData {
    debug.EntityData.YFilter = debug.YFilter
    debug.EntityData.YangName = "debug"
    debug.EntityData.BundleName = "cisco_ios_xr"
    debug.EntityData.ParentYangName = "mlap"
    debug.EntityData.SegmentPath = "debug"
    debug.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    debug.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    debug.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    debug.EntityData.Children = make(map[string]types.YChild)
    debug.EntityData.Children["counters"] = types.YChild{"Counters", &debug.Counters}
    debug.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(debug.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters
type Controller_Switch_Oper_Mlap_Debug_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Mlap_Debug_Counters_Location.
    Location []Controller_Switch_Oper_Mlap_Debug_Counters_Location
}

func (counters *Controller_Switch_Oper_Mlap_Debug_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "debug"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range counters.Location {
        counters.EntityData.Children[types.GetSegmentPath(&counters.Location[i])] = types.YChild{"Location", &counters.Location[i]}
    }
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(counters.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters_Location
type Controller_Switch_Oper_Mlap_Debug_Counters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    Counters Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters_
}

func (location *Controller_Switch_Oper_Mlap_Debug_Counters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "counters"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["counters"] = types.YChild{"Counters", &location.Counters}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters_
type Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..18446744073709551615.
    EvalAllLinksCalled interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TimerEventQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxPacketEventQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    EvalAllLinksQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    LinkStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AdminStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    FwdStatusQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CurrentFifoDepth interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    MaxFifoDepth interface{}

    // The type is interface{} with range: 0..4294967295.
    VlanColorChanges interface{}

    // The type is interface{} with range: 0..4294967295.
    CurrentMlapTimeoutMsInterval interface{}

    // The type is bool.
    AgingDebugEnabled interface{}

    // The type is MlapTraceVerbosity.
    TraceVerbosity interface{}
}

func (counters_ *Controller_Switch_Oper_Mlap_Debug_Counters_Location_Counters_) GetEntityData() *types.CommonEntityData {
    counters_.EntityData.YFilter = counters_.YFilter
    counters_.EntityData.YangName = "counters"
    counters_.EntityData.BundleName = "cisco_ios_xr"
    counters_.EntityData.ParentYangName = "location"
    counters_.EntityData.SegmentPath = "counters"
    counters_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters_.EntityData.Children = make(map[string]types.YChild)
    counters_.EntityData.Leafs = make(map[string]types.YLeaf)
    counters_.EntityData.Leafs["eval-all-links-called"] = types.YLeaf{"EvalAllLinksCalled", counters_.EvalAllLinksCalled}
    counters_.EntityData.Leafs["timer-event-queued"] = types.YLeaf{"TimerEventQueued", counters_.TimerEventQueued}
    counters_.EntityData.Leafs["rx-packet-event-queued"] = types.YLeaf{"RxPacketEventQueued", counters_.RxPacketEventQueued}
    counters_.EntityData.Leafs["eval-all-links-queued"] = types.YLeaf{"EvalAllLinksQueued", counters_.EvalAllLinksQueued}
    counters_.EntityData.Leafs["link-status-queued"] = types.YLeaf{"LinkStatusQueued", counters_.LinkStatusQueued}
    counters_.EntityData.Leafs["admin-status-queued"] = types.YLeaf{"AdminStatusQueued", counters_.AdminStatusQueued}
    counters_.EntityData.Leafs["fwd-status-queued"] = types.YLeaf{"FwdStatusQueued", counters_.FwdStatusQueued}
    counters_.EntityData.Leafs["current-fifo-depth"] = types.YLeaf{"CurrentFifoDepth", counters_.CurrentFifoDepth}
    counters_.EntityData.Leafs["max-fifo-depth"] = types.YLeaf{"MaxFifoDepth", counters_.MaxFifoDepth}
    counters_.EntityData.Leafs["vlan-color-changes"] = types.YLeaf{"VlanColorChanges", counters_.VlanColorChanges}
    counters_.EntityData.Leafs["current-mlap-timeout-ms-interval"] = types.YLeaf{"CurrentMlapTimeoutMsInterval", counters_.CurrentMlapTimeoutMsInterval}
    counters_.EntityData.Leafs["aging-debug-enabled"] = types.YLeaf{"AgingDebugEnabled", counters_.AgingDebugEnabled}
    counters_.EntityData.Leafs["trace-verbosity"] = types.YLeaf{"TraceVerbosity", counters_.TraceVerbosity}
    return &(counters_.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace
// show traceable processes
type Controller_Switch_Oper_Mlap_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Trace_Location.
    Location []Controller_Switch_Oper_Mlap_Trace_Location
}

func (trace *Controller_Switch_Oper_Mlap_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "mlap"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location
type Controller_Switch_Oper_Mlap_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of Controller_Switch_Oper_Mlap_Trace_Location_AllOptions.
    AllOptions []Controller_Switch_Oper_Mlap_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_Mlap_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location_AllOptions
type Controller_Switch_Oper_Mlap_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_Mlap_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_Mlap_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont
type Controller_Switch_Oper_SwitchDebugCont struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Debug Controller_Switch_Oper_SwitchDebugCont_Debug
}

func (switchDebugCont *Controller_Switch_Oper_SwitchDebugCont) GetEntityData() *types.CommonEntityData {
    switchDebugCont.EntityData.YFilter = switchDebugCont.YFilter
    switchDebugCont.EntityData.YangName = "switch-debug-cont"
    switchDebugCont.EntityData.BundleName = "cisco_ios_xr"
    switchDebugCont.EntityData.ParentYangName = "oper"
    switchDebugCont.EntityData.SegmentPath = "switch-debug-cont"
    switchDebugCont.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchDebugCont.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchDebugCont.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchDebugCont.EntityData.Children = make(map[string]types.YChild)
    switchDebugCont.EntityData.Children["debug"] = types.YChild{"Debug", &switchDebugCont.Debug}
    switchDebugCont.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(switchDebugCont.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug
type Controller_Switch_Oper_SwitchDebugCont_Debug struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Counters Controller_Switch_Oper_SwitchDebugCont_Debug_Counters
}

func (debug *Controller_Switch_Oper_SwitchDebugCont_Debug) GetEntityData() *types.CommonEntityData {
    debug.EntityData.YFilter = debug.YFilter
    debug.EntityData.YangName = "debug"
    debug.EntityData.BundleName = "cisco_ios_xr"
    debug.EntityData.ParentYangName = "switch-debug-cont"
    debug.EntityData.SegmentPath = "debug"
    debug.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    debug.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    debug.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    debug.EntityData.Children = make(map[string]types.YChild)
    debug.EntityData.Children["counters"] = types.YChild{"Counters", &debug.Counters}
    debug.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(debug.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of
    // Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location.
    Location []Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location
}

func (counters *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "debug"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range counters.Location {
        counters.EntityData.Children[types.GetSegmentPath(&counters.Location[i])] = types.YChild{"Location", &counters.Location[i]}
    }
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(counters.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    
    Counters Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_
}

func (location *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "counters"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["counters"] = types.YChild{"Counters", &location.Counters}
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is bool.
    PhyPollingEnabled interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TxThreadWdogCnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    RxThreadWdogCnt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskLockLongestWaitTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskLockLongestWaitEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskLockLongestHeldTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskLockLongestHeldEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    TaskUnlockLongestWaitTime interface{}

    // The type is interface{} with range: 0..4294967295.
    TaskUnlockLongestWaitEvent interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaMaxRxDequeuedPerInt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaRxPacketsDequeued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaRxPacketDequeueErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketsQueued interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketsCompleted interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketNoMsgErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketMsgTooBigErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketNoBufferErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketQueueErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxPacketCompletionErrors interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaMaxTxFreedPerInt interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxBufAllocCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    DmaTxBufFreeCount interface{}

    // The type is slice of
    // Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters__SwitchCore.
    SwitchCore []Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters__SwitchCore
}

func (counters_ *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters_) GetEntityData() *types.CommonEntityData {
    counters_.EntityData.YFilter = counters_.YFilter
    counters_.EntityData.YangName = "counters"
    counters_.EntityData.BundleName = "cisco_ios_xr"
    counters_.EntityData.ParentYangName = "location"
    counters_.EntityData.SegmentPath = "counters"
    counters_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters_.EntityData.Children = make(map[string]types.YChild)
    counters_.EntityData.Children["switch-core"] = types.YChild{"SwitchCore", nil}
    for i := range counters_.SwitchCore {
        counters_.EntityData.Children[types.GetSegmentPath(&counters_.SwitchCore[i])] = types.YChild{"SwitchCore", &counters_.SwitchCore[i]}
    }
    counters_.EntityData.Leafs = make(map[string]types.YLeaf)
    counters_.EntityData.Leafs["phy-polling-enabled"] = types.YLeaf{"PhyPollingEnabled", counters_.PhyPollingEnabled}
    counters_.EntityData.Leafs["tx-thread-wdog-cnt"] = types.YLeaf{"TxThreadWdogCnt", counters_.TxThreadWdogCnt}
    counters_.EntityData.Leafs["rx-thread-wdog-cnt"] = types.YLeaf{"RxThreadWdogCnt", counters_.RxThreadWdogCnt}
    counters_.EntityData.Leafs["task-lock-longest-wait-time"] = types.YLeaf{"TaskLockLongestWaitTime", counters_.TaskLockLongestWaitTime}
    counters_.EntityData.Leafs["task-lock-longest-wait-event"] = types.YLeaf{"TaskLockLongestWaitEvent", counters_.TaskLockLongestWaitEvent}
    counters_.EntityData.Leafs["task-lock-longest-held-time"] = types.YLeaf{"TaskLockLongestHeldTime", counters_.TaskLockLongestHeldTime}
    counters_.EntityData.Leafs["task-lock-longest-held-event"] = types.YLeaf{"TaskLockLongestHeldEvent", counters_.TaskLockLongestHeldEvent}
    counters_.EntityData.Leafs["task-unlock-longest-wait-time"] = types.YLeaf{"TaskUnlockLongestWaitTime", counters_.TaskUnlockLongestWaitTime}
    counters_.EntityData.Leafs["task-unlock-longest-wait-event"] = types.YLeaf{"TaskUnlockLongestWaitEvent", counters_.TaskUnlockLongestWaitEvent}
    counters_.EntityData.Leafs["dma-max-rx-dequeued-per-int"] = types.YLeaf{"DmaMaxRxDequeuedPerInt", counters_.DmaMaxRxDequeuedPerInt}
    counters_.EntityData.Leafs["dma-rx-packets-dequeued"] = types.YLeaf{"DmaRxPacketsDequeued", counters_.DmaRxPacketsDequeued}
    counters_.EntityData.Leafs["dma-rx-packet-dequeue-errors"] = types.YLeaf{"DmaRxPacketDequeueErrors", counters_.DmaRxPacketDequeueErrors}
    counters_.EntityData.Leafs["dma-tx-packets-queued"] = types.YLeaf{"DmaTxPacketsQueued", counters_.DmaTxPacketsQueued}
    counters_.EntityData.Leafs["dma-tx-packets-completed"] = types.YLeaf{"DmaTxPacketsCompleted", counters_.DmaTxPacketsCompleted}
    counters_.EntityData.Leafs["dma-tx-packet-no-msg-errors"] = types.YLeaf{"DmaTxPacketNoMsgErrors", counters_.DmaTxPacketNoMsgErrors}
    counters_.EntityData.Leafs["dma-tx-packet-msg-too-big-errors"] = types.YLeaf{"DmaTxPacketMsgTooBigErrors", counters_.DmaTxPacketMsgTooBigErrors}
    counters_.EntityData.Leafs["dma-tx-packet-no-buffer-errors"] = types.YLeaf{"DmaTxPacketNoBufferErrors", counters_.DmaTxPacketNoBufferErrors}
    counters_.EntityData.Leafs["dma-tx-packet-queue-errors"] = types.YLeaf{"DmaTxPacketQueueErrors", counters_.DmaTxPacketQueueErrors}
    counters_.EntityData.Leafs["dma-tx-packet-completion-errors"] = types.YLeaf{"DmaTxPacketCompletionErrors", counters_.DmaTxPacketCompletionErrors}
    counters_.EntityData.Leafs["dma-max-tx-freed-per-int"] = types.YLeaf{"DmaMaxTxFreedPerInt", counters_.DmaMaxTxFreedPerInt}
    counters_.EntityData.Leafs["dma-tx-buf-alloc-count"] = types.YLeaf{"DmaTxBufAllocCount", counters_.DmaTxBufAllocCount}
    counters_.EntityData.Leafs["dma-tx-buf-free-count"] = types.YLeaf{"DmaTxBufFreeCount", counters_.DmaTxBufFreeCount}
    return &(counters_.EntityData)
}

// Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters__SwitchCore
type Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters__SwitchCore struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is interface{} with range: 0..255.
    Core interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    MsiCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    AerCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    HpCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    WdogCount interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskLockLongestWaitTime interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskLockLongestHeldTime interface{}

    // The type is interface{} with range: 0..18446744073709551615.
    CoreTaskUnlockLongestWaitTime interface{}
}

func (switchCore *Controller_Switch_Oper_SwitchDebugCont_Debug_Counters_Location_Counters__SwitchCore) GetEntityData() *types.CommonEntityData {
    switchCore.EntityData.YFilter = switchCore.YFilter
    switchCore.EntityData.YangName = "switch-core"
    switchCore.EntityData.BundleName = "cisco_ios_xr"
    switchCore.EntityData.ParentYangName = "counters"
    switchCore.EntityData.SegmentPath = "switch-core" + "[core='" + fmt.Sprintf("%v", switchCore.Core) + "']"
    switchCore.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    switchCore.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    switchCore.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    switchCore.EntityData.Children = make(map[string]types.YChild)
    switchCore.EntityData.Leafs = make(map[string]types.YLeaf)
    switchCore.EntityData.Leafs["core"] = types.YLeaf{"Core", switchCore.Core}
    switchCore.EntityData.Leafs["msi-count"] = types.YLeaf{"MsiCount", switchCore.MsiCount}
    switchCore.EntityData.Leafs["aer-count"] = types.YLeaf{"AerCount", switchCore.AerCount}
    switchCore.EntityData.Leafs["hp-count"] = types.YLeaf{"HpCount", switchCore.HpCount}
    switchCore.EntityData.Leafs["wdog-count"] = types.YLeaf{"WdogCount", switchCore.WdogCount}
    switchCore.EntityData.Leafs["core-task-lock-longest-wait-time"] = types.YLeaf{"CoreTaskLockLongestWaitTime", switchCore.CoreTaskLockLongestWaitTime}
    switchCore.EntityData.Leafs["core-task-lock-longest-held-time"] = types.YLeaf{"CoreTaskLockLongestHeldTime", switchCore.CoreTaskLockLongestHeldTime}
    switchCore.EntityData.Leafs["core-task-unlock-longest-wait-time"] = types.YLeaf{"CoreTaskUnlockLongestWaitTime", switchCore.CoreTaskUnlockLongestWaitTime}
    return &(switchCore.EntityData)
}

// Controller_Switch_Oper_Esd
type Controller_Switch_Oper_Esd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable process instance names. The type is slice of
    // Controller_Switch_Oper_Esd_Instance.
    Instance []Controller_Switch_Oper_Esd_Instance
}

func (esd *Controller_Switch_Oper_Esd) GetEntityData() *types.CommonEntityData {
    esd.EntityData.YFilter = esd.YFilter
    esd.EntityData.YangName = "esd"
    esd.EntityData.BundleName = "cisco_ios_xr"
    esd.EntityData.ParentYangName = "oper"
    esd.EntityData.SegmentPath = "esd"
    esd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esd.EntityData.Children = make(map[string]types.YChild)
    esd.EntityData.Children["instance"] = types.YChild{"Instance", nil}
    for i := range esd.Instance {
        esd.EntityData.Children[types.GetSegmentPath(&esd.Instance[i])] = types.YChild{"Instance", &esd.Instance[i]}
    }
    esd.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(esd.EntityData)
}

// Controller_Switch_Oper_Esd_Instance
// show traceable process instance names
type Controller_Switch_Oper_Esd_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    ProcessName interface{}

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace.
    Trace []Controller_Switch_Oper_Esd_Instance_Trace
}

func (instance *Controller_Switch_Oper_Esd_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "esd"
    instance.EntityData.SegmentPath = "instance" + "[process_name='" + fmt.Sprintf("%v", instance.ProcessName) + "']"
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = make(map[string]types.YChild)
    instance.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range instance.Trace {
        instance.EntityData.Children[types.GetSegmentPath(&instance.Trace[i])] = types.YChild{"Trace", &instance.Trace[i]}
    }
    instance.EntityData.Leafs = make(map[string]types.YLeaf)
    instance.EntityData.Leafs["process_name"] = types.YLeaf{"ProcessName", instance.ProcessName}
    return &(instance.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace
// show traceable processes
type Controller_Switch_Oper_Esd_Instance_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_Esd_Instance_Trace_Location.
    Location []Controller_Switch_Oper_Esd_Instance_Trace_Location
}

func (trace *Controller_Switch_Oper_Esd_Instance_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "instance"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location
type Controller_Switch_Oper_Esd_Instance_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions.
    AllOptions []Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_Esd_Instance_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions
type Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_Esd_Instance_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_MgmtAgent
type Controller_Switch_Oper_MgmtAgent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Esdma Controller_Switch_Oper_MgmtAgent_Esdma

    
    Connections Controller_Switch_Oper_MgmtAgent_Connections
}

func (mgmtAgent *Controller_Switch_Oper_MgmtAgent) GetEntityData() *types.CommonEntityData {
    mgmtAgent.EntityData.YFilter = mgmtAgent.YFilter
    mgmtAgent.EntityData.YangName = "mgmt-agent"
    mgmtAgent.EntityData.BundleName = "cisco_ios_xr"
    mgmtAgent.EntityData.ParentYangName = "oper"
    mgmtAgent.EntityData.SegmentPath = "mgmt-agent"
    mgmtAgent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mgmtAgent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mgmtAgent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mgmtAgent.EntityData.Children = make(map[string]types.YChild)
    mgmtAgent.EntityData.Children["esdma"] = types.YChild{"Esdma", &mgmtAgent.Esdma}
    mgmtAgent.EntityData.Children["connections"] = types.YChild{"Connections", &mgmtAgent.Connections}
    mgmtAgent.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mgmtAgent.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma
type Controller_Switch_Oper_MgmtAgent_Esdma struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // show traceable processes. The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace.
    Trace []Controller_Switch_Oper_MgmtAgent_Esdma_Trace
}

func (esdma *Controller_Switch_Oper_MgmtAgent_Esdma) GetEntityData() *types.CommonEntityData {
    esdma.EntityData.YFilter = esdma.YFilter
    esdma.EntityData.YangName = "esdma"
    esdma.EntityData.BundleName = "cisco_ios_xr"
    esdma.EntityData.ParentYangName = "mgmt-agent"
    esdma.EntityData.SegmentPath = "esdma"
    esdma.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdma.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdma.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdma.EntityData.Children = make(map[string]types.YChild)
    esdma.EntityData.Children["trace"] = types.YChild{"Trace", nil}
    for i := range esdma.Trace {
        esdma.EntityData.Children[types.GetSegmentPath(&esdma.Trace[i])] = types.YChild{"Trace", &esdma.Trace[i]}
    }
    esdma.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(esdma.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace
// show traceable processes
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Buffer interface{}

    // The type is slice of Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location.
    Location []Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location
}

func (trace *Controller_Switch_Oper_MgmtAgent_Esdma_Trace) GetEntityData() *types.CommonEntityData {
    trace.EntityData.YFilter = trace.YFilter
    trace.EntityData.YangName = "trace"
    trace.EntityData.BundleName = "cisco_ios_xr"
    trace.EntityData.ParentYangName = "esdma"
    trace.EntityData.SegmentPath = "trace" + "[buffer='" + fmt.Sprintf("%v", trace.Buffer) + "']"
    trace.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trace.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trace.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trace.EntityData.Children = make(map[string]types.YChild)
    trace.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trace.Location {
        trace.EntityData.Children[types.GetSegmentPath(&trace.Location[i])] = types.YChild{"Location", &trace.Location[i]}
    }
    trace.EntityData.Leafs = make(map[string]types.YLeaf)
    trace.EntityData.Leafs["buffer"] = types.YLeaf{"Buffer", trace.Buffer}
    return &(trace.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    LocationName interface{}

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions.
    AllOptions []Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions
}

func (location *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trace"
    location.EntityData.SegmentPath = "location" + "[location_name='" + fmt.Sprintf("%v", location.LocationName) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["all-options"] = types.YChild{"AllOptions", nil}
    for i := range location.AllOptions {
        location.EntityData.Children[types.GetSegmentPath(&location.AllOptions[i])] = types.YChild{"AllOptions", &location.AllOptions[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["location_name"] = types.YLeaf{"LocationName", location.LocationName}
    return &(location.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string.
    Option interface{}

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks.
    TraceBlocks []Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks
}

func (allOptions *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions) GetEntityData() *types.CommonEntityData {
    allOptions.EntityData.YFilter = allOptions.YFilter
    allOptions.EntityData.YangName = "all-options"
    allOptions.EntityData.BundleName = "cisco_ios_xr"
    allOptions.EntityData.ParentYangName = "location"
    allOptions.EntityData.SegmentPath = "all-options" + "[option='" + fmt.Sprintf("%v", allOptions.Option) + "']"
    allOptions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allOptions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allOptions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allOptions.EntityData.Children = make(map[string]types.YChild)
    allOptions.EntityData.Children["trace-blocks"] = types.YChild{"TraceBlocks", nil}
    for i := range allOptions.TraceBlocks {
        allOptions.EntityData.Children[types.GetSegmentPath(&allOptions.TraceBlocks[i])] = types.YChild{"TraceBlocks", &allOptions.TraceBlocks[i]}
    }
    allOptions.EntityData.Leafs = make(map[string]types.YLeaf)
    allOptions.EntityData.Leafs["option"] = types.YLeaf{"Option", allOptions.Option}
    return &(allOptions.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks
type Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Trace output block. The type is string.
    Data interface{}
}

func (traceBlocks *Controller_Switch_Oper_MgmtAgent_Esdma_Trace_Location_AllOptions_TraceBlocks) GetEntityData() *types.CommonEntityData {
    traceBlocks.EntityData.YFilter = traceBlocks.YFilter
    traceBlocks.EntityData.YangName = "trace-blocks"
    traceBlocks.EntityData.BundleName = "cisco_ios_xr"
    traceBlocks.EntityData.ParentYangName = "all-options"
    traceBlocks.EntityData.SegmentPath = "trace-blocks"
    traceBlocks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    traceBlocks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    traceBlocks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    traceBlocks.EntityData.Children = make(map[string]types.YChild)
    traceBlocks.EntityData.Leafs = make(map[string]types.YLeaf)
    traceBlocks.EntityData.Leafs["data"] = types.YLeaf{"Data", traceBlocks.Data}
    return &(traceBlocks.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections
type Controller_Switch_Oper_MgmtAgent_Connections struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    SdrNmNumClients interface{}

    // The type is interface{} with range: 0..4294967295.
    EsdClientNumClients interface{}

    // The type is interface{} with range: 0..4294967295.
    MlapClientNumClients interface{}

    
    EsdmaInfo Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId.
    SdrNmClientId []Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId.
    EsdClientId []Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId

    // The type is slice of
    // Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId.
    MlapClientId []Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId
}

func (connections *Controller_Switch_Oper_MgmtAgent_Connections) GetEntityData() *types.CommonEntityData {
    connections.EntityData.YFilter = connections.YFilter
    connections.EntityData.YangName = "connections"
    connections.EntityData.BundleName = "cisco_ios_xr"
    connections.EntityData.ParentYangName = "mgmt-agent"
    connections.EntityData.SegmentPath = "connections"
    connections.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connections.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connections.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connections.EntityData.Children = make(map[string]types.YChild)
    connections.EntityData.Children["esdma-info"] = types.YChild{"EsdmaInfo", &connections.EsdmaInfo}
    connections.EntityData.Children["sdr-nm-client-id"] = types.YChild{"SdrNmClientId", nil}
    for i := range connections.SdrNmClientId {
        connections.EntityData.Children[types.GetSegmentPath(&connections.SdrNmClientId[i])] = types.YChild{"SdrNmClientId", &connections.SdrNmClientId[i]}
    }
    connections.EntityData.Children["esd-client-id"] = types.YChild{"EsdClientId", nil}
    for i := range connections.EsdClientId {
        connections.EntityData.Children[types.GetSegmentPath(&connections.EsdClientId[i])] = types.YChild{"EsdClientId", &connections.EsdClientId[i]}
    }
    connections.EntityData.Children["mlap-client-id"] = types.YChild{"MlapClientId", nil}
    for i := range connections.MlapClientId {
        connections.EntityData.Children[types.GetSegmentPath(&connections.MlapClientId[i])] = types.YChild{"MlapClientId", &connections.MlapClientId[i]}
    }
    connections.EntityData.Leafs = make(map[string]types.YLeaf)
    connections.EntityData.Leafs["sdr-nm-num-clients"] = types.YLeaf{"SdrNmNumClients", connections.SdrNmNumClients}
    connections.EntityData.Leafs["esd-client-num-clients"] = types.YLeaf{"EsdClientNumClients", connections.EsdClientNumClients}
    connections.EntityData.Leafs["mlap-client-num-clients"] = types.YLeaf{"MlapClientNumClients", connections.MlapClientNumClients}
    return &(connections.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo
type Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    ActiveEsdmaAddress interface{}
}

func (esdmaInfo *Controller_Switch_Oper_MgmtAgent_Connections_EsdmaInfo) GetEntityData() *types.CommonEntityData {
    esdmaInfo.EntityData.YFilter = esdmaInfo.YFilter
    esdmaInfo.EntityData.YangName = "esdma-info"
    esdmaInfo.EntityData.BundleName = "cisco_ios_xr"
    esdmaInfo.EntityData.ParentYangName = "connections"
    esdmaInfo.EntityData.SegmentPath = "esdma-info"
    esdmaInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdmaInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdmaInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdmaInfo.EntityData.Children = make(map[string]types.YChild)
    esdmaInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    esdmaInfo.EntityData.Leafs["active-esdma-address"] = types.YLeaf{"ActiveEsdmaAddress", esdmaInfo.ActiveEsdmaAddress}
    return &(esdmaInfo.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId
type Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    SdrNmIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    SdrNmPortNum interface{}
}

func (sdrNmClientId *Controller_Switch_Oper_MgmtAgent_Connections_SdrNmClientId) GetEntityData() *types.CommonEntityData {
    sdrNmClientId.EntityData.YFilter = sdrNmClientId.YFilter
    sdrNmClientId.EntityData.YangName = "sdr-nm-client-id"
    sdrNmClientId.EntityData.BundleName = "cisco_ios_xr"
    sdrNmClientId.EntityData.ParentYangName = "connections"
    sdrNmClientId.EntityData.SegmentPath = "sdr-nm-client-id"
    sdrNmClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sdrNmClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sdrNmClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sdrNmClientId.EntityData.Children = make(map[string]types.YChild)
    sdrNmClientId.EntityData.Leafs = make(map[string]types.YLeaf)
    sdrNmClientId.EntityData.Leafs["sdr-nm-ip-address"] = types.YLeaf{"SdrNmIpAddress", sdrNmClientId.SdrNmIpAddress}
    sdrNmClientId.EntityData.Leafs["sdr-nm-port-num"] = types.YLeaf{"SdrNmPortNum", sdrNmClientId.SdrNmPortNum}
    return &(sdrNmClientId.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId
type Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    EsdClientIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    EsdClientPortNum interface{}

    // The type is string.
    EsdClientLocation interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdClientSwitchInfoCached interface{}

    // The type is EsdmaSwitchYesNoEnum.
    EsdClientSdrInfoCached interface{}
}

func (esdClientId *Controller_Switch_Oper_MgmtAgent_Connections_EsdClientId) GetEntityData() *types.CommonEntityData {
    esdClientId.EntityData.YFilter = esdClientId.YFilter
    esdClientId.EntityData.YangName = "esd-client-id"
    esdClientId.EntityData.BundleName = "cisco_ios_xr"
    esdClientId.EntityData.ParentYangName = "connections"
    esdClientId.EntityData.SegmentPath = "esd-client-id"
    esdClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    esdClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    esdClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    esdClientId.EntityData.Children = make(map[string]types.YChild)
    esdClientId.EntityData.Leafs = make(map[string]types.YLeaf)
    esdClientId.EntityData.Leafs["esd-client-ip-address"] = types.YLeaf{"EsdClientIpAddress", esdClientId.EsdClientIpAddress}
    esdClientId.EntityData.Leafs["esd-client-port-num"] = types.YLeaf{"EsdClientPortNum", esdClientId.EsdClientPortNum}
    esdClientId.EntityData.Leafs["esd-client-location"] = types.YLeaf{"EsdClientLocation", esdClientId.EsdClientLocation}
    esdClientId.EntityData.Leafs["esd-client-switch-info-cached"] = types.YLeaf{"EsdClientSwitchInfoCached", esdClientId.EsdClientSwitchInfoCached}
    esdClientId.EntityData.Leafs["esd-client-sdr-info-cached"] = types.YLeaf{"EsdClientSdrInfoCached", esdClientId.EsdClientSdrInfoCached}
    return &(esdClientId.EntityData)
}

// Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId
type Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is one of the following types: string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?',
    // or string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    MlapClientIpAddress interface{}

    // The type is interface{} with range: 0..65535.
    MlapClientPortNum interface{}

    // The type is string.
    MlapClientLocation interface{}

    // The type is EsdmaSwitchYesNoEnum.
    MlapClientSwitchInfoCached interface{}
}

func (mlapClientId *Controller_Switch_Oper_MgmtAgent_Connections_MlapClientId) GetEntityData() *types.CommonEntityData {
    mlapClientId.EntityData.YFilter = mlapClientId.YFilter
    mlapClientId.EntityData.YangName = "mlap-client-id"
    mlapClientId.EntityData.BundleName = "cisco_ios_xr"
    mlapClientId.EntityData.ParentYangName = "connections"
    mlapClientId.EntityData.SegmentPath = "mlap-client-id"
    mlapClientId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlapClientId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlapClientId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlapClientId.EntityData.Children = make(map[string]types.YChild)
    mlapClientId.EntityData.Leafs = make(map[string]types.YLeaf)
    mlapClientId.EntityData.Leafs["mlap-client-ip-address"] = types.YLeaf{"MlapClientIpAddress", mlapClientId.MlapClientIpAddress}
    mlapClientId.EntityData.Leafs["mlap-client-port-num"] = types.YLeaf{"MlapClientPortNum", mlapClientId.MlapClientPortNum}
    mlapClientId.EntityData.Leafs["mlap-client-location"] = types.YLeaf{"MlapClientLocation", mlapClientId.MlapClientLocation}
    mlapClientId.EntityData.Leafs["mlap-client-switch-info-cached"] = types.YLeaf{"MlapClientSwitchInfoCached", mlapClientId.MlapClientSwitchInfoCached}
    return &(mlapClientId.EntityData)
}

// Controller_Switch_Oper_PortState
type Controller_Switch_Oper_PortState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_PortState_Location.
    Location []Controller_Switch_Oper_PortState_Location
}

func (portState *Controller_Switch_Oper_PortState) GetEntityData() *types.CommonEntityData {
    portState.EntityData.YFilter = portState.YFilter
    portState.EntityData.YangName = "port-state"
    portState.EntityData.BundleName = "cisco_ios_xr"
    portState.EntityData.ParentYangName = "oper"
    portState.EntityData.SegmentPath = "port-state"
    portState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portState.EntityData.Children = make(map[string]types.YChild)
    portState.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range portState.Location {
        portState.EntityData.Children[types.GetSegmentPath(&portState.Location[i])] = types.YChild{"Location", &portState.Location[i]}
    }
    portState.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(portState.EntityData)
}

// Controller_Switch_Oper_PortState_Location
type Controller_Switch_Oper_PortState_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card that owns a switch of interest. The type is
    // EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // The type is slice of Controller_Switch_Oper_PortState_Location_PortIter.
    PortIter []Controller_Switch_Oper_PortState_Location_PortIter
}

func (location *Controller_Switch_Oper_PortState_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "port-state"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["port-iter"] = types.YChild{"PortIter", nil}
    for i := range location.PortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.PortIter[i])] = types.YChild{"PortIter", &location.PortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    return &(location.EntityData)
}

// Controller_Switch_Oper_PortState_Location_PortIter
type Controller_Switch_Oper_PortState_Location_PortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Switch port. The type is interface{} with range:
    // 0..127.
    Port interface{}
}

func (portIter *Controller_Switch_Oper_PortState_Location_PortIter) GetEntityData() *types.CommonEntityData {
    portIter.EntityData.YFilter = portIter.YFilter
    portIter.EntityData.YangName = "port-iter"
    portIter.EntityData.BundleName = "cisco_ios_xr"
    portIter.EntityData.ParentYangName = "location"
    portIter.EntityData.SegmentPath = "port-iter" + "[port='" + fmt.Sprintf("%v", portIter.Port) + "']"
    portIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portIter.EntityData.Children = make(map[string]types.YChild)
    portIter.EntityData.Leafs = make(map[string]types.YLeaf)
    portIter.EntityData.Leafs["port"] = types.YLeaf{"Port", portIter.Port}
    return &(portIter.EntityData)
}

// Controller_Switch_Oper_Trunk
type Controller_Switch_Oper_Trunk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is slice of Controller_Switch_Oper_Trunk_Location.
    Location []Controller_Switch_Oper_Trunk_Location
}

func (trunk *Controller_Switch_Oper_Trunk) GetEntityData() *types.CommonEntityData {
    trunk.EntityData.YFilter = trunk.YFilter
    trunk.EntityData.YangName = "trunk"
    trunk.EntityData.BundleName = "cisco_ios_xr"
    trunk.EntityData.ParentYangName = "oper"
    trunk.EntityData.SegmentPath = "trunk"
    trunk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trunk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trunk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trunk.EntityData.Children = make(map[string]types.YChild)
    trunk.EntityData.Children["location"] = types.YChild{"Location", nil}
    for i := range trunk.Location {
        trunk.EntityData.Children[types.GetSegmentPath(&trunk.Location[i])] = types.YChild{"Location", &trunk.Location[i]}
    }
    trunk.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(trunk.EntityData)
}

// Controller_Switch_Oper_Trunk_Location
type Controller_Switch_Oper_Trunk_Location struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Rack to display the switch trunk group information
    // for. The type is EsdmaRackNumEnum.
    Rack interface{}

    // This attribute is a key. Card to display the switch trunk group information
    // for. The type is EsdmaCpu.
    Card interface{}

    // This attribute is a key. Switch type to display the switch trunk group
    // information for. The type is EsdmaSwitchTypeEnum.
    SwitchId interface{}

    // Number of member ports in the trunk group. The type is interface{} with
    // range: 0..4294967295.
    TrunkMemberCount interface{}

    // Name of the trunk group. The type is string.
    TrunkName interface{}

    // The type is slice of
    // Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter.
    TrunkMemberPortIter []Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter
}

func (location *Controller_Switch_Oper_Trunk_Location) GetEntityData() *types.CommonEntityData {
    location.EntityData.YFilter = location.YFilter
    location.EntityData.YangName = "location"
    location.EntityData.BundleName = "cisco_ios_xr"
    location.EntityData.ParentYangName = "trunk"
    location.EntityData.SegmentPath = "location" + "[rack='" + fmt.Sprintf("%v", location.Rack) + "']" + "[card='" + fmt.Sprintf("%v", location.Card) + "']" + "[switch-id='" + fmt.Sprintf("%v", location.SwitchId) + "']"
    location.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    location.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    location.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    location.EntityData.Children = make(map[string]types.YChild)
    location.EntityData.Children["trunk-member-port-iter"] = types.YChild{"TrunkMemberPortIter", nil}
    for i := range location.TrunkMemberPortIter {
        location.EntityData.Children[types.GetSegmentPath(&location.TrunkMemberPortIter[i])] = types.YChild{"TrunkMemberPortIter", &location.TrunkMemberPortIter[i]}
    }
    location.EntityData.Leafs = make(map[string]types.YLeaf)
    location.EntityData.Leafs["rack"] = types.YLeaf{"Rack", location.Rack}
    location.EntityData.Leafs["card"] = types.YLeaf{"Card", location.Card}
    location.EntityData.Leafs["switch-id"] = types.YLeaf{"SwitchId", location.SwitchId}
    location.EntityData.Leafs["trunk-member-count"] = types.YLeaf{"TrunkMemberCount", location.TrunkMemberCount}
    location.EntityData.Leafs["trunk-name"] = types.YLeaf{"TrunkName", location.TrunkName}
    return &(location.EntityData)
}

// Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter
type Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Trunk Member Port. The type is interface{} with
    // range: 0..4294967295.
    TrunkMemberPort interface{}

    // Trunk Member Status. The type is EsdmaTrunkMemberStatus.
    TrunkMemberStatus interface{}
}

func (trunkMemberPortIter *Controller_Switch_Oper_Trunk_Location_TrunkMemberPortIter) GetEntityData() *types.CommonEntityData {
    trunkMemberPortIter.EntityData.YFilter = trunkMemberPortIter.YFilter
    trunkMemberPortIter.EntityData.YangName = "trunk-member-port-iter"
    trunkMemberPortIter.EntityData.BundleName = "cisco_ios_xr"
    trunkMemberPortIter.EntityData.ParentYangName = "location"
    trunkMemberPortIter.EntityData.SegmentPath = "trunk-member-port-iter" + "[trunk-member-port='" + fmt.Sprintf("%v", trunkMemberPortIter.TrunkMemberPort) + "']"
    trunkMemberPortIter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trunkMemberPortIter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trunkMemberPortIter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trunkMemberPortIter.EntityData.Children = make(map[string]types.YChild)
    trunkMemberPortIter.EntityData.Leafs = make(map[string]types.YLeaf)
    trunkMemberPortIter.EntityData.Leafs["trunk-member-port"] = types.YLeaf{"TrunkMemberPort", trunkMemberPortIter.TrunkMemberPort}
    trunkMemberPortIter.EntityData.Leafs["trunk-member-status"] = types.YLeaf{"TrunkMemberStatus", trunkMemberPortIter.TrunkMemberStatus}
    return &(trunkMemberPortIter.EntityData)
}

// Controller_FabricAction
type Controller_FabricAction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Fabric resource commands.
    Fabric Controller_FabricAction_Fabric
}

func (fabricAction *Controller_FabricAction) GetEntityData() *types.CommonEntityData {
    fabricAction.EntityData.YFilter = fabricAction.YFilter
    fabricAction.EntityData.YangName = "fabric_action"
    fabricAction.EntityData.BundleName = "cisco_ios_xr"
    fabricAction.EntityData.ParentYangName = "controller"
    fabricAction.EntityData.SegmentPath = "fabric_action"
    fabricAction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabricAction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabricAction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabricAction.EntityData.Children = make(map[string]types.YChild)
    fabricAction.EntityData.Children["fabric"] = types.YChild{"Fabric", &fabricAction.Fabric}
    fabricAction.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fabricAction.EntityData)
}

// Controller_FabricAction_Fabric
// Fabric resource commands
type Controller_FabricAction_Fabric struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Plane by plane upgrade.
    Ppu Controller_FabricAction_Fabric_Ppu
}

func (fabric *Controller_FabricAction_Fabric) GetEntityData() *types.CommonEntityData {
    fabric.EntityData.YFilter = fabric.YFilter
    fabric.EntityData.YangName = "fabric"
    fabric.EntityData.BundleName = "cisco_ios_xr"
    fabric.EntityData.ParentYangName = "fabric_action"
    fabric.EntityData.SegmentPath = "fabric"
    fabric.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fabric.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fabric.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fabric.EntityData.Children = make(map[string]types.YChild)
    fabric.EntityData.Children["ppu"] = types.YChild{"Ppu", &fabric.Ppu}
    fabric.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(fabric.EntityData)
}

// Controller_FabricAction_Fabric_Ppu
// Plane by plane upgrade.
type Controller_FabricAction_Fabric_Ppu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
}

func (ppu *Controller_FabricAction_Fabric_Ppu) GetEntityData() *types.CommonEntityData {
    ppu.EntityData.YFilter = ppu.YFilter
    ppu.EntityData.YangName = "ppu"
    ppu.EntityData.BundleName = "cisco_ios_xr"
    ppu.EntityData.ParentYangName = "fabric"
    ppu.EntityData.SegmentPath = "ppu"
    ppu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ppu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ppu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ppu.EntityData.Children = make(map[string]types.YChild)
    ppu.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ppu.EntityData)
}

