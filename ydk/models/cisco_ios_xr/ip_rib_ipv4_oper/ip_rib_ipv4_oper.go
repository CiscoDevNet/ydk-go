// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-rib-ipv4 package operational data.
// 
// This module contains definitions
// for the following management objects:
//   rib-stdby: RIB standby node operational data
//   rib: rib
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ip_rib_ipv4_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_rib_ipv4_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv4-oper rib-stdby}", reflect.TypeOf(RibStdby{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rib-ipv4-oper:rib-stdby", reflect.TypeOf(RibStdby{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv4-oper rib}", reflect.TypeOf(Rib{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rib-ipv4-oper:rib", reflect.TypeOf(Rib{}))
}

// RibStdby
// RIB standby node operational data
type RibStdby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table.
    Vrfs RibStdby_Vrfs

    // RIB table.
    RibTableIds RibStdby_RibTableIds
}

func (ribStdby *RibStdby) GetFilter() yfilter.YFilter { return ribStdby.YFilter }

func (ribStdby *RibStdby) SetFilter(yf yfilter.YFilter) { ribStdby.YFilter = yf }

func (ribStdby *RibStdby) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "rib-table-ids" { return "RibTableIds" }
    return ""
}

func (ribStdby *RibStdby) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-rib-ipv4-oper:rib-stdby"
}

func (ribStdby *RibStdby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &ribStdby.Vrfs
    }
    if childYangName == "rib-table-ids" {
        return &ribStdby.RibTableIds
    }
    return nil
}

func (ribStdby *RibStdby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &ribStdby.Vrfs
    children["rib-table-ids"] = &ribStdby.RibTableIds
    return children
}

func (ribStdby *RibStdby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ribStdby *RibStdby) GetBundleName() string { return "cisco_ios_xr" }

func (ribStdby *RibStdby) GetYangName() string { return "rib-stdby" }

func (ribStdby *RibStdby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribStdby *RibStdby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribStdby *RibStdby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribStdby *RibStdby) SetParent(parent types.Entity) { ribStdby.parent = parent }

func (ribStdby *RibStdby) GetParent() types.Entity { return ribStdby.parent }

func (ribStdby *RibStdby) GetParentYangName() string { return "Cisco-IOS-XR-ip-rib-ipv4-oper" }

// RibStdby_Vrfs
// VRF table
type RibStdby_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific VRF. The type is slice of RibStdby_Vrfs_Vrf.
    Vrf []RibStdby_Vrfs_Vrf
}

func (vrfs *RibStdby_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *RibStdby_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *RibStdby_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *RibStdby_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *RibStdby_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *RibStdby_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *RibStdby_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *RibStdby_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *RibStdby_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *RibStdby_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *RibStdby_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *RibStdby_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *RibStdby_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *RibStdby_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *RibStdby_Vrfs) GetParentYangName() string { return "rib-stdby" }

// RibStdby_Vrfs_Vrf
// Specific VRF
type RibStdby_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the VRF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Address Family (AF) table.
    Afs RibStdby_Vrfs_Vrf_Afs
}

func (vrf *RibStdby_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *RibStdby_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *RibStdby_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "afs" { return "Afs" }
    return ""
}

func (vrf *RibStdby_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *RibStdby_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "afs" {
        return &vrf.Afs
    }
    return nil
}

func (vrf *RibStdby_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["afs"] = &vrf.Afs
    return children
}

func (vrf *RibStdby_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *RibStdby_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *RibStdby_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *RibStdby_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *RibStdby_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *RibStdby_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *RibStdby_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *RibStdby_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *RibStdby_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// RibStdby_Vrfs_Vrf_Afs
// Address Family (AF) table
type RibStdby_Vrfs_Vrf_Afs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific AF information. The type is slice of RibStdby_Vrfs_Vrf_Afs_Af.
    Af []RibStdby_Vrfs_Vrf_Afs_Af
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetFilter() yfilter.YFilter { return afs.YFilter }

func (afs *RibStdby_Vrfs_Vrf_Afs) SetFilter(yf yfilter.YFilter) { afs.YFilter = yf }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    return ""
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetSegmentPath() string {
    return "afs"
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af" {
        for _, c := range afs.Af {
            if afs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af{}
        afs.Af = append(afs.Af, child)
        return &afs.Af[len(afs.Af)-1]
    }
    return nil
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range afs.Af {
        children[afs.Af[i].GetSegmentPath()] = &afs.Af[i]
    }
    return children
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afs *RibStdby_Vrfs_Vrf_Afs) GetBundleName() string { return "cisco_ios_xr" }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetYangName() string { return "afs" }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afs *RibStdby_Vrfs_Vrf_Afs) SetParent(parent types.Entity) { afs.parent = parent }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetParent() types.Entity { return afs.parent }

func (afs *RibStdby_Vrfs_Vrf_Afs) GetParentYangName() string { return "vrf" }

// RibStdby_Vrfs_Vrf_Afs_Af
// Specific AF information
type RibStdby_Vrfs_Vrf_Afs_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the AF. The type is string with pattern:
    // (IPv4)|(IPv6).
    AfName interface{}

    // Subsequent Address Family (SAF) table.
    Safs RibStdby_Vrfs_Vrf_Afs_Af_Safs
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "safs" { return "Safs" }
    return ""
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetSegmentPath() string {
    return "af" + "[af-name='" + fmt.Sprintf("%v", af.AfName) + "']"
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "safs" {
        return &af.Safs
    }
    return nil
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["safs"] = &af.Safs
    return children
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    return leafs
}

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetYangName() string { return "af" }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetParent() types.Entity { return af.parent }

func (af *RibStdby_Vrfs_Vrf_Afs_Af) GetParentYangName() string { return "afs" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs
// Subsequent Address Family (SAF) table
type RibStdby_Vrfs_Vrf_Afs_Af_Safs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific SAF information. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf.
    Saf []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetFilter() yfilter.YFilter { return safs.YFilter }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) SetFilter(yf yfilter.YFilter) { safs.YFilter = yf }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetGoName(yname string) string {
    if yname == "saf" { return "Saf" }
    return ""
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetSegmentPath() string {
    return "safs"
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "saf" {
        for _, c := range safs.Saf {
            if safs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf{}
        safs.Saf = append(safs.Saf, child)
        return &safs.Saf[len(safs.Saf)-1]
    }
    return nil
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range safs.Saf {
        children[safs.Saf[i].GetSegmentPath()] = &safs.Saf[i]
    }
    return children
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetBundleName() string { return "cisco_ios_xr" }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetYangName() string { return "safs" }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) SetParent(parent types.Entity) { safs.parent = parent }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetParent() types.Entity { return safs.parent }

func (safs *RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetParentYangName() string { return "af" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf
// Specific SAF information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the SAF. The type is string with pattern:
    // (Unicast)|(Multicast).
    SafName interface{}

    // Global container of routes.
    IpRibRouteTableNames RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetFilter() yfilter.YFilter { return saf.YFilter }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) SetFilter(yf yfilter.YFilter) { saf.YFilter = yf }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetGoName(yname string) string {
    if yname == "saf-name" { return "SafName" }
    if yname == "ip-rib-route-table-names" { return "IpRibRouteTableNames" }
    return ""
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetSegmentPath() string {
    return "saf" + "[saf-name='" + fmt.Sprintf("%v", saf.SafName) + "']"
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-rib-route-table-names" {
        return &saf.IpRibRouteTableNames
    }
    return nil
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-rib-route-table-names"] = &saf.IpRibRouteTableNames
    return children
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["saf-name"] = saf.SafName
    return leafs
}

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetBundleName() string { return "cisco_ios_xr" }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetYangName() string { return "saf" }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) SetParent(parent types.Entity) { saf.parent = parent }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetParent() types.Entity { return saf.parent }

func (saf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetParentYangName() string { return "safs" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
// Global container of routes
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP RIB Route table name for a topology. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName.
    IpRibRouteTableName []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetFilter() yfilter.YFilter { return ipRibRouteTableNames.YFilter }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) SetFilter(yf yfilter.YFilter) { ipRibRouteTableNames.YFilter = yf }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetGoName(yname string) string {
    if yname == "ip-rib-route-table-name" { return "IpRibRouteTableName" }
    return ""
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetSegmentPath() string {
    return "ip-rib-route-table-names"
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-rib-route-table-name" {
        for _, c := range ipRibRouteTableNames.IpRibRouteTableName {
            if ipRibRouteTableNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName{}
        ipRibRouteTableNames.IpRibRouteTableName = append(ipRibRouteTableNames.IpRibRouteTableName, child)
        return &ipRibRouteTableNames.IpRibRouteTableName[len(ipRibRouteTableNames.IpRibRouteTableName)-1]
    }
    return nil
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipRibRouteTableNames.IpRibRouteTableName {
        children[ipRibRouteTableNames.IpRibRouteTableName[i].GetSegmentPath()] = &ipRibRouteTableNames.IpRibRouteTableName[i]
    }
    return children
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetBundleName() string { return "cisco_ios_xr" }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetYangName() string { return "ip-rib-route-table-names" }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) SetParent(parent types.Entity) { ipRibRouteTableNames.parent = parent }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetParent() types.Entity { return ipRibRouteTableNames.parent }

func (ipRibRouteTableNames *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetParentYangName() string { return "saf" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
// IP RIB Route table name for a topology
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the route table. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RouteTableName interface{}

    // Route information .
    Routes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes

    // Deleted.
    DeletedRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes

    // Destination KW.
    DestinationKw RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw

    // Opaque information .
    Opaques RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques

    // Contains the classification of routes by protocol.
    Protocol RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol

    // Quarantine.
    QRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes

    // Backup route information for the given table.
    BackupRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes

    // Route advertiser information .
    Adverts RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetFilter() yfilter.YFilter { return ipRibRouteTableName.YFilter }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) SetFilter(yf yfilter.YFilter) { ipRibRouteTableName.YFilter = yf }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetGoName(yname string) string {
    if yname == "route-table-name" { return "RouteTableName" }
    if yname == "routes" { return "Routes" }
    if yname == "deleted-routes" { return "DeletedRoutes" }
    if yname == "destination-kw" { return "DestinationKw" }
    if yname == "opaques" { return "Opaques" }
    if yname == "protocol" { return "Protocol" }
    if yname == "q-routes" { return "QRoutes" }
    if yname == "backup-routes" { return "BackupRoutes" }
    if yname == "adverts" { return "Adverts" }
    return ""
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetSegmentPath() string {
    return "ip-rib-route-table-name" + "[route-table-name='" + fmt.Sprintf("%v", ipRibRouteTableName.RouteTableName) + "']"
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "routes" {
        return &ipRibRouteTableName.Routes
    }
    if childYangName == "deleted-routes" {
        return &ipRibRouteTableName.DeletedRoutes
    }
    if childYangName == "destination-kw" {
        return &ipRibRouteTableName.DestinationKw
    }
    if childYangName == "opaques" {
        return &ipRibRouteTableName.Opaques
    }
    if childYangName == "protocol" {
        return &ipRibRouteTableName.Protocol
    }
    if childYangName == "q-routes" {
        return &ipRibRouteTableName.QRoutes
    }
    if childYangName == "backup-routes" {
        return &ipRibRouteTableName.BackupRoutes
    }
    if childYangName == "adverts" {
        return &ipRibRouteTableName.Adverts
    }
    return nil
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["routes"] = &ipRibRouteTableName.Routes
    children["deleted-routes"] = &ipRibRouteTableName.DeletedRoutes
    children["destination-kw"] = &ipRibRouteTableName.DestinationKw
    children["opaques"] = &ipRibRouteTableName.Opaques
    children["protocol"] = &ipRibRouteTableName.Protocol
    children["q-routes"] = &ipRibRouteTableName.QRoutes
    children["backup-routes"] = &ipRibRouteTableName.BackupRoutes
    children["adverts"] = &ipRibRouteTableName.Adverts
    return children
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-table-name"] = ipRibRouteTableName.RouteTableName
    return leafs
}

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetBundleName() string { return "cisco_ios_xr" }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetYangName() string { return "ip-rib-route-table-name" }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) SetParent(parent types.Entity) { ipRibRouteTableName.parent = parent }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetParent() types.Entity { return ipRibRouteTableName.parent }

func (ipRibRouteTableName *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetParentYangName() string { return "ip-rib-route-table-names" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes
// Route information 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route.
    Route []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetFilter() yfilter.YFilter { return routes.YFilter }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) SetFilter(yf yfilter.YFilter) { routes.YFilter = yf }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetGoName(yname string) string {
    if yname == "route" { return "Route" }
    return ""
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetSegmentPath() string {
    return "routes"
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route" {
        for _, c := range routes.Route {
            if routes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route{}
        routes.Route = append(routes.Route, child)
        return &routes.Route[len(routes.Route)-1]
    }
    return nil
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routes.Route {
        children[routes.Route[i].GetSegmentPath()] = &routes.Route[i]
    }
    return children
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetBundleName() string { return "cisco_ios_xr" }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetYangName() string { return "routes" }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) SetParent(parent types.Entity) { routes.parent = parent }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetParent() types.Entity { return routes.parent }

func (routes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
// Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // NextHop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetFilter() yfilter.YFilter { return route.YFilter }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) SetFilter(yf yfilter.YFilter) { route.YFilter = yf }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetSegmentPath() string {
    return "route"
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &route.RoutePath
    }
    return nil
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &route.RoutePath
    return children
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = route.Address
    leafs["prefix-length"] = route.PrefixLength
    leafs["next-hop-address"] = route.NextHopAddress
    leafs["interface-name"] = route.InterfaceName
    leafs["prefix"] = route.Prefix
    leafs["prefix-length-xr"] = route.PrefixLengthXr
    leafs["route-version"] = route.RouteVersion
    leafs["protocol-id"] = route.ProtocolId
    leafs["protocol-name"] = route.ProtocolName
    leafs["instance"] = route.Instance
    leafs["client-id"] = route.ClientId
    leafs["route-type"] = route.RouteType
    leafs["priority"] = route.Priority
    leafs["svd-type"] = route.SvdType
    leafs["flags"] = route.Flags
    leafs["extended-flags"] = route.ExtendedFlags
    leafs["tag"] = route.Tag
    leafs["distance"] = route.Distance
    leafs["diversion-distance"] = route.DiversionDistance
    leafs["metric"] = route.Metric
    leafs["paths-count"] = route.PathsCount
    leafs["attribute-identity"] = route.AttributeIdentity
    leafs["traffic-index"] = route.TrafficIndex
    leafs["route-precedence"] = route.RoutePrecedence
    leafs["qos-group"] = route.QosGroup
    leafs["flow-tag"] = route.FlowTag
    leafs["fwd-class"] = route.FwdClass
    leafs["pic-count"] = route.PicCount
    leafs["active"] = route.Active
    leafs["diversion"] = route.Diversion
    leafs["diversion-proto-name"] = route.DiversionProtoName
    leafs["route-age"] = route.RouteAge
    leafs["route-label"] = route.RouteLabel
    leafs["version"] = route.Version
    leafs["tbl-version"] = route.TblVersion
    leafs["route-modify-time"] = route.RouteModifyTime
    return leafs
}

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetBundleName() string { return "cisco_ios_xr" }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetYangName() string { return "route" }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) SetParent(parent types.Entity) { route.parent = parent }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetParent() types.Entity { return route.parent }

func (route *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetParentYangName() string { return "routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetParentYangName() string { return "route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes
// Deleted
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific deleted address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute.
    DeletedRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetFilter() yfilter.YFilter { return deletedRoutes.YFilter }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) SetFilter(yf yfilter.YFilter) { deletedRoutes.YFilter = yf }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetGoName(yname string) string {
    if yname == "deleted-route" { return "DeletedRoute" }
    return ""
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetSegmentPath() string {
    return "deleted-routes"
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "deleted-route" {
        for _, c := range deletedRoutes.DeletedRoute {
            if deletedRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute{}
        deletedRoutes.DeletedRoute = append(deletedRoutes.DeletedRoute, child)
        return &deletedRoutes.DeletedRoute[len(deletedRoutes.DeletedRoute)-1]
    }
    return nil
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range deletedRoutes.DeletedRoute {
        children[deletedRoutes.DeletedRoute[i].GetSegmentPath()] = &deletedRoutes.DeletedRoute[i]
    }
    return children
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetYangName() string { return "deleted-routes" }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) SetParent(parent types.Entity) { deletedRoutes.parent = parent }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetParent() types.Entity { return deletedRoutes.parent }

func (deletedRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
// Route information for a specific
// deleted address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetFilter() yfilter.YFilter { return deletedRoute.YFilter }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) SetFilter(yf yfilter.YFilter) { deletedRoute.YFilter = yf }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetSegmentPath() string {
    return "deleted-route"
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &deletedRoute.RoutePath
    }
    return nil
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &deletedRoute.RoutePath
    return children
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = deletedRoute.Address
    leafs["prefix-length"] = deletedRoute.PrefixLength
    leafs["prefix"] = deletedRoute.Prefix
    leafs["prefix-length-xr"] = deletedRoute.PrefixLengthXr
    leafs["route-version"] = deletedRoute.RouteVersion
    leafs["protocol-id"] = deletedRoute.ProtocolId
    leafs["protocol-name"] = deletedRoute.ProtocolName
    leafs["instance"] = deletedRoute.Instance
    leafs["client-id"] = deletedRoute.ClientId
    leafs["route-type"] = deletedRoute.RouteType
    leafs["priority"] = deletedRoute.Priority
    leafs["svd-type"] = deletedRoute.SvdType
    leafs["flags"] = deletedRoute.Flags
    leafs["extended-flags"] = deletedRoute.ExtendedFlags
    leafs["tag"] = deletedRoute.Tag
    leafs["distance"] = deletedRoute.Distance
    leafs["diversion-distance"] = deletedRoute.DiversionDistance
    leafs["metric"] = deletedRoute.Metric
    leafs["paths-count"] = deletedRoute.PathsCount
    leafs["attribute-identity"] = deletedRoute.AttributeIdentity
    leafs["traffic-index"] = deletedRoute.TrafficIndex
    leafs["route-precedence"] = deletedRoute.RoutePrecedence
    leafs["qos-group"] = deletedRoute.QosGroup
    leafs["flow-tag"] = deletedRoute.FlowTag
    leafs["fwd-class"] = deletedRoute.FwdClass
    leafs["pic-count"] = deletedRoute.PicCount
    leafs["active"] = deletedRoute.Active
    leafs["diversion"] = deletedRoute.Diversion
    leafs["diversion-proto-name"] = deletedRoute.DiversionProtoName
    leafs["route-age"] = deletedRoute.RouteAge
    leafs["route-label"] = deletedRoute.RouteLabel
    leafs["version"] = deletedRoute.Version
    leafs["tbl-version"] = deletedRoute.TblVersion
    leafs["route-modify-time"] = deletedRoute.RouteModifyTime
    return leafs
}

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetBundleName() string { return "cisco_ios_xr" }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetYangName() string { return "deleted-route" }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) SetParent(parent types.Entity) { deletedRoute.parent = parent }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetParent() types.Entity { return deletedRoute.parent }

func (deletedRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetParentYangName() string { return "deleted-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetParentYangName() string { return "deleted-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw
// Destination KW
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Best Local.
    DestBestRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes

    // Quarantine.
    DestQRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes

    // Backup.
    DestBackupRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes

    // Resolving next hop.
    DestNextHopRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetFilter() yfilter.YFilter { return destinationKw.YFilter }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) SetFilter(yf yfilter.YFilter) { destinationKw.YFilter = yf }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetGoName(yname string) string {
    if yname == "dest-best-routes" { return "DestBestRoutes" }
    if yname == "dest-q-routes" { return "DestQRoutes" }
    if yname == "dest-backup-routes" { return "DestBackupRoutes" }
    if yname == "dest-next-hop-routes" { return "DestNextHopRoutes" }
    return ""
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetSegmentPath() string {
    return "destination-kw"
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-best-routes" {
        return &destinationKw.DestBestRoutes
    }
    if childYangName == "dest-q-routes" {
        return &destinationKw.DestQRoutes
    }
    if childYangName == "dest-backup-routes" {
        return &destinationKw.DestBackupRoutes
    }
    if childYangName == "dest-next-hop-routes" {
        return &destinationKw.DestNextHopRoutes
    }
    return nil
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dest-best-routes"] = &destinationKw.DestBestRoutes
    children["dest-q-routes"] = &destinationKw.DestQRoutes
    children["dest-backup-routes"] = &destinationKw.DestBackupRoutes
    children["dest-next-hop-routes"] = &destinationKw.DestNextHopRoutes
    return children
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetBundleName() string { return "cisco_ios_xr" }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetYangName() string { return "destination-kw" }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) SetParent(parent types.Entity) { destinationKw.parent = parent }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetParent() types.Entity { return destinationKw.parent }

func (destinationKw *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes
// Best Local
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Best local route information for a specific Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute.
    DestBestRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetFilter() yfilter.YFilter { return destBestRoutes.YFilter }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) SetFilter(yf yfilter.YFilter) { destBestRoutes.YFilter = yf }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetGoName(yname string) string {
    if yname == "dest-best-route" { return "DestBestRoute" }
    return ""
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetSegmentPath() string {
    return "dest-best-routes"
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-best-route" {
        for _, c := range destBestRoutes.DestBestRoute {
            if destBestRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute{}
        destBestRoutes.DestBestRoute = append(destBestRoutes.DestBestRoute, child)
        return &destBestRoutes.DestBestRoute[len(destBestRoutes.DestBestRoute)-1]
    }
    return nil
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destBestRoutes.DestBestRoute {
        children[destBestRoutes.DestBestRoute[i].GetSegmentPath()] = &destBestRoutes.DestBestRoute[i]
    }
    return children
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetYangName() string { return "dest-best-routes" }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) SetParent(parent types.Entity) { destBestRoutes.parent = parent }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetParent() types.Entity { return destBestRoutes.parent }

func (destBestRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetParentYangName() string { return "destination-kw" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
// Best local route information for a
// specific Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetFilter() yfilter.YFilter { return destBestRoute.YFilter }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) SetFilter(yf yfilter.YFilter) { destBestRoute.YFilter = yf }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetSegmentPath() string {
    return "dest-best-route" + "[address='" + fmt.Sprintf("%v", destBestRoute.Address) + "']"
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destBestRoute.RoutePath
    }
    return nil
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destBestRoute.RoutePath
    return children
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destBestRoute.Address
    leafs["prefix"] = destBestRoute.Prefix
    leafs["prefix-length-xr"] = destBestRoute.PrefixLengthXr
    leafs["route-version"] = destBestRoute.RouteVersion
    leafs["protocol-id"] = destBestRoute.ProtocolId
    leafs["protocol-name"] = destBestRoute.ProtocolName
    leafs["instance"] = destBestRoute.Instance
    leafs["client-id"] = destBestRoute.ClientId
    leafs["route-type"] = destBestRoute.RouteType
    leafs["priority"] = destBestRoute.Priority
    leafs["svd-type"] = destBestRoute.SvdType
    leafs["flags"] = destBestRoute.Flags
    leafs["extended-flags"] = destBestRoute.ExtendedFlags
    leafs["tag"] = destBestRoute.Tag
    leafs["distance"] = destBestRoute.Distance
    leafs["diversion-distance"] = destBestRoute.DiversionDistance
    leafs["metric"] = destBestRoute.Metric
    leafs["paths-count"] = destBestRoute.PathsCount
    leafs["attribute-identity"] = destBestRoute.AttributeIdentity
    leafs["traffic-index"] = destBestRoute.TrafficIndex
    leafs["route-precedence"] = destBestRoute.RoutePrecedence
    leafs["qos-group"] = destBestRoute.QosGroup
    leafs["flow-tag"] = destBestRoute.FlowTag
    leafs["fwd-class"] = destBestRoute.FwdClass
    leafs["pic-count"] = destBestRoute.PicCount
    leafs["active"] = destBestRoute.Active
    leafs["diversion"] = destBestRoute.Diversion
    leafs["diversion-proto-name"] = destBestRoute.DiversionProtoName
    leafs["route-age"] = destBestRoute.RouteAge
    leafs["route-label"] = destBestRoute.RouteLabel
    leafs["version"] = destBestRoute.Version
    leafs["tbl-version"] = destBestRoute.TblVersion
    leafs["route-modify-time"] = destBestRoute.RouteModifyTime
    return leafs
}

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetYangName() string { return "dest-best-route" }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) SetParent(parent types.Entity) { destBestRoute.parent = parent }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetParent() types.Entity { return destBestRoute.parent }

func (destBestRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetParentYangName() string { return "dest-best-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetParentYangName() string { return "dest-best-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes
// Quarantine
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute.
    DestQRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetFilter() yfilter.YFilter { return destQRoutes.YFilter }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) SetFilter(yf yfilter.YFilter) { destQRoutes.YFilter = yf }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetGoName(yname string) string {
    if yname == "dest-q-route" { return "DestQRoute" }
    return ""
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetSegmentPath() string {
    return "dest-q-routes"
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-q-route" {
        for _, c := range destQRoutes.DestQRoute {
            if destQRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute{}
        destQRoutes.DestQRoute = append(destQRoutes.DestQRoute, child)
        return &destQRoutes.DestQRoute[len(destQRoutes.DestQRoute)-1]
    }
    return nil
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destQRoutes.DestQRoute {
        children[destQRoutes.DestQRoute[i].GetSegmentPath()] = &destQRoutes.DestQRoute[i]
    }
    return children
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetYangName() string { return "dest-q-routes" }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) SetParent(parent types.Entity) { destQRoutes.parent = parent }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetParent() types.Entity { return destQRoutes.parent }

func (destQRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetParentYangName() string { return "destination-kw" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
// Route information of a specific Backup
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetFilter() yfilter.YFilter { return destQRoute.YFilter }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) SetFilter(yf yfilter.YFilter) { destQRoute.YFilter = yf }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetSegmentPath() string {
    return "dest-q-route"
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destQRoute.RoutePath
    }
    return nil
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destQRoute.RoutePath
    return children
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destQRoute.Address
    leafs["prefix-length"] = destQRoute.PrefixLength
    leafs["prefix"] = destQRoute.Prefix
    leafs["prefix-length-xr"] = destQRoute.PrefixLengthXr
    leafs["route-version"] = destQRoute.RouteVersion
    leafs["protocol-id"] = destQRoute.ProtocolId
    leafs["protocol-name"] = destQRoute.ProtocolName
    leafs["instance"] = destQRoute.Instance
    leafs["client-id"] = destQRoute.ClientId
    leafs["route-type"] = destQRoute.RouteType
    leafs["priority"] = destQRoute.Priority
    leafs["svd-type"] = destQRoute.SvdType
    leafs["flags"] = destQRoute.Flags
    leafs["extended-flags"] = destQRoute.ExtendedFlags
    leafs["tag"] = destQRoute.Tag
    leafs["distance"] = destQRoute.Distance
    leafs["diversion-distance"] = destQRoute.DiversionDistance
    leafs["metric"] = destQRoute.Metric
    leafs["paths-count"] = destQRoute.PathsCount
    leafs["attribute-identity"] = destQRoute.AttributeIdentity
    leafs["traffic-index"] = destQRoute.TrafficIndex
    leafs["route-precedence"] = destQRoute.RoutePrecedence
    leafs["qos-group"] = destQRoute.QosGroup
    leafs["flow-tag"] = destQRoute.FlowTag
    leafs["fwd-class"] = destQRoute.FwdClass
    leafs["pic-count"] = destQRoute.PicCount
    leafs["active"] = destQRoute.Active
    leafs["diversion"] = destQRoute.Diversion
    leafs["diversion-proto-name"] = destQRoute.DiversionProtoName
    leafs["route-age"] = destQRoute.RouteAge
    leafs["route-label"] = destQRoute.RouteLabel
    leafs["version"] = destQRoute.Version
    leafs["tbl-version"] = destQRoute.TblVersion
    leafs["route-modify-time"] = destQRoute.RouteModifyTime
    return leafs
}

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetYangName() string { return "dest-q-route" }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) SetParent(parent types.Entity) { destQRoute.parent = parent }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetParent() types.Entity { return destQRoute.parent }

func (destQRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetParentYangName() string { return "dest-q-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetParentYangName() string { return "dest-q-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes
// Backup
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute.
    DestBackupRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetFilter() yfilter.YFilter { return destBackupRoutes.YFilter }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) SetFilter(yf yfilter.YFilter) { destBackupRoutes.YFilter = yf }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetGoName(yname string) string {
    if yname == "dest-backup-route" { return "DestBackupRoute" }
    return ""
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetSegmentPath() string {
    return "dest-backup-routes"
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-backup-route" {
        for _, c := range destBackupRoutes.DestBackupRoute {
            if destBackupRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute{}
        destBackupRoutes.DestBackupRoute = append(destBackupRoutes.DestBackupRoute, child)
        return &destBackupRoutes.DestBackupRoute[len(destBackupRoutes.DestBackupRoute)-1]
    }
    return nil
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destBackupRoutes.DestBackupRoute {
        children[destBackupRoutes.DestBackupRoute[i].GetSegmentPath()] = &destBackupRoutes.DestBackupRoute[i]
    }
    return children
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetYangName() string { return "dest-backup-routes" }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) SetParent(parent types.Entity) { destBackupRoutes.parent = parent }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetParent() types.Entity { return destBackupRoutes.parent }

func (destBackupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetParentYangName() string { return "destination-kw" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
// Route information of a specific Backup
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetFilter() yfilter.YFilter { return destBackupRoute.YFilter }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) SetFilter(yf yfilter.YFilter) { destBackupRoute.YFilter = yf }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetSegmentPath() string {
    return "dest-backup-route"
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destBackupRoute.RoutePath
    }
    return nil
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destBackupRoute.RoutePath
    return children
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destBackupRoute.Address
    leafs["prefix-length"] = destBackupRoute.PrefixLength
    leafs["prefix"] = destBackupRoute.Prefix
    leafs["prefix-length-xr"] = destBackupRoute.PrefixLengthXr
    leafs["route-version"] = destBackupRoute.RouteVersion
    leafs["protocol-id"] = destBackupRoute.ProtocolId
    leafs["protocol-name"] = destBackupRoute.ProtocolName
    leafs["instance"] = destBackupRoute.Instance
    leafs["client-id"] = destBackupRoute.ClientId
    leafs["route-type"] = destBackupRoute.RouteType
    leafs["priority"] = destBackupRoute.Priority
    leafs["svd-type"] = destBackupRoute.SvdType
    leafs["flags"] = destBackupRoute.Flags
    leafs["extended-flags"] = destBackupRoute.ExtendedFlags
    leafs["tag"] = destBackupRoute.Tag
    leafs["distance"] = destBackupRoute.Distance
    leafs["diversion-distance"] = destBackupRoute.DiversionDistance
    leafs["metric"] = destBackupRoute.Metric
    leafs["paths-count"] = destBackupRoute.PathsCount
    leafs["attribute-identity"] = destBackupRoute.AttributeIdentity
    leafs["traffic-index"] = destBackupRoute.TrafficIndex
    leafs["route-precedence"] = destBackupRoute.RoutePrecedence
    leafs["qos-group"] = destBackupRoute.QosGroup
    leafs["flow-tag"] = destBackupRoute.FlowTag
    leafs["fwd-class"] = destBackupRoute.FwdClass
    leafs["pic-count"] = destBackupRoute.PicCount
    leafs["active"] = destBackupRoute.Active
    leafs["diversion"] = destBackupRoute.Diversion
    leafs["diversion-proto-name"] = destBackupRoute.DiversionProtoName
    leafs["route-age"] = destBackupRoute.RouteAge
    leafs["route-label"] = destBackupRoute.RouteLabel
    leafs["version"] = destBackupRoute.Version
    leafs["tbl-version"] = destBackupRoute.TblVersion
    leafs["route-modify-time"] = destBackupRoute.RouteModifyTime
    return leafs
}

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetYangName() string { return "dest-backup-route" }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) SetParent(parent types.Entity) { destBackupRoute.parent = parent }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetParent() types.Entity { return destBackupRoute.parent }

func (destBackupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetParentYangName() string { return "dest-backup-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetParentYangName() string { return "dest-backup-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
// Resolving next hop
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop information for a specific address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute.
    DestNextHopRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetFilter() yfilter.YFilter { return destNextHopRoutes.YFilter }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) SetFilter(yf yfilter.YFilter) { destNextHopRoutes.YFilter = yf }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetGoName(yname string) string {
    if yname == "dest-next-hop-route" { return "DestNextHopRoute" }
    return ""
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetSegmentPath() string {
    return "dest-next-hop-routes"
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-next-hop-route" {
        for _, c := range destNextHopRoutes.DestNextHopRoute {
            if destNextHopRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute{}
        destNextHopRoutes.DestNextHopRoute = append(destNextHopRoutes.DestNextHopRoute, child)
        return &destNextHopRoutes.DestNextHopRoute[len(destNextHopRoutes.DestNextHopRoute)-1]
    }
    return nil
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destNextHopRoutes.DestNextHopRoute {
        children[destNextHopRoutes.DestNextHopRoute[i].GetSegmentPath()] = &destNextHopRoutes.DestNextHopRoute[i]
    }
    return children
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetYangName() string { return "dest-next-hop-routes" }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) SetParent(parent types.Entity) { destNextHopRoutes.parent = parent }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetParent() types.Entity { return destNextHopRoutes.parent }

func (destNextHopRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetParentYangName() string { return "destination-kw" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
// Nexthop information for a specific
// address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetFilter() yfilter.YFilter { return destNextHopRoute.YFilter }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) SetFilter(yf yfilter.YFilter) { destNextHopRoute.YFilter = yf }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetSegmentPath() string {
    return "dest-next-hop-route" + "[address='" + fmt.Sprintf("%v", destNextHopRoute.Address) + "']"
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destNextHopRoute.RoutePath
    }
    return nil
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destNextHopRoute.RoutePath
    return children
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destNextHopRoute.Address
    leafs["prefix"] = destNextHopRoute.Prefix
    leafs["prefix-length-xr"] = destNextHopRoute.PrefixLengthXr
    leafs["route-version"] = destNextHopRoute.RouteVersion
    leafs["protocol-id"] = destNextHopRoute.ProtocolId
    leafs["protocol-name"] = destNextHopRoute.ProtocolName
    leafs["instance"] = destNextHopRoute.Instance
    leafs["client-id"] = destNextHopRoute.ClientId
    leafs["route-type"] = destNextHopRoute.RouteType
    leafs["priority"] = destNextHopRoute.Priority
    leafs["svd-type"] = destNextHopRoute.SvdType
    leafs["flags"] = destNextHopRoute.Flags
    leafs["extended-flags"] = destNextHopRoute.ExtendedFlags
    leafs["tag"] = destNextHopRoute.Tag
    leafs["distance"] = destNextHopRoute.Distance
    leafs["diversion-distance"] = destNextHopRoute.DiversionDistance
    leafs["metric"] = destNextHopRoute.Metric
    leafs["paths-count"] = destNextHopRoute.PathsCount
    leafs["attribute-identity"] = destNextHopRoute.AttributeIdentity
    leafs["traffic-index"] = destNextHopRoute.TrafficIndex
    leafs["route-precedence"] = destNextHopRoute.RoutePrecedence
    leafs["qos-group"] = destNextHopRoute.QosGroup
    leafs["flow-tag"] = destNextHopRoute.FlowTag
    leafs["fwd-class"] = destNextHopRoute.FwdClass
    leafs["pic-count"] = destNextHopRoute.PicCount
    leafs["active"] = destNextHopRoute.Active
    leafs["diversion"] = destNextHopRoute.Diversion
    leafs["diversion-proto-name"] = destNextHopRoute.DiversionProtoName
    leafs["route-age"] = destNextHopRoute.RouteAge
    leafs["route-label"] = destNextHopRoute.RouteLabel
    leafs["version"] = destNextHopRoute.Version
    leafs["tbl-version"] = destNextHopRoute.TblVersion
    leafs["route-modify-time"] = destNextHopRoute.RouteModifyTime
    return leafs
}

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetYangName() string { return "dest-next-hop-route" }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) SetParent(parent types.Entity) { destNextHopRoute.parent = parent }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetParent() types.Entity { return destNextHopRoute.parent }

func (destNextHopRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetParentYangName() string { return "dest-next-hop-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetParentYangName() string { return "dest-next-hop-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques
// Opaque information 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Opaque item . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque.
    Opaque []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetFilter() yfilter.YFilter { return opaques.YFilter }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) SetFilter(yf yfilter.YFilter) { opaques.YFilter = yf }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetGoName(yname string) string {
    if yname == "opaque" { return "Opaque" }
    return ""
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetSegmentPath() string {
    return "opaques"
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "opaque" {
        for _, c := range opaques.Opaque {
            if opaques.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque{}
        opaques.Opaque = append(opaques.Opaque, child)
        return &opaques.Opaque[len(opaques.Opaque)-1]
    }
    return nil
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range opaques.Opaque {
        children[opaques.Opaque[i].GetSegmentPath()] = &opaques.Opaque[i]
    }
    return children
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetBundleName() string { return "cisco_ios_xr" }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetYangName() string { return "opaques" }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) SetParent(parent types.Entity) { opaques.parent = parent }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetParent() types.Entity { return opaques.parent }

func (opaques *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque
// Opaque item 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Opaque Client ID. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueClientid interface{}

    // Opaque Proto ID. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueProtoid interface{}

    // Opaque key type. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueKeyType interface{}

    // Opaque key size. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueKeySize interface{}

    // Opaque data size. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueDataSize interface{}

    // Opaque string. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    OpaqueString interface{}

    // key. The type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Key interface{}

    // data. The type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Data interface{}
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetFilter() yfilter.YFilter { return opaque.YFilter }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) SetFilter(yf yfilter.YFilter) { opaque.YFilter = yf }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetGoName(yname string) string {
    if yname == "opaque-clientid" { return "OpaqueClientid" }
    if yname == "opaque-protoid" { return "OpaqueProtoid" }
    if yname == "opaque-key-type" { return "OpaqueKeyType" }
    if yname == "opaque-key-size" { return "OpaqueKeySize" }
    if yname == "opaque-data-size" { return "OpaqueDataSize" }
    if yname == "opaque-string" { return "OpaqueString" }
    if yname == "key" { return "Key" }
    if yname == "data" { return "Data" }
    return ""
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetSegmentPath() string {
    return "opaque"
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["opaque-clientid"] = opaque.OpaqueClientid
    leafs["opaque-protoid"] = opaque.OpaqueProtoid
    leafs["opaque-key-type"] = opaque.OpaqueKeyType
    leafs["opaque-key-size"] = opaque.OpaqueKeySize
    leafs["opaque-data-size"] = opaque.OpaqueDataSize
    leafs["opaque-string"] = opaque.OpaqueString
    leafs["key"] = opaque.Key
    leafs["data"] = opaque.Data
    return leafs
}

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetBundleName() string { return "cisco_ios_xr" }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetYangName() string { return "opaque" }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) SetParent(parent types.Entity) { opaque.parent = parent }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetParent() types.Entity { return opaque.parent }

func (opaque *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetParentYangName() string { return "opaques" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol
// Contains the classification of routes by
// protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mobile Protocol.
    Mobile RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile

    // Subscriber Protocol.
    Subscriber RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber

    // Connected Protocol.
    Connected RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected

    // DAGR Protocol(Direct-Attached Gateway Redundancy) Protocol.
    Dagr RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr

    // RIP Protocol.
    Rip RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip

    // OSPF Protocol.
    Ospf RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf

    // Static Protocol.
    Static RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static

    // RPL Protocol.
    Rpl RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl

    // Application Protocol.
    Application RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application

    // TEClient Protocol.
    TeClient RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient

    // EIGRP Protocol.
    Eigrp RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp

    // Local Protocol.
    Local RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local

    // BGP Protocol.
    Bgp RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp

    // ISIS Protocol.
    Isis RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetGoName(yname string) string {
    if yname == "mobile" { return "Mobile" }
    if yname == "subscriber" { return "Subscriber" }
    if yname == "connected" { return "Connected" }
    if yname == "dagr" { return "Dagr" }
    if yname == "rip" { return "Rip" }
    if yname == "ospf" { return "Ospf" }
    if yname == "static" { return "Static" }
    if yname == "rpl" { return "Rpl" }
    if yname == "application" { return "Application" }
    if yname == "te-client" { return "TeClient" }
    if yname == "eigrp" { return "Eigrp" }
    if yname == "local" { return "Local" }
    if yname == "bgp" { return "Bgp" }
    if yname == "isis" { return "Isis" }
    return ""
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetSegmentPath() string {
    return "protocol"
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mobile" {
        return &protocol.Mobile
    }
    if childYangName == "subscriber" {
        return &protocol.Subscriber
    }
    if childYangName == "connected" {
        return &protocol.Connected
    }
    if childYangName == "dagr" {
        return &protocol.Dagr
    }
    if childYangName == "rip" {
        return &protocol.Rip
    }
    if childYangName == "ospf" {
        return &protocol.Ospf
    }
    if childYangName == "static" {
        return &protocol.Static
    }
    if childYangName == "rpl" {
        return &protocol.Rpl
    }
    if childYangName == "application" {
        return &protocol.Application
    }
    if childYangName == "te-client" {
        return &protocol.TeClient
    }
    if childYangName == "eigrp" {
        return &protocol.Eigrp
    }
    if childYangName == "local" {
        return &protocol.Local
    }
    if childYangName == "bgp" {
        return &protocol.Bgp
    }
    if childYangName == "isis" {
        return &protocol.Isis
    }
    return nil
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mobile"] = &protocol.Mobile
    children["subscriber"] = &protocol.Subscriber
    children["connected"] = &protocol.Connected
    children["dagr"] = &protocol.Dagr
    children["rip"] = &protocol.Rip
    children["ospf"] = &protocol.Ospf
    children["static"] = &protocol.Static
    children["rpl"] = &protocol.Rpl
    children["application"] = &protocol.Application
    children["te-client"] = &protocol.TeClient
    children["eigrp"] = &protocol.Eigrp
    children["local"] = &protocol.Local
    children["bgp"] = &protocol.Bgp
    children["isis"] = &protocol.Isis
    return children
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetYangName() string { return "protocol" }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile
// Mobile Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetFilter() yfilter.YFilter { return mobile.YFilter }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) SetFilter(yf yfilter.YFilter) { mobile.YFilter = yf }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetSegmentPath() string {
    return "mobile"
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &mobile.NonAs
    }
    return nil
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &mobile.NonAs
    return children
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetBundleName() string { return "cisco_ios_xr" }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetYangName() string { return "mobile" }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) SetParent(parent types.Entity) { mobile.parent = parent }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetParent() types.Entity { return mobile.parent }

func (mobile *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetParentYangName() string { return "mobile" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber
// Subscriber Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetFilter() yfilter.YFilter { return subscriber.YFilter }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) SetFilter(yf yfilter.YFilter) { subscriber.YFilter = yf }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetSegmentPath() string {
    return "subscriber"
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &subscriber.NonAs
    }
    return nil
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &subscriber.NonAs
    return children
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetBundleName() string { return "cisco_ios_xr" }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetYangName() string { return "subscriber" }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) SetParent(parent types.Entity) { subscriber.parent = parent }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetParent() types.Entity { return subscriber.parent }

func (subscriber *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetParentYangName() string { return "subscriber" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected
// Connected Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetFilter() yfilter.YFilter { return connected.YFilter }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) SetFilter(yf yfilter.YFilter) { connected.YFilter = yf }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetSegmentPath() string {
    return "connected"
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &connected.NonAs
    }
    return nil
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &connected.NonAs
    return children
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetBundleName() string { return "cisco_ios_xr" }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetYangName() string { return "connected" }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) SetParent(parent types.Entity) { connected.parent = parent }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetParent() types.Entity { return connected.parent }

func (connected *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetParentYangName() string { return "connected" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr
// DAGR Protocol(Direct-Attached Gateway
// Redundancy) Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetFilter() yfilter.YFilter { return dagr.YFilter }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) SetFilter(yf yfilter.YFilter) { dagr.YFilter = yf }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetSegmentPath() string {
    return "dagr"
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &dagr.NonAs
    }
    return nil
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &dagr.NonAs
    return children
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetBundleName() string { return "cisco_ios_xr" }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetYangName() string { return "dagr" }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) SetParent(parent types.Entity) { dagr.parent = parent }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetParent() types.Entity { return dagr.parent }

func (dagr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetParentYangName() string { return "dagr" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip
// RIP Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetFilter() yfilter.YFilter { return rip.YFilter }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) SetFilter(yf yfilter.YFilter) { rip.YFilter = yf }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetSegmentPath() string {
    return "rip"
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &rip.NonAs
    }
    return nil
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &rip.NonAs
    return children
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetBundleName() string { return "cisco_ios_xr" }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetYangName() string { return "rip" }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) SetParent(parent types.Entity) { rip.parent = parent }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetParent() types.Entity { return rip.parent }

func (rip *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetParentYangName() string { return "rip" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf
// OSPF Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As.
    As []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetFilter() yfilter.YFilter { return ospf.YFilter }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) SetFilter(yf yfilter.YFilter) { ospf.YFilter = yf }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetSegmentPath() string {
    return "ospf"
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range ospf.As {
            if ospf.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As{}
        ospf.As = append(ospf.As, child)
        return &ospf.As[len(ospf.As)-1]
    }
    return nil
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ospf.As {
        children[ospf.As[i].GetSegmentPath()] = &ospf.As[i]
    }
    return children
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetBundleName() string { return "cisco_ios_xr" }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetYangName() string { return "ospf" }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) SetParent(parent types.Entity) { ospf.parent = parent }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetParent() types.Entity { return ospf.parent }

func (ospf *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
// Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetYangName() string { return "as" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetParent() types.Entity { return as.parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetParentYangName() string { return "ospf" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static
// Static Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetFilter() yfilter.YFilter { return static.YFilter }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) SetFilter(yf yfilter.YFilter) { static.YFilter = yf }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetSegmentPath() string {
    return "static"
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &static.NonAs
    }
    return nil
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &static.NonAs
    return children
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetBundleName() string { return "cisco_ios_xr" }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetYangName() string { return "static" }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) SetParent(parent types.Entity) { static.parent = parent }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetParent() types.Entity { return static.parent }

func (static *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetParentYangName() string { return "static" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl
// RPL Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As.
    As []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetFilter() yfilter.YFilter { return rpl.YFilter }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) SetFilter(yf yfilter.YFilter) { rpl.YFilter = yf }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetSegmentPath() string {
    return "rpl"
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range rpl.As {
            if rpl.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As{}
        rpl.As = append(rpl.As, child)
        return &rpl.As[len(rpl.As)-1]
    }
    return nil
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rpl.As {
        children[rpl.As[i].GetSegmentPath()] = &rpl.As[i]
    }
    return children
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetBundleName() string { return "cisco_ios_xr" }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetYangName() string { return "rpl" }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) SetParent(parent types.Entity) { rpl.parent = parent }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetParent() types.Entity { return rpl.parent }

func (rpl *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
// Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetYangName() string { return "as" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetParent() types.Entity { return as.parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetParentYangName() string { return "rpl" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application
// Application Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetSegmentPath() string {
    return "application"
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &application.NonAs
    }
    return nil
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &application.NonAs
    return children
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetYangName() string { return "application" }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetParent() types.Entity { return application.parent }

func (application *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetParentYangName() string { return "application" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient
// TEClient Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetFilter() yfilter.YFilter { return teClient.YFilter }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) SetFilter(yf yfilter.YFilter) { teClient.YFilter = yf }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetSegmentPath() string {
    return "te-client"
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &teClient.NonAs
    }
    return nil
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &teClient.NonAs
    return children
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetBundleName() string { return "cisco_ios_xr" }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetYangName() string { return "te-client" }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) SetParent(parent types.Entity) { teClient.parent = parent }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetParent() types.Entity { return teClient.parent }

func (teClient *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetParentYangName() string { return "te-client" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp
// EIGRP Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As.
    As []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetSegmentPath() string {
    return "eigrp"
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range eigrp.As {
            if eigrp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As{}
        eigrp.As = append(eigrp.As, child)
        return &eigrp.As[len(eigrp.As)-1]
    }
    return nil
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eigrp.As {
        children[eigrp.As[i].GetSegmentPath()] = &eigrp.As[i]
    }
    return children
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
// Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetYangName() string { return "as" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetParent() types.Entity { return as.parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetParentYangName() string { return "eigrp" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local
// Local Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SMIAP.
    Smiap RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap

    // LSPV(Label Switched Path Verification) Protocol.
    Lspv RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv

    // Non Autonomous System of protocol.
    NonAs RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetGoName(yname string) string {
    if yname == "smiap" { return "Smiap" }
    if yname == "lspv" { return "Lspv" }
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetSegmentPath() string {
    return "local"
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "smiap" {
        return &local.Smiap
    }
    if childYangName == "lspv" {
        return &local.Lspv
    }
    if childYangName == "non-as" {
        return &local.NonAs
    }
    return nil
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["smiap"] = &local.Smiap
    children["lspv"] = &local.Lspv
    children["non-as"] = &local.NonAs
    return children
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetYangName() string { return "local" }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetParent() types.Entity { return local.parent }

func (local *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap
// SMIAP
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetFilter() yfilter.YFilter { return smiap.YFilter }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) SetFilter(yf yfilter.YFilter) { smiap.YFilter = yf }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetSegmentPath() string {
    return "smiap"
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &smiap.ProtocolRoutes
    }
    if childYangName == "information" {
        return &smiap.Information
    }
    return nil
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &smiap.ProtocolRoutes
    children["information"] = &smiap.Information
    return children
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetBundleName() string { return "cisco_ios_xr" }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetYangName() string { return "smiap" }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) SetParent(parent types.Entity) { smiap.parent = parent }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetParent() types.Entity { return smiap.parent }

func (smiap *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetParentYangName() string { return "local" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetParentYangName() string { return "smiap" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetParentYangName() string { return "smiap" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv
// LSPV(Label Switched Path Verification)
// Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetFilter() yfilter.YFilter { return lspv.YFilter }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) SetFilter(yf yfilter.YFilter) { lspv.YFilter = yf }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetSegmentPath() string {
    return "lspv"
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &lspv.ProtocolRoutes
    }
    if childYangName == "information" {
        return &lspv.Information
    }
    return nil
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &lspv.ProtocolRoutes
    children["information"] = &lspv.Information
    return children
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetBundleName() string { return "cisco_ios_xr" }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetYangName() string { return "lspv" }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) SetParent(parent types.Entity) { lspv.parent = parent }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetParent() types.Entity { return lspv.parent }

func (lspv *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetParentYangName() string { return "local" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetParentYangName() string { return "lspv" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetParentYangName() string { return "lspv" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
// Non Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetYangName() string { return "non-as" }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetParentYangName() string { return "local" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetParentYangName() string { return "non-as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp
// BGP Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As.
    As []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetSegmentPath() string {
    return "bgp"
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range bgp.As {
            if bgp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As{}
        bgp.As = append(bgp.As, child)
        return &bgp.As[len(bgp.As)-1]
    }
    return nil
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bgp.As {
        children[bgp.As[i].GetSegmentPath()] = &bgp.As[i]
    }
    return children
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetYangName() string { return "bgp" }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
// Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetYangName() string { return "as" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetParent() types.Entity { return as.parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetParentYangName() string { return "bgp" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
// ISIS Protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As.
    As []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetFilter() yfilter.YFilter { return isis.YFilter }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) SetFilter(yf yfilter.YFilter) { isis.YFilter = yf }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetSegmentPath() string {
    return "isis"
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range isis.As {
            if isis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As{}
        isis.As = append(isis.As, child)
        return &isis.As[len(isis.As)-1]
    }
    return nil
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range isis.As {
        children[isis.As[i].GetSegmentPath()] = &isis.As[i]
    }
    return children
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetBundleName() string { return "cisco_ios_xr" }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetYangName() string { return "isis" }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) SetParent(parent types.Entity) { isis.parent = parent }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetParent() types.Entity { return isis.parent }

func (isis *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetParentYangName() string { return "protocol" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
// Autonomous System of protocol
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes

    // Protocol related Information.
    Information RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetYangName() string { return "as" }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetParent() types.Entity { return as.parent }

func (as *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetParentYangName() string { return "isis" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
// Protocol specific Route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
// Protocol related Information
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetYangName() string { return "information" }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetParentYangName() string { return "as" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes
// Quarantine
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific quarantined address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute.
    QRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetFilter() yfilter.YFilter { return qRoutes.YFilter }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) SetFilter(yf yfilter.YFilter) { qRoutes.YFilter = yf }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetGoName(yname string) string {
    if yname == "q-route" { return "QRoute" }
    return ""
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetSegmentPath() string {
    return "q-routes"
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "q-route" {
        for _, c := range qRoutes.QRoute {
            if qRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute{}
        qRoutes.QRoute = append(qRoutes.QRoute, child)
        return &qRoutes.QRoute[len(qRoutes.QRoute)-1]
    }
    return nil
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range qRoutes.QRoute {
        children[qRoutes.QRoute[i].GetSegmentPath()] = &qRoutes.QRoute[i]
    }
    return children
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetYangName() string { return "q-routes" }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) SetParent(parent types.Entity) { qRoutes.parent = parent }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetParent() types.Entity { return qRoutes.parent }

func (qRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
// Route information for a specific
// quarantined address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetFilter() yfilter.YFilter { return qRoute.YFilter }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) SetFilter(yf yfilter.YFilter) { qRoute.YFilter = yf }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetSegmentPath() string {
    return "q-route"
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &qRoute.RoutePath
    }
    return nil
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &qRoute.RoutePath
    return children
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = qRoute.Address
    leafs["prefix-length"] = qRoute.PrefixLength
    leafs["prefix"] = qRoute.Prefix
    leafs["prefix-length-xr"] = qRoute.PrefixLengthXr
    leafs["route-version"] = qRoute.RouteVersion
    leafs["protocol-id"] = qRoute.ProtocolId
    leafs["protocol-name"] = qRoute.ProtocolName
    leafs["instance"] = qRoute.Instance
    leafs["client-id"] = qRoute.ClientId
    leafs["route-type"] = qRoute.RouteType
    leafs["priority"] = qRoute.Priority
    leafs["svd-type"] = qRoute.SvdType
    leafs["flags"] = qRoute.Flags
    leafs["extended-flags"] = qRoute.ExtendedFlags
    leafs["tag"] = qRoute.Tag
    leafs["distance"] = qRoute.Distance
    leafs["diversion-distance"] = qRoute.DiversionDistance
    leafs["metric"] = qRoute.Metric
    leafs["paths-count"] = qRoute.PathsCount
    leafs["attribute-identity"] = qRoute.AttributeIdentity
    leafs["traffic-index"] = qRoute.TrafficIndex
    leafs["route-precedence"] = qRoute.RoutePrecedence
    leafs["qos-group"] = qRoute.QosGroup
    leafs["flow-tag"] = qRoute.FlowTag
    leafs["fwd-class"] = qRoute.FwdClass
    leafs["pic-count"] = qRoute.PicCount
    leafs["active"] = qRoute.Active
    leafs["diversion"] = qRoute.Diversion
    leafs["diversion-proto-name"] = qRoute.DiversionProtoName
    leafs["route-age"] = qRoute.RouteAge
    leafs["route-label"] = qRoute.RouteLabel
    leafs["version"] = qRoute.Version
    leafs["tbl-version"] = qRoute.TblVersion
    leafs["route-modify-time"] = qRoute.RouteModifyTime
    return leafs
}

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetBundleName() string { return "cisco_ios_xr" }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetYangName() string { return "q-route" }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) SetParent(parent types.Entity) { qRoute.parent = parent }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetParent() types.Entity { return qRoute.parent }

func (qRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetParentYangName() string { return "q-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetParentYangName() string { return "q-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
// Backup route information for the given
// table
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific backup address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute.
    BackupRoute []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetFilter() yfilter.YFilter { return backupRoutes.YFilter }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) SetFilter(yf yfilter.YFilter) { backupRoutes.YFilter = yf }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetGoName(yname string) string {
    if yname == "backup-route" { return "BackupRoute" }
    return ""
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetSegmentPath() string {
    return "backup-routes"
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-route" {
        for _, c := range backupRoutes.BackupRoute {
            if backupRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute{}
        backupRoutes.BackupRoute = append(backupRoutes.BackupRoute, child)
        return &backupRoutes.BackupRoute[len(backupRoutes.BackupRoute)-1]
    }
    return nil
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupRoutes.BackupRoute {
        children[backupRoutes.BackupRoute[i].GetSegmentPath()] = &backupRoutes.BackupRoute[i]
    }
    return children
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetYangName() string { return "backup-routes" }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) SetParent(parent types.Entity) { backupRoutes.parent = parent }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetParent() types.Entity { return backupRoutes.parent }

func (backupRoutes *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
// Route information for a specific backup
// address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Proto ID. The type is interface{} with range: -2147483648..2147483647.
    Protoid interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetFilter() yfilter.YFilter { return backupRoute.YFilter }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) SetFilter(yf yfilter.YFilter) { backupRoute.YFilter = yf }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protoid" { return "Protoid" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetSegmentPath() string {
    return "backup-route"
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &backupRoute.RoutePath
    }
    return nil
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &backupRoute.RoutePath
    return children
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = backupRoute.Address
    leafs["prefix-length"] = backupRoute.PrefixLength
    leafs["protoid"] = backupRoute.Protoid
    leafs["prefix"] = backupRoute.Prefix
    leafs["prefix-length-xr"] = backupRoute.PrefixLengthXr
    leafs["route-version"] = backupRoute.RouteVersion
    leafs["protocol-id"] = backupRoute.ProtocolId
    leafs["protocol-name"] = backupRoute.ProtocolName
    leafs["instance"] = backupRoute.Instance
    leafs["client-id"] = backupRoute.ClientId
    leafs["route-type"] = backupRoute.RouteType
    leafs["priority"] = backupRoute.Priority
    leafs["svd-type"] = backupRoute.SvdType
    leafs["flags"] = backupRoute.Flags
    leafs["extended-flags"] = backupRoute.ExtendedFlags
    leafs["tag"] = backupRoute.Tag
    leafs["distance"] = backupRoute.Distance
    leafs["diversion-distance"] = backupRoute.DiversionDistance
    leafs["metric"] = backupRoute.Metric
    leafs["paths-count"] = backupRoute.PathsCount
    leafs["attribute-identity"] = backupRoute.AttributeIdentity
    leafs["traffic-index"] = backupRoute.TrafficIndex
    leafs["route-precedence"] = backupRoute.RoutePrecedence
    leafs["qos-group"] = backupRoute.QosGroup
    leafs["flow-tag"] = backupRoute.FlowTag
    leafs["fwd-class"] = backupRoute.FwdClass
    leafs["pic-count"] = backupRoute.PicCount
    leafs["active"] = backupRoute.Active
    leafs["diversion"] = backupRoute.Diversion
    leafs["diversion-proto-name"] = backupRoute.DiversionProtoName
    leafs["route-age"] = backupRoute.RouteAge
    leafs["route-label"] = backupRoute.RouteLabel
    leafs["version"] = backupRoute.Version
    leafs["tbl-version"] = backupRoute.TblVersion
    leafs["route-modify-time"] = backupRoute.RouteModifyTime
    return leafs
}

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetBundleName() string { return "cisco_ios_xr" }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetYangName() string { return "backup-route" }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) SetParent(parent types.Entity) { backupRoute.parent = parent }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetParent() types.Entity { return backupRoute.parent }

func (backupRoute *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetParentYangName() string { return "backup-routes" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
// Path(s) of the route
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetParentYangName() string { return "backup-route" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
// Route advertiser information 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert.
    Advert []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetFilter() yfilter.YFilter { return adverts.YFilter }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) SetFilter(yf yfilter.YFilter) { adverts.YFilter = yf }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetGoName(yname string) string {
    if yname == "advert" { return "Advert" }
    return ""
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetSegmentPath() string {
    return "adverts"
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "advert" {
        for _, c := range adverts.Advert {
            if adverts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert{}
        adverts.Advert = append(adverts.Advert, child)
        return &adverts.Advert[len(adverts.Advert)-1]
    }
    return nil
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adverts.Advert {
        children[adverts.Advert[i].GetSegmentPath()] = &adverts.Advert[i]
    }
    return children
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetBundleName() string { return "cisco_ios_xr" }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetYangName() string { return "adverts" }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) SetParent(parent types.Entity) { adverts.parent = parent }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetParent() types.Entity { return adverts.parent }

func (adverts *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetParentYangName() string { return "ip-rib-route-table-name" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
// Route information of a specific Network
// Address 
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // ipv4 rib edm advert. The type is slice of
    // RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert.
    Ipv4RibEdmAdvert []RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetFilter() yfilter.YFilter { return advert.YFilter }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) SetFilter(yf yfilter.YFilter) { advert.YFilter = yf }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "ipv4-rib-edm-advert" { return "Ipv4RibEdmAdvert" }
    return ""
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetSegmentPath() string {
    return "advert"
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-advert" {
        for _, c := range advert.Ipv4RibEdmAdvert {
            if advert.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert{}
        advert.Ipv4RibEdmAdvert = append(advert.Ipv4RibEdmAdvert, child)
        return &advert.Ipv4RibEdmAdvert[len(advert.Ipv4RibEdmAdvert)-1]
    }
    return nil
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range advert.Ipv4RibEdmAdvert {
        children[advert.Ipv4RibEdmAdvert[i].GetSegmentPath()] = &advert.Ipv4RibEdmAdvert[i]
    }
    return children
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = advert.Address
    leafs["prefix-length"] = advert.PrefixLength
    return leafs
}

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetBundleName() string { return "cisco_ios_xr" }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetYangName() string { return "advert" }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) SetParent(parent types.Entity) { advert.parent = parent }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetParent() types.Entity { return advert.parent }

func (advert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetParentYangName() string { return "adverts" }

// RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert
// ipv4 rib edm advert
type RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Client advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // Extended communities. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunities interface{}

    // OSPF area-id flags. The type is interface{} with range: 0..255.
    ProtocolOpaqueFlags interface{}

    // OSPF area-id. The type is interface{} with range: 0..4294967295.
    ProtocolOpaque interface{}

    // Protocol code. The type is interface{} with range: -128..127.
    Code interface{}

    // Instance name. The type is string with length: 0..41.
    InstanceName interface{}
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetFilter() yfilter.YFilter { return ipv4RibEdmAdvert.YFilter }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) SetFilter(yf yfilter.YFilter) { ipv4RibEdmAdvert.YFilter = yf }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetGoName(yname string) string {
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "client-id" { return "ClientId" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "extended-communities" { return "ExtendedCommunities" }
    if yname == "protocol-opaque-flags" { return "ProtocolOpaqueFlags" }
    if yname == "protocol-opaque" { return "ProtocolOpaque" }
    if yname == "code" { return "Code" }
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetSegmentPath() string {
    return "ipv4-rib-edm-advert"
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-id"] = ipv4RibEdmAdvert.ProtocolId
    leafs["client-id"] = ipv4RibEdmAdvert.ClientId
    leafs["number-of-extended-communities"] = ipv4RibEdmAdvert.NumberOfExtendedCommunities
    leafs["extended-communities"] = ipv4RibEdmAdvert.ExtendedCommunities
    leafs["protocol-opaque-flags"] = ipv4RibEdmAdvert.ProtocolOpaqueFlags
    leafs["protocol-opaque"] = ipv4RibEdmAdvert.ProtocolOpaque
    leafs["code"] = ipv4RibEdmAdvert.Code
    leafs["instance-name"] = ipv4RibEdmAdvert.InstanceName
    return leafs
}

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetYangName() string { return "ipv4-rib-edm-advert" }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) SetParent(parent types.Entity) { ipv4RibEdmAdvert.parent = parent }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetParent() types.Entity { return ipv4RibEdmAdvert.parent }

func (ipv4RibEdmAdvert *RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetParentYangName() string { return "advert" }

// RibStdby_RibTableIds
// RIB table
type RibStdby_RibTableIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific Table. The type is slice of RibStdby_RibTableIds_RibTableId.
    RibTableId []RibStdby_RibTableIds_RibTableId
}

func (ribTableIds *RibStdby_RibTableIds) GetFilter() yfilter.YFilter { return ribTableIds.YFilter }

func (ribTableIds *RibStdby_RibTableIds) SetFilter(yf yfilter.YFilter) { ribTableIds.YFilter = yf }

func (ribTableIds *RibStdby_RibTableIds) GetGoName(yname string) string {
    if yname == "rib-table-id" { return "RibTableId" }
    return ""
}

func (ribTableIds *RibStdby_RibTableIds) GetSegmentPath() string {
    return "rib-table-ids"
}

func (ribTableIds *RibStdby_RibTableIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rib-table-id" {
        for _, c := range ribTableIds.RibTableId {
            if ribTableIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId{}
        ribTableIds.RibTableId = append(ribTableIds.RibTableId, child)
        return &ribTableIds.RibTableId[len(ribTableIds.RibTableId)-1]
    }
    return nil
}

func (ribTableIds *RibStdby_RibTableIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableIds.RibTableId {
        children[ribTableIds.RibTableId[i].GetSegmentPath()] = &ribTableIds.RibTableId[i]
    }
    return children
}

func (ribTableIds *RibStdby_RibTableIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ribTableIds *RibStdby_RibTableIds) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableIds *RibStdby_RibTableIds) GetYangName() string { return "rib-table-ids" }

func (ribTableIds *RibStdby_RibTableIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableIds *RibStdby_RibTableIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableIds *RibStdby_RibTableIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableIds *RibStdby_RibTableIds) SetParent(parent types.Entity) { ribTableIds.parent = parent }

func (ribTableIds *RibStdby_RibTableIds) GetParent() types.Entity { return ribTableIds.parent }

func (ribTableIds *RibStdby_RibTableIds) GetParentYangName() string { return "rib-stdby" }

// RibStdby_RibTableIds_RibTableId
// Specific Table
type RibStdby_RibTableIds_RibTableId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Table ID. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    Tableid interface{}

    // RIB table summary.
    SummaryProtos RibStdby_RibTableIds_RibTableId_SummaryProtos

    // RIB table interface.
    RibTableItfHndls RibStdby_RibTableIds_RibTableId_RibTableItfHndls

    // Table related Information.
    Information RibStdby_RibTableIds_RibTableId_Information
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetFilter() yfilter.YFilter { return ribTableId.YFilter }

func (ribTableId *RibStdby_RibTableIds_RibTableId) SetFilter(yf yfilter.YFilter) { ribTableId.YFilter = yf }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetGoName(yname string) string {
    if yname == "tableid" { return "Tableid" }
    if yname == "summary-protos" { return "SummaryProtos" }
    if yname == "rib-table-itf-hndls" { return "RibTableItfHndls" }
    if yname == "information" { return "Information" }
    return ""
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetSegmentPath() string {
    return "rib-table-id" + "[tableid='" + fmt.Sprintf("%v", ribTableId.Tableid) + "']"
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-protos" {
        return &ribTableId.SummaryProtos
    }
    if childYangName == "rib-table-itf-hndls" {
        return &ribTableId.RibTableItfHndls
    }
    if childYangName == "information" {
        return &ribTableId.Information
    }
    return nil
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-protos"] = &ribTableId.SummaryProtos
    children["rib-table-itf-hndls"] = &ribTableId.RibTableItfHndls
    children["information"] = &ribTableId.Information
    return children
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tableid"] = ribTableId.Tableid
    return leafs
}

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetYangName() string { return "rib-table-id" }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableId *RibStdby_RibTableIds_RibTableId) SetParent(parent types.Entity) { ribTableId.parent = parent }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetParent() types.Entity { return ribTableId.parent }

func (ribTableId *RibStdby_RibTableIds_RibTableId) GetParentYangName() string { return "rib-table-ids" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos
// RIB table summary
type RibStdby_RibTableIds_RibTableId_SummaryProtos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary information for a specific table/protocol . The type is slice
    // of RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto.
    SummaryProto []RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetFilter() yfilter.YFilter { return summaryProtos.YFilter }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) SetFilter(yf yfilter.YFilter) { summaryProtos.YFilter = yf }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetGoName(yname string) string {
    if yname == "summary-proto" { return "SummaryProto" }
    return ""
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetSegmentPath() string {
    return "summary-protos"
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-proto" {
        for _, c := range summaryProtos.SummaryProto {
            if summaryProtos.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto{}
        summaryProtos.SummaryProto = append(summaryProtos.SummaryProto, child)
        return &summaryProtos.SummaryProto[len(summaryProtos.SummaryProto)-1]
    }
    return nil
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryProtos.SummaryProto {
        children[summaryProtos.SummaryProto[i].GetSegmentPath()] = &summaryProtos.SummaryProto[i]
    }
    return children
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetYangName() string { return "summary-protos" }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) SetParent(parent types.Entity) { summaryProtos.parent = parent }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetParent() types.Entity { return summaryProtos.parent }

func (summaryProtos *RibStdby_RibTableIds_RibTableId_SummaryProtos) GetParentYangName() string { return "rib-table-id" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto
// Route summary information for a specific
// table/protocol 
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Proto ID. The type is interface{} with range:
    // -2147483648..2147483647.
    Protoid interface{}

    // Proto name. The type is string.
    Name interface{}

    // Instance. The type is string.
    Instance interface{}

    // Count for proto. instance.
    ProtoRouteCount RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount

    // No route type.
    RtypeNone RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone

    // Unknown route type.
    RtypeOther RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther

    // OSPF route within an area.
    RtypeOspfIntra RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra

    // OSPF route across diff. areas.
    RtypeOspfInter RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter

    // OSPF external route of type 1.
    RtypeOspfExtern1 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1

    // OSPF external route of type 2.
    RtypeOspfExtern2 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2

    // IS-IS summary route.
    RtypeIsisSum RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum

    // IS-IS level 1 route.
    RtypeIsisL1 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1

    // IS-IS level 2 route.
    RtypeIsisL2 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2

    // IS-IS level1 inter-area route.
    RtypeIsisL1Ia RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia

    // iBGP route.
    RtypeBgpInt RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt

    // eBGP route.
    RtypeBgpExt RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt

    // BGP local route.
    RtypeBgpLoc RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc

    // OSPF NSSA ext. route type 1.
    RtypeOspfNssa1 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1

    // OSPF NSSA ext. route type 2.
    RtypeOspfNssa2 RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2

    // EIGRP internal route.
    RtypeIgrp2Int RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int

    // EIGRP external route.
    RtypeIgrp2Ext RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetFilter() yfilter.YFilter { return summaryProto.YFilter }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) SetFilter(yf yfilter.YFilter) { summaryProto.YFilter = yf }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetGoName(yname string) string {
    if yname == "protoid" { return "Protoid" }
    if yname == "name" { return "Name" }
    if yname == "instance" { return "Instance" }
    if yname == "proto-route-count" { return "ProtoRouteCount" }
    if yname == "rtype-none" { return "RtypeNone" }
    if yname == "rtype-other" { return "RtypeOther" }
    if yname == "rtype-ospf-intra" { return "RtypeOspfIntra" }
    if yname == "rtype-ospf-inter" { return "RtypeOspfInter" }
    if yname == "rtype-ospf-extern1" { return "RtypeOspfExtern1" }
    if yname == "rtype-ospf-extern2" { return "RtypeOspfExtern2" }
    if yname == "rtype-isis-sum" { return "RtypeIsisSum" }
    if yname == "rtype-isis-l1" { return "RtypeIsisL1" }
    if yname == "rtype-isis-l2" { return "RtypeIsisL2" }
    if yname == "rtype-isis-l1-ia" { return "RtypeIsisL1Ia" }
    if yname == "rtype-bgp-int" { return "RtypeBgpInt" }
    if yname == "rtype-bgp-ext" { return "RtypeBgpExt" }
    if yname == "rtype-bgp-loc" { return "RtypeBgpLoc" }
    if yname == "rtype-ospf-nssa1" { return "RtypeOspfNssa1" }
    if yname == "rtype-ospf-nssa2" { return "RtypeOspfNssa2" }
    if yname == "rtype-igrp2-int" { return "RtypeIgrp2Int" }
    if yname == "rtype-igrp2-ext" { return "RtypeIgrp2Ext" }
    return ""
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetSegmentPath() string {
    return "summary-proto" + "[protoid='" + fmt.Sprintf("%v", summaryProto.Protoid) + "']"
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "proto-route-count" {
        return &summaryProto.ProtoRouteCount
    }
    if childYangName == "rtype-none" {
        return &summaryProto.RtypeNone
    }
    if childYangName == "rtype-other" {
        return &summaryProto.RtypeOther
    }
    if childYangName == "rtype-ospf-intra" {
        return &summaryProto.RtypeOspfIntra
    }
    if childYangName == "rtype-ospf-inter" {
        return &summaryProto.RtypeOspfInter
    }
    if childYangName == "rtype-ospf-extern1" {
        return &summaryProto.RtypeOspfExtern1
    }
    if childYangName == "rtype-ospf-extern2" {
        return &summaryProto.RtypeOspfExtern2
    }
    if childYangName == "rtype-isis-sum" {
        return &summaryProto.RtypeIsisSum
    }
    if childYangName == "rtype-isis-l1" {
        return &summaryProto.RtypeIsisL1
    }
    if childYangName == "rtype-isis-l2" {
        return &summaryProto.RtypeIsisL2
    }
    if childYangName == "rtype-isis-l1-ia" {
        return &summaryProto.RtypeIsisL1Ia
    }
    if childYangName == "rtype-bgp-int" {
        return &summaryProto.RtypeBgpInt
    }
    if childYangName == "rtype-bgp-ext" {
        return &summaryProto.RtypeBgpExt
    }
    if childYangName == "rtype-bgp-loc" {
        return &summaryProto.RtypeBgpLoc
    }
    if childYangName == "rtype-ospf-nssa1" {
        return &summaryProto.RtypeOspfNssa1
    }
    if childYangName == "rtype-ospf-nssa2" {
        return &summaryProto.RtypeOspfNssa2
    }
    if childYangName == "rtype-igrp2-int" {
        return &summaryProto.RtypeIgrp2Int
    }
    if childYangName == "rtype-igrp2-ext" {
        return &summaryProto.RtypeIgrp2Ext
    }
    return nil
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["proto-route-count"] = &summaryProto.ProtoRouteCount
    children["rtype-none"] = &summaryProto.RtypeNone
    children["rtype-other"] = &summaryProto.RtypeOther
    children["rtype-ospf-intra"] = &summaryProto.RtypeOspfIntra
    children["rtype-ospf-inter"] = &summaryProto.RtypeOspfInter
    children["rtype-ospf-extern1"] = &summaryProto.RtypeOspfExtern1
    children["rtype-ospf-extern2"] = &summaryProto.RtypeOspfExtern2
    children["rtype-isis-sum"] = &summaryProto.RtypeIsisSum
    children["rtype-isis-l1"] = &summaryProto.RtypeIsisL1
    children["rtype-isis-l2"] = &summaryProto.RtypeIsisL2
    children["rtype-isis-l1-ia"] = &summaryProto.RtypeIsisL1Ia
    children["rtype-bgp-int"] = &summaryProto.RtypeBgpInt
    children["rtype-bgp-ext"] = &summaryProto.RtypeBgpExt
    children["rtype-bgp-loc"] = &summaryProto.RtypeBgpLoc
    children["rtype-ospf-nssa1"] = &summaryProto.RtypeOspfNssa1
    children["rtype-ospf-nssa2"] = &summaryProto.RtypeOspfNssa2
    children["rtype-igrp2-int"] = &summaryProto.RtypeIgrp2Int
    children["rtype-igrp2-ext"] = &summaryProto.RtypeIgrp2Ext
    return children
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protoid"] = summaryProto.Protoid
    leafs["name"] = summaryProto.Name
    leafs["instance"] = summaryProto.Instance
    return leafs
}

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetYangName() string { return "summary-proto" }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) SetParent(parent types.Entity) { summaryProto.parent = parent }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetParent() types.Entity { return summaryProto.parent }

func (summaryProto *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetParentYangName() string { return "summary-protos" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount
// Count for proto. instance
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetFilter() yfilter.YFilter { return protoRouteCount.YFilter }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) SetFilter(yf yfilter.YFilter) { protoRouteCount.YFilter = yf }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetSegmentPath() string {
    return "proto-route-count"
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = protoRouteCount.ActiveRoutesCount
    leafs["num-backup-routes"] = protoRouteCount.NumBackupRoutes
    leafs["num-active-paths"] = protoRouteCount.NumActivePaths
    leafs["num-backup-paths"] = protoRouteCount.NumBackupPaths
    return leafs
}

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetBundleName() string { return "cisco_ios_xr" }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetYangName() string { return "proto-route-count" }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) SetParent(parent types.Entity) { protoRouteCount.parent = parent }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetParent() types.Entity { return protoRouteCount.parent }

func (protoRouteCount *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone
// No route type
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetFilter() yfilter.YFilter { return rtypeNone.YFilter }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) SetFilter(yf yfilter.YFilter) { rtypeNone.YFilter = yf }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetSegmentPath() string {
    return "rtype-none"
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeNone.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeNone.NumBackupRoutes
    leafs["num-active-paths"] = rtypeNone.NumActivePaths
    leafs["num-backup-paths"] = rtypeNone.NumBackupPaths
    return leafs
}

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetYangName() string { return "rtype-none" }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) SetParent(parent types.Entity) { rtypeNone.parent = parent }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetParent() types.Entity { return rtypeNone.parent }

func (rtypeNone *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther
// Unknown route type
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetFilter() yfilter.YFilter { return rtypeOther.YFilter }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) SetFilter(yf yfilter.YFilter) { rtypeOther.YFilter = yf }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetSegmentPath() string {
    return "rtype-other"
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOther.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOther.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOther.NumActivePaths
    leafs["num-backup-paths"] = rtypeOther.NumBackupPaths
    return leafs
}

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetYangName() string { return "rtype-other" }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) SetParent(parent types.Entity) { rtypeOther.parent = parent }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetParent() types.Entity { return rtypeOther.parent }

func (rtypeOther *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra
// OSPF route within an area
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetFilter() yfilter.YFilter { return rtypeOspfIntra.YFilter }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) SetFilter(yf yfilter.YFilter) { rtypeOspfIntra.YFilter = yf }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetSegmentPath() string {
    return "rtype-ospf-intra"
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfIntra.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfIntra.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfIntra.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfIntra.NumBackupPaths
    return leafs
}

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetYangName() string { return "rtype-ospf-intra" }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) SetParent(parent types.Entity) { rtypeOspfIntra.parent = parent }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetParent() types.Entity { return rtypeOspfIntra.parent }

func (rtypeOspfIntra *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter
// OSPF route across diff. areas
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetFilter() yfilter.YFilter { return rtypeOspfInter.YFilter }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) SetFilter(yf yfilter.YFilter) { rtypeOspfInter.YFilter = yf }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetSegmentPath() string {
    return "rtype-ospf-inter"
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfInter.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfInter.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfInter.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfInter.NumBackupPaths
    return leafs
}

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetYangName() string { return "rtype-ospf-inter" }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) SetParent(parent types.Entity) { rtypeOspfInter.parent = parent }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetParent() types.Entity { return rtypeOspfInter.parent }

func (rtypeOspfInter *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1
// OSPF external route of type 1
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetFilter() yfilter.YFilter { return rtypeOspfExtern1.YFilter }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) SetFilter(yf yfilter.YFilter) { rtypeOspfExtern1.YFilter = yf }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetSegmentPath() string {
    return "rtype-ospf-extern1"
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfExtern1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfExtern1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfExtern1.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfExtern1.NumBackupPaths
    return leafs
}

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetYangName() string { return "rtype-ospf-extern1" }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) SetParent(parent types.Entity) { rtypeOspfExtern1.parent = parent }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetParent() types.Entity { return rtypeOspfExtern1.parent }

func (rtypeOspfExtern1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2
// OSPF external route of type 2
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetFilter() yfilter.YFilter { return rtypeOspfExtern2.YFilter }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) SetFilter(yf yfilter.YFilter) { rtypeOspfExtern2.YFilter = yf }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetSegmentPath() string {
    return "rtype-ospf-extern2"
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfExtern2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfExtern2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfExtern2.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfExtern2.NumBackupPaths
    return leafs
}

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetYangName() string { return "rtype-ospf-extern2" }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) SetParent(parent types.Entity) { rtypeOspfExtern2.parent = parent }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetParent() types.Entity { return rtypeOspfExtern2.parent }

func (rtypeOspfExtern2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum
// IS-IS summary route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetFilter() yfilter.YFilter { return rtypeIsisSum.YFilter }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) SetFilter(yf yfilter.YFilter) { rtypeIsisSum.YFilter = yf }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetSegmentPath() string {
    return "rtype-isis-sum"
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisSum.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisSum.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisSum.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisSum.NumBackupPaths
    return leafs
}

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetYangName() string { return "rtype-isis-sum" }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) SetParent(parent types.Entity) { rtypeIsisSum.parent = parent }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetParent() types.Entity { return rtypeIsisSum.parent }

func (rtypeIsisSum *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1
// IS-IS level 1 route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetFilter() yfilter.YFilter { return rtypeIsisL1.YFilter }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) SetFilter(yf yfilter.YFilter) { rtypeIsisL1.YFilter = yf }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetSegmentPath() string {
    return "rtype-isis-l1"
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL1.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL1.NumBackupPaths
    return leafs
}

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetYangName() string { return "rtype-isis-l1" }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) SetParent(parent types.Entity) { rtypeIsisL1.parent = parent }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetParent() types.Entity { return rtypeIsisL1.parent }

func (rtypeIsisL1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2
// IS-IS level 2 route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetFilter() yfilter.YFilter { return rtypeIsisL2.YFilter }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) SetFilter(yf yfilter.YFilter) { rtypeIsisL2.YFilter = yf }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetSegmentPath() string {
    return "rtype-isis-l2"
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL2.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL2.NumBackupPaths
    return leafs
}

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetYangName() string { return "rtype-isis-l2" }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) SetParent(parent types.Entity) { rtypeIsisL2.parent = parent }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetParent() types.Entity { return rtypeIsisL2.parent }

func (rtypeIsisL2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia
// IS-IS level1 inter-area route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetFilter() yfilter.YFilter { return rtypeIsisL1Ia.YFilter }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) SetFilter(yf yfilter.YFilter) { rtypeIsisL1Ia.YFilter = yf }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetSegmentPath() string {
    return "rtype-isis-l1-ia"
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL1Ia.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL1Ia.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL1Ia.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL1Ia.NumBackupPaths
    return leafs
}

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetYangName() string { return "rtype-isis-l1-ia" }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) SetParent(parent types.Entity) { rtypeIsisL1Ia.parent = parent }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetParent() types.Entity { return rtypeIsisL1Ia.parent }

func (rtypeIsisL1Ia *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt
// iBGP route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetFilter() yfilter.YFilter { return rtypeBgpInt.YFilter }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) SetFilter(yf yfilter.YFilter) { rtypeBgpInt.YFilter = yf }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetSegmentPath() string {
    return "rtype-bgp-int"
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpInt.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpInt.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpInt.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpInt.NumBackupPaths
    return leafs
}

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetYangName() string { return "rtype-bgp-int" }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) SetParent(parent types.Entity) { rtypeBgpInt.parent = parent }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetParent() types.Entity { return rtypeBgpInt.parent }

func (rtypeBgpInt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt
// eBGP route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetFilter() yfilter.YFilter { return rtypeBgpExt.YFilter }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) SetFilter(yf yfilter.YFilter) { rtypeBgpExt.YFilter = yf }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetSegmentPath() string {
    return "rtype-bgp-ext"
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpExt.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpExt.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpExt.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpExt.NumBackupPaths
    return leafs
}

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetYangName() string { return "rtype-bgp-ext" }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) SetParent(parent types.Entity) { rtypeBgpExt.parent = parent }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetParent() types.Entity { return rtypeBgpExt.parent }

func (rtypeBgpExt *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc
// BGP local route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetFilter() yfilter.YFilter { return rtypeBgpLoc.YFilter }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) SetFilter(yf yfilter.YFilter) { rtypeBgpLoc.YFilter = yf }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetSegmentPath() string {
    return "rtype-bgp-loc"
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpLoc.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpLoc.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpLoc.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpLoc.NumBackupPaths
    return leafs
}

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetYangName() string { return "rtype-bgp-loc" }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) SetParent(parent types.Entity) { rtypeBgpLoc.parent = parent }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetParent() types.Entity { return rtypeBgpLoc.parent }

func (rtypeBgpLoc *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1
// OSPF NSSA ext. route type 1
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetFilter() yfilter.YFilter { return rtypeOspfNssa1.YFilter }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) SetFilter(yf yfilter.YFilter) { rtypeOspfNssa1.YFilter = yf }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetSegmentPath() string {
    return "rtype-ospf-nssa1"
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfNssa1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfNssa1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfNssa1.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfNssa1.NumBackupPaths
    return leafs
}

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetYangName() string { return "rtype-ospf-nssa1" }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) SetParent(parent types.Entity) { rtypeOspfNssa1.parent = parent }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetParent() types.Entity { return rtypeOspfNssa1.parent }

func (rtypeOspfNssa1 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2
// OSPF NSSA ext. route type 2
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetFilter() yfilter.YFilter { return rtypeOspfNssa2.YFilter }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) SetFilter(yf yfilter.YFilter) { rtypeOspfNssa2.YFilter = yf }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetSegmentPath() string {
    return "rtype-ospf-nssa2"
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfNssa2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfNssa2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfNssa2.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfNssa2.NumBackupPaths
    return leafs
}

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetYangName() string { return "rtype-ospf-nssa2" }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) SetParent(parent types.Entity) { rtypeOspfNssa2.parent = parent }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetParent() types.Entity { return rtypeOspfNssa2.parent }

func (rtypeOspfNssa2 *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int
// EIGRP internal route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetFilter() yfilter.YFilter { return rtypeIgrp2Int.YFilter }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) SetFilter(yf yfilter.YFilter) { rtypeIgrp2Int.YFilter = yf }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetSegmentPath() string {
    return "rtype-igrp2-int"
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIgrp2Int.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIgrp2Int.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIgrp2Int.NumActivePaths
    leafs["num-backup-paths"] = rtypeIgrp2Int.NumBackupPaths
    return leafs
}

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetYangName() string { return "rtype-igrp2-int" }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) SetParent(parent types.Entity) { rtypeIgrp2Int.parent = parent }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetParent() types.Entity { return rtypeIgrp2Int.parent }

func (rtypeIgrp2Int *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
// EIGRP external route
type RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetFilter() yfilter.YFilter { return rtypeIgrp2Ext.YFilter }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) SetFilter(yf yfilter.YFilter) { rtypeIgrp2Ext.YFilter = yf }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetSegmentPath() string {
    return "rtype-igrp2-ext"
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIgrp2Ext.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIgrp2Ext.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIgrp2Ext.NumActivePaths
    leafs["num-backup-paths"] = rtypeIgrp2Ext.NumBackupPaths
    return leafs
}

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetYangName() string { return "rtype-igrp2-ext" }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) SetParent(parent types.Entity) { rtypeIgrp2Ext.parent = parent }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetParent() types.Entity { return rtypeIgrp2Ext.parent }

func (rtypeIgrp2Ext *RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetParentYangName() string { return "summary-proto" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls
// RIB table interface
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface handle. The type is slice of
    // RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl.
    RibTableItfHndl []RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetFilter() yfilter.YFilter { return ribTableItfHndls.YFilter }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) SetFilter(yf yfilter.YFilter) { ribTableItfHndls.YFilter = yf }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetGoName(yname string) string {
    if yname == "rib-table-itf-hndl" { return "RibTableItfHndl" }
    return ""
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetSegmentPath() string {
    return "rib-table-itf-hndls"
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rib-table-itf-hndl" {
        for _, c := range ribTableItfHndls.RibTableItfHndl {
            if ribTableItfHndls.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl{}
        ribTableItfHndls.RibTableItfHndl = append(ribTableItfHndls.RibTableItfHndl, child)
        return &ribTableItfHndls.RibTableItfHndl[len(ribTableItfHndls.RibTableItfHndl)-1]
    }
    return nil
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableItfHndls.RibTableItfHndl {
        children[ribTableItfHndls.RibTableItfHndl[i].GetSegmentPath()] = &ribTableItfHndls.RibTableItfHndl[i]
    }
    return children
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetYangName() string { return "rib-table-itf-hndls" }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) SetParent(parent types.Entity) { ribTableItfHndls.parent = parent }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetParent() types.Entity { return ribTableItfHndls.parent }

func (ribTableItfHndls *RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetParentYangName() string { return "rib-table-id" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
// Interface handle
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Itf Handle. The type is interface{} with range:
    // -2147483648..2147483647.
    Handle interface{}

    // Route information for a specific table/interface . The type is slice of
    // RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute.
    ItfRoute []RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetFilter() yfilter.YFilter { return ribTableItfHndl.YFilter }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) SetFilter(yf yfilter.YFilter) { ribTableItfHndl.YFilter = yf }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetGoName(yname string) string {
    if yname == "handle" { return "Handle" }
    if yname == "itf-route" { return "ItfRoute" }
    return ""
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetSegmentPath() string {
    return "rib-table-itf-hndl" + "[handle='" + fmt.Sprintf("%v", ribTableItfHndl.Handle) + "']"
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "itf-route" {
        for _, c := range ribTableItfHndl.ItfRoute {
            if ribTableItfHndl.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute{}
        ribTableItfHndl.ItfRoute = append(ribTableItfHndl.ItfRoute, child)
        return &ribTableItfHndl.ItfRoute[len(ribTableItfHndl.ItfRoute)-1]
    }
    return nil
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableItfHndl.ItfRoute {
        children[ribTableItfHndl.ItfRoute[i].GetSegmentPath()] = &ribTableItfHndl.ItfRoute[i]
    }
    return children
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["handle"] = ribTableItfHndl.Handle
    return leafs
}

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetYangName() string { return "rib-table-itf-hndl" }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) SetParent(parent types.Entity) { ribTableItfHndl.parent = parent }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetParent() types.Entity { return ribTableItfHndl.parent }

func (ribTableItfHndl *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetParentYangName() string { return "rib-table-itf-hndls" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
// Route information for a specific
// table/interface 
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetFilter() yfilter.YFilter { return itfRoute.YFilter }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) SetFilter(yf yfilter.YFilter) { itfRoute.YFilter = yf }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetSegmentPath() string {
    return "itf-route" + "[address='" + fmt.Sprintf("%v", itfRoute.Address) + "']"
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &itfRoute.RoutePath
    }
    return nil
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &itfRoute.RoutePath
    return children
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = itfRoute.Address
    leafs["prefix"] = itfRoute.Prefix
    leafs["prefix-length-xr"] = itfRoute.PrefixLengthXr
    leafs["route-version"] = itfRoute.RouteVersion
    leafs["protocol-id"] = itfRoute.ProtocolId
    leafs["protocol-name"] = itfRoute.ProtocolName
    leafs["instance"] = itfRoute.Instance
    leafs["client-id"] = itfRoute.ClientId
    leafs["route-type"] = itfRoute.RouteType
    leafs["priority"] = itfRoute.Priority
    leafs["svd-type"] = itfRoute.SvdType
    leafs["flags"] = itfRoute.Flags
    leafs["extended-flags"] = itfRoute.ExtendedFlags
    leafs["tag"] = itfRoute.Tag
    leafs["distance"] = itfRoute.Distance
    leafs["diversion-distance"] = itfRoute.DiversionDistance
    leafs["metric"] = itfRoute.Metric
    leafs["paths-count"] = itfRoute.PathsCount
    leafs["attribute-identity"] = itfRoute.AttributeIdentity
    leafs["traffic-index"] = itfRoute.TrafficIndex
    leafs["route-precedence"] = itfRoute.RoutePrecedence
    leafs["qos-group"] = itfRoute.QosGroup
    leafs["flow-tag"] = itfRoute.FlowTag
    leafs["fwd-class"] = itfRoute.FwdClass
    leafs["pic-count"] = itfRoute.PicCount
    leafs["active"] = itfRoute.Active
    leafs["diversion"] = itfRoute.Diversion
    leafs["diversion-proto-name"] = itfRoute.DiversionProtoName
    leafs["route-age"] = itfRoute.RouteAge
    leafs["route-label"] = itfRoute.RouteLabel
    leafs["version"] = itfRoute.Version
    leafs["tbl-version"] = itfRoute.TblVersion
    leafs["route-modify-time"] = itfRoute.RouteModifyTime
    return leafs
}

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetBundleName() string { return "cisco_ios_xr" }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetYangName() string { return "itf-route" }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) SetParent(parent types.Entity) { itfRoute.parent = parent }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetParent() types.Entity { return itfRoute.parent }

func (itfRoute *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetParentYangName() string { return "rib-table-itf-hndl" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
// Path(s) of the route
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetParentYangName() string { return "itf-route" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// RibStdby_RibTableIds_RibTableId_Information
// Table related Information
type RibStdby_RibTableIds_RibTableId_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table id. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // Address Family. The type is interface{} with range: 0..4294967295.
    Afi interface{}

    // sub Address Family. The type is interface{} with range: 0..4294967295.
    Safi interface{}

    // VRF Name of the table. The type is string.
    VrfName interface{}

    // Name of the table. The type is string.
    TableName interface{}

    // Table version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // Configured prefix limit. The type is interface{} with range: 0..4294967295.
    ConfPrefixLimit interface{}

    // Num prefixes in table. The type is interface{} with range: 0..4294967295.
    CurrentPrefixCount interface{}

    // Num SVD local prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdlclPrefix interface{}

    // Num SVD remote prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdremPrefix interface{}

    // Version no. of the table. The type is interface{} with range:
    // 0..18446744073709551615.
    TableVersion interface{}

    // Prefix limit state indicator. The type is bool.
    PrefixLimitNotified interface{}

    // Table in fwd reference state?. The type is bool.
    FwdReferenced interface{}

    // Table deleted?. The type is bool.
    Deleted interface{}

    // Table has reached convergence. The type is bool.
    InitialConverge interface{}
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *RibStdby_RibTableIds_RibTableId_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetGoName(yname string) string {
    if yname == "tableid" { return "Tableid" }
    if yname == "afi" { return "Afi" }
    if yname == "safi" { return "Safi" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "table-name" { return "TableName" }
    if yname == "version" { return "Version" }
    if yname == "conf-prefix-limit" { return "ConfPrefixLimit" }
    if yname == "current-prefix-count" { return "CurrentPrefixCount" }
    if yname == "num-svdlcl-prefix" { return "NumSvdlclPrefix" }
    if yname == "num-svdrem-prefix" { return "NumSvdremPrefix" }
    if yname == "table-version" { return "TableVersion" }
    if yname == "prefix-limit-notified" { return "PrefixLimitNotified" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "deleted" { return "Deleted" }
    if yname == "initial-converge" { return "InitialConverge" }
    return ""
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetSegmentPath() string {
    return "information"
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tableid"] = information.Tableid
    leafs["afi"] = information.Afi
    leafs["safi"] = information.Safi
    leafs["vrf-name"] = information.VrfName
    leafs["table-name"] = information.TableName
    leafs["version"] = information.Version
    leafs["conf-prefix-limit"] = information.ConfPrefixLimit
    leafs["current-prefix-count"] = information.CurrentPrefixCount
    leafs["num-svdlcl-prefix"] = information.NumSvdlclPrefix
    leafs["num-svdrem-prefix"] = information.NumSvdremPrefix
    leafs["table-version"] = information.TableVersion
    leafs["prefix-limit-notified"] = information.PrefixLimitNotified
    leafs["fwd-referenced"] = information.FwdReferenced
    leafs["deleted"] = information.Deleted
    leafs["initial-converge"] = information.InitialConverge
    return leafs
}

func (information *RibStdby_RibTableIds_RibTableId_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetYangName() string { return "information" }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *RibStdby_RibTableIds_RibTableId_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetParent() types.Entity { return information.parent }

func (information *RibStdby_RibTableIds_RibTableId_Information) GetParentYangName() string { return "rib-table-id" }

// Rib
// rib
type Rib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table.
    Vrfs Rib_Vrfs

    // RIB table.
    RibTableIds Rib_RibTableIds
}

func (rib *Rib) GetFilter() yfilter.YFilter { return rib.YFilter }

func (rib *Rib) SetFilter(yf yfilter.YFilter) { rib.YFilter = yf }

func (rib *Rib) GetGoName(yname string) string {
    if yname == "vrfs" { return "Vrfs" }
    if yname == "rib-table-ids" { return "RibTableIds" }
    return ""
}

func (rib *Rib) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-rib-ipv4-oper:rib"
}

func (rib *Rib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &rib.Vrfs
    }
    if childYangName == "rib-table-ids" {
        return &rib.RibTableIds
    }
    return nil
}

func (rib *Rib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &rib.Vrfs
    children["rib-table-ids"] = &rib.RibTableIds
    return children
}

func (rib *Rib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rib *Rib) GetBundleName() string { return "cisco_ios_xr" }

func (rib *Rib) GetYangName() string { return "rib" }

func (rib *Rib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rib *Rib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rib *Rib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rib *Rib) SetParent(parent types.Entity) { rib.parent = parent }

func (rib *Rib) GetParent() types.Entity { return rib.parent }

func (rib *Rib) GetParentYangName() string { return "Cisco-IOS-XR-ip-rib-ipv4-oper" }

// Rib_Vrfs
// VRF table
type Rib_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific VRF. The type is slice of Rib_Vrfs_Vrf.
    Vrf []Rib_Vrfs_Vrf
}

func (vrfs *Rib_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Rib_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Rib_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Rib_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Rib_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Rib_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Rib_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Rib_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Rib_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Rib_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Rib_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Rib_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Rib_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Rib_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Rib_Vrfs) GetParentYangName() string { return "rib" }

// Rib_Vrfs_Vrf
// Specific VRF
type Rib_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the VRF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Address Family (AF) table.
    Afs Rib_Vrfs_Vrf_Afs
}

func (vrf *Rib_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Rib_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Rib_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "afs" { return "Afs" }
    return ""
}

func (vrf *Rib_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Rib_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "afs" {
        return &vrf.Afs
    }
    return nil
}

func (vrf *Rib_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["afs"] = &vrf.Afs
    return children
}

func (vrf *Rib_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Rib_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Rib_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Rib_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Rib_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Rib_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Rib_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Rib_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Rib_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Rib_Vrfs_Vrf_Afs
// Address Family (AF) table
type Rib_Vrfs_Vrf_Afs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific AF information. The type is slice of Rib_Vrfs_Vrf_Afs_Af.
    Af []Rib_Vrfs_Vrf_Afs_Af
}

func (afs *Rib_Vrfs_Vrf_Afs) GetFilter() yfilter.YFilter { return afs.YFilter }

func (afs *Rib_Vrfs_Vrf_Afs) SetFilter(yf yfilter.YFilter) { afs.YFilter = yf }

func (afs *Rib_Vrfs_Vrf_Afs) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    return ""
}

func (afs *Rib_Vrfs_Vrf_Afs) GetSegmentPath() string {
    return "afs"
}

func (afs *Rib_Vrfs_Vrf_Afs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af" {
        for _, c := range afs.Af {
            if afs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af{}
        afs.Af = append(afs.Af, child)
        return &afs.Af[len(afs.Af)-1]
    }
    return nil
}

func (afs *Rib_Vrfs_Vrf_Afs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range afs.Af {
        children[afs.Af[i].GetSegmentPath()] = &afs.Af[i]
    }
    return children
}

func (afs *Rib_Vrfs_Vrf_Afs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afs *Rib_Vrfs_Vrf_Afs) GetBundleName() string { return "cisco_ios_xr" }

func (afs *Rib_Vrfs_Vrf_Afs) GetYangName() string { return "afs" }

func (afs *Rib_Vrfs_Vrf_Afs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afs *Rib_Vrfs_Vrf_Afs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afs *Rib_Vrfs_Vrf_Afs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afs *Rib_Vrfs_Vrf_Afs) SetParent(parent types.Entity) { afs.parent = parent }

func (afs *Rib_Vrfs_Vrf_Afs) GetParent() types.Entity { return afs.parent }

func (afs *Rib_Vrfs_Vrf_Afs) GetParentYangName() string { return "vrf" }

// Rib_Vrfs_Vrf_Afs_Af
// Specific AF information
type Rib_Vrfs_Vrf_Afs_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the AF. The type is string with pattern:
    // (IPv4)|(IPv6).
    AfName interface{}

    // Subsequent Address Family (SAF) table.
    Safs Rib_Vrfs_Vrf_Afs_Af_Safs
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *Rib_Vrfs_Vrf_Afs_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "safs" { return "Safs" }
    return ""
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetSegmentPath() string {
    return "af" + "[af-name='" + fmt.Sprintf("%v", af.AfName) + "']"
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "safs" {
        return &af.Safs
    }
    return nil
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["safs"] = &af.Safs
    return children
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    return leafs
}

func (af *Rib_Vrfs_Vrf_Afs_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetYangName() string { return "af" }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *Rib_Vrfs_Vrf_Afs_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetParent() types.Entity { return af.parent }

func (af *Rib_Vrfs_Vrf_Afs_Af) GetParentYangName() string { return "afs" }

// Rib_Vrfs_Vrf_Afs_Af_Safs
// Subsequent Address Family (SAF) table
type Rib_Vrfs_Vrf_Afs_Af_Safs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific SAF information. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf.
    Saf []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetFilter() yfilter.YFilter { return safs.YFilter }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) SetFilter(yf yfilter.YFilter) { safs.YFilter = yf }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetGoName(yname string) string {
    if yname == "saf" { return "Saf" }
    return ""
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetSegmentPath() string {
    return "safs"
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "saf" {
        for _, c := range safs.Saf {
            if safs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf{}
        safs.Saf = append(safs.Saf, child)
        return &safs.Saf[len(safs.Saf)-1]
    }
    return nil
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range safs.Saf {
        children[safs.Saf[i].GetSegmentPath()] = &safs.Saf[i]
    }
    return children
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetBundleName() string { return "cisco_ios_xr" }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetYangName() string { return "safs" }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) SetParent(parent types.Entity) { safs.parent = parent }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetParent() types.Entity { return safs.parent }

func (safs *Rib_Vrfs_Vrf_Afs_Af_Safs) GetParentYangName() string { return "af" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf
// Specific SAF information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the SAF. The type is string with pattern:
    // (Unicast)|(Multicast).
    SafName interface{}

    // Global container of routes.
    IpRibRouteTableNames Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetFilter() yfilter.YFilter { return saf.YFilter }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) SetFilter(yf yfilter.YFilter) { saf.YFilter = yf }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetGoName(yname string) string {
    if yname == "saf-name" { return "SafName" }
    if yname == "ip-rib-route-table-names" { return "IpRibRouteTableNames" }
    return ""
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetSegmentPath() string {
    return "saf" + "[saf-name='" + fmt.Sprintf("%v", saf.SafName) + "']"
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-rib-route-table-names" {
        return &saf.IpRibRouteTableNames
    }
    return nil
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-rib-route-table-names"] = &saf.IpRibRouteTableNames
    return children
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["saf-name"] = saf.SafName
    return leafs
}

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetBundleName() string { return "cisco_ios_xr" }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetYangName() string { return "saf" }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) SetParent(parent types.Entity) { saf.parent = parent }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetParent() types.Entity { return saf.parent }

func (saf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetParentYangName() string { return "safs" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
// Global container of routes
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP RIB Route table name for a topology. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName.
    IpRibRouteTableName []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetFilter() yfilter.YFilter { return ipRibRouteTableNames.YFilter }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) SetFilter(yf yfilter.YFilter) { ipRibRouteTableNames.YFilter = yf }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetGoName(yname string) string {
    if yname == "ip-rib-route-table-name" { return "IpRibRouteTableName" }
    return ""
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetSegmentPath() string {
    return "ip-rib-route-table-names"
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-rib-route-table-name" {
        for _, c := range ipRibRouteTableNames.IpRibRouteTableName {
            if ipRibRouteTableNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName{}
        ipRibRouteTableNames.IpRibRouteTableName = append(ipRibRouteTableNames.IpRibRouteTableName, child)
        return &ipRibRouteTableNames.IpRibRouteTableName[len(ipRibRouteTableNames.IpRibRouteTableName)-1]
    }
    return nil
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipRibRouteTableNames.IpRibRouteTableName {
        children[ipRibRouteTableNames.IpRibRouteTableName[i].GetSegmentPath()] = &ipRibRouteTableNames.IpRibRouteTableName[i]
    }
    return children
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetBundleName() string { return "cisco_ios_xr" }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetYangName() string { return "ip-rib-route-table-names" }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) SetParent(parent types.Entity) { ipRibRouteTableNames.parent = parent }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetParent() types.Entity { return ipRibRouteTableNames.parent }

func (ipRibRouteTableNames *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetParentYangName() string { return "saf" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
// IP RIB Route table name for a topology
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the route table. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RouteTableName interface{}

    // Route information .
    Routes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes

    // Deleted.
    DeletedRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes

    // Destination KW.
    DestinationKw Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw

    // Opaque information .
    Opaques Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques

    // Contains the classification of routes by protocol.
    Protocol Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol

    // Quarantine.
    QRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes

    // Backup route information for the given table.
    BackupRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes

    // Route advertiser information .
    Adverts Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetFilter() yfilter.YFilter { return ipRibRouteTableName.YFilter }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) SetFilter(yf yfilter.YFilter) { ipRibRouteTableName.YFilter = yf }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetGoName(yname string) string {
    if yname == "route-table-name" { return "RouteTableName" }
    if yname == "routes" { return "Routes" }
    if yname == "deleted-routes" { return "DeletedRoutes" }
    if yname == "destination-kw" { return "DestinationKw" }
    if yname == "opaques" { return "Opaques" }
    if yname == "protocol" { return "Protocol" }
    if yname == "q-routes" { return "QRoutes" }
    if yname == "backup-routes" { return "BackupRoutes" }
    if yname == "adverts" { return "Adverts" }
    return ""
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetSegmentPath() string {
    return "ip-rib-route-table-name" + "[route-table-name='" + fmt.Sprintf("%v", ipRibRouteTableName.RouteTableName) + "']"
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "routes" {
        return &ipRibRouteTableName.Routes
    }
    if childYangName == "deleted-routes" {
        return &ipRibRouteTableName.DeletedRoutes
    }
    if childYangName == "destination-kw" {
        return &ipRibRouteTableName.DestinationKw
    }
    if childYangName == "opaques" {
        return &ipRibRouteTableName.Opaques
    }
    if childYangName == "protocol" {
        return &ipRibRouteTableName.Protocol
    }
    if childYangName == "q-routes" {
        return &ipRibRouteTableName.QRoutes
    }
    if childYangName == "backup-routes" {
        return &ipRibRouteTableName.BackupRoutes
    }
    if childYangName == "adverts" {
        return &ipRibRouteTableName.Adverts
    }
    return nil
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["routes"] = &ipRibRouteTableName.Routes
    children["deleted-routes"] = &ipRibRouteTableName.DeletedRoutes
    children["destination-kw"] = &ipRibRouteTableName.DestinationKw
    children["opaques"] = &ipRibRouteTableName.Opaques
    children["protocol"] = &ipRibRouteTableName.Protocol
    children["q-routes"] = &ipRibRouteTableName.QRoutes
    children["backup-routes"] = &ipRibRouteTableName.BackupRoutes
    children["adverts"] = &ipRibRouteTableName.Adverts
    return children
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-table-name"] = ipRibRouteTableName.RouteTableName
    return leafs
}

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetBundleName() string { return "cisco_ios_xr" }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetYangName() string { return "ip-rib-route-table-name" }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) SetParent(parent types.Entity) { ipRibRouteTableName.parent = parent }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetParent() types.Entity { return ipRibRouteTableName.parent }

func (ipRibRouteTableName *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetParentYangName() string { return "ip-rib-route-table-names" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes
// Route information 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route.
    Route []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetFilter() yfilter.YFilter { return routes.YFilter }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) SetFilter(yf yfilter.YFilter) { routes.YFilter = yf }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetGoName(yname string) string {
    if yname == "route" { return "Route" }
    return ""
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetSegmentPath() string {
    return "routes"
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route" {
        for _, c := range routes.Route {
            if routes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route{}
        routes.Route = append(routes.Route, child)
        return &routes.Route[len(routes.Route)-1]
    }
    return nil
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routes.Route {
        children[routes.Route[i].GetSegmentPath()] = &routes.Route[i]
    }
    return children
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetBundleName() string { return "cisco_ios_xr" }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetYangName() string { return "routes" }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) SetParent(parent types.Entity) { routes.parent = parent }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetParent() types.Entity { return routes.parent }

func (routes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
// Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // NextHop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetFilter() yfilter.YFilter { return route.YFilter }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) SetFilter(yf yfilter.YFilter) { route.YFilter = yf }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetSegmentPath() string {
    return "route"
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &route.RoutePath
    }
    return nil
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &route.RoutePath
    return children
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = route.Address
    leafs["prefix-length"] = route.PrefixLength
    leafs["next-hop-address"] = route.NextHopAddress
    leafs["interface-name"] = route.InterfaceName
    leafs["prefix"] = route.Prefix
    leafs["prefix-length-xr"] = route.PrefixLengthXr
    leafs["route-version"] = route.RouteVersion
    leafs["protocol-id"] = route.ProtocolId
    leafs["protocol-name"] = route.ProtocolName
    leafs["instance"] = route.Instance
    leafs["client-id"] = route.ClientId
    leafs["route-type"] = route.RouteType
    leafs["priority"] = route.Priority
    leafs["svd-type"] = route.SvdType
    leafs["flags"] = route.Flags
    leafs["extended-flags"] = route.ExtendedFlags
    leafs["tag"] = route.Tag
    leafs["distance"] = route.Distance
    leafs["diversion-distance"] = route.DiversionDistance
    leafs["metric"] = route.Metric
    leafs["paths-count"] = route.PathsCount
    leafs["attribute-identity"] = route.AttributeIdentity
    leafs["traffic-index"] = route.TrafficIndex
    leafs["route-precedence"] = route.RoutePrecedence
    leafs["qos-group"] = route.QosGroup
    leafs["flow-tag"] = route.FlowTag
    leafs["fwd-class"] = route.FwdClass
    leafs["pic-count"] = route.PicCount
    leafs["active"] = route.Active
    leafs["diversion"] = route.Diversion
    leafs["diversion-proto-name"] = route.DiversionProtoName
    leafs["route-age"] = route.RouteAge
    leafs["route-label"] = route.RouteLabel
    leafs["version"] = route.Version
    leafs["tbl-version"] = route.TblVersion
    leafs["route-modify-time"] = route.RouteModifyTime
    return leafs
}

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetBundleName() string { return "cisco_ios_xr" }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetYangName() string { return "route" }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) SetParent(parent types.Entity) { route.parent = parent }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetParent() types.Entity { return route.parent }

func (route *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetParentYangName() string { return "routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetParentYangName() string { return "route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes
// Deleted
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific deleted address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute.
    DeletedRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetFilter() yfilter.YFilter { return deletedRoutes.YFilter }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) SetFilter(yf yfilter.YFilter) { deletedRoutes.YFilter = yf }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetGoName(yname string) string {
    if yname == "deleted-route" { return "DeletedRoute" }
    return ""
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetSegmentPath() string {
    return "deleted-routes"
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "deleted-route" {
        for _, c := range deletedRoutes.DeletedRoute {
            if deletedRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute{}
        deletedRoutes.DeletedRoute = append(deletedRoutes.DeletedRoute, child)
        return &deletedRoutes.DeletedRoute[len(deletedRoutes.DeletedRoute)-1]
    }
    return nil
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range deletedRoutes.DeletedRoute {
        children[deletedRoutes.DeletedRoute[i].GetSegmentPath()] = &deletedRoutes.DeletedRoute[i]
    }
    return children
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetYangName() string { return "deleted-routes" }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) SetParent(parent types.Entity) { deletedRoutes.parent = parent }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetParent() types.Entity { return deletedRoutes.parent }

func (deletedRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
// Route information for a specific
// deleted address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetFilter() yfilter.YFilter { return deletedRoute.YFilter }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) SetFilter(yf yfilter.YFilter) { deletedRoute.YFilter = yf }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetSegmentPath() string {
    return "deleted-route"
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &deletedRoute.RoutePath
    }
    return nil
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &deletedRoute.RoutePath
    return children
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = deletedRoute.Address
    leafs["prefix-length"] = deletedRoute.PrefixLength
    leafs["prefix"] = deletedRoute.Prefix
    leafs["prefix-length-xr"] = deletedRoute.PrefixLengthXr
    leafs["route-version"] = deletedRoute.RouteVersion
    leafs["protocol-id"] = deletedRoute.ProtocolId
    leafs["protocol-name"] = deletedRoute.ProtocolName
    leafs["instance"] = deletedRoute.Instance
    leafs["client-id"] = deletedRoute.ClientId
    leafs["route-type"] = deletedRoute.RouteType
    leafs["priority"] = deletedRoute.Priority
    leafs["svd-type"] = deletedRoute.SvdType
    leafs["flags"] = deletedRoute.Flags
    leafs["extended-flags"] = deletedRoute.ExtendedFlags
    leafs["tag"] = deletedRoute.Tag
    leafs["distance"] = deletedRoute.Distance
    leafs["diversion-distance"] = deletedRoute.DiversionDistance
    leafs["metric"] = deletedRoute.Metric
    leafs["paths-count"] = deletedRoute.PathsCount
    leafs["attribute-identity"] = deletedRoute.AttributeIdentity
    leafs["traffic-index"] = deletedRoute.TrafficIndex
    leafs["route-precedence"] = deletedRoute.RoutePrecedence
    leafs["qos-group"] = deletedRoute.QosGroup
    leafs["flow-tag"] = deletedRoute.FlowTag
    leafs["fwd-class"] = deletedRoute.FwdClass
    leafs["pic-count"] = deletedRoute.PicCount
    leafs["active"] = deletedRoute.Active
    leafs["diversion"] = deletedRoute.Diversion
    leafs["diversion-proto-name"] = deletedRoute.DiversionProtoName
    leafs["route-age"] = deletedRoute.RouteAge
    leafs["route-label"] = deletedRoute.RouteLabel
    leafs["version"] = deletedRoute.Version
    leafs["tbl-version"] = deletedRoute.TblVersion
    leafs["route-modify-time"] = deletedRoute.RouteModifyTime
    return leafs
}

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetBundleName() string { return "cisco_ios_xr" }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetYangName() string { return "deleted-route" }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) SetParent(parent types.Entity) { deletedRoute.parent = parent }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetParent() types.Entity { return deletedRoute.parent }

func (deletedRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetParentYangName() string { return "deleted-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetParentYangName() string { return "deleted-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw
// Destination KW
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Best Local.
    DestBestRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes

    // Quarantine.
    DestQRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes

    // Backup.
    DestBackupRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes

    // Resolving next hop.
    DestNextHopRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetFilter() yfilter.YFilter { return destinationKw.YFilter }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) SetFilter(yf yfilter.YFilter) { destinationKw.YFilter = yf }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetGoName(yname string) string {
    if yname == "dest-best-routes" { return "DestBestRoutes" }
    if yname == "dest-q-routes" { return "DestQRoutes" }
    if yname == "dest-backup-routes" { return "DestBackupRoutes" }
    if yname == "dest-next-hop-routes" { return "DestNextHopRoutes" }
    return ""
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetSegmentPath() string {
    return "destination-kw"
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-best-routes" {
        return &destinationKw.DestBestRoutes
    }
    if childYangName == "dest-q-routes" {
        return &destinationKw.DestQRoutes
    }
    if childYangName == "dest-backup-routes" {
        return &destinationKw.DestBackupRoutes
    }
    if childYangName == "dest-next-hop-routes" {
        return &destinationKw.DestNextHopRoutes
    }
    return nil
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dest-best-routes"] = &destinationKw.DestBestRoutes
    children["dest-q-routes"] = &destinationKw.DestQRoutes
    children["dest-backup-routes"] = &destinationKw.DestBackupRoutes
    children["dest-next-hop-routes"] = &destinationKw.DestNextHopRoutes
    return children
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetBundleName() string { return "cisco_ios_xr" }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetYangName() string { return "destination-kw" }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) SetParent(parent types.Entity) { destinationKw.parent = parent }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetParent() types.Entity { return destinationKw.parent }

func (destinationKw *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes
// Best Local
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Best local route information for a specific Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute.
    DestBestRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetFilter() yfilter.YFilter { return destBestRoutes.YFilter }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) SetFilter(yf yfilter.YFilter) { destBestRoutes.YFilter = yf }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetGoName(yname string) string {
    if yname == "dest-best-route" { return "DestBestRoute" }
    return ""
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetSegmentPath() string {
    return "dest-best-routes"
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-best-route" {
        for _, c := range destBestRoutes.DestBestRoute {
            if destBestRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute{}
        destBestRoutes.DestBestRoute = append(destBestRoutes.DestBestRoute, child)
        return &destBestRoutes.DestBestRoute[len(destBestRoutes.DestBestRoute)-1]
    }
    return nil
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destBestRoutes.DestBestRoute {
        children[destBestRoutes.DestBestRoute[i].GetSegmentPath()] = &destBestRoutes.DestBestRoute[i]
    }
    return children
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetYangName() string { return "dest-best-routes" }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) SetParent(parent types.Entity) { destBestRoutes.parent = parent }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetParent() types.Entity { return destBestRoutes.parent }

func (destBestRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetParentYangName() string { return "destination-kw" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
// Best local route information for a
// specific Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetFilter() yfilter.YFilter { return destBestRoute.YFilter }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) SetFilter(yf yfilter.YFilter) { destBestRoute.YFilter = yf }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetSegmentPath() string {
    return "dest-best-route" + "[address='" + fmt.Sprintf("%v", destBestRoute.Address) + "']"
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destBestRoute.RoutePath
    }
    return nil
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destBestRoute.RoutePath
    return children
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destBestRoute.Address
    leafs["prefix"] = destBestRoute.Prefix
    leafs["prefix-length-xr"] = destBestRoute.PrefixLengthXr
    leafs["route-version"] = destBestRoute.RouteVersion
    leafs["protocol-id"] = destBestRoute.ProtocolId
    leafs["protocol-name"] = destBestRoute.ProtocolName
    leafs["instance"] = destBestRoute.Instance
    leafs["client-id"] = destBestRoute.ClientId
    leafs["route-type"] = destBestRoute.RouteType
    leafs["priority"] = destBestRoute.Priority
    leafs["svd-type"] = destBestRoute.SvdType
    leafs["flags"] = destBestRoute.Flags
    leafs["extended-flags"] = destBestRoute.ExtendedFlags
    leafs["tag"] = destBestRoute.Tag
    leafs["distance"] = destBestRoute.Distance
    leafs["diversion-distance"] = destBestRoute.DiversionDistance
    leafs["metric"] = destBestRoute.Metric
    leafs["paths-count"] = destBestRoute.PathsCount
    leafs["attribute-identity"] = destBestRoute.AttributeIdentity
    leafs["traffic-index"] = destBestRoute.TrafficIndex
    leafs["route-precedence"] = destBestRoute.RoutePrecedence
    leafs["qos-group"] = destBestRoute.QosGroup
    leafs["flow-tag"] = destBestRoute.FlowTag
    leafs["fwd-class"] = destBestRoute.FwdClass
    leafs["pic-count"] = destBestRoute.PicCount
    leafs["active"] = destBestRoute.Active
    leafs["diversion"] = destBestRoute.Diversion
    leafs["diversion-proto-name"] = destBestRoute.DiversionProtoName
    leafs["route-age"] = destBestRoute.RouteAge
    leafs["route-label"] = destBestRoute.RouteLabel
    leafs["version"] = destBestRoute.Version
    leafs["tbl-version"] = destBestRoute.TblVersion
    leafs["route-modify-time"] = destBestRoute.RouteModifyTime
    return leafs
}

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetYangName() string { return "dest-best-route" }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) SetParent(parent types.Entity) { destBestRoute.parent = parent }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetParent() types.Entity { return destBestRoute.parent }

func (destBestRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetParentYangName() string { return "dest-best-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetParentYangName() string { return "dest-best-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes
// Quarantine
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute.
    DestQRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetFilter() yfilter.YFilter { return destQRoutes.YFilter }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) SetFilter(yf yfilter.YFilter) { destQRoutes.YFilter = yf }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetGoName(yname string) string {
    if yname == "dest-q-route" { return "DestQRoute" }
    return ""
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetSegmentPath() string {
    return "dest-q-routes"
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-q-route" {
        for _, c := range destQRoutes.DestQRoute {
            if destQRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute{}
        destQRoutes.DestQRoute = append(destQRoutes.DestQRoute, child)
        return &destQRoutes.DestQRoute[len(destQRoutes.DestQRoute)-1]
    }
    return nil
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destQRoutes.DestQRoute {
        children[destQRoutes.DestQRoute[i].GetSegmentPath()] = &destQRoutes.DestQRoute[i]
    }
    return children
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetYangName() string { return "dest-q-routes" }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) SetParent(parent types.Entity) { destQRoutes.parent = parent }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetParent() types.Entity { return destQRoutes.parent }

func (destQRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetParentYangName() string { return "destination-kw" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
// Route information of a specific Backup
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetFilter() yfilter.YFilter { return destQRoute.YFilter }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) SetFilter(yf yfilter.YFilter) { destQRoute.YFilter = yf }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetSegmentPath() string {
    return "dest-q-route"
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destQRoute.RoutePath
    }
    return nil
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destQRoute.RoutePath
    return children
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destQRoute.Address
    leafs["prefix-length"] = destQRoute.PrefixLength
    leafs["prefix"] = destQRoute.Prefix
    leafs["prefix-length-xr"] = destQRoute.PrefixLengthXr
    leafs["route-version"] = destQRoute.RouteVersion
    leafs["protocol-id"] = destQRoute.ProtocolId
    leafs["protocol-name"] = destQRoute.ProtocolName
    leafs["instance"] = destQRoute.Instance
    leafs["client-id"] = destQRoute.ClientId
    leafs["route-type"] = destQRoute.RouteType
    leafs["priority"] = destQRoute.Priority
    leafs["svd-type"] = destQRoute.SvdType
    leafs["flags"] = destQRoute.Flags
    leafs["extended-flags"] = destQRoute.ExtendedFlags
    leafs["tag"] = destQRoute.Tag
    leafs["distance"] = destQRoute.Distance
    leafs["diversion-distance"] = destQRoute.DiversionDistance
    leafs["metric"] = destQRoute.Metric
    leafs["paths-count"] = destQRoute.PathsCount
    leafs["attribute-identity"] = destQRoute.AttributeIdentity
    leafs["traffic-index"] = destQRoute.TrafficIndex
    leafs["route-precedence"] = destQRoute.RoutePrecedence
    leafs["qos-group"] = destQRoute.QosGroup
    leafs["flow-tag"] = destQRoute.FlowTag
    leafs["fwd-class"] = destQRoute.FwdClass
    leafs["pic-count"] = destQRoute.PicCount
    leafs["active"] = destQRoute.Active
    leafs["diversion"] = destQRoute.Diversion
    leafs["diversion-proto-name"] = destQRoute.DiversionProtoName
    leafs["route-age"] = destQRoute.RouteAge
    leafs["route-label"] = destQRoute.RouteLabel
    leafs["version"] = destQRoute.Version
    leafs["tbl-version"] = destQRoute.TblVersion
    leafs["route-modify-time"] = destQRoute.RouteModifyTime
    return leafs
}

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetYangName() string { return "dest-q-route" }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) SetParent(parent types.Entity) { destQRoute.parent = parent }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetParent() types.Entity { return destQRoute.parent }

func (destQRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetParentYangName() string { return "dest-q-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetParentYangName() string { return "dest-q-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes
// Backup
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute.
    DestBackupRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetFilter() yfilter.YFilter { return destBackupRoutes.YFilter }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) SetFilter(yf yfilter.YFilter) { destBackupRoutes.YFilter = yf }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetGoName(yname string) string {
    if yname == "dest-backup-route" { return "DestBackupRoute" }
    return ""
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetSegmentPath() string {
    return "dest-backup-routes"
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-backup-route" {
        for _, c := range destBackupRoutes.DestBackupRoute {
            if destBackupRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute{}
        destBackupRoutes.DestBackupRoute = append(destBackupRoutes.DestBackupRoute, child)
        return &destBackupRoutes.DestBackupRoute[len(destBackupRoutes.DestBackupRoute)-1]
    }
    return nil
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destBackupRoutes.DestBackupRoute {
        children[destBackupRoutes.DestBackupRoute[i].GetSegmentPath()] = &destBackupRoutes.DestBackupRoute[i]
    }
    return children
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetYangName() string { return "dest-backup-routes" }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) SetParent(parent types.Entity) { destBackupRoutes.parent = parent }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetParent() types.Entity { return destBackupRoutes.parent }

func (destBackupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetParentYangName() string { return "destination-kw" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
// Route information of a specific Backup
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetFilter() yfilter.YFilter { return destBackupRoute.YFilter }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) SetFilter(yf yfilter.YFilter) { destBackupRoute.YFilter = yf }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetSegmentPath() string {
    return "dest-backup-route"
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destBackupRoute.RoutePath
    }
    return nil
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destBackupRoute.RoutePath
    return children
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destBackupRoute.Address
    leafs["prefix-length"] = destBackupRoute.PrefixLength
    leafs["prefix"] = destBackupRoute.Prefix
    leafs["prefix-length-xr"] = destBackupRoute.PrefixLengthXr
    leafs["route-version"] = destBackupRoute.RouteVersion
    leafs["protocol-id"] = destBackupRoute.ProtocolId
    leafs["protocol-name"] = destBackupRoute.ProtocolName
    leafs["instance"] = destBackupRoute.Instance
    leafs["client-id"] = destBackupRoute.ClientId
    leafs["route-type"] = destBackupRoute.RouteType
    leafs["priority"] = destBackupRoute.Priority
    leafs["svd-type"] = destBackupRoute.SvdType
    leafs["flags"] = destBackupRoute.Flags
    leafs["extended-flags"] = destBackupRoute.ExtendedFlags
    leafs["tag"] = destBackupRoute.Tag
    leafs["distance"] = destBackupRoute.Distance
    leafs["diversion-distance"] = destBackupRoute.DiversionDistance
    leafs["metric"] = destBackupRoute.Metric
    leafs["paths-count"] = destBackupRoute.PathsCount
    leafs["attribute-identity"] = destBackupRoute.AttributeIdentity
    leafs["traffic-index"] = destBackupRoute.TrafficIndex
    leafs["route-precedence"] = destBackupRoute.RoutePrecedence
    leafs["qos-group"] = destBackupRoute.QosGroup
    leafs["flow-tag"] = destBackupRoute.FlowTag
    leafs["fwd-class"] = destBackupRoute.FwdClass
    leafs["pic-count"] = destBackupRoute.PicCount
    leafs["active"] = destBackupRoute.Active
    leafs["diversion"] = destBackupRoute.Diversion
    leafs["diversion-proto-name"] = destBackupRoute.DiversionProtoName
    leafs["route-age"] = destBackupRoute.RouteAge
    leafs["route-label"] = destBackupRoute.RouteLabel
    leafs["version"] = destBackupRoute.Version
    leafs["tbl-version"] = destBackupRoute.TblVersion
    leafs["route-modify-time"] = destBackupRoute.RouteModifyTime
    return leafs
}

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetYangName() string { return "dest-backup-route" }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) SetParent(parent types.Entity) { destBackupRoute.parent = parent }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetParent() types.Entity { return destBackupRoute.parent }

func (destBackupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetParentYangName() string { return "dest-backup-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetParentYangName() string { return "dest-backup-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
// Resolving next hop
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop information for a specific address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute.
    DestNextHopRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetFilter() yfilter.YFilter { return destNextHopRoutes.YFilter }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) SetFilter(yf yfilter.YFilter) { destNextHopRoutes.YFilter = yf }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetGoName(yname string) string {
    if yname == "dest-next-hop-route" { return "DestNextHopRoute" }
    return ""
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetSegmentPath() string {
    return "dest-next-hop-routes"
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-next-hop-route" {
        for _, c := range destNextHopRoutes.DestNextHopRoute {
            if destNextHopRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute{}
        destNextHopRoutes.DestNextHopRoute = append(destNextHopRoutes.DestNextHopRoute, child)
        return &destNextHopRoutes.DestNextHopRoute[len(destNextHopRoutes.DestNextHopRoute)-1]
    }
    return nil
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destNextHopRoutes.DestNextHopRoute {
        children[destNextHopRoutes.DestNextHopRoute[i].GetSegmentPath()] = &destNextHopRoutes.DestNextHopRoute[i]
    }
    return children
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetYangName() string { return "dest-next-hop-routes" }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) SetParent(parent types.Entity) { destNextHopRoutes.parent = parent }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetParent() types.Entity { return destNextHopRoutes.parent }

func (destNextHopRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetParentYangName() string { return "destination-kw" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
// Nexthop information for a specific
// address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetFilter() yfilter.YFilter { return destNextHopRoute.YFilter }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) SetFilter(yf yfilter.YFilter) { destNextHopRoute.YFilter = yf }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetSegmentPath() string {
    return "dest-next-hop-route" + "[address='" + fmt.Sprintf("%v", destNextHopRoute.Address) + "']"
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &destNextHopRoute.RoutePath
    }
    return nil
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &destNextHopRoute.RoutePath
    return children
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = destNextHopRoute.Address
    leafs["prefix"] = destNextHopRoute.Prefix
    leafs["prefix-length-xr"] = destNextHopRoute.PrefixLengthXr
    leafs["route-version"] = destNextHopRoute.RouteVersion
    leafs["protocol-id"] = destNextHopRoute.ProtocolId
    leafs["protocol-name"] = destNextHopRoute.ProtocolName
    leafs["instance"] = destNextHopRoute.Instance
    leafs["client-id"] = destNextHopRoute.ClientId
    leafs["route-type"] = destNextHopRoute.RouteType
    leafs["priority"] = destNextHopRoute.Priority
    leafs["svd-type"] = destNextHopRoute.SvdType
    leafs["flags"] = destNextHopRoute.Flags
    leafs["extended-flags"] = destNextHopRoute.ExtendedFlags
    leafs["tag"] = destNextHopRoute.Tag
    leafs["distance"] = destNextHopRoute.Distance
    leafs["diversion-distance"] = destNextHopRoute.DiversionDistance
    leafs["metric"] = destNextHopRoute.Metric
    leafs["paths-count"] = destNextHopRoute.PathsCount
    leafs["attribute-identity"] = destNextHopRoute.AttributeIdentity
    leafs["traffic-index"] = destNextHopRoute.TrafficIndex
    leafs["route-precedence"] = destNextHopRoute.RoutePrecedence
    leafs["qos-group"] = destNextHopRoute.QosGroup
    leafs["flow-tag"] = destNextHopRoute.FlowTag
    leafs["fwd-class"] = destNextHopRoute.FwdClass
    leafs["pic-count"] = destNextHopRoute.PicCount
    leafs["active"] = destNextHopRoute.Active
    leafs["diversion"] = destNextHopRoute.Diversion
    leafs["diversion-proto-name"] = destNextHopRoute.DiversionProtoName
    leafs["route-age"] = destNextHopRoute.RouteAge
    leafs["route-label"] = destNextHopRoute.RouteLabel
    leafs["version"] = destNextHopRoute.Version
    leafs["tbl-version"] = destNextHopRoute.TblVersion
    leafs["route-modify-time"] = destNextHopRoute.RouteModifyTime
    return leafs
}

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetBundleName() string { return "cisco_ios_xr" }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetYangName() string { return "dest-next-hop-route" }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) SetParent(parent types.Entity) { destNextHopRoute.parent = parent }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetParent() types.Entity { return destNextHopRoute.parent }

func (destNextHopRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetParentYangName() string { return "dest-next-hop-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetParentYangName() string { return "dest-next-hop-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques
// Opaque information 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Opaque item . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque.
    Opaque []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetFilter() yfilter.YFilter { return opaques.YFilter }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) SetFilter(yf yfilter.YFilter) { opaques.YFilter = yf }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetGoName(yname string) string {
    if yname == "opaque" { return "Opaque" }
    return ""
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetSegmentPath() string {
    return "opaques"
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "opaque" {
        for _, c := range opaques.Opaque {
            if opaques.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque{}
        opaques.Opaque = append(opaques.Opaque, child)
        return &opaques.Opaque[len(opaques.Opaque)-1]
    }
    return nil
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range opaques.Opaque {
        children[opaques.Opaque[i].GetSegmentPath()] = &opaques.Opaque[i]
    }
    return children
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetBundleName() string { return "cisco_ios_xr" }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetYangName() string { return "opaques" }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) SetParent(parent types.Entity) { opaques.parent = parent }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetParent() types.Entity { return opaques.parent }

func (opaques *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque
// Opaque item 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Opaque Client ID. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueClientid interface{}

    // Opaque Proto ID. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueProtoid interface{}

    // Opaque key type. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueKeyType interface{}

    // Opaque key size. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueKeySize interface{}

    // Opaque data size. The type is interface{} with range:
    // -2147483648..2147483647.
    OpaqueDataSize interface{}

    // Opaque string. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    OpaqueString interface{}

    // key. The type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Key interface{}

    // data. The type is string with pattern: ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Data interface{}
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetFilter() yfilter.YFilter { return opaque.YFilter }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) SetFilter(yf yfilter.YFilter) { opaque.YFilter = yf }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetGoName(yname string) string {
    if yname == "opaque-clientid" { return "OpaqueClientid" }
    if yname == "opaque-protoid" { return "OpaqueProtoid" }
    if yname == "opaque-key-type" { return "OpaqueKeyType" }
    if yname == "opaque-key-size" { return "OpaqueKeySize" }
    if yname == "opaque-data-size" { return "OpaqueDataSize" }
    if yname == "opaque-string" { return "OpaqueString" }
    if yname == "key" { return "Key" }
    if yname == "data" { return "Data" }
    return ""
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetSegmentPath() string {
    return "opaque"
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["opaque-clientid"] = opaque.OpaqueClientid
    leafs["opaque-protoid"] = opaque.OpaqueProtoid
    leafs["opaque-key-type"] = opaque.OpaqueKeyType
    leafs["opaque-key-size"] = opaque.OpaqueKeySize
    leafs["opaque-data-size"] = opaque.OpaqueDataSize
    leafs["opaque-string"] = opaque.OpaqueString
    leafs["key"] = opaque.Key
    leafs["data"] = opaque.Data
    return leafs
}

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetBundleName() string { return "cisco_ios_xr" }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetYangName() string { return "opaque" }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) SetParent(parent types.Entity) { opaque.parent = parent }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetParent() types.Entity { return opaque.parent }

func (opaque *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Opaques_Opaque) GetParentYangName() string { return "opaques" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol
// Contains the classification of routes by
// protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mobile Protocol.
    Mobile Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile

    // Subscriber Protocol.
    Subscriber Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber

    // Connected Protocol.
    Connected Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected

    // DAGR Protocol(Direct-Attached Gateway Redundancy) Protocol.
    Dagr Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr

    // RIP Protocol.
    Rip Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip

    // OSPF Protocol.
    Ospf Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf

    // Static Protocol.
    Static Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static

    // RPL Protocol.
    Rpl Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl

    // Application Protocol.
    Application Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application

    // TEClient Protocol.
    TeClient Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient

    // EIGRP Protocol.
    Eigrp Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp

    // Local Protocol.
    Local Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local

    // BGP Protocol.
    Bgp Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp

    // ISIS Protocol.
    Isis Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetGoName(yname string) string {
    if yname == "mobile" { return "Mobile" }
    if yname == "subscriber" { return "Subscriber" }
    if yname == "connected" { return "Connected" }
    if yname == "dagr" { return "Dagr" }
    if yname == "rip" { return "Rip" }
    if yname == "ospf" { return "Ospf" }
    if yname == "static" { return "Static" }
    if yname == "rpl" { return "Rpl" }
    if yname == "application" { return "Application" }
    if yname == "te-client" { return "TeClient" }
    if yname == "eigrp" { return "Eigrp" }
    if yname == "local" { return "Local" }
    if yname == "bgp" { return "Bgp" }
    if yname == "isis" { return "Isis" }
    return ""
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetSegmentPath() string {
    return "protocol"
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mobile" {
        return &protocol.Mobile
    }
    if childYangName == "subscriber" {
        return &protocol.Subscriber
    }
    if childYangName == "connected" {
        return &protocol.Connected
    }
    if childYangName == "dagr" {
        return &protocol.Dagr
    }
    if childYangName == "rip" {
        return &protocol.Rip
    }
    if childYangName == "ospf" {
        return &protocol.Ospf
    }
    if childYangName == "static" {
        return &protocol.Static
    }
    if childYangName == "rpl" {
        return &protocol.Rpl
    }
    if childYangName == "application" {
        return &protocol.Application
    }
    if childYangName == "te-client" {
        return &protocol.TeClient
    }
    if childYangName == "eigrp" {
        return &protocol.Eigrp
    }
    if childYangName == "local" {
        return &protocol.Local
    }
    if childYangName == "bgp" {
        return &protocol.Bgp
    }
    if childYangName == "isis" {
        return &protocol.Isis
    }
    return nil
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mobile"] = &protocol.Mobile
    children["subscriber"] = &protocol.Subscriber
    children["connected"] = &protocol.Connected
    children["dagr"] = &protocol.Dagr
    children["rip"] = &protocol.Rip
    children["ospf"] = &protocol.Ospf
    children["static"] = &protocol.Static
    children["rpl"] = &protocol.Rpl
    children["application"] = &protocol.Application
    children["te-client"] = &protocol.TeClient
    children["eigrp"] = &protocol.Eigrp
    children["local"] = &protocol.Local
    children["bgp"] = &protocol.Bgp
    children["isis"] = &protocol.Isis
    return children
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetYangName() string { return "protocol" }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile
// Mobile Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetFilter() yfilter.YFilter { return mobile.YFilter }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) SetFilter(yf yfilter.YFilter) { mobile.YFilter = yf }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetSegmentPath() string {
    return "mobile"
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &mobile.NonAs
    }
    return nil
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &mobile.NonAs
    return children
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetBundleName() string { return "cisco_ios_xr" }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetYangName() string { return "mobile" }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) SetParent(parent types.Entity) { mobile.parent = parent }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetParent() types.Entity { return mobile.parent }

func (mobile *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetParentYangName() string { return "mobile" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber
// Subscriber Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetFilter() yfilter.YFilter { return subscriber.YFilter }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) SetFilter(yf yfilter.YFilter) { subscriber.YFilter = yf }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetSegmentPath() string {
    return "subscriber"
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &subscriber.NonAs
    }
    return nil
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &subscriber.NonAs
    return children
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetBundleName() string { return "cisco_ios_xr" }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetYangName() string { return "subscriber" }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) SetParent(parent types.Entity) { subscriber.parent = parent }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetParent() types.Entity { return subscriber.parent }

func (subscriber *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetParentYangName() string { return "subscriber" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected
// Connected Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetFilter() yfilter.YFilter { return connected.YFilter }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) SetFilter(yf yfilter.YFilter) { connected.YFilter = yf }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetSegmentPath() string {
    return "connected"
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &connected.NonAs
    }
    return nil
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &connected.NonAs
    return children
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetBundleName() string { return "cisco_ios_xr" }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetYangName() string { return "connected" }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) SetParent(parent types.Entity) { connected.parent = parent }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetParent() types.Entity { return connected.parent }

func (connected *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetParentYangName() string { return "connected" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr
// DAGR Protocol(Direct-Attached Gateway
// Redundancy) Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetFilter() yfilter.YFilter { return dagr.YFilter }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) SetFilter(yf yfilter.YFilter) { dagr.YFilter = yf }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetSegmentPath() string {
    return "dagr"
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &dagr.NonAs
    }
    return nil
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &dagr.NonAs
    return children
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetBundleName() string { return "cisco_ios_xr" }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetYangName() string { return "dagr" }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) SetParent(parent types.Entity) { dagr.parent = parent }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetParent() types.Entity { return dagr.parent }

func (dagr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs) GetParentYangName() string { return "dagr" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Dagr_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip
// RIP Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetFilter() yfilter.YFilter { return rip.YFilter }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) SetFilter(yf yfilter.YFilter) { rip.YFilter = yf }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetSegmentPath() string {
    return "rip"
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &rip.NonAs
    }
    return nil
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &rip.NonAs
    return children
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetBundleName() string { return "cisco_ios_xr" }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetYangName() string { return "rip" }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) SetParent(parent types.Entity) { rip.parent = parent }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetParent() types.Entity { return rip.parent }

func (rip *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs) GetParentYangName() string { return "rip" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rip_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf
// OSPF Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As.
    As []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetFilter() yfilter.YFilter { return ospf.YFilter }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) SetFilter(yf yfilter.YFilter) { ospf.YFilter = yf }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetSegmentPath() string {
    return "ospf"
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range ospf.As {
            if ospf.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As{}
        ospf.As = append(ospf.As, child)
        return &ospf.As[len(ospf.As)-1]
    }
    return nil
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ospf.As {
        children[ospf.As[i].GetSegmentPath()] = &ospf.As[i]
    }
    return children
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetBundleName() string { return "cisco_ios_xr" }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetYangName() string { return "ospf" }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) SetParent(parent types.Entity) { ospf.parent = parent }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetParent() types.Entity { return ospf.parent }

func (ospf *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
// Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetYangName() string { return "as" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetParent() types.Entity { return as.parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetParentYangName() string { return "ospf" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static
// Static Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetFilter() yfilter.YFilter { return static.YFilter }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) SetFilter(yf yfilter.YFilter) { static.YFilter = yf }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetSegmentPath() string {
    return "static"
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &static.NonAs
    }
    return nil
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &static.NonAs
    return children
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetBundleName() string { return "cisco_ios_xr" }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetYangName() string { return "static" }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) SetParent(parent types.Entity) { static.parent = parent }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetParent() types.Entity { return static.parent }

func (static *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetParentYangName() string { return "static" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl
// RPL Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As.
    As []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetFilter() yfilter.YFilter { return rpl.YFilter }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) SetFilter(yf yfilter.YFilter) { rpl.YFilter = yf }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetSegmentPath() string {
    return "rpl"
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range rpl.As {
            if rpl.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As{}
        rpl.As = append(rpl.As, child)
        return &rpl.As[len(rpl.As)-1]
    }
    return nil
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rpl.As {
        children[rpl.As[i].GetSegmentPath()] = &rpl.As[i]
    }
    return children
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetBundleName() string { return "cisco_ios_xr" }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetYangName() string { return "rpl" }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) SetParent(parent types.Entity) { rpl.parent = parent }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetParent() types.Entity { return rpl.parent }

func (rpl *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
// Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetYangName() string { return "as" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetParent() types.Entity { return as.parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetParentYangName() string { return "rpl" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application
// Application Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetSegmentPath() string {
    return "application"
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &application.NonAs
    }
    return nil
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &application.NonAs
    return children
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetYangName() string { return "application" }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetParent() types.Entity { return application.parent }

func (application *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs) GetParentYangName() string { return "application" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Application_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient
// TEClient Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetFilter() yfilter.YFilter { return teClient.YFilter }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) SetFilter(yf yfilter.YFilter) { teClient.YFilter = yf }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetGoName(yname string) string {
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetSegmentPath() string {
    return "te-client"
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "non-as" {
        return &teClient.NonAs
    }
    return nil
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["non-as"] = &teClient.NonAs
    return children
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetBundleName() string { return "cisco_ios_xr" }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetYangName() string { return "te-client" }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) SetParent(parent types.Entity) { teClient.parent = parent }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetParent() types.Entity { return teClient.parent }

func (teClient *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetParentYangName() string { return "te-client" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp
// EIGRP Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As.
    As []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetSegmentPath() string {
    return "eigrp"
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range eigrp.As {
            if eigrp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As{}
        eigrp.As = append(eigrp.As, child)
        return &eigrp.As[len(eigrp.As)-1]
    }
    return nil
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eigrp.As {
        children[eigrp.As[i].GetSegmentPath()] = &eigrp.As[i]
    }
    return children
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
// Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetYangName() string { return "as" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetParent() types.Entity { return as.parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetParentYangName() string { return "eigrp" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local
// Local Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SMIAP.
    Smiap Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap

    // LSPV(Label Switched Path Verification) Protocol.
    Lspv Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv

    // Non Autonomous System of protocol.
    NonAs Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetGoName(yname string) string {
    if yname == "smiap" { return "Smiap" }
    if yname == "lspv" { return "Lspv" }
    if yname == "non-as" { return "NonAs" }
    return ""
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetSegmentPath() string {
    return "local"
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "smiap" {
        return &local.Smiap
    }
    if childYangName == "lspv" {
        return &local.Lspv
    }
    if childYangName == "non-as" {
        return &local.NonAs
    }
    return nil
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["smiap"] = &local.Smiap
    children["lspv"] = &local.Lspv
    children["non-as"] = &local.NonAs
    return children
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetYangName() string { return "local" }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetParent() types.Entity { return local.parent }

func (local *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap
// SMIAP
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetFilter() yfilter.YFilter { return smiap.YFilter }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) SetFilter(yf yfilter.YFilter) { smiap.YFilter = yf }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetSegmentPath() string {
    return "smiap"
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &smiap.ProtocolRoutes
    }
    if childYangName == "information" {
        return &smiap.Information
    }
    return nil
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &smiap.ProtocolRoutes
    children["information"] = &smiap.Information
    return children
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetBundleName() string { return "cisco_ios_xr" }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetYangName() string { return "smiap" }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) SetParent(parent types.Entity) { smiap.parent = parent }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetParent() types.Entity { return smiap.parent }

func (smiap *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap) GetParentYangName() string { return "local" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes) GetParentYangName() string { return "smiap" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Smiap_Information) GetParentYangName() string { return "smiap" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv
// LSPV(Label Switched Path Verification)
// Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetFilter() yfilter.YFilter { return lspv.YFilter }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) SetFilter(yf yfilter.YFilter) { lspv.YFilter = yf }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetSegmentPath() string {
    return "lspv"
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &lspv.ProtocolRoutes
    }
    if childYangName == "information" {
        return &lspv.Information
    }
    return nil
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &lspv.ProtocolRoutes
    children["information"] = &lspv.Information
    return children
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetBundleName() string { return "cisco_ios_xr" }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetYangName() string { return "lspv" }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) SetParent(parent types.Entity) { lspv.parent = parent }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetParent() types.Entity { return lspv.parent }

func (lspv *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetParentYangName() string { return "local" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetParentYangName() string { return "lspv" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetParentYangName() string { return "lspv" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
// Non Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetFilter() yfilter.YFilter { return nonAs.YFilter }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) SetFilter(yf yfilter.YFilter) { nonAs.YFilter = yf }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetGoName(yname string) string {
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetSegmentPath() string {
    return "non-as"
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &nonAs.ProtocolRoutes
    }
    if childYangName == "information" {
        return &nonAs.Information
    }
    return nil
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &nonAs.ProtocolRoutes
    children["information"] = &nonAs.Information
    return children
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetBundleName() string { return "cisco_ios_xr" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetYangName() string { return "non-as" }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) SetParent(parent types.Entity) { nonAs.parent = parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetParent() types.Entity { return nonAs.parent }

func (nonAs *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetParentYangName() string { return "local" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetParentYangName() string { return "non-as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp
// BGP Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As.
    As []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetSegmentPath() string {
    return "bgp"
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range bgp.As {
            if bgp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As{}
        bgp.As = append(bgp.As, child)
        return &bgp.As[len(bgp.As)-1]
    }
    return nil
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bgp.As {
        children[bgp.As[i].GetSegmentPath()] = &bgp.As[i]
    }
    return children
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetYangName() string { return "bgp" }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
// Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetYangName() string { return "as" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetParent() types.Entity { return as.parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetParentYangName() string { return "bgp" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
// ISIS Protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As.
    As []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetFilter() yfilter.YFilter { return isis.YFilter }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) SetFilter(yf yfilter.YFilter) { isis.YFilter = yf }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetSegmentPath() string {
    return "isis"
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range isis.As {
            if isis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As{}
        isis.As = append(isis.As, child)
        return &isis.As[len(isis.As)-1]
    }
    return nil
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range isis.As {
        children[isis.As[i].GetSegmentPath()] = &isis.As[i]
    }
    return children
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetBundleName() string { return "cisco_ios_xr" }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetYangName() string { return "isis" }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) SetParent(parent types.Entity) { isis.parent = parent }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetParent() types.Entity { return isis.parent }

func (isis *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetParentYangName() string { return "protocol" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
// Autonomous System of protocol
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol specific Route.
    ProtocolRoutes Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes

    // Protocol related Information.
    Information Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "protocol-routes" { return "ProtocolRoutes" }
    if yname == "information" { return "Information" }
    return ""
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetSegmentPath() string {
    return "as" + "[as='" + fmt.Sprintf("%v", as.As) + "']"
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-routes" {
        return &as.ProtocolRoutes
    }
    if childYangName == "information" {
        return &as.Information
    }
    return nil
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-routes"] = &as.ProtocolRoutes
    children["information"] = &as.Information
    return children
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = as.As
    return leafs
}

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetYangName() string { return "as" }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetParent() types.Entity { return as.parent }

func (as *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetParentYangName() string { return "isis" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
// Protocol specific Route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetFilter() yfilter.YFilter { return protocolRoutes.YFilter }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) SetFilter(yf yfilter.YFilter) { protocolRoutes.YFilter = yf }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetGoName(yname string) string {
    if yname == "protocol-route" { return "ProtocolRoute" }
    return ""
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetSegmentPath() string {
    return "protocol-routes"
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-route" {
        for _, c := range protocolRoutes.ProtocolRoute {
            if protocolRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute{}
        protocolRoutes.ProtocolRoute = append(protocolRoutes.ProtocolRoute, child)
        return &protocolRoutes.ProtocolRoute[len(protocolRoutes.ProtocolRoute)-1]
    }
    return nil
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolRoutes.ProtocolRoute {
        children[protocolRoutes.ProtocolRoute[i].GetSegmentPath()] = &protocolRoutes.ProtocolRoute[i]
    }
    return children
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetYangName() string { return "protocol-routes" }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) SetParent(parent types.Entity) { protocolRoutes.parent = parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetParent() types.Entity { return protocolRoutes.parent }

func (protocolRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
//  Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetFilter() yfilter.YFilter { return protocolRoute.YFilter }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) SetFilter(yf yfilter.YFilter) { protocolRoute.YFilter = yf }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetSegmentPath() string {
    return "protocol-route"
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &protocolRoute.RoutePath
    }
    return nil
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &protocolRoute.RoutePath
    return children
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = protocolRoute.Address
    leafs["prefix-length"] = protocolRoute.PrefixLength
    leafs["prefix"] = protocolRoute.Prefix
    leafs["prefix-length-xr"] = protocolRoute.PrefixLengthXr
    leafs["route-version"] = protocolRoute.RouteVersion
    leafs["protocol-id"] = protocolRoute.ProtocolId
    leafs["protocol-name"] = protocolRoute.ProtocolName
    leafs["instance"] = protocolRoute.Instance
    leafs["client-id"] = protocolRoute.ClientId
    leafs["route-type"] = protocolRoute.RouteType
    leafs["priority"] = protocolRoute.Priority
    leafs["svd-type"] = protocolRoute.SvdType
    leafs["flags"] = protocolRoute.Flags
    leafs["extended-flags"] = protocolRoute.ExtendedFlags
    leafs["tag"] = protocolRoute.Tag
    leafs["distance"] = protocolRoute.Distance
    leafs["diversion-distance"] = protocolRoute.DiversionDistance
    leafs["metric"] = protocolRoute.Metric
    leafs["paths-count"] = protocolRoute.PathsCount
    leafs["attribute-identity"] = protocolRoute.AttributeIdentity
    leafs["traffic-index"] = protocolRoute.TrafficIndex
    leafs["route-precedence"] = protocolRoute.RoutePrecedence
    leafs["qos-group"] = protocolRoute.QosGroup
    leafs["flow-tag"] = protocolRoute.FlowTag
    leafs["fwd-class"] = protocolRoute.FwdClass
    leafs["pic-count"] = protocolRoute.PicCount
    leafs["active"] = protocolRoute.Active
    leafs["diversion"] = protocolRoute.Diversion
    leafs["diversion-proto-name"] = protocolRoute.DiversionProtoName
    leafs["route-age"] = protocolRoute.RouteAge
    leafs["route-label"] = protocolRoute.RouteLabel
    leafs["version"] = protocolRoute.Version
    leafs["tbl-version"] = protocolRoute.TblVersion
    leafs["route-modify-time"] = protocolRoute.RouteModifyTime
    return leafs
}

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetBundleName() string { return "cisco_ios_xr" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetYangName() string { return "protocol-route" }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) SetParent(parent types.Entity) { protocolRoute.parent = parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetParent() types.Entity { return protocolRoute.parent }

func (protocolRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetParentYangName() string { return "protocol-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetParentYangName() string { return "protocol-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
// Protocol related Information
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetGoName(yname string) string {
    if yname == "protocol-names" { return "ProtocolNames" }
    if yname == "instance" { return "Instance" }
    if yname == "version" { return "Version" }
    if yname == "redistribution-client-count" { return "RedistributionClientCount" }
    if yname == "protocol-clients-count" { return "ProtocolClientsCount" }
    if yname == "routes-counts" { return "RoutesCounts" }
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "deleted-routes-count" { return "DeletedRoutesCount" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "protocol-route-memory" { return "ProtocolRouteMemory" }
    if yname == "backup-routes-count" { return "BackupRoutesCount" }
    return ""
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-names"] = information.ProtocolNames
    leafs["instance"] = information.Instance
    leafs["version"] = information.Version
    leafs["redistribution-client-count"] = information.RedistributionClientCount
    leafs["protocol-clients-count"] = information.ProtocolClientsCount
    leafs["routes-counts"] = information.RoutesCounts
    leafs["active-routes-count"] = information.ActiveRoutesCount
    leafs["deleted-routes-count"] = information.DeletedRoutesCount
    leafs["paths-count"] = information.PathsCount
    leafs["protocol-route-memory"] = information.ProtocolRouteMemory
    leafs["backup-routes-count"] = information.BackupRoutesCount
    return leafs
}

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetYangName() string { return "information" }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetParentYangName() string { return "as" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes
// Quarantine
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific quarantined address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute.
    QRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetFilter() yfilter.YFilter { return qRoutes.YFilter }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) SetFilter(yf yfilter.YFilter) { qRoutes.YFilter = yf }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetGoName(yname string) string {
    if yname == "q-route" { return "QRoute" }
    return ""
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetSegmentPath() string {
    return "q-routes"
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "q-route" {
        for _, c := range qRoutes.QRoute {
            if qRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute{}
        qRoutes.QRoute = append(qRoutes.QRoute, child)
        return &qRoutes.QRoute[len(qRoutes.QRoute)-1]
    }
    return nil
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range qRoutes.QRoute {
        children[qRoutes.QRoute[i].GetSegmentPath()] = &qRoutes.QRoute[i]
    }
    return children
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetYangName() string { return "q-routes" }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) SetParent(parent types.Entity) { qRoutes.parent = parent }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetParent() types.Entity { return qRoutes.parent }

func (qRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
// Route information for a specific
// quarantined address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetFilter() yfilter.YFilter { return qRoute.YFilter }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) SetFilter(yf yfilter.YFilter) { qRoute.YFilter = yf }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetSegmentPath() string {
    return "q-route"
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &qRoute.RoutePath
    }
    return nil
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &qRoute.RoutePath
    return children
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = qRoute.Address
    leafs["prefix-length"] = qRoute.PrefixLength
    leafs["prefix"] = qRoute.Prefix
    leafs["prefix-length-xr"] = qRoute.PrefixLengthXr
    leafs["route-version"] = qRoute.RouteVersion
    leafs["protocol-id"] = qRoute.ProtocolId
    leafs["protocol-name"] = qRoute.ProtocolName
    leafs["instance"] = qRoute.Instance
    leafs["client-id"] = qRoute.ClientId
    leafs["route-type"] = qRoute.RouteType
    leafs["priority"] = qRoute.Priority
    leafs["svd-type"] = qRoute.SvdType
    leafs["flags"] = qRoute.Flags
    leafs["extended-flags"] = qRoute.ExtendedFlags
    leafs["tag"] = qRoute.Tag
    leafs["distance"] = qRoute.Distance
    leafs["diversion-distance"] = qRoute.DiversionDistance
    leafs["metric"] = qRoute.Metric
    leafs["paths-count"] = qRoute.PathsCount
    leafs["attribute-identity"] = qRoute.AttributeIdentity
    leafs["traffic-index"] = qRoute.TrafficIndex
    leafs["route-precedence"] = qRoute.RoutePrecedence
    leafs["qos-group"] = qRoute.QosGroup
    leafs["flow-tag"] = qRoute.FlowTag
    leafs["fwd-class"] = qRoute.FwdClass
    leafs["pic-count"] = qRoute.PicCount
    leafs["active"] = qRoute.Active
    leafs["diversion"] = qRoute.Diversion
    leafs["diversion-proto-name"] = qRoute.DiversionProtoName
    leafs["route-age"] = qRoute.RouteAge
    leafs["route-label"] = qRoute.RouteLabel
    leafs["version"] = qRoute.Version
    leafs["tbl-version"] = qRoute.TblVersion
    leafs["route-modify-time"] = qRoute.RouteModifyTime
    return leafs
}

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetBundleName() string { return "cisco_ios_xr" }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetYangName() string { return "q-route" }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) SetParent(parent types.Entity) { qRoute.parent = parent }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetParent() types.Entity { return qRoute.parent }

func (qRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetParentYangName() string { return "q-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetParentYangName() string { return "q-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
// Backup route information for the given
// table
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information for a specific backup address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute.
    BackupRoute []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetFilter() yfilter.YFilter { return backupRoutes.YFilter }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) SetFilter(yf yfilter.YFilter) { backupRoutes.YFilter = yf }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetGoName(yname string) string {
    if yname == "backup-route" { return "BackupRoute" }
    return ""
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetSegmentPath() string {
    return "backup-routes"
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-route" {
        for _, c := range backupRoutes.BackupRoute {
            if backupRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute{}
        backupRoutes.BackupRoute = append(backupRoutes.BackupRoute, child)
        return &backupRoutes.BackupRoute[len(backupRoutes.BackupRoute)-1]
    }
    return nil
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupRoutes.BackupRoute {
        children[backupRoutes.BackupRoute[i].GetSegmentPath()] = &backupRoutes.BackupRoute[i]
    }
    return children
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetYangName() string { return "backup-routes" }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) SetParent(parent types.Entity) { backupRoutes.parent = parent }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetParent() types.Entity { return backupRoutes.parent }

func (backupRoutes *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
// Route information for a specific backup
// address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // Proto ID. The type is interface{} with range: -2147483648..2147483647.
    Protoid interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetFilter() yfilter.YFilter { return backupRoute.YFilter }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) SetFilter(yf yfilter.YFilter) { backupRoute.YFilter = yf }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "protoid" { return "Protoid" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetSegmentPath() string {
    return "backup-route"
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &backupRoute.RoutePath
    }
    return nil
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &backupRoute.RoutePath
    return children
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = backupRoute.Address
    leafs["prefix-length"] = backupRoute.PrefixLength
    leafs["protoid"] = backupRoute.Protoid
    leafs["prefix"] = backupRoute.Prefix
    leafs["prefix-length-xr"] = backupRoute.PrefixLengthXr
    leafs["route-version"] = backupRoute.RouteVersion
    leafs["protocol-id"] = backupRoute.ProtocolId
    leafs["protocol-name"] = backupRoute.ProtocolName
    leafs["instance"] = backupRoute.Instance
    leafs["client-id"] = backupRoute.ClientId
    leafs["route-type"] = backupRoute.RouteType
    leafs["priority"] = backupRoute.Priority
    leafs["svd-type"] = backupRoute.SvdType
    leafs["flags"] = backupRoute.Flags
    leafs["extended-flags"] = backupRoute.ExtendedFlags
    leafs["tag"] = backupRoute.Tag
    leafs["distance"] = backupRoute.Distance
    leafs["diversion-distance"] = backupRoute.DiversionDistance
    leafs["metric"] = backupRoute.Metric
    leafs["paths-count"] = backupRoute.PathsCount
    leafs["attribute-identity"] = backupRoute.AttributeIdentity
    leafs["traffic-index"] = backupRoute.TrafficIndex
    leafs["route-precedence"] = backupRoute.RoutePrecedence
    leafs["qos-group"] = backupRoute.QosGroup
    leafs["flow-tag"] = backupRoute.FlowTag
    leafs["fwd-class"] = backupRoute.FwdClass
    leafs["pic-count"] = backupRoute.PicCount
    leafs["active"] = backupRoute.Active
    leafs["diversion"] = backupRoute.Diversion
    leafs["diversion-proto-name"] = backupRoute.DiversionProtoName
    leafs["route-age"] = backupRoute.RouteAge
    leafs["route-label"] = backupRoute.RouteLabel
    leafs["version"] = backupRoute.Version
    leafs["tbl-version"] = backupRoute.TblVersion
    leafs["route-modify-time"] = backupRoute.RouteModifyTime
    return leafs
}

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetBundleName() string { return "cisco_ios_xr" }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetYangName() string { return "backup-route" }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) SetParent(parent types.Entity) { backupRoute.parent = parent }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetParent() types.Entity { return backupRoute.parent }

func (backupRoute *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetParentYangName() string { return "backup-routes" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
// Path(s) of the route
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetParentYangName() string { return "backup-route" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
// Route advertiser information 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert.
    Advert []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetFilter() yfilter.YFilter { return adverts.YFilter }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) SetFilter(yf yfilter.YFilter) { adverts.YFilter = yf }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetGoName(yname string) string {
    if yname == "advert" { return "Advert" }
    return ""
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetSegmentPath() string {
    return "adverts"
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "advert" {
        for _, c := range adverts.Advert {
            if adverts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert{}
        adverts.Advert = append(adverts.Advert, child)
        return &adverts.Advert[len(adverts.Advert)-1]
    }
    return nil
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range adverts.Advert {
        children[adverts.Advert[i].GetSegmentPath()] = &adverts.Advert[i]
    }
    return children
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetBundleName() string { return "cisco_ios_xr" }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetYangName() string { return "adverts" }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) SetParent(parent types.Entity) { adverts.parent = parent }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetParent() types.Entity { return adverts.parent }

func (adverts *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetParentYangName() string { return "ip-rib-route-table-name" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
// Route information of a specific Network
// Address 
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length. The type is interface{} with range: 0..32.
    PrefixLength interface{}

    // ipv4 rib edm advert. The type is slice of
    // Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert.
    Ipv4RibEdmAdvert []Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetFilter() yfilter.YFilter { return advert.YFilter }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) SetFilter(yf yfilter.YFilter) { advert.YFilter = yf }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "ipv4-rib-edm-advert" { return "Ipv4RibEdmAdvert" }
    return ""
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetSegmentPath() string {
    return "advert"
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-advert" {
        for _, c := range advert.Ipv4RibEdmAdvert {
            if advert.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert{}
        advert.Ipv4RibEdmAdvert = append(advert.Ipv4RibEdmAdvert, child)
        return &advert.Ipv4RibEdmAdvert[len(advert.Ipv4RibEdmAdvert)-1]
    }
    return nil
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range advert.Ipv4RibEdmAdvert {
        children[advert.Ipv4RibEdmAdvert[i].GetSegmentPath()] = &advert.Ipv4RibEdmAdvert[i]
    }
    return children
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = advert.Address
    leafs["prefix-length"] = advert.PrefixLength
    return leafs
}

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetBundleName() string { return "cisco_ios_xr" }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetYangName() string { return "advert" }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) SetParent(parent types.Entity) { advert.parent = parent }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetParent() types.Entity { return advert.parent }

func (advert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetParentYangName() string { return "adverts" }

// Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert
// ipv4 rib edm advert
type Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Client advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // Extended communities. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunities interface{}

    // OSPF area-id flags. The type is interface{} with range: 0..255.
    ProtocolOpaqueFlags interface{}

    // OSPF area-id. The type is interface{} with range: 0..4294967295.
    ProtocolOpaque interface{}

    // Protocol code. The type is interface{} with range: -128..127.
    Code interface{}

    // Instance name. The type is string with length: 0..41.
    InstanceName interface{}
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetFilter() yfilter.YFilter { return ipv4RibEdmAdvert.YFilter }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) SetFilter(yf yfilter.YFilter) { ipv4RibEdmAdvert.YFilter = yf }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetGoName(yname string) string {
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "client-id" { return "ClientId" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "extended-communities" { return "ExtendedCommunities" }
    if yname == "protocol-opaque-flags" { return "ProtocolOpaqueFlags" }
    if yname == "protocol-opaque" { return "ProtocolOpaque" }
    if yname == "code" { return "Code" }
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetSegmentPath() string {
    return "ipv4-rib-edm-advert"
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-id"] = ipv4RibEdmAdvert.ProtocolId
    leafs["client-id"] = ipv4RibEdmAdvert.ClientId
    leafs["number-of-extended-communities"] = ipv4RibEdmAdvert.NumberOfExtendedCommunities
    leafs["extended-communities"] = ipv4RibEdmAdvert.ExtendedCommunities
    leafs["protocol-opaque-flags"] = ipv4RibEdmAdvert.ProtocolOpaqueFlags
    leafs["protocol-opaque"] = ipv4RibEdmAdvert.ProtocolOpaque
    leafs["code"] = ipv4RibEdmAdvert.Code
    leafs["instance-name"] = ipv4RibEdmAdvert.InstanceName
    return leafs
}

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetYangName() string { return "ipv4-rib-edm-advert" }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) SetParent(parent types.Entity) { ipv4RibEdmAdvert.parent = parent }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetParent() types.Entity { return ipv4RibEdmAdvert.parent }

func (ipv4RibEdmAdvert *Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv4RibEdmAdvert) GetParentYangName() string { return "advert" }

// Rib_RibTableIds
// RIB table
type Rib_RibTableIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specific Table. The type is slice of Rib_RibTableIds_RibTableId.
    RibTableId []Rib_RibTableIds_RibTableId
}

func (ribTableIds *Rib_RibTableIds) GetFilter() yfilter.YFilter { return ribTableIds.YFilter }

func (ribTableIds *Rib_RibTableIds) SetFilter(yf yfilter.YFilter) { ribTableIds.YFilter = yf }

func (ribTableIds *Rib_RibTableIds) GetGoName(yname string) string {
    if yname == "rib-table-id" { return "RibTableId" }
    return ""
}

func (ribTableIds *Rib_RibTableIds) GetSegmentPath() string {
    return "rib-table-ids"
}

func (ribTableIds *Rib_RibTableIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rib-table-id" {
        for _, c := range ribTableIds.RibTableId {
            if ribTableIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId{}
        ribTableIds.RibTableId = append(ribTableIds.RibTableId, child)
        return &ribTableIds.RibTableId[len(ribTableIds.RibTableId)-1]
    }
    return nil
}

func (ribTableIds *Rib_RibTableIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableIds.RibTableId {
        children[ribTableIds.RibTableId[i].GetSegmentPath()] = &ribTableIds.RibTableId[i]
    }
    return children
}

func (ribTableIds *Rib_RibTableIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ribTableIds *Rib_RibTableIds) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableIds *Rib_RibTableIds) GetYangName() string { return "rib-table-ids" }

func (ribTableIds *Rib_RibTableIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableIds *Rib_RibTableIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableIds *Rib_RibTableIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableIds *Rib_RibTableIds) SetParent(parent types.Entity) { ribTableIds.parent = parent }

func (ribTableIds *Rib_RibTableIds) GetParent() types.Entity { return ribTableIds.parent }

func (ribTableIds *Rib_RibTableIds) GetParentYangName() string { return "rib" }

// Rib_RibTableIds_RibTableId
// Specific Table
type Rib_RibTableIds_RibTableId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Table ID. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    Tableid interface{}

    // RIB table summary.
    SummaryProtos Rib_RibTableIds_RibTableId_SummaryProtos

    // RIB table interface.
    RibTableItfHndls Rib_RibTableIds_RibTableId_RibTableItfHndls

    // Table related Information.
    Information Rib_RibTableIds_RibTableId_Information
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetFilter() yfilter.YFilter { return ribTableId.YFilter }

func (ribTableId *Rib_RibTableIds_RibTableId) SetFilter(yf yfilter.YFilter) { ribTableId.YFilter = yf }

func (ribTableId *Rib_RibTableIds_RibTableId) GetGoName(yname string) string {
    if yname == "tableid" { return "Tableid" }
    if yname == "summary-protos" { return "SummaryProtos" }
    if yname == "rib-table-itf-hndls" { return "RibTableItfHndls" }
    if yname == "information" { return "Information" }
    return ""
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetSegmentPath() string {
    return "rib-table-id" + "[tableid='" + fmt.Sprintf("%v", ribTableId.Tableid) + "']"
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-protos" {
        return &ribTableId.SummaryProtos
    }
    if childYangName == "rib-table-itf-hndls" {
        return &ribTableId.RibTableItfHndls
    }
    if childYangName == "information" {
        return &ribTableId.Information
    }
    return nil
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-protos"] = &ribTableId.SummaryProtos
    children["rib-table-itf-hndls"] = &ribTableId.RibTableItfHndls
    children["information"] = &ribTableId.Information
    return children
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tableid"] = ribTableId.Tableid
    return leafs
}

func (ribTableId *Rib_RibTableIds_RibTableId) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableId *Rib_RibTableIds_RibTableId) GetYangName() string { return "rib-table-id" }

func (ribTableId *Rib_RibTableIds_RibTableId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableId *Rib_RibTableIds_RibTableId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableId *Rib_RibTableIds_RibTableId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableId *Rib_RibTableIds_RibTableId) SetParent(parent types.Entity) { ribTableId.parent = parent }

func (ribTableId *Rib_RibTableIds_RibTableId) GetParent() types.Entity { return ribTableId.parent }

func (ribTableId *Rib_RibTableIds_RibTableId) GetParentYangName() string { return "rib-table-ids" }

// Rib_RibTableIds_RibTableId_SummaryProtos
// RIB table summary
type Rib_RibTableIds_RibTableId_SummaryProtos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary information for a specific table/protocol . The type is slice
    // of Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto.
    SummaryProto []Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetFilter() yfilter.YFilter { return summaryProtos.YFilter }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) SetFilter(yf yfilter.YFilter) { summaryProtos.YFilter = yf }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetGoName(yname string) string {
    if yname == "summary-proto" { return "SummaryProto" }
    return ""
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetSegmentPath() string {
    return "summary-protos"
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-proto" {
        for _, c := range summaryProtos.SummaryProto {
            if summaryProtos.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto{}
        summaryProtos.SummaryProto = append(summaryProtos.SummaryProto, child)
        return &summaryProtos.SummaryProto[len(summaryProtos.SummaryProto)-1]
    }
    return nil
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryProtos.SummaryProto {
        children[summaryProtos.SummaryProto[i].GetSegmentPath()] = &summaryProtos.SummaryProto[i]
    }
    return children
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetYangName() string { return "summary-protos" }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) SetParent(parent types.Entity) { summaryProtos.parent = parent }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetParent() types.Entity { return summaryProtos.parent }

func (summaryProtos *Rib_RibTableIds_RibTableId_SummaryProtos) GetParentYangName() string { return "rib-table-id" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto
// Route summary information for a specific
// table/protocol 
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Proto ID. The type is interface{} with range:
    // -2147483648..2147483647.
    Protoid interface{}

    // Proto name. The type is string.
    Name interface{}

    // Instance. The type is string.
    Instance interface{}

    // Count for proto. instance.
    ProtoRouteCount Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount

    // No route type.
    RtypeNone Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone

    // Unknown route type.
    RtypeOther Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther

    // OSPF route within an area.
    RtypeOspfIntra Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra

    // OSPF route across diff. areas.
    RtypeOspfInter Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter

    // OSPF external route of type 1.
    RtypeOspfExtern1 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1

    // OSPF external route of type 2.
    RtypeOspfExtern2 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2

    // IS-IS summary route.
    RtypeIsisSum Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum

    // IS-IS level 1 route.
    RtypeIsisL1 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1

    // IS-IS level 2 route.
    RtypeIsisL2 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2

    // IS-IS level1 inter-area route.
    RtypeIsisL1Ia Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia

    // iBGP route.
    RtypeBgpInt Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt

    // eBGP route.
    RtypeBgpExt Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt

    // BGP local route.
    RtypeBgpLoc Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc

    // OSPF NSSA ext. route type 1.
    RtypeOspfNssa1 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1

    // OSPF NSSA ext. route type 2.
    RtypeOspfNssa2 Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2

    // EIGRP internal route.
    RtypeIgrp2Int Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int

    // EIGRP external route.
    RtypeIgrp2Ext Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetFilter() yfilter.YFilter { return summaryProto.YFilter }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) SetFilter(yf yfilter.YFilter) { summaryProto.YFilter = yf }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetGoName(yname string) string {
    if yname == "protoid" { return "Protoid" }
    if yname == "name" { return "Name" }
    if yname == "instance" { return "Instance" }
    if yname == "proto-route-count" { return "ProtoRouteCount" }
    if yname == "rtype-none" { return "RtypeNone" }
    if yname == "rtype-other" { return "RtypeOther" }
    if yname == "rtype-ospf-intra" { return "RtypeOspfIntra" }
    if yname == "rtype-ospf-inter" { return "RtypeOspfInter" }
    if yname == "rtype-ospf-extern1" { return "RtypeOspfExtern1" }
    if yname == "rtype-ospf-extern2" { return "RtypeOspfExtern2" }
    if yname == "rtype-isis-sum" { return "RtypeIsisSum" }
    if yname == "rtype-isis-l1" { return "RtypeIsisL1" }
    if yname == "rtype-isis-l2" { return "RtypeIsisL2" }
    if yname == "rtype-isis-l1-ia" { return "RtypeIsisL1Ia" }
    if yname == "rtype-bgp-int" { return "RtypeBgpInt" }
    if yname == "rtype-bgp-ext" { return "RtypeBgpExt" }
    if yname == "rtype-bgp-loc" { return "RtypeBgpLoc" }
    if yname == "rtype-ospf-nssa1" { return "RtypeOspfNssa1" }
    if yname == "rtype-ospf-nssa2" { return "RtypeOspfNssa2" }
    if yname == "rtype-igrp2-int" { return "RtypeIgrp2Int" }
    if yname == "rtype-igrp2-ext" { return "RtypeIgrp2Ext" }
    return ""
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetSegmentPath() string {
    return "summary-proto" + "[protoid='" + fmt.Sprintf("%v", summaryProto.Protoid) + "']"
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "proto-route-count" {
        return &summaryProto.ProtoRouteCount
    }
    if childYangName == "rtype-none" {
        return &summaryProto.RtypeNone
    }
    if childYangName == "rtype-other" {
        return &summaryProto.RtypeOther
    }
    if childYangName == "rtype-ospf-intra" {
        return &summaryProto.RtypeOspfIntra
    }
    if childYangName == "rtype-ospf-inter" {
        return &summaryProto.RtypeOspfInter
    }
    if childYangName == "rtype-ospf-extern1" {
        return &summaryProto.RtypeOspfExtern1
    }
    if childYangName == "rtype-ospf-extern2" {
        return &summaryProto.RtypeOspfExtern2
    }
    if childYangName == "rtype-isis-sum" {
        return &summaryProto.RtypeIsisSum
    }
    if childYangName == "rtype-isis-l1" {
        return &summaryProto.RtypeIsisL1
    }
    if childYangName == "rtype-isis-l2" {
        return &summaryProto.RtypeIsisL2
    }
    if childYangName == "rtype-isis-l1-ia" {
        return &summaryProto.RtypeIsisL1Ia
    }
    if childYangName == "rtype-bgp-int" {
        return &summaryProto.RtypeBgpInt
    }
    if childYangName == "rtype-bgp-ext" {
        return &summaryProto.RtypeBgpExt
    }
    if childYangName == "rtype-bgp-loc" {
        return &summaryProto.RtypeBgpLoc
    }
    if childYangName == "rtype-ospf-nssa1" {
        return &summaryProto.RtypeOspfNssa1
    }
    if childYangName == "rtype-ospf-nssa2" {
        return &summaryProto.RtypeOspfNssa2
    }
    if childYangName == "rtype-igrp2-int" {
        return &summaryProto.RtypeIgrp2Int
    }
    if childYangName == "rtype-igrp2-ext" {
        return &summaryProto.RtypeIgrp2Ext
    }
    return nil
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["proto-route-count"] = &summaryProto.ProtoRouteCount
    children["rtype-none"] = &summaryProto.RtypeNone
    children["rtype-other"] = &summaryProto.RtypeOther
    children["rtype-ospf-intra"] = &summaryProto.RtypeOspfIntra
    children["rtype-ospf-inter"] = &summaryProto.RtypeOspfInter
    children["rtype-ospf-extern1"] = &summaryProto.RtypeOspfExtern1
    children["rtype-ospf-extern2"] = &summaryProto.RtypeOspfExtern2
    children["rtype-isis-sum"] = &summaryProto.RtypeIsisSum
    children["rtype-isis-l1"] = &summaryProto.RtypeIsisL1
    children["rtype-isis-l2"] = &summaryProto.RtypeIsisL2
    children["rtype-isis-l1-ia"] = &summaryProto.RtypeIsisL1Ia
    children["rtype-bgp-int"] = &summaryProto.RtypeBgpInt
    children["rtype-bgp-ext"] = &summaryProto.RtypeBgpExt
    children["rtype-bgp-loc"] = &summaryProto.RtypeBgpLoc
    children["rtype-ospf-nssa1"] = &summaryProto.RtypeOspfNssa1
    children["rtype-ospf-nssa2"] = &summaryProto.RtypeOspfNssa2
    children["rtype-igrp2-int"] = &summaryProto.RtypeIgrp2Int
    children["rtype-igrp2-ext"] = &summaryProto.RtypeIgrp2Ext
    return children
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protoid"] = summaryProto.Protoid
    leafs["name"] = summaryProto.Name
    leafs["instance"] = summaryProto.Instance
    return leafs
}

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetYangName() string { return "summary-proto" }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) SetParent(parent types.Entity) { summaryProto.parent = parent }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetParent() types.Entity { return summaryProto.parent }

func (summaryProto *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetParentYangName() string { return "summary-protos" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount
// Count for proto. instance
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetFilter() yfilter.YFilter { return protoRouteCount.YFilter }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) SetFilter(yf yfilter.YFilter) { protoRouteCount.YFilter = yf }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetSegmentPath() string {
    return "proto-route-count"
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = protoRouteCount.ActiveRoutesCount
    leafs["num-backup-routes"] = protoRouteCount.NumBackupRoutes
    leafs["num-active-paths"] = protoRouteCount.NumActivePaths
    leafs["num-backup-paths"] = protoRouteCount.NumBackupPaths
    return leafs
}

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetBundleName() string { return "cisco_ios_xr" }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetYangName() string { return "proto-route-count" }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) SetParent(parent types.Entity) { protoRouteCount.parent = parent }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetParent() types.Entity { return protoRouteCount.parent }

func (protoRouteCount *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone
// No route type
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetFilter() yfilter.YFilter { return rtypeNone.YFilter }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) SetFilter(yf yfilter.YFilter) { rtypeNone.YFilter = yf }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetSegmentPath() string {
    return "rtype-none"
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeNone.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeNone.NumBackupRoutes
    leafs["num-active-paths"] = rtypeNone.NumActivePaths
    leafs["num-backup-paths"] = rtypeNone.NumBackupPaths
    return leafs
}

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetYangName() string { return "rtype-none" }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) SetParent(parent types.Entity) { rtypeNone.parent = parent }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetParent() types.Entity { return rtypeNone.parent }

func (rtypeNone *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther
// Unknown route type
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetFilter() yfilter.YFilter { return rtypeOther.YFilter }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) SetFilter(yf yfilter.YFilter) { rtypeOther.YFilter = yf }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetSegmentPath() string {
    return "rtype-other"
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOther.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOther.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOther.NumActivePaths
    leafs["num-backup-paths"] = rtypeOther.NumBackupPaths
    return leafs
}

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetYangName() string { return "rtype-other" }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) SetParent(parent types.Entity) { rtypeOther.parent = parent }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetParent() types.Entity { return rtypeOther.parent }

func (rtypeOther *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra
// OSPF route within an area
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetFilter() yfilter.YFilter { return rtypeOspfIntra.YFilter }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) SetFilter(yf yfilter.YFilter) { rtypeOspfIntra.YFilter = yf }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetSegmentPath() string {
    return "rtype-ospf-intra"
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfIntra.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfIntra.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfIntra.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfIntra.NumBackupPaths
    return leafs
}

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetYangName() string { return "rtype-ospf-intra" }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) SetParent(parent types.Entity) { rtypeOspfIntra.parent = parent }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetParent() types.Entity { return rtypeOspfIntra.parent }

func (rtypeOspfIntra *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter
// OSPF route across diff. areas
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetFilter() yfilter.YFilter { return rtypeOspfInter.YFilter }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) SetFilter(yf yfilter.YFilter) { rtypeOspfInter.YFilter = yf }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetSegmentPath() string {
    return "rtype-ospf-inter"
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfInter.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfInter.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfInter.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfInter.NumBackupPaths
    return leafs
}

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetYangName() string { return "rtype-ospf-inter" }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) SetParent(parent types.Entity) { rtypeOspfInter.parent = parent }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetParent() types.Entity { return rtypeOspfInter.parent }

func (rtypeOspfInter *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1
// OSPF external route of type 1
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetFilter() yfilter.YFilter { return rtypeOspfExtern1.YFilter }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) SetFilter(yf yfilter.YFilter) { rtypeOspfExtern1.YFilter = yf }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetSegmentPath() string {
    return "rtype-ospf-extern1"
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfExtern1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfExtern1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfExtern1.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfExtern1.NumBackupPaths
    return leafs
}

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetYangName() string { return "rtype-ospf-extern1" }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) SetParent(parent types.Entity) { rtypeOspfExtern1.parent = parent }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetParent() types.Entity { return rtypeOspfExtern1.parent }

func (rtypeOspfExtern1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2
// OSPF external route of type 2
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetFilter() yfilter.YFilter { return rtypeOspfExtern2.YFilter }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) SetFilter(yf yfilter.YFilter) { rtypeOspfExtern2.YFilter = yf }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetSegmentPath() string {
    return "rtype-ospf-extern2"
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfExtern2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfExtern2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfExtern2.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfExtern2.NumBackupPaths
    return leafs
}

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetYangName() string { return "rtype-ospf-extern2" }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) SetParent(parent types.Entity) { rtypeOspfExtern2.parent = parent }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetParent() types.Entity { return rtypeOspfExtern2.parent }

func (rtypeOspfExtern2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum
// IS-IS summary route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetFilter() yfilter.YFilter { return rtypeIsisSum.YFilter }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) SetFilter(yf yfilter.YFilter) { rtypeIsisSum.YFilter = yf }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetSegmentPath() string {
    return "rtype-isis-sum"
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisSum.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisSum.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisSum.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisSum.NumBackupPaths
    return leafs
}

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetYangName() string { return "rtype-isis-sum" }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) SetParent(parent types.Entity) { rtypeIsisSum.parent = parent }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetParent() types.Entity { return rtypeIsisSum.parent }

func (rtypeIsisSum *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1
// IS-IS level 1 route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetFilter() yfilter.YFilter { return rtypeIsisL1.YFilter }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) SetFilter(yf yfilter.YFilter) { rtypeIsisL1.YFilter = yf }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetSegmentPath() string {
    return "rtype-isis-l1"
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL1.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL1.NumBackupPaths
    return leafs
}

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetYangName() string { return "rtype-isis-l1" }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) SetParent(parent types.Entity) { rtypeIsisL1.parent = parent }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetParent() types.Entity { return rtypeIsisL1.parent }

func (rtypeIsisL1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2
// IS-IS level 2 route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetFilter() yfilter.YFilter { return rtypeIsisL2.YFilter }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) SetFilter(yf yfilter.YFilter) { rtypeIsisL2.YFilter = yf }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetSegmentPath() string {
    return "rtype-isis-l2"
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL2.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL2.NumBackupPaths
    return leafs
}

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetYangName() string { return "rtype-isis-l2" }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) SetParent(parent types.Entity) { rtypeIsisL2.parent = parent }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetParent() types.Entity { return rtypeIsisL2.parent }

func (rtypeIsisL2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia
// IS-IS level1 inter-area route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetFilter() yfilter.YFilter { return rtypeIsisL1Ia.YFilter }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) SetFilter(yf yfilter.YFilter) { rtypeIsisL1Ia.YFilter = yf }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetSegmentPath() string {
    return "rtype-isis-l1-ia"
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIsisL1Ia.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIsisL1Ia.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIsisL1Ia.NumActivePaths
    leafs["num-backup-paths"] = rtypeIsisL1Ia.NumBackupPaths
    return leafs
}

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetYangName() string { return "rtype-isis-l1-ia" }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) SetParent(parent types.Entity) { rtypeIsisL1Ia.parent = parent }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetParent() types.Entity { return rtypeIsisL1Ia.parent }

func (rtypeIsisL1Ia *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt
// iBGP route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetFilter() yfilter.YFilter { return rtypeBgpInt.YFilter }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) SetFilter(yf yfilter.YFilter) { rtypeBgpInt.YFilter = yf }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetSegmentPath() string {
    return "rtype-bgp-int"
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpInt.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpInt.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpInt.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpInt.NumBackupPaths
    return leafs
}

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetYangName() string { return "rtype-bgp-int" }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) SetParent(parent types.Entity) { rtypeBgpInt.parent = parent }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetParent() types.Entity { return rtypeBgpInt.parent }

func (rtypeBgpInt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt
// eBGP route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetFilter() yfilter.YFilter { return rtypeBgpExt.YFilter }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) SetFilter(yf yfilter.YFilter) { rtypeBgpExt.YFilter = yf }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetSegmentPath() string {
    return "rtype-bgp-ext"
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpExt.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpExt.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpExt.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpExt.NumBackupPaths
    return leafs
}

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetYangName() string { return "rtype-bgp-ext" }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) SetParent(parent types.Entity) { rtypeBgpExt.parent = parent }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetParent() types.Entity { return rtypeBgpExt.parent }

func (rtypeBgpExt *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc
// BGP local route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetFilter() yfilter.YFilter { return rtypeBgpLoc.YFilter }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) SetFilter(yf yfilter.YFilter) { rtypeBgpLoc.YFilter = yf }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetSegmentPath() string {
    return "rtype-bgp-loc"
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeBgpLoc.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeBgpLoc.NumBackupRoutes
    leafs["num-active-paths"] = rtypeBgpLoc.NumActivePaths
    leafs["num-backup-paths"] = rtypeBgpLoc.NumBackupPaths
    return leafs
}

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetYangName() string { return "rtype-bgp-loc" }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) SetParent(parent types.Entity) { rtypeBgpLoc.parent = parent }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetParent() types.Entity { return rtypeBgpLoc.parent }

func (rtypeBgpLoc *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1
// OSPF NSSA ext. route type 1
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetFilter() yfilter.YFilter { return rtypeOspfNssa1.YFilter }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) SetFilter(yf yfilter.YFilter) { rtypeOspfNssa1.YFilter = yf }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetSegmentPath() string {
    return "rtype-ospf-nssa1"
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfNssa1.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfNssa1.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfNssa1.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfNssa1.NumBackupPaths
    return leafs
}

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetYangName() string { return "rtype-ospf-nssa1" }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) SetParent(parent types.Entity) { rtypeOspfNssa1.parent = parent }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetParent() types.Entity { return rtypeOspfNssa1.parent }

func (rtypeOspfNssa1 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2
// OSPF NSSA ext. route type 2
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetFilter() yfilter.YFilter { return rtypeOspfNssa2.YFilter }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) SetFilter(yf yfilter.YFilter) { rtypeOspfNssa2.YFilter = yf }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetSegmentPath() string {
    return "rtype-ospf-nssa2"
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeOspfNssa2.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeOspfNssa2.NumBackupRoutes
    leafs["num-active-paths"] = rtypeOspfNssa2.NumActivePaths
    leafs["num-backup-paths"] = rtypeOspfNssa2.NumBackupPaths
    return leafs
}

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetYangName() string { return "rtype-ospf-nssa2" }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) SetParent(parent types.Entity) { rtypeOspfNssa2.parent = parent }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetParent() types.Entity { return rtypeOspfNssa2.parent }

func (rtypeOspfNssa2 *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int
// EIGRP internal route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetFilter() yfilter.YFilter { return rtypeIgrp2Int.YFilter }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) SetFilter(yf yfilter.YFilter) { rtypeIgrp2Int.YFilter = yf }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetSegmentPath() string {
    return "rtype-igrp2-int"
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIgrp2Int.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIgrp2Int.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIgrp2Int.NumActivePaths
    leafs["num-backup-paths"] = rtypeIgrp2Int.NumBackupPaths
    return leafs
}

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetYangName() string { return "rtype-igrp2-int" }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) SetParent(parent types.Entity) { rtypeIgrp2Int.parent = parent }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetParent() types.Entity { return rtypeIgrp2Int.parent }

func (rtypeIgrp2Int *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
// EIGRP external route
type Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetFilter() yfilter.YFilter { return rtypeIgrp2Ext.YFilter }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) SetFilter(yf yfilter.YFilter) { rtypeIgrp2Ext.YFilter = yf }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetGoName(yname string) string {
    if yname == "active-routes-count" { return "ActiveRoutesCount" }
    if yname == "num-backup-routes" { return "NumBackupRoutes" }
    if yname == "num-active-paths" { return "NumActivePaths" }
    if yname == "num-backup-paths" { return "NumBackupPaths" }
    return ""
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetSegmentPath() string {
    return "rtype-igrp2-ext"
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-routes-count"] = rtypeIgrp2Ext.ActiveRoutesCount
    leafs["num-backup-routes"] = rtypeIgrp2Ext.NumBackupRoutes
    leafs["num-active-paths"] = rtypeIgrp2Ext.NumActivePaths
    leafs["num-backup-paths"] = rtypeIgrp2Ext.NumBackupPaths
    return leafs
}

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetBundleName() string { return "cisco_ios_xr" }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetYangName() string { return "rtype-igrp2-ext" }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) SetParent(parent types.Entity) { rtypeIgrp2Ext.parent = parent }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetParent() types.Entity { return rtypeIgrp2Ext.parent }

func (rtypeIgrp2Ext *Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetParentYangName() string { return "summary-proto" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls
// RIB table interface
type Rib_RibTableIds_RibTableId_RibTableItfHndls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface handle. The type is slice of
    // Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl.
    RibTableItfHndl []Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetFilter() yfilter.YFilter { return ribTableItfHndls.YFilter }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) SetFilter(yf yfilter.YFilter) { ribTableItfHndls.YFilter = yf }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetGoName(yname string) string {
    if yname == "rib-table-itf-hndl" { return "RibTableItfHndl" }
    return ""
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetSegmentPath() string {
    return "rib-table-itf-hndls"
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rib-table-itf-hndl" {
        for _, c := range ribTableItfHndls.RibTableItfHndl {
            if ribTableItfHndls.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl{}
        ribTableItfHndls.RibTableItfHndl = append(ribTableItfHndls.RibTableItfHndl, child)
        return &ribTableItfHndls.RibTableItfHndl[len(ribTableItfHndls.RibTableItfHndl)-1]
    }
    return nil
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableItfHndls.RibTableItfHndl {
        children[ribTableItfHndls.RibTableItfHndl[i].GetSegmentPath()] = &ribTableItfHndls.RibTableItfHndl[i]
    }
    return children
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetYangName() string { return "rib-table-itf-hndls" }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) SetParent(parent types.Entity) { ribTableItfHndls.parent = parent }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetParent() types.Entity { return ribTableItfHndls.parent }

func (ribTableItfHndls *Rib_RibTableIds_RibTableId_RibTableItfHndls) GetParentYangName() string { return "rib-table-id" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
// Interface handle
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Itf Handle. The type is interface{} with range:
    // -2147483648..2147483647.
    Handle interface{}

    // Route information for a specific table/interface . The type is slice of
    // Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute.
    ItfRoute []Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetFilter() yfilter.YFilter { return ribTableItfHndl.YFilter }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) SetFilter(yf yfilter.YFilter) { ribTableItfHndl.YFilter = yf }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetGoName(yname string) string {
    if yname == "handle" { return "Handle" }
    if yname == "itf-route" { return "ItfRoute" }
    return ""
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetSegmentPath() string {
    return "rib-table-itf-hndl" + "[handle='" + fmt.Sprintf("%v", ribTableItfHndl.Handle) + "']"
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "itf-route" {
        for _, c := range ribTableItfHndl.ItfRoute {
            if ribTableItfHndl.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute{}
        ribTableItfHndl.ItfRoute = append(ribTableItfHndl.ItfRoute, child)
        return &ribTableItfHndl.ItfRoute[len(ribTableItfHndl.ItfRoute)-1]
    }
    return nil
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ribTableItfHndl.ItfRoute {
        children[ribTableItfHndl.ItfRoute[i].GetSegmentPath()] = &ribTableItfHndl.ItfRoute[i]
    }
    return children
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["handle"] = ribTableItfHndl.Handle
    return leafs
}

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetBundleName() string { return "cisco_ios_xr" }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetYangName() string { return "rib-table-itf-hndl" }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) SetParent(parent types.Entity) { ribTableItfHndl.parent = parent }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetParent() types.Entity { return ribTableItfHndl.parent }

func (ribTableItfHndl *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetParentYangName() string { return "rib-table-itf-hndls" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
// Route information for a specific
// table/interface 
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetFilter() yfilter.YFilter { return itfRoute.YFilter }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) SetFilter(yf yfilter.YFilter) { itfRoute.YFilter = yf }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length-xr" { return "PrefixLengthXr" }
    if yname == "route-version" { return "RouteVersion" }
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "instance" { return "Instance" }
    if yname == "client-id" { return "ClientId" }
    if yname == "route-type" { return "RouteType" }
    if yname == "priority" { return "Priority" }
    if yname == "svd-type" { return "SvdType" }
    if yname == "flags" { return "Flags" }
    if yname == "extended-flags" { return "ExtendedFlags" }
    if yname == "tag" { return "Tag" }
    if yname == "distance" { return "Distance" }
    if yname == "diversion-distance" { return "DiversionDistance" }
    if yname == "metric" { return "Metric" }
    if yname == "paths-count" { return "PathsCount" }
    if yname == "attribute-identity" { return "AttributeIdentity" }
    if yname == "traffic-index" { return "TrafficIndex" }
    if yname == "route-precedence" { return "RoutePrecedence" }
    if yname == "qos-group" { return "QosGroup" }
    if yname == "flow-tag" { return "FlowTag" }
    if yname == "fwd-class" { return "FwdClass" }
    if yname == "pic-count" { return "PicCount" }
    if yname == "active" { return "Active" }
    if yname == "diversion" { return "Diversion" }
    if yname == "diversion-proto-name" { return "DiversionProtoName" }
    if yname == "route-age" { return "RouteAge" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "version" { return "Version" }
    if yname == "tbl-version" { return "TblVersion" }
    if yname == "route-modify-time" { return "RouteModifyTime" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetSegmentPath() string {
    return "itf-route" + "[address='" + fmt.Sprintf("%v", itfRoute.Address) + "']"
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-path" {
        return &itfRoute.RoutePath
    }
    return nil
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-path"] = &itfRoute.RoutePath
    return children
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = itfRoute.Address
    leafs["prefix"] = itfRoute.Prefix
    leafs["prefix-length-xr"] = itfRoute.PrefixLengthXr
    leafs["route-version"] = itfRoute.RouteVersion
    leafs["protocol-id"] = itfRoute.ProtocolId
    leafs["protocol-name"] = itfRoute.ProtocolName
    leafs["instance"] = itfRoute.Instance
    leafs["client-id"] = itfRoute.ClientId
    leafs["route-type"] = itfRoute.RouteType
    leafs["priority"] = itfRoute.Priority
    leafs["svd-type"] = itfRoute.SvdType
    leafs["flags"] = itfRoute.Flags
    leafs["extended-flags"] = itfRoute.ExtendedFlags
    leafs["tag"] = itfRoute.Tag
    leafs["distance"] = itfRoute.Distance
    leafs["diversion-distance"] = itfRoute.DiversionDistance
    leafs["metric"] = itfRoute.Metric
    leafs["paths-count"] = itfRoute.PathsCount
    leafs["attribute-identity"] = itfRoute.AttributeIdentity
    leafs["traffic-index"] = itfRoute.TrafficIndex
    leafs["route-precedence"] = itfRoute.RoutePrecedence
    leafs["qos-group"] = itfRoute.QosGroup
    leafs["flow-tag"] = itfRoute.FlowTag
    leafs["fwd-class"] = itfRoute.FwdClass
    leafs["pic-count"] = itfRoute.PicCount
    leafs["active"] = itfRoute.Active
    leafs["diversion"] = itfRoute.Diversion
    leafs["diversion-proto-name"] = itfRoute.DiversionProtoName
    leafs["route-age"] = itfRoute.RouteAge
    leafs["route-label"] = itfRoute.RouteLabel
    leafs["version"] = itfRoute.Version
    leafs["tbl-version"] = itfRoute.TblVersion
    leafs["route-modify-time"] = itfRoute.RouteModifyTime
    return leafs
}

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetBundleName() string { return "cisco_ios_xr" }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetYangName() string { return "itf-route" }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) SetParent(parent types.Entity) { itfRoute.parent = parent }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetParent() types.Entity { return itfRoute.parent }

func (itfRoute *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetParentYangName() string { return "rib-table-itf-hndl" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
// Path(s) of the route
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ipv4 rib edm path. The type is slice of
    // Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath.
    Ipv4RibEdmPath []Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetGoName(yname string) string {
    if yname == "ipv4-rib-edm-path" { return "Ipv4RibEdmPath" }
    return ""
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-rib-edm-path" {
        for _, c := range routePath.Ipv4RibEdmPath {
            if routePath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath{}
        routePath.Ipv4RibEdmPath = append(routePath.Ipv4RibEdmPath, child)
        return &routePath.Ipv4RibEdmPath[len(routePath.Ipv4RibEdmPath)-1]
    }
    return nil
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routePath.Ipv4RibEdmPath {
        children[routePath.Ipv4RibEdmPath[i].GetSegmentPath()] = &routePath.Ipv4RibEdmPath[i]
    }
    return children
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetParentYangName() string { return "itf-route" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath
// ipv4 rib edm path
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // Remote backup node address. The type is slice of
    // Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk.
    Labelstk []Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetFilter() yfilter.YFilter { return ipv4RibEdmPath.YFilter }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) SetFilter(yf yfilter.YFilter) { ipv4RibEdmPath.YFilter = yf }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "information-source" { return "InformationSource" }
    if yname == "v6-nexthop" { return "V6Nexthop" }
    if yname == "v6-information-source" { return "V6InformationSource" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "metric" { return "Metric" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "flags64" { return "Flags64" }
    if yname == "flags" { return "Flags" }
    if yname == "private-flags" { return "PrivateFlags" }
    if yname == "looped" { return "Looped" }
    if yname == "next-hop-table-id" { return "NextHopTableId" }
    if yname == "next-hop-vrf-name" { return "NextHopVrfName" }
    if yname == "next-hop-table-name" { return "NextHopTableName" }
    if yname == "next-hop-afi" { return "NextHopAfi" }
    if yname == "next-hop-safi" { return "NextHopSafi" }
    if yname == "route-label" { return "RouteLabel" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "pathid" { return "Pathid" }
    if yname == "backup-pathid" { return "BackupPathid" }
    if yname == "ref-cnt-of-backup" { return "RefCntOfBackup" }
    if yname == "number-of-extended-communities" { return "NumberOfExtendedCommunities" }
    if yname == "mvpn-present" { return "MvpnPresent" }
    if yname == "path-rt-present" { return "PathRtPresent" }
    if yname == "vrf-import-rt-present" { return "VrfImportRtPresent" }
    if yname == "source-asrt-present" { return "SourceAsrtPresent" }
    if yname == "source-rd-present" { return "SourceRdPresent" }
    if yname == "segmented-nexthop-present" { return "SegmentedNexthopPresent" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "next-hop-id-refcount" { return "NextHopIdRefcount" }
    if yname == "ospf-area-id" { return "OspfAreaId" }
    if yname == "has-labelstk" { return "HasLabelstk" }
    if yname == "num-labels" { return "NumLabels" }
    if yname == "binding-label" { return "BindingLabel" }
    if yname == "nhid-feid" { return "NhidFeid" }
    if yname == "mpls-feid" { return "MplsFeid" }
    if yname == "remote-backup-addr" { return "RemoteBackupAddr" }
    if yname == "labelstk" { return "Labelstk" }
    return ""
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetSegmentPath() string {
    return "ipv4-rib-edm-path"
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-backup-addr" {
        for _, c := range ipv4RibEdmPath.RemoteBackupAddr {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr{}
        ipv4RibEdmPath.RemoteBackupAddr = append(ipv4RibEdmPath.RemoteBackupAddr, child)
        return &ipv4RibEdmPath.RemoteBackupAddr[len(ipv4RibEdmPath.RemoteBackupAddr)-1]
    }
    if childYangName == "labelstk" {
        for _, c := range ipv4RibEdmPath.Labelstk {
            if ipv4RibEdmPath.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk{}
        ipv4RibEdmPath.Labelstk = append(ipv4RibEdmPath.Labelstk, child)
        return &ipv4RibEdmPath.Labelstk[len(ipv4RibEdmPath.Labelstk)-1]
    }
    return nil
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4RibEdmPath.RemoteBackupAddr {
        children[ipv4RibEdmPath.RemoteBackupAddr[i].GetSegmentPath()] = &ipv4RibEdmPath.RemoteBackupAddr[i]
    }
    for i := range ipv4RibEdmPath.Labelstk {
        children[ipv4RibEdmPath.Labelstk[i].GetSegmentPath()] = &ipv4RibEdmPath.Labelstk[i]
    }
    return children
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4RibEdmPath.Address
    leafs["information-source"] = ipv4RibEdmPath.InformationSource
    leafs["v6-nexthop"] = ipv4RibEdmPath.V6Nexthop
    leafs["v6-information-source"] = ipv4RibEdmPath.V6InformationSource
    leafs["interface-name"] = ipv4RibEdmPath.InterfaceName
    leafs["metric"] = ipv4RibEdmPath.Metric
    leafs["load-metric"] = ipv4RibEdmPath.LoadMetric
    leafs["flags64"] = ipv4RibEdmPath.Flags64
    leafs["flags"] = ipv4RibEdmPath.Flags
    leafs["private-flags"] = ipv4RibEdmPath.PrivateFlags
    leafs["looped"] = ipv4RibEdmPath.Looped
    leafs["next-hop-table-id"] = ipv4RibEdmPath.NextHopTableId
    leafs["next-hop-vrf-name"] = ipv4RibEdmPath.NextHopVrfName
    leafs["next-hop-table-name"] = ipv4RibEdmPath.NextHopTableName
    leafs["next-hop-afi"] = ipv4RibEdmPath.NextHopAfi
    leafs["next-hop-safi"] = ipv4RibEdmPath.NextHopSafi
    leafs["route-label"] = ipv4RibEdmPath.RouteLabel
    leafs["tunnel-id"] = ipv4RibEdmPath.TunnelId
    leafs["pathid"] = ipv4RibEdmPath.Pathid
    leafs["backup-pathid"] = ipv4RibEdmPath.BackupPathid
    leafs["ref-cnt-of-backup"] = ipv4RibEdmPath.RefCntOfBackup
    leafs["number-of-extended-communities"] = ipv4RibEdmPath.NumberOfExtendedCommunities
    leafs["mvpn-present"] = ipv4RibEdmPath.MvpnPresent
    leafs["path-rt-present"] = ipv4RibEdmPath.PathRtPresent
    leafs["vrf-import-rt-present"] = ipv4RibEdmPath.VrfImportRtPresent
    leafs["source-asrt-present"] = ipv4RibEdmPath.SourceAsrtPresent
    leafs["source-rd-present"] = ipv4RibEdmPath.SourceRdPresent
    leafs["segmented-nexthop-present"] = ipv4RibEdmPath.SegmentedNexthopPresent
    leafs["next-hop-id"] = ipv4RibEdmPath.NextHopId
    leafs["next-hop-id-refcount"] = ipv4RibEdmPath.NextHopIdRefcount
    leafs["ospf-area-id"] = ipv4RibEdmPath.OspfAreaId
    leafs["has-labelstk"] = ipv4RibEdmPath.HasLabelstk
    leafs["num-labels"] = ipv4RibEdmPath.NumLabels
    leafs["binding-label"] = ipv4RibEdmPath.BindingLabel
    leafs["nhid-feid"] = ipv4RibEdmPath.NhidFeid
    leafs["mpls-feid"] = ipv4RibEdmPath.MplsFeid
    return leafs
}

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetYangName() string { return "ipv4-rib-edm-path" }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) SetParent(parent types.Entity) { ipv4RibEdmPath.parent = parent }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetParent() types.Entity { return ipv4RibEdmPath.parent }

func (ipv4RibEdmPath *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath) GetParentYangName() string { return "route-path" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetFilter() yfilter.YFilter { return remoteBackupAddr.YFilter }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetFilter(yf yfilter.YFilter) { remoteBackupAddr.YFilter = yf }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetSegmentPath() string {
    return "remote-backup-addr"
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = remoteBackupAddr.Entry
    return leafs
}

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleName() string { return "cisco_ios_xr" }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetYangName() string { return "remote-backup-addr" }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) SetParent(parent types.Entity) { remoteBackupAddr.parent = parent }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParent() types.Entity { return remoteBackupAddr.parent }

func (remoteBackupAddr *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_RemoteBackupAddr) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk
// Outgoing label stack for this path
type Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetFilter() yfilter.YFilter { return labelstk.YFilter }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetFilter(yf yfilter.YFilter) { labelstk.YFilter = yf }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetGoName(yname string) string {
    if yname == "entry" { return "Entry" }
    return ""
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetSegmentPath() string {
    return "labelstk"
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entry"] = labelstk.Entry
    return leafs
}

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleName() string { return "cisco_ios_xr" }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetYangName() string { return "labelstk" }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) SetParent(parent types.Entity) { labelstk.parent = parent }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParent() types.Entity { return labelstk.parent }

func (labelstk *Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv4RibEdmPath_Labelstk) GetParentYangName() string { return "ipv4-rib-edm-path" }

// Rib_RibTableIds_RibTableId_Information
// Table related Information
type Rib_RibTableIds_RibTableId_Information struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table id. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // Address Family. The type is interface{} with range: 0..4294967295.
    Afi interface{}

    // sub Address Family. The type is interface{} with range: 0..4294967295.
    Safi interface{}

    // VRF Name of the table. The type is string.
    VrfName interface{}

    // Name of the table. The type is string.
    TableName interface{}

    // Table version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // Configured prefix limit. The type is interface{} with range: 0..4294967295.
    ConfPrefixLimit interface{}

    // Num prefixes in table. The type is interface{} with range: 0..4294967295.
    CurrentPrefixCount interface{}

    // Num SVD local prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdlclPrefix interface{}

    // Num SVD remote prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdremPrefix interface{}

    // Version no. of the table. The type is interface{} with range:
    // 0..18446744073709551615.
    TableVersion interface{}

    // Prefix limit state indicator. The type is bool.
    PrefixLimitNotified interface{}

    // Table in fwd reference state?. The type is bool.
    FwdReferenced interface{}

    // Table deleted?. The type is bool.
    Deleted interface{}

    // Table has reached convergence. The type is bool.
    InitialConverge interface{}
}

func (information *Rib_RibTableIds_RibTableId_Information) GetFilter() yfilter.YFilter { return information.YFilter }

func (information *Rib_RibTableIds_RibTableId_Information) SetFilter(yf yfilter.YFilter) { information.YFilter = yf }

func (information *Rib_RibTableIds_RibTableId_Information) GetGoName(yname string) string {
    if yname == "tableid" { return "Tableid" }
    if yname == "afi" { return "Afi" }
    if yname == "safi" { return "Safi" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "table-name" { return "TableName" }
    if yname == "version" { return "Version" }
    if yname == "conf-prefix-limit" { return "ConfPrefixLimit" }
    if yname == "current-prefix-count" { return "CurrentPrefixCount" }
    if yname == "num-svdlcl-prefix" { return "NumSvdlclPrefix" }
    if yname == "num-svdrem-prefix" { return "NumSvdremPrefix" }
    if yname == "table-version" { return "TableVersion" }
    if yname == "prefix-limit-notified" { return "PrefixLimitNotified" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "deleted" { return "Deleted" }
    if yname == "initial-converge" { return "InitialConverge" }
    return ""
}

func (information *Rib_RibTableIds_RibTableId_Information) GetSegmentPath() string {
    return "information"
}

func (information *Rib_RibTableIds_RibTableId_Information) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (information *Rib_RibTableIds_RibTableId_Information) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (information *Rib_RibTableIds_RibTableId_Information) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tableid"] = information.Tableid
    leafs["afi"] = information.Afi
    leafs["safi"] = information.Safi
    leafs["vrf-name"] = information.VrfName
    leafs["table-name"] = information.TableName
    leafs["version"] = information.Version
    leafs["conf-prefix-limit"] = information.ConfPrefixLimit
    leafs["current-prefix-count"] = information.CurrentPrefixCount
    leafs["num-svdlcl-prefix"] = information.NumSvdlclPrefix
    leafs["num-svdrem-prefix"] = information.NumSvdremPrefix
    leafs["table-version"] = information.TableVersion
    leafs["prefix-limit-notified"] = information.PrefixLimitNotified
    leafs["fwd-referenced"] = information.FwdReferenced
    leafs["deleted"] = information.Deleted
    leafs["initial-converge"] = information.InitialConverge
    return leafs
}

func (information *Rib_RibTableIds_RibTableId_Information) GetBundleName() string { return "cisco_ios_xr" }

func (information *Rib_RibTableIds_RibTableId_Information) GetYangName() string { return "information" }

func (information *Rib_RibTableIds_RibTableId_Information) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (information *Rib_RibTableIds_RibTableId_Information) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (information *Rib_RibTableIds_RibTableId_Information) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (information *Rib_RibTableIds_RibTableId_Information) SetParent(parent types.Entity) { information.parent = parent }

func (information *Rib_RibTableIds_RibTableId_Information) GetParent() types.Entity { return information.parent }

func (information *Rib_RibTableIds_RibTableId_Information) GetParentYangName() string { return "rib-table-id" }

