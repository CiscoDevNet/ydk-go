// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-rib-ipv6 package operational data.
// 
// This module contains definitions
// for the following management objects:
//   ipv6-rib: RIB operational data
//   ipv6-rib-stdby: ipv6 rib stdby
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ip_rib_ipv6_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_rib_ipv6_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv6-oper ipv6-rib}", reflect.TypeOf(Ipv6Rib{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rib-ipv6-oper:ipv6-rib", reflect.TypeOf(Ipv6Rib{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv6-oper ipv6-rib-stdby}", reflect.TypeOf(Ipv6RibStdby{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rib-ipv6-oper:ipv6-rib-stdby", reflect.TypeOf(Ipv6RibStdby{}))
}

// RibEdmNnh represents Rib edm nnh
type RibEdmNnh string

const (
    // Unknown - Invalid
    RibEdmNnh_unknown RibEdmNnh = "unknown"

    // IPv4 Address
    RibEdmNnh_ipv4_address RibEdmNnh = "ipv4-address"

    // Interface Index
    RibEdmNnh_if_index RibEdmNnh = "if-index"
)

// Ipv6Rib
// RIB operational data
type Ipv6Rib struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB table.
    RibTableIds Ipv6Rib_RibTableIds

    // VRF table.
    Vrfs Ipv6Rib_Vrfs
}

func (ipv6Rib *Ipv6Rib) GetEntityData() *types.CommonEntityData {
    ipv6Rib.EntityData.YFilter = ipv6Rib.YFilter
    ipv6Rib.EntityData.YangName = "ipv6-rib"
    ipv6Rib.EntityData.BundleName = "cisco_ios_xr"
    ipv6Rib.EntityData.ParentYangName = "Cisco-IOS-XR-ip-rib-ipv6-oper"
    ipv6Rib.EntityData.SegmentPath = "Cisco-IOS-XR-ip-rib-ipv6-oper:ipv6-rib"
    ipv6Rib.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Rib.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Rib.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Rib.EntityData.Children = types.NewOrderedMap()
    ipv6Rib.EntityData.Children.Append("rib-table-ids", types.YChild{"RibTableIds", &ipv6Rib.RibTableIds})
    ipv6Rib.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &ipv6Rib.Vrfs})
    ipv6Rib.EntityData.Leafs = types.NewOrderedMap()

    ipv6Rib.EntityData.YListKeys = []string {}

    return &(ipv6Rib.EntityData)
}

// Ipv6Rib_RibTableIds
// RIB table
type Ipv6Rib_RibTableIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific Table. The type is slice of Ipv6Rib_RibTableIds_RibTableId.
    RibTableId []*Ipv6Rib_RibTableIds_RibTableId
}

func (ribTableIds *Ipv6Rib_RibTableIds) GetEntityData() *types.CommonEntityData {
    ribTableIds.EntityData.YFilter = ribTableIds.YFilter
    ribTableIds.EntityData.YangName = "rib-table-ids"
    ribTableIds.EntityData.BundleName = "cisco_ios_xr"
    ribTableIds.EntityData.ParentYangName = "ipv6-rib"
    ribTableIds.EntityData.SegmentPath = "rib-table-ids"
    ribTableIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableIds.EntityData.Children = types.NewOrderedMap()
    ribTableIds.EntityData.Children.Append("rib-table-id", types.YChild{"RibTableId", nil})
    for i := range ribTableIds.RibTableId {
        ribTableIds.EntityData.Children.Append(types.GetSegmentPath(ribTableIds.RibTableId[i]), types.YChild{"RibTableId", ribTableIds.RibTableId[i]})
    }
    ribTableIds.EntityData.Leafs = types.NewOrderedMap()

    ribTableIds.EntityData.YListKeys = []string {}

    return &(ribTableIds.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId
// Specific Table
type Ipv6Rib_RibTableIds_RibTableId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Table ID. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    Tableid interface{}

    // Table related Information.
    Information Ipv6Rib_RibTableIds_RibTableId_Information

    // RIB table summary.
    SummaryProtos Ipv6Rib_RibTableIds_RibTableId_SummaryProtos

    // RIB table interface.
    RibTableItfHndls Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls
}

func (ribTableId *Ipv6Rib_RibTableIds_RibTableId) GetEntityData() *types.CommonEntityData {
    ribTableId.EntityData.YFilter = ribTableId.YFilter
    ribTableId.EntityData.YangName = "rib-table-id"
    ribTableId.EntityData.BundleName = "cisco_ios_xr"
    ribTableId.EntityData.ParentYangName = "rib-table-ids"
    ribTableId.EntityData.SegmentPath = "rib-table-id" + types.AddKeyToken(ribTableId.Tableid, "tableid")
    ribTableId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableId.EntityData.Children = types.NewOrderedMap()
    ribTableId.EntityData.Children.Append("information", types.YChild{"Information", &ribTableId.Information})
    ribTableId.EntityData.Children.Append("summary-protos", types.YChild{"SummaryProtos", &ribTableId.SummaryProtos})
    ribTableId.EntityData.Children.Append("rib-table-itf-hndls", types.YChild{"RibTableItfHndls", &ribTableId.RibTableItfHndls})
    ribTableId.EntityData.Leafs = types.NewOrderedMap()
    ribTableId.EntityData.Leafs.Append("tableid", types.YLeaf{"Tableid", ribTableId.Tableid})

    ribTableId.EntityData.YListKeys = []string {"Tableid"}

    return &(ribTableId.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_Information
// Table related Information
type Ipv6Rib_RibTableIds_RibTableId_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table id. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // Address Family. The type is interface{} with range: 0..4294967295.
    Afi interface{}

    // sub Address Family. The type is interface{} with range: 0..4294967295.
    Safi interface{}

    // VRF Name of the table. The type is string.
    VrfName interface{}

    // Name of the table. The type is string.
    TableName interface{}

    // Table version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // Configured prefix limit. The type is interface{} with range: 0..4294967295.
    ConfPrefixLimit interface{}

    // Num prefixes in table. The type is interface{} with range: 0..4294967295.
    CurrentPrefixCount interface{}

    // Num SVD local prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdlclPrefix interface{}

    // Num SVD remote prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdremPrefix interface{}

    // Version no. of the table. The type is interface{} with range:
    // 0..18446744073709551615.
    TableVersion interface{}

    // Prefix limit state indicator. The type is bool.
    PrefixLimitNotified interface{}

    // Table in fwd reference state?. The type is bool.
    FwdReferenced interface{}

    // Table deleted?. The type is bool.
    Deleted interface{}

    // Table has reached convergence. The type is bool.
    InitialConverge interface{}
}

func (information *Ipv6Rib_RibTableIds_RibTableId_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "rib-table-id"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("tableid", types.YLeaf{"Tableid", information.Tableid})
    information.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", information.Afi})
    information.EntityData.Leafs.Append("safi", types.YLeaf{"Safi", information.Safi})
    information.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", information.VrfName})
    information.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", information.TableName})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("conf-prefix-limit", types.YLeaf{"ConfPrefixLimit", information.ConfPrefixLimit})
    information.EntityData.Leafs.Append("current-prefix-count", types.YLeaf{"CurrentPrefixCount", information.CurrentPrefixCount})
    information.EntityData.Leafs.Append("num-svdlcl-prefix", types.YLeaf{"NumSvdlclPrefix", information.NumSvdlclPrefix})
    information.EntityData.Leafs.Append("num-svdrem-prefix", types.YLeaf{"NumSvdremPrefix", information.NumSvdremPrefix})
    information.EntityData.Leafs.Append("table-version", types.YLeaf{"TableVersion", information.TableVersion})
    information.EntityData.Leafs.Append("prefix-limit-notified", types.YLeaf{"PrefixLimitNotified", information.PrefixLimitNotified})
    information.EntityData.Leafs.Append("fwd-referenced", types.YLeaf{"FwdReferenced", information.FwdReferenced})
    information.EntityData.Leafs.Append("deleted", types.YLeaf{"Deleted", information.Deleted})
    information.EntityData.Leafs.Append("initial-converge", types.YLeaf{"InitialConverge", information.InitialConverge})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos
// RIB table summary
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary information for a specific table/protocol . The type is slice
    // of Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto.
    SummaryProto []*Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto
}

func (summaryProtos *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos) GetEntityData() *types.CommonEntityData {
    summaryProtos.EntityData.YFilter = summaryProtos.YFilter
    summaryProtos.EntityData.YangName = "summary-protos"
    summaryProtos.EntityData.BundleName = "cisco_ios_xr"
    summaryProtos.EntityData.ParentYangName = "rib-table-id"
    summaryProtos.EntityData.SegmentPath = "summary-protos"
    summaryProtos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtos.EntityData.Children = types.NewOrderedMap()
    summaryProtos.EntityData.Children.Append("summary-proto", types.YChild{"SummaryProto", nil})
    for i := range summaryProtos.SummaryProto {
        summaryProtos.EntityData.Children.Append(types.GetSegmentPath(summaryProtos.SummaryProto[i]), types.YChild{"SummaryProto", summaryProtos.SummaryProto[i]})
    }
    summaryProtos.EntityData.Leafs = types.NewOrderedMap()

    summaryProtos.EntityData.YListKeys = []string {}

    return &(summaryProtos.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto
// Route summary information for a specific
// table/protocol 
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Proto ID. The type is interface{} with range:
    // 0..4294967295.
    Protoid interface{}

    // Proto name. The type is string.
    Name interface{}

    // Instance. The type is string.
    Instance interface{}

    // Count for proto. instance.
    ProtoRouteCount Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount

    // No route type.
    RtypeNone Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone

    // Unknown route type.
    RtypeOther Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther

    // OSPF route within an area.
    RtypeOspfIntra Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra

    // OSPF route across diff. areas.
    RtypeOspfInter Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter

    // OSPF external route of type 1.
    RtypeOspfExtern1 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1

    // OSPF external route of type 2.
    RtypeOspfExtern2 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2

    // IS-IS summary route.
    RtypeIsisSum Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum

    // IS-IS level 1 route.
    RtypeIsisL1 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1

    // IS-IS level 2 route.
    RtypeIsisL2 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2

    // IS-IS level1 inter-area route.
    RtypeIsisL1Ia Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia

    // iBGP route.
    RtypeBgpInt Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt

    // eBGP route.
    RtypeBgpExt Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt

    // BGP local route.
    RtypeBgpLoc Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc

    // OSPF NSSA ext. route type 1.
    RtypeOspfNssa1 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1

    // OSPF NSSA ext. route type 2.
    RtypeOspfNssa2 Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2

    // EIGRP internal route.
    RtypeIgrp2Int Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int

    // EIGRP external route.
    RtypeIgrp2Ext Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
}

func (summaryProto *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetEntityData() *types.CommonEntityData {
    summaryProto.EntityData.YFilter = summaryProto.YFilter
    summaryProto.EntityData.YangName = "summary-proto"
    summaryProto.EntityData.BundleName = "cisco_ios_xr"
    summaryProto.EntityData.ParentYangName = "summary-protos"
    summaryProto.EntityData.SegmentPath = "summary-proto" + types.AddKeyToken(summaryProto.Protoid, "protoid")
    summaryProto.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProto.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProto.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProto.EntityData.Children = types.NewOrderedMap()
    summaryProto.EntityData.Children.Append("proto-route-count", types.YChild{"ProtoRouteCount", &summaryProto.ProtoRouteCount})
    summaryProto.EntityData.Children.Append("rtype-none", types.YChild{"RtypeNone", &summaryProto.RtypeNone})
    summaryProto.EntityData.Children.Append("rtype-other", types.YChild{"RtypeOther", &summaryProto.RtypeOther})
    summaryProto.EntityData.Children.Append("rtype-ospf-intra", types.YChild{"RtypeOspfIntra", &summaryProto.RtypeOspfIntra})
    summaryProto.EntityData.Children.Append("rtype-ospf-inter", types.YChild{"RtypeOspfInter", &summaryProto.RtypeOspfInter})
    summaryProto.EntityData.Children.Append("rtype-ospf-extern1", types.YChild{"RtypeOspfExtern1", &summaryProto.RtypeOspfExtern1})
    summaryProto.EntityData.Children.Append("rtype-ospf-extern2", types.YChild{"RtypeOspfExtern2", &summaryProto.RtypeOspfExtern2})
    summaryProto.EntityData.Children.Append("rtype-isis-sum", types.YChild{"RtypeIsisSum", &summaryProto.RtypeIsisSum})
    summaryProto.EntityData.Children.Append("rtype-isis-l1", types.YChild{"RtypeIsisL1", &summaryProto.RtypeIsisL1})
    summaryProto.EntityData.Children.Append("rtype-isis-l2", types.YChild{"RtypeIsisL2", &summaryProto.RtypeIsisL2})
    summaryProto.EntityData.Children.Append("rtype-isis-l1-ia", types.YChild{"RtypeIsisL1Ia", &summaryProto.RtypeIsisL1Ia})
    summaryProto.EntityData.Children.Append("rtype-bgp-int", types.YChild{"RtypeBgpInt", &summaryProto.RtypeBgpInt})
    summaryProto.EntityData.Children.Append("rtype-bgp-ext", types.YChild{"RtypeBgpExt", &summaryProto.RtypeBgpExt})
    summaryProto.EntityData.Children.Append("rtype-bgp-loc", types.YChild{"RtypeBgpLoc", &summaryProto.RtypeBgpLoc})
    summaryProto.EntityData.Children.Append("rtype-ospf-nssa1", types.YChild{"RtypeOspfNssa1", &summaryProto.RtypeOspfNssa1})
    summaryProto.EntityData.Children.Append("rtype-ospf-nssa2", types.YChild{"RtypeOspfNssa2", &summaryProto.RtypeOspfNssa2})
    summaryProto.EntityData.Children.Append("rtype-igrp2-int", types.YChild{"RtypeIgrp2Int", &summaryProto.RtypeIgrp2Int})
    summaryProto.EntityData.Children.Append("rtype-igrp2-ext", types.YChild{"RtypeIgrp2Ext", &summaryProto.RtypeIgrp2Ext})
    summaryProto.EntityData.Leafs = types.NewOrderedMap()
    summaryProto.EntityData.Leafs.Append("protoid", types.YLeaf{"Protoid", summaryProto.Protoid})
    summaryProto.EntityData.Leafs.Append("name", types.YLeaf{"Name", summaryProto.Name})
    summaryProto.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", summaryProto.Instance})

    summaryProto.EntityData.YListKeys = []string {"Protoid"}

    return &(summaryProto.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount
// Count for proto. instance
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (protoRouteCount *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetEntityData() *types.CommonEntityData {
    protoRouteCount.EntityData.YFilter = protoRouteCount.YFilter
    protoRouteCount.EntityData.YangName = "proto-route-count"
    protoRouteCount.EntityData.BundleName = "cisco_ios_xr"
    protoRouteCount.EntityData.ParentYangName = "summary-proto"
    protoRouteCount.EntityData.SegmentPath = "proto-route-count"
    protoRouteCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protoRouteCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protoRouteCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protoRouteCount.EntityData.Children = types.NewOrderedMap()
    protoRouteCount.EntityData.Leafs = types.NewOrderedMap()
    protoRouteCount.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", protoRouteCount.ActiveRoutesCount})
    protoRouteCount.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", protoRouteCount.NumBackupRoutes})
    protoRouteCount.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", protoRouteCount.NumActivePaths})
    protoRouteCount.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", protoRouteCount.NumBackupPaths})

    protoRouteCount.EntityData.YListKeys = []string {}

    return &(protoRouteCount.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone
// No route type
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeNone *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetEntityData() *types.CommonEntityData {
    rtypeNone.EntityData.YFilter = rtypeNone.YFilter
    rtypeNone.EntityData.YangName = "rtype-none"
    rtypeNone.EntityData.BundleName = "cisco_ios_xr"
    rtypeNone.EntityData.ParentYangName = "summary-proto"
    rtypeNone.EntityData.SegmentPath = "rtype-none"
    rtypeNone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeNone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeNone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeNone.EntityData.Children = types.NewOrderedMap()
    rtypeNone.EntityData.Leafs = types.NewOrderedMap()
    rtypeNone.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeNone.ActiveRoutesCount})
    rtypeNone.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeNone.NumBackupRoutes})
    rtypeNone.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeNone.NumActivePaths})
    rtypeNone.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeNone.NumBackupPaths})

    rtypeNone.EntityData.YListKeys = []string {}

    return &(rtypeNone.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther
// Unknown route type
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOther *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetEntityData() *types.CommonEntityData {
    rtypeOther.EntityData.YFilter = rtypeOther.YFilter
    rtypeOther.EntityData.YangName = "rtype-other"
    rtypeOther.EntityData.BundleName = "cisco_ios_xr"
    rtypeOther.EntityData.ParentYangName = "summary-proto"
    rtypeOther.EntityData.SegmentPath = "rtype-other"
    rtypeOther.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOther.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOther.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOther.EntityData.Children = types.NewOrderedMap()
    rtypeOther.EntityData.Leafs = types.NewOrderedMap()
    rtypeOther.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOther.ActiveRoutesCount})
    rtypeOther.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOther.NumBackupRoutes})
    rtypeOther.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOther.NumActivePaths})
    rtypeOther.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOther.NumBackupPaths})

    rtypeOther.EntityData.YListKeys = []string {}

    return &(rtypeOther.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra
// OSPF route within an area
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfIntra *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetEntityData() *types.CommonEntityData {
    rtypeOspfIntra.EntityData.YFilter = rtypeOspfIntra.YFilter
    rtypeOspfIntra.EntityData.YangName = "rtype-ospf-intra"
    rtypeOspfIntra.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfIntra.EntityData.ParentYangName = "summary-proto"
    rtypeOspfIntra.EntityData.SegmentPath = "rtype-ospf-intra"
    rtypeOspfIntra.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfIntra.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfIntra.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfIntra.EntityData.Children = types.NewOrderedMap()
    rtypeOspfIntra.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfIntra.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfIntra.ActiveRoutesCount})
    rtypeOspfIntra.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfIntra.NumBackupRoutes})
    rtypeOspfIntra.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfIntra.NumActivePaths})
    rtypeOspfIntra.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfIntra.NumBackupPaths})

    rtypeOspfIntra.EntityData.YListKeys = []string {}

    return &(rtypeOspfIntra.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter
// OSPF route across diff. areas
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfInter *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetEntityData() *types.CommonEntityData {
    rtypeOspfInter.EntityData.YFilter = rtypeOspfInter.YFilter
    rtypeOspfInter.EntityData.YangName = "rtype-ospf-inter"
    rtypeOspfInter.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfInter.EntityData.ParentYangName = "summary-proto"
    rtypeOspfInter.EntityData.SegmentPath = "rtype-ospf-inter"
    rtypeOspfInter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfInter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfInter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfInter.EntityData.Children = types.NewOrderedMap()
    rtypeOspfInter.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfInter.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfInter.ActiveRoutesCount})
    rtypeOspfInter.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfInter.NumBackupRoutes})
    rtypeOspfInter.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfInter.NumActivePaths})
    rtypeOspfInter.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfInter.NumBackupPaths})

    rtypeOspfInter.EntityData.YListKeys = []string {}

    return &(rtypeOspfInter.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1
// OSPF external route of type 1
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern1 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetEntityData() *types.CommonEntityData {
    rtypeOspfExtern1.EntityData.YFilter = rtypeOspfExtern1.YFilter
    rtypeOspfExtern1.EntityData.YangName = "rtype-ospf-extern1"
    rtypeOspfExtern1.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfExtern1.EntityData.ParentYangName = "summary-proto"
    rtypeOspfExtern1.EntityData.SegmentPath = "rtype-ospf-extern1"
    rtypeOspfExtern1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfExtern1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfExtern1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfExtern1.EntityData.Children = types.NewOrderedMap()
    rtypeOspfExtern1.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfExtern1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfExtern1.ActiveRoutesCount})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfExtern1.NumBackupRoutes})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfExtern1.NumActivePaths})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfExtern1.NumBackupPaths})

    rtypeOspfExtern1.EntityData.YListKeys = []string {}

    return &(rtypeOspfExtern1.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2
// OSPF external route of type 2
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern2 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetEntityData() *types.CommonEntityData {
    rtypeOspfExtern2.EntityData.YFilter = rtypeOspfExtern2.YFilter
    rtypeOspfExtern2.EntityData.YangName = "rtype-ospf-extern2"
    rtypeOspfExtern2.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfExtern2.EntityData.ParentYangName = "summary-proto"
    rtypeOspfExtern2.EntityData.SegmentPath = "rtype-ospf-extern2"
    rtypeOspfExtern2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfExtern2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfExtern2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfExtern2.EntityData.Children = types.NewOrderedMap()
    rtypeOspfExtern2.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfExtern2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfExtern2.ActiveRoutesCount})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfExtern2.NumBackupRoutes})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfExtern2.NumActivePaths})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfExtern2.NumBackupPaths})

    rtypeOspfExtern2.EntityData.YListKeys = []string {}

    return &(rtypeOspfExtern2.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum
// IS-IS summary route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisSum *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetEntityData() *types.CommonEntityData {
    rtypeIsisSum.EntityData.YFilter = rtypeIsisSum.YFilter
    rtypeIsisSum.EntityData.YangName = "rtype-isis-sum"
    rtypeIsisSum.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisSum.EntityData.ParentYangName = "summary-proto"
    rtypeIsisSum.EntityData.SegmentPath = "rtype-isis-sum"
    rtypeIsisSum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisSum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisSum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisSum.EntityData.Children = types.NewOrderedMap()
    rtypeIsisSum.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisSum.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisSum.ActiveRoutesCount})
    rtypeIsisSum.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisSum.NumBackupRoutes})
    rtypeIsisSum.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisSum.NumActivePaths})
    rtypeIsisSum.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisSum.NumBackupPaths})

    rtypeIsisSum.EntityData.YListKeys = []string {}

    return &(rtypeIsisSum.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1
// IS-IS level 1 route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetEntityData() *types.CommonEntityData {
    rtypeIsisL1.EntityData.YFilter = rtypeIsisL1.YFilter
    rtypeIsisL1.EntityData.YangName = "rtype-isis-l1"
    rtypeIsisL1.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL1.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL1.EntityData.SegmentPath = "rtype-isis-l1"
    rtypeIsisL1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL1.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL1.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL1.ActiveRoutesCount})
    rtypeIsisL1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL1.NumBackupRoutes})
    rtypeIsisL1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL1.NumActivePaths})
    rtypeIsisL1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL1.NumBackupPaths})

    rtypeIsisL1.EntityData.YListKeys = []string {}

    return &(rtypeIsisL1.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2
// IS-IS level 2 route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL2 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetEntityData() *types.CommonEntityData {
    rtypeIsisL2.EntityData.YFilter = rtypeIsisL2.YFilter
    rtypeIsisL2.EntityData.YangName = "rtype-isis-l2"
    rtypeIsisL2.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL2.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL2.EntityData.SegmentPath = "rtype-isis-l2"
    rtypeIsisL2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL2.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL2.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL2.ActiveRoutesCount})
    rtypeIsisL2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL2.NumBackupRoutes})
    rtypeIsisL2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL2.NumActivePaths})
    rtypeIsisL2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL2.NumBackupPaths})

    rtypeIsisL2.EntityData.YListKeys = []string {}

    return &(rtypeIsisL2.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia
// IS-IS level1 inter-area route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1Ia *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetEntityData() *types.CommonEntityData {
    rtypeIsisL1Ia.EntityData.YFilter = rtypeIsisL1Ia.YFilter
    rtypeIsisL1Ia.EntityData.YangName = "rtype-isis-l1-ia"
    rtypeIsisL1Ia.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL1Ia.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL1Ia.EntityData.SegmentPath = "rtype-isis-l1-ia"
    rtypeIsisL1Ia.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL1Ia.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL1Ia.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL1Ia.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL1Ia.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL1Ia.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL1Ia.ActiveRoutesCount})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL1Ia.NumBackupRoutes})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL1Ia.NumActivePaths})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL1Ia.NumBackupPaths})

    rtypeIsisL1Ia.EntityData.YListKeys = []string {}

    return &(rtypeIsisL1Ia.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt
// iBGP route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpInt *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetEntityData() *types.CommonEntityData {
    rtypeBgpInt.EntityData.YFilter = rtypeBgpInt.YFilter
    rtypeBgpInt.EntityData.YangName = "rtype-bgp-int"
    rtypeBgpInt.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpInt.EntityData.ParentYangName = "summary-proto"
    rtypeBgpInt.EntityData.SegmentPath = "rtype-bgp-int"
    rtypeBgpInt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpInt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpInt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpInt.EntityData.Children = types.NewOrderedMap()
    rtypeBgpInt.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpInt.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpInt.ActiveRoutesCount})
    rtypeBgpInt.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpInt.NumBackupRoutes})
    rtypeBgpInt.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpInt.NumActivePaths})
    rtypeBgpInt.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpInt.NumBackupPaths})

    rtypeBgpInt.EntityData.YListKeys = []string {}

    return &(rtypeBgpInt.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt
// eBGP route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpExt *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetEntityData() *types.CommonEntityData {
    rtypeBgpExt.EntityData.YFilter = rtypeBgpExt.YFilter
    rtypeBgpExt.EntityData.YangName = "rtype-bgp-ext"
    rtypeBgpExt.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpExt.EntityData.ParentYangName = "summary-proto"
    rtypeBgpExt.EntityData.SegmentPath = "rtype-bgp-ext"
    rtypeBgpExt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpExt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpExt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpExt.EntityData.Children = types.NewOrderedMap()
    rtypeBgpExt.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpExt.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpExt.ActiveRoutesCount})
    rtypeBgpExt.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpExt.NumBackupRoutes})
    rtypeBgpExt.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpExt.NumActivePaths})
    rtypeBgpExt.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpExt.NumBackupPaths})

    rtypeBgpExt.EntityData.YListKeys = []string {}

    return &(rtypeBgpExt.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc
// BGP local route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpLoc *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetEntityData() *types.CommonEntityData {
    rtypeBgpLoc.EntityData.YFilter = rtypeBgpLoc.YFilter
    rtypeBgpLoc.EntityData.YangName = "rtype-bgp-loc"
    rtypeBgpLoc.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpLoc.EntityData.ParentYangName = "summary-proto"
    rtypeBgpLoc.EntityData.SegmentPath = "rtype-bgp-loc"
    rtypeBgpLoc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpLoc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpLoc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpLoc.EntityData.Children = types.NewOrderedMap()
    rtypeBgpLoc.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpLoc.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpLoc.ActiveRoutesCount})
    rtypeBgpLoc.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpLoc.NumBackupRoutes})
    rtypeBgpLoc.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpLoc.NumActivePaths})
    rtypeBgpLoc.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpLoc.NumBackupPaths})

    rtypeBgpLoc.EntityData.YListKeys = []string {}

    return &(rtypeBgpLoc.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1
// OSPF NSSA ext. route type 1
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa1 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetEntityData() *types.CommonEntityData {
    rtypeOspfNssa1.EntityData.YFilter = rtypeOspfNssa1.YFilter
    rtypeOspfNssa1.EntityData.YangName = "rtype-ospf-nssa1"
    rtypeOspfNssa1.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfNssa1.EntityData.ParentYangName = "summary-proto"
    rtypeOspfNssa1.EntityData.SegmentPath = "rtype-ospf-nssa1"
    rtypeOspfNssa1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfNssa1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfNssa1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfNssa1.EntityData.Children = types.NewOrderedMap()
    rtypeOspfNssa1.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfNssa1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfNssa1.ActiveRoutesCount})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfNssa1.NumBackupRoutes})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfNssa1.NumActivePaths})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfNssa1.NumBackupPaths})

    rtypeOspfNssa1.EntityData.YListKeys = []string {}

    return &(rtypeOspfNssa1.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2
// OSPF NSSA ext. route type 2
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa2 *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetEntityData() *types.CommonEntityData {
    rtypeOspfNssa2.EntityData.YFilter = rtypeOspfNssa2.YFilter
    rtypeOspfNssa2.EntityData.YangName = "rtype-ospf-nssa2"
    rtypeOspfNssa2.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfNssa2.EntityData.ParentYangName = "summary-proto"
    rtypeOspfNssa2.EntityData.SegmentPath = "rtype-ospf-nssa2"
    rtypeOspfNssa2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfNssa2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfNssa2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfNssa2.EntityData.Children = types.NewOrderedMap()
    rtypeOspfNssa2.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfNssa2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfNssa2.ActiveRoutesCount})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfNssa2.NumBackupRoutes})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfNssa2.NumActivePaths})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfNssa2.NumBackupPaths})

    rtypeOspfNssa2.EntityData.YListKeys = []string {}

    return &(rtypeOspfNssa2.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int
// EIGRP internal route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Int *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetEntityData() *types.CommonEntityData {
    rtypeIgrp2Int.EntityData.YFilter = rtypeIgrp2Int.YFilter
    rtypeIgrp2Int.EntityData.YangName = "rtype-igrp2-int"
    rtypeIgrp2Int.EntityData.BundleName = "cisco_ios_xr"
    rtypeIgrp2Int.EntityData.ParentYangName = "summary-proto"
    rtypeIgrp2Int.EntityData.SegmentPath = "rtype-igrp2-int"
    rtypeIgrp2Int.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIgrp2Int.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIgrp2Int.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIgrp2Int.EntityData.Children = types.NewOrderedMap()
    rtypeIgrp2Int.EntityData.Leafs = types.NewOrderedMap()
    rtypeIgrp2Int.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIgrp2Int.ActiveRoutesCount})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIgrp2Int.NumBackupRoutes})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIgrp2Int.NumActivePaths})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIgrp2Int.NumBackupPaths})

    rtypeIgrp2Int.EntityData.YListKeys = []string {}

    return &(rtypeIgrp2Int.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
// EIGRP external route
type Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Ext *Ipv6Rib_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetEntityData() *types.CommonEntityData {
    rtypeIgrp2Ext.EntityData.YFilter = rtypeIgrp2Ext.YFilter
    rtypeIgrp2Ext.EntityData.YangName = "rtype-igrp2-ext"
    rtypeIgrp2Ext.EntityData.BundleName = "cisco_ios_xr"
    rtypeIgrp2Ext.EntityData.ParentYangName = "summary-proto"
    rtypeIgrp2Ext.EntityData.SegmentPath = "rtype-igrp2-ext"
    rtypeIgrp2Ext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIgrp2Ext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIgrp2Ext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIgrp2Ext.EntityData.Children = types.NewOrderedMap()
    rtypeIgrp2Ext.EntityData.Leafs = types.NewOrderedMap()
    rtypeIgrp2Ext.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIgrp2Ext.ActiveRoutesCount})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIgrp2Ext.NumBackupRoutes})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIgrp2Ext.NumActivePaths})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIgrp2Ext.NumBackupPaths})

    rtypeIgrp2Ext.EntityData.YListKeys = []string {}

    return &(rtypeIgrp2Ext.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls
// RIB table interface
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface handle. The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl.
    RibTableItfHndl []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
}

func (ribTableItfHndls *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls) GetEntityData() *types.CommonEntityData {
    ribTableItfHndls.EntityData.YFilter = ribTableItfHndls.YFilter
    ribTableItfHndls.EntityData.YangName = "rib-table-itf-hndls"
    ribTableItfHndls.EntityData.BundleName = "cisco_ios_xr"
    ribTableItfHndls.EntityData.ParentYangName = "rib-table-id"
    ribTableItfHndls.EntityData.SegmentPath = "rib-table-itf-hndls"
    ribTableItfHndls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableItfHndls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableItfHndls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableItfHndls.EntityData.Children = types.NewOrderedMap()
    ribTableItfHndls.EntityData.Children.Append("rib-table-itf-hndl", types.YChild{"RibTableItfHndl", nil})
    for i := range ribTableItfHndls.RibTableItfHndl {
        ribTableItfHndls.EntityData.Children.Append(types.GetSegmentPath(ribTableItfHndls.RibTableItfHndl[i]), types.YChild{"RibTableItfHndl", ribTableItfHndls.RibTableItfHndl[i]})
    }
    ribTableItfHndls.EntityData.Leafs = types.NewOrderedMap()

    ribTableItfHndls.EntityData.YListKeys = []string {}

    return &(ribTableItfHndls.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
// Interface handle
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Itf Handle. The type is interface{} with range:
    // 0..4294967295.
    Handle interface{}

    // Route information for a specific table/interface . The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute.
    ItfRoute []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
}

func (ribTableItfHndl *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetEntityData() *types.CommonEntityData {
    ribTableItfHndl.EntityData.YFilter = ribTableItfHndl.YFilter
    ribTableItfHndl.EntityData.YangName = "rib-table-itf-hndl"
    ribTableItfHndl.EntityData.BundleName = "cisco_ios_xr"
    ribTableItfHndl.EntityData.ParentYangName = "rib-table-itf-hndls"
    ribTableItfHndl.EntityData.SegmentPath = "rib-table-itf-hndl" + types.AddKeyToken(ribTableItfHndl.Handle, "handle")
    ribTableItfHndl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableItfHndl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableItfHndl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableItfHndl.EntityData.Children = types.NewOrderedMap()
    ribTableItfHndl.EntityData.Children.Append("itf-route", types.YChild{"ItfRoute", nil})
    for i := range ribTableItfHndl.ItfRoute {
        ribTableItfHndl.EntityData.Children.Append(types.GetSegmentPath(ribTableItfHndl.ItfRoute[i]), types.YChild{"ItfRoute", ribTableItfHndl.ItfRoute[i]})
    }
    ribTableItfHndl.EntityData.Leafs = types.NewOrderedMap()
    ribTableItfHndl.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", ribTableItfHndl.Handle})

    ribTableItfHndl.EntityData.YListKeys = []string {"Handle"}

    return &(ribTableItfHndl.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
// Route information for a specific
// table/interface 
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
}

func (itfRoute *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetEntityData() *types.CommonEntityData {
    itfRoute.EntityData.YFilter = itfRoute.YFilter
    itfRoute.EntityData.YangName = "itf-route"
    itfRoute.EntityData.BundleName = "cisco_ios_xr"
    itfRoute.EntityData.ParentYangName = "rib-table-itf-hndl"
    itfRoute.EntityData.SegmentPath = "itf-route" + types.AddKeyToken(itfRoute.Address, "address")
    itfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    itfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    itfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    itfRoute.EntityData.Children = types.NewOrderedMap()
    itfRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &itfRoute.RoutePath})
    itfRoute.EntityData.Leafs = types.NewOrderedMap()
    itfRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", itfRoute.Address})
    itfRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", itfRoute.Prefix})
    itfRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", itfRoute.PrefixLengthXr})
    itfRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", itfRoute.RouteVersion})
    itfRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", itfRoute.ProtocolId})
    itfRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", itfRoute.ProtocolName})
    itfRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", itfRoute.Instance})
    itfRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", itfRoute.ClientId})
    itfRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", itfRoute.RouteType})
    itfRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", itfRoute.Priority})
    itfRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", itfRoute.SvdType})
    itfRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", itfRoute.Flags})
    itfRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", itfRoute.ExtendedFlags})
    itfRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", itfRoute.Tag})
    itfRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", itfRoute.Distance})
    itfRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", itfRoute.DiversionDistance})
    itfRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", itfRoute.Metric})
    itfRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", itfRoute.PathsCount})
    itfRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", itfRoute.AttributeIdentity})
    itfRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", itfRoute.TrafficIndex})
    itfRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", itfRoute.RoutePrecedence})
    itfRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", itfRoute.QosGroup})
    itfRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", itfRoute.FlowTag})
    itfRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", itfRoute.FwdClass})
    itfRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", itfRoute.PicCount})
    itfRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", itfRoute.Active})
    itfRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", itfRoute.Diversion})
    itfRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", itfRoute.DiversionProtoName})
    itfRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", itfRoute.RouteAge})
    itfRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", itfRoute.RouteLabel})
    itfRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", itfRoute.Version})
    itfRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", itfRoute.TblVersion})
    itfRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", itfRoute.RouteModifyTime})

    itfRoute.EntityData.YListKeys = []string {"Address"}

    return &(itfRoute.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "itf-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs
// VRF table
type Ipv6Rib_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific VRF. The type is slice of Ipv6Rib_Vrfs_Vrf.
    Vrf []*Ipv6Rib_Vrfs_Vrf
}

func (vrfs *Ipv6Rib_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "ipv6-rib"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf
// Specific VRF
type Ipv6Rib_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the VRF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Address Family (AF) table.
    Afs Ipv6Rib_Vrfs_Vrf_Afs
}

func (vrf *Ipv6Rib_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("afs", types.YChild{"Afs", &vrf.Afs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs
// Address Family (AF) table
type Ipv6Rib_Vrfs_Vrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific AF information. The type is slice of Ipv6Rib_Vrfs_Vrf_Afs_Af.
    Af []*Ipv6Rib_Vrfs_Vrf_Afs_Af
}

func (afs *Ipv6Rib_Vrfs_Vrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af
// Specific AF information
type Ipv6Rib_Vrfs_Vrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the AF - 'IPv6'. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    AfName interface{}

    // Subsequent Address Family (SAF) table.
    Safs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs
}

func (af *Ipv6Rib_Vrfs_Vrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("safs", types.YChild{"Safs", &af.Safs})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs
// Subsequent Address Family (SAF) table
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific SAF information. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf.
    Saf []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf
}

func (safs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs) GetEntityData() *types.CommonEntityData {
    safs.EntityData.YFilter = safs.YFilter
    safs.EntityData.YangName = "safs"
    safs.EntityData.BundleName = "cisco_ios_xr"
    safs.EntityData.ParentYangName = "af"
    safs.EntityData.SegmentPath = "safs"
    safs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    safs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    safs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    safs.EntityData.Children = types.NewOrderedMap()
    safs.EntityData.Children.Append("saf", types.YChild{"Saf", nil})
    for i := range safs.Saf {
        safs.EntityData.Children.Append(types.GetSegmentPath(safs.Saf[i]), types.YChild{"Saf", safs.Saf[i]})
    }
    safs.EntityData.Leafs = types.NewOrderedMap()

    safs.EntityData.YListKeys = []string {}

    return &(safs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf
// Specific SAF information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the SAF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    SafName interface{}

    // Global container of routes.
    IpRibRouteTableNames Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
}

func (saf *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf) GetEntityData() *types.CommonEntityData {
    saf.EntityData.YFilter = saf.YFilter
    saf.EntityData.YangName = "saf"
    saf.EntityData.BundleName = "cisco_ios_xr"
    saf.EntityData.ParentYangName = "safs"
    saf.EntityData.SegmentPath = "saf" + types.AddKeyToken(saf.SafName, "saf-name")
    saf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saf.EntityData.Children = types.NewOrderedMap()
    saf.EntityData.Children.Append("ip-rib-route-table-names", types.YChild{"IpRibRouteTableNames", &saf.IpRibRouteTableNames})
    saf.EntityData.Leafs = types.NewOrderedMap()
    saf.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", saf.SafName})

    saf.EntityData.YListKeys = []string {"SafName"}

    return &(saf.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
// Global container of routes
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP RIB Route table name for a topology. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName.
    IpRibRouteTableName []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
}

func (ipRibRouteTableNames *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetEntityData() *types.CommonEntityData {
    ipRibRouteTableNames.EntityData.YFilter = ipRibRouteTableNames.YFilter
    ipRibRouteTableNames.EntityData.YangName = "ip-rib-route-table-names"
    ipRibRouteTableNames.EntityData.BundleName = "cisco_ios_xr"
    ipRibRouteTableNames.EntityData.ParentYangName = "saf"
    ipRibRouteTableNames.EntityData.SegmentPath = "ip-rib-route-table-names"
    ipRibRouteTableNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipRibRouteTableNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipRibRouteTableNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipRibRouteTableNames.EntityData.Children = types.NewOrderedMap()
    ipRibRouteTableNames.EntityData.Children.Append("ip-rib-route-table-name", types.YChild{"IpRibRouteTableName", nil})
    for i := range ipRibRouteTableNames.IpRibRouteTableName {
        ipRibRouteTableNames.EntityData.Children.Append(types.GetSegmentPath(ipRibRouteTableNames.IpRibRouteTableName[i]), types.YChild{"IpRibRouteTableName", ipRibRouteTableNames.IpRibRouteTableName[i]})
    }
    ipRibRouteTableNames.EntityData.Leafs = types.NewOrderedMap()

    ipRibRouteTableNames.EntityData.YListKeys = []string {}

    return &(ipRibRouteTableNames.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
// IP RIB Route table name for a topology
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the route table . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RouteTableName interface{}

    // Destination KW.
    DestinationKw Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw

    // Route advertiser information .
    Adverts Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts

    // Deleted.
    DeletedRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes

    // Contains the classification of routes by protocol.
    Protocol Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol

    // Route information .
    Routes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes

    // Quarantine.
    QRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes

    // Backup route information for the given table.
    BackupRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
}

func (ipRibRouteTableName *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetEntityData() *types.CommonEntityData {
    ipRibRouteTableName.EntityData.YFilter = ipRibRouteTableName.YFilter
    ipRibRouteTableName.EntityData.YangName = "ip-rib-route-table-name"
    ipRibRouteTableName.EntityData.BundleName = "cisco_ios_xr"
    ipRibRouteTableName.EntityData.ParentYangName = "ip-rib-route-table-names"
    ipRibRouteTableName.EntityData.SegmentPath = "ip-rib-route-table-name" + types.AddKeyToken(ipRibRouteTableName.RouteTableName, "route-table-name")
    ipRibRouteTableName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipRibRouteTableName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipRibRouteTableName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipRibRouteTableName.EntityData.Children = types.NewOrderedMap()
    ipRibRouteTableName.EntityData.Children.Append("destination-kw", types.YChild{"DestinationKw", &ipRibRouteTableName.DestinationKw})
    ipRibRouteTableName.EntityData.Children.Append("adverts", types.YChild{"Adverts", &ipRibRouteTableName.Adverts})
    ipRibRouteTableName.EntityData.Children.Append("deleted-routes", types.YChild{"DeletedRoutes", &ipRibRouteTableName.DeletedRoutes})
    ipRibRouteTableName.EntityData.Children.Append("protocol", types.YChild{"Protocol", &ipRibRouteTableName.Protocol})
    ipRibRouteTableName.EntityData.Children.Append("routes", types.YChild{"Routes", &ipRibRouteTableName.Routes})
    ipRibRouteTableName.EntityData.Children.Append("q-routes", types.YChild{"QRoutes", &ipRibRouteTableName.QRoutes})
    ipRibRouteTableName.EntityData.Children.Append("backup-routes", types.YChild{"BackupRoutes", &ipRibRouteTableName.BackupRoutes})
    ipRibRouteTableName.EntityData.Leafs = types.NewOrderedMap()
    ipRibRouteTableName.EntityData.Leafs.Append("route-table-name", types.YLeaf{"RouteTableName", ipRibRouteTableName.RouteTableName})

    ipRibRouteTableName.EntityData.YListKeys = []string {"RouteTableName"}

    return &(ipRibRouteTableName.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw
// Destination KW
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quarantine.
    DestQRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes

    // Backup.
    DestBackupRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes

    // Best Local.
    DestBestRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes

    // Resolving next hop.
    DestNextHopRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
}

func (destinationKw *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetEntityData() *types.CommonEntityData {
    destinationKw.EntityData.YFilter = destinationKw.YFilter
    destinationKw.EntityData.YangName = "destination-kw"
    destinationKw.EntityData.BundleName = "cisco_ios_xr"
    destinationKw.EntityData.ParentYangName = "ip-rib-route-table-name"
    destinationKw.EntityData.SegmentPath = "destination-kw"
    destinationKw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationKw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationKw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationKw.EntityData.Children = types.NewOrderedMap()
    destinationKw.EntityData.Children.Append("dest-q-routes", types.YChild{"DestQRoutes", &destinationKw.DestQRoutes})
    destinationKw.EntityData.Children.Append("dest-backup-routes", types.YChild{"DestBackupRoutes", &destinationKw.DestBackupRoutes})
    destinationKw.EntityData.Children.Append("dest-best-routes", types.YChild{"DestBestRoutes", &destinationKw.DestBestRoutes})
    destinationKw.EntityData.Children.Append("dest-next-hop-routes", types.YChild{"DestNextHopRoutes", &destinationKw.DestNextHopRoutes})
    destinationKw.EntityData.Leafs = types.NewOrderedMap()

    destinationKw.EntityData.YListKeys = []string {}

    return &(destinationKw.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes
// Quarantine
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute.
    DestQRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
}

func (destQRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetEntityData() *types.CommonEntityData {
    destQRoutes.EntityData.YFilter = destQRoutes.YFilter
    destQRoutes.EntityData.YangName = "dest-q-routes"
    destQRoutes.EntityData.BundleName = "cisco_ios_xr"
    destQRoutes.EntityData.ParentYangName = "destination-kw"
    destQRoutes.EntityData.SegmentPath = "dest-q-routes"
    destQRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destQRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destQRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destQRoutes.EntityData.Children = types.NewOrderedMap()
    destQRoutes.EntityData.Children.Append("dest-q-route", types.YChild{"DestQRoute", nil})
    for i := range destQRoutes.DestQRoute {
        destQRoutes.EntityData.Children.Append(types.GetSegmentPath(destQRoutes.DestQRoute[i]), types.YChild{"DestQRoute", destQRoutes.DestQRoute[i]})
    }
    destQRoutes.EntityData.Leafs = types.NewOrderedMap()

    destQRoutes.EntityData.YListKeys = []string {}

    return &(destQRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
// Route information of a specific Backup
// Address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
}

func (destQRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetEntityData() *types.CommonEntityData {
    destQRoute.EntityData.YFilter = destQRoute.YFilter
    destQRoute.EntityData.YangName = "dest-q-route"
    destQRoute.EntityData.BundleName = "cisco_ios_xr"
    destQRoute.EntityData.ParentYangName = "dest-q-routes"
    destQRoute.EntityData.SegmentPath = "dest-q-route"
    destQRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destQRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destQRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destQRoute.EntityData.Children = types.NewOrderedMap()
    destQRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destQRoute.RoutePath})
    destQRoute.EntityData.Leafs = types.NewOrderedMap()
    destQRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destQRoute.Address})
    destQRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", destQRoute.PrefixLength})
    destQRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destQRoute.Prefix})
    destQRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destQRoute.PrefixLengthXr})
    destQRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destQRoute.RouteVersion})
    destQRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destQRoute.ProtocolId})
    destQRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destQRoute.ProtocolName})
    destQRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destQRoute.Instance})
    destQRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destQRoute.ClientId})
    destQRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destQRoute.RouteType})
    destQRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destQRoute.Priority})
    destQRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destQRoute.SvdType})
    destQRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destQRoute.Flags})
    destQRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destQRoute.ExtendedFlags})
    destQRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destQRoute.Tag})
    destQRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destQRoute.Distance})
    destQRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destQRoute.DiversionDistance})
    destQRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destQRoute.Metric})
    destQRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destQRoute.PathsCount})
    destQRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destQRoute.AttributeIdentity})
    destQRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destQRoute.TrafficIndex})
    destQRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destQRoute.RoutePrecedence})
    destQRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destQRoute.QosGroup})
    destQRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destQRoute.FlowTag})
    destQRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destQRoute.FwdClass})
    destQRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destQRoute.PicCount})
    destQRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destQRoute.Active})
    destQRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destQRoute.Diversion})
    destQRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destQRoute.DiversionProtoName})
    destQRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destQRoute.RouteAge})
    destQRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destQRoute.RouteLabel})
    destQRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destQRoute.Version})
    destQRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destQRoute.TblVersion})
    destQRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destQRoute.RouteModifyTime})

    destQRoute.EntityData.YListKeys = []string {}

    return &(destQRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-q-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes
// Backup
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute.
    DestBackupRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
}

func (destBackupRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetEntityData() *types.CommonEntityData {
    destBackupRoutes.EntityData.YFilter = destBackupRoutes.YFilter
    destBackupRoutes.EntityData.YangName = "dest-backup-routes"
    destBackupRoutes.EntityData.BundleName = "cisco_ios_xr"
    destBackupRoutes.EntityData.ParentYangName = "destination-kw"
    destBackupRoutes.EntityData.SegmentPath = "dest-backup-routes"
    destBackupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBackupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBackupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBackupRoutes.EntityData.Children = types.NewOrderedMap()
    destBackupRoutes.EntityData.Children.Append("dest-backup-route", types.YChild{"DestBackupRoute", nil})
    for i := range destBackupRoutes.DestBackupRoute {
        destBackupRoutes.EntityData.Children.Append(types.GetSegmentPath(destBackupRoutes.DestBackupRoute[i]), types.YChild{"DestBackupRoute", destBackupRoutes.DestBackupRoute[i]})
    }
    destBackupRoutes.EntityData.Leafs = types.NewOrderedMap()

    destBackupRoutes.EntityData.YListKeys = []string {}

    return &(destBackupRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
// Route information of a specific Backup
// Address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
}

func (destBackupRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetEntityData() *types.CommonEntityData {
    destBackupRoute.EntityData.YFilter = destBackupRoute.YFilter
    destBackupRoute.EntityData.YangName = "dest-backup-route"
    destBackupRoute.EntityData.BundleName = "cisco_ios_xr"
    destBackupRoute.EntityData.ParentYangName = "dest-backup-routes"
    destBackupRoute.EntityData.SegmentPath = "dest-backup-route"
    destBackupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBackupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBackupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBackupRoute.EntityData.Children = types.NewOrderedMap()
    destBackupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destBackupRoute.RoutePath})
    destBackupRoute.EntityData.Leafs = types.NewOrderedMap()
    destBackupRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destBackupRoute.Address})
    destBackupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", destBackupRoute.PrefixLength})
    destBackupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destBackupRoute.Prefix})
    destBackupRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destBackupRoute.PrefixLengthXr})
    destBackupRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destBackupRoute.RouteVersion})
    destBackupRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destBackupRoute.ProtocolId})
    destBackupRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destBackupRoute.ProtocolName})
    destBackupRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destBackupRoute.Instance})
    destBackupRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destBackupRoute.ClientId})
    destBackupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destBackupRoute.RouteType})
    destBackupRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destBackupRoute.Priority})
    destBackupRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destBackupRoute.SvdType})
    destBackupRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destBackupRoute.Flags})
    destBackupRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destBackupRoute.ExtendedFlags})
    destBackupRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destBackupRoute.Tag})
    destBackupRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destBackupRoute.Distance})
    destBackupRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destBackupRoute.DiversionDistance})
    destBackupRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destBackupRoute.Metric})
    destBackupRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destBackupRoute.PathsCount})
    destBackupRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destBackupRoute.AttributeIdentity})
    destBackupRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destBackupRoute.TrafficIndex})
    destBackupRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destBackupRoute.RoutePrecedence})
    destBackupRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destBackupRoute.QosGroup})
    destBackupRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destBackupRoute.FlowTag})
    destBackupRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destBackupRoute.FwdClass})
    destBackupRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destBackupRoute.PicCount})
    destBackupRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destBackupRoute.Active})
    destBackupRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destBackupRoute.Diversion})
    destBackupRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destBackupRoute.DiversionProtoName})
    destBackupRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destBackupRoute.RouteAge})
    destBackupRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destBackupRoute.RouteLabel})
    destBackupRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destBackupRoute.Version})
    destBackupRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destBackupRoute.TblVersion})
    destBackupRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destBackupRoute.RouteModifyTime})

    destBackupRoute.EntityData.YListKeys = []string {}

    return &(destBackupRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes
// Best Local
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Best local route information for a specific Address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute.
    DestBestRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
}

func (destBestRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetEntityData() *types.CommonEntityData {
    destBestRoutes.EntityData.YFilter = destBestRoutes.YFilter
    destBestRoutes.EntityData.YangName = "dest-best-routes"
    destBestRoutes.EntityData.BundleName = "cisco_ios_xr"
    destBestRoutes.EntityData.ParentYangName = "destination-kw"
    destBestRoutes.EntityData.SegmentPath = "dest-best-routes"
    destBestRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBestRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBestRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBestRoutes.EntityData.Children = types.NewOrderedMap()
    destBestRoutes.EntityData.Children.Append("dest-best-route", types.YChild{"DestBestRoute", nil})
    for i := range destBestRoutes.DestBestRoute {
        destBestRoutes.EntityData.Children.Append(types.GetSegmentPath(destBestRoutes.DestBestRoute[i]), types.YChild{"DestBestRoute", destBestRoutes.DestBestRoute[i]})
    }
    destBestRoutes.EntityData.Leafs = types.NewOrderedMap()

    destBestRoutes.EntityData.YListKeys = []string {}

    return &(destBestRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
// Best local route information for a
// specific Address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
}

func (destBestRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetEntityData() *types.CommonEntityData {
    destBestRoute.EntityData.YFilter = destBestRoute.YFilter
    destBestRoute.EntityData.YangName = "dest-best-route"
    destBestRoute.EntityData.BundleName = "cisco_ios_xr"
    destBestRoute.EntityData.ParentYangName = "dest-best-routes"
    destBestRoute.EntityData.SegmentPath = "dest-best-route" + types.AddKeyToken(destBestRoute.Address, "address")
    destBestRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBestRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBestRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBestRoute.EntityData.Children = types.NewOrderedMap()
    destBestRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destBestRoute.RoutePath})
    destBestRoute.EntityData.Leafs = types.NewOrderedMap()
    destBestRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destBestRoute.Address})
    destBestRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destBestRoute.Prefix})
    destBestRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destBestRoute.PrefixLengthXr})
    destBestRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destBestRoute.RouteVersion})
    destBestRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destBestRoute.ProtocolId})
    destBestRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destBestRoute.ProtocolName})
    destBestRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destBestRoute.Instance})
    destBestRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destBestRoute.ClientId})
    destBestRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destBestRoute.RouteType})
    destBestRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destBestRoute.Priority})
    destBestRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destBestRoute.SvdType})
    destBestRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destBestRoute.Flags})
    destBestRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destBestRoute.ExtendedFlags})
    destBestRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destBestRoute.Tag})
    destBestRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destBestRoute.Distance})
    destBestRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destBestRoute.DiversionDistance})
    destBestRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destBestRoute.Metric})
    destBestRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destBestRoute.PathsCount})
    destBestRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destBestRoute.AttributeIdentity})
    destBestRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destBestRoute.TrafficIndex})
    destBestRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destBestRoute.RoutePrecedence})
    destBestRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destBestRoute.QosGroup})
    destBestRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destBestRoute.FlowTag})
    destBestRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destBestRoute.FwdClass})
    destBestRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destBestRoute.PicCount})
    destBestRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destBestRoute.Active})
    destBestRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destBestRoute.Diversion})
    destBestRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destBestRoute.DiversionProtoName})
    destBestRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destBestRoute.RouteAge})
    destBestRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destBestRoute.RouteLabel})
    destBestRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destBestRoute.Version})
    destBestRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destBestRoute.TblVersion})
    destBestRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destBestRoute.RouteModifyTime})

    destBestRoute.EntityData.YListKeys = []string {"Address"}

    return &(destBestRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-best-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
// Resolving next hop
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop information for a specific address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute.
    DestNextHopRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
}

func (destNextHopRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetEntityData() *types.CommonEntityData {
    destNextHopRoutes.EntityData.YFilter = destNextHopRoutes.YFilter
    destNextHopRoutes.EntityData.YangName = "dest-next-hop-routes"
    destNextHopRoutes.EntityData.BundleName = "cisco_ios_xr"
    destNextHopRoutes.EntityData.ParentYangName = "destination-kw"
    destNextHopRoutes.EntityData.SegmentPath = "dest-next-hop-routes"
    destNextHopRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destNextHopRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destNextHopRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destNextHopRoutes.EntityData.Children = types.NewOrderedMap()
    destNextHopRoutes.EntityData.Children.Append("dest-next-hop-route", types.YChild{"DestNextHopRoute", nil})
    for i := range destNextHopRoutes.DestNextHopRoute {
        destNextHopRoutes.EntityData.Children.Append(types.GetSegmentPath(destNextHopRoutes.DestNextHopRoute[i]), types.YChild{"DestNextHopRoute", destNextHopRoutes.DestNextHopRoute[i]})
    }
    destNextHopRoutes.EntityData.Leafs = types.NewOrderedMap()

    destNextHopRoutes.EntityData.YListKeys = []string {}

    return &(destNextHopRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
// Nexthop information for a specific
// address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
}

func (destNextHopRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetEntityData() *types.CommonEntityData {
    destNextHopRoute.EntityData.YFilter = destNextHopRoute.YFilter
    destNextHopRoute.EntityData.YangName = "dest-next-hop-route"
    destNextHopRoute.EntityData.BundleName = "cisco_ios_xr"
    destNextHopRoute.EntityData.ParentYangName = "dest-next-hop-routes"
    destNextHopRoute.EntityData.SegmentPath = "dest-next-hop-route" + types.AddKeyToken(destNextHopRoute.Address, "address")
    destNextHopRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destNextHopRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destNextHopRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destNextHopRoute.EntityData.Children = types.NewOrderedMap()
    destNextHopRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destNextHopRoute.RoutePath})
    destNextHopRoute.EntityData.Leafs = types.NewOrderedMap()
    destNextHopRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destNextHopRoute.Address})
    destNextHopRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destNextHopRoute.Prefix})
    destNextHopRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destNextHopRoute.PrefixLengthXr})
    destNextHopRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destNextHopRoute.RouteVersion})
    destNextHopRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destNextHopRoute.ProtocolId})
    destNextHopRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destNextHopRoute.ProtocolName})
    destNextHopRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destNextHopRoute.Instance})
    destNextHopRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destNextHopRoute.ClientId})
    destNextHopRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destNextHopRoute.RouteType})
    destNextHopRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destNextHopRoute.Priority})
    destNextHopRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destNextHopRoute.SvdType})
    destNextHopRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destNextHopRoute.Flags})
    destNextHopRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destNextHopRoute.ExtendedFlags})
    destNextHopRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destNextHopRoute.Tag})
    destNextHopRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destNextHopRoute.Distance})
    destNextHopRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destNextHopRoute.DiversionDistance})
    destNextHopRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destNextHopRoute.Metric})
    destNextHopRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destNextHopRoute.PathsCount})
    destNextHopRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destNextHopRoute.AttributeIdentity})
    destNextHopRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destNextHopRoute.TrafficIndex})
    destNextHopRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destNextHopRoute.RoutePrecedence})
    destNextHopRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destNextHopRoute.QosGroup})
    destNextHopRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destNextHopRoute.FlowTag})
    destNextHopRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destNextHopRoute.FwdClass})
    destNextHopRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destNextHopRoute.PicCount})
    destNextHopRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destNextHopRoute.Active})
    destNextHopRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destNextHopRoute.Diversion})
    destNextHopRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destNextHopRoute.DiversionProtoName})
    destNextHopRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destNextHopRoute.RouteAge})
    destNextHopRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destNextHopRoute.RouteLabel})
    destNextHopRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destNextHopRoute.Version})
    destNextHopRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destNextHopRoute.TblVersion})
    destNextHopRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destNextHopRoute.RouteModifyTime})

    destNextHopRoute.EntityData.YListKeys = []string {"Address"}

    return &(destNextHopRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-next-hop-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
// Route advertiser information 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert.
    Advert []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
}

func (adverts *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetEntityData() *types.CommonEntityData {
    adverts.EntityData.YFilter = adverts.YFilter
    adverts.EntityData.YangName = "adverts"
    adverts.EntityData.BundleName = "cisco_ios_xr"
    adverts.EntityData.ParentYangName = "ip-rib-route-table-name"
    adverts.EntityData.SegmentPath = "adverts"
    adverts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adverts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adverts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adverts.EntityData.Children = types.NewOrderedMap()
    adverts.EntityData.Children.Append("advert", types.YChild{"Advert", nil})
    for i := range adverts.Advert {
        adverts.EntityData.Children.Append(types.GetSegmentPath(adverts.Advert[i]), types.YChild{"Advert", adverts.Advert[i]})
    }
    adverts.EntityData.Leafs = types.NewOrderedMap()

    adverts.EntityData.YListKeys = []string {}

    return &(adverts.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
// Route information of a specific Network
// Address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // ipv6 rib edm advert. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert.
    Ipv6RibEdmAdvert []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert
}

func (advert *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetEntityData() *types.CommonEntityData {
    advert.EntityData.YFilter = advert.YFilter
    advert.EntityData.YangName = "advert"
    advert.EntityData.BundleName = "cisco_ios_xr"
    advert.EntityData.ParentYangName = "adverts"
    advert.EntityData.SegmentPath = "advert"
    advert.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advert.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advert.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advert.EntityData.Children = types.NewOrderedMap()
    advert.EntityData.Children.Append("ipv6-rib-edm-advert", types.YChild{"Ipv6RibEdmAdvert", nil})
    for i := range advert.Ipv6RibEdmAdvert {
        advert.EntityData.Children.Append(types.GetSegmentPath(advert.Ipv6RibEdmAdvert[i]), types.YChild{"Ipv6RibEdmAdvert", advert.Ipv6RibEdmAdvert[i]})
    }
    advert.EntityData.Leafs = types.NewOrderedMap()
    advert.EntityData.Leafs.Append("address", types.YLeaf{"Address", advert.Address})
    advert.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", advert.PrefixLength})

    advert.EntityData.YListKeys = []string {}

    return &(advert.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert
// ipv6 rib edm advert
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Client advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // Extended communities. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunities interface{}

    // OSPF area-id flags. The type is interface{} with range: 0..255.
    ProtocolOpaqueFlags interface{}

    // OSPF area-id. The type is interface{} with range: 0..4294967295.
    ProtocolOpaque interface{}

    // Protocol code. The type is interface{} with range: -128..127.
    Code interface{}

    // Instance name. The type is string with length: 0..41.
    InstanceName interface{}
}

func (ipv6RibEdmAdvert *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmAdvert.EntityData.YFilter = ipv6RibEdmAdvert.YFilter
    ipv6RibEdmAdvert.EntityData.YangName = "ipv6-rib-edm-advert"
    ipv6RibEdmAdvert.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmAdvert.EntityData.ParentYangName = "advert"
    ipv6RibEdmAdvert.EntityData.SegmentPath = "ipv6-rib-edm-advert"
    ipv6RibEdmAdvert.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmAdvert.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmAdvert.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmAdvert.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmAdvert.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", ipv6RibEdmAdvert.ProtocolId})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", ipv6RibEdmAdvert.ClientId})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmAdvert.NumberOfExtendedCommunities})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("extended-communities", types.YLeaf{"ExtendedCommunities", ipv6RibEdmAdvert.ExtendedCommunities})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-opaque-flags", types.YLeaf{"ProtocolOpaqueFlags", ipv6RibEdmAdvert.ProtocolOpaqueFlags})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-opaque", types.YLeaf{"ProtocolOpaque", ipv6RibEdmAdvert.ProtocolOpaque})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("code", types.YLeaf{"Code", ipv6RibEdmAdvert.Code})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", ipv6RibEdmAdvert.InstanceName})

    ipv6RibEdmAdvert.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmAdvert.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes
// Deleted
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific deleted address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute.
    DeletedRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
}

func (deletedRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetEntityData() *types.CommonEntityData {
    deletedRoutes.EntityData.YFilter = deletedRoutes.YFilter
    deletedRoutes.EntityData.YangName = "deleted-routes"
    deletedRoutes.EntityData.BundleName = "cisco_ios_xr"
    deletedRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    deletedRoutes.EntityData.SegmentPath = "deleted-routes"
    deletedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deletedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deletedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deletedRoutes.EntityData.Children = types.NewOrderedMap()
    deletedRoutes.EntityData.Children.Append("deleted-route", types.YChild{"DeletedRoute", nil})
    for i := range deletedRoutes.DeletedRoute {
        deletedRoutes.EntityData.Children.Append(types.GetSegmentPath(deletedRoutes.DeletedRoute[i]), types.YChild{"DeletedRoute", deletedRoutes.DeletedRoute[i]})
    }
    deletedRoutes.EntityData.Leafs = types.NewOrderedMap()

    deletedRoutes.EntityData.YListKeys = []string {}

    return &(deletedRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
// Route information for a specific
// deleted address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
}

func (deletedRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetEntityData() *types.CommonEntityData {
    deletedRoute.EntityData.YFilter = deletedRoute.YFilter
    deletedRoute.EntityData.YangName = "deleted-route"
    deletedRoute.EntityData.BundleName = "cisco_ios_xr"
    deletedRoute.EntityData.ParentYangName = "deleted-routes"
    deletedRoute.EntityData.SegmentPath = "deleted-route"
    deletedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deletedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deletedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deletedRoute.EntityData.Children = types.NewOrderedMap()
    deletedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &deletedRoute.RoutePath})
    deletedRoute.EntityData.Leafs = types.NewOrderedMap()
    deletedRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", deletedRoute.Address})
    deletedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", deletedRoute.PrefixLength})
    deletedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", deletedRoute.Prefix})
    deletedRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", deletedRoute.PrefixLengthXr})
    deletedRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", deletedRoute.RouteVersion})
    deletedRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", deletedRoute.ProtocolId})
    deletedRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", deletedRoute.ProtocolName})
    deletedRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", deletedRoute.Instance})
    deletedRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", deletedRoute.ClientId})
    deletedRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", deletedRoute.RouteType})
    deletedRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", deletedRoute.Priority})
    deletedRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", deletedRoute.SvdType})
    deletedRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", deletedRoute.Flags})
    deletedRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", deletedRoute.ExtendedFlags})
    deletedRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", deletedRoute.Tag})
    deletedRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", deletedRoute.Distance})
    deletedRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", deletedRoute.DiversionDistance})
    deletedRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", deletedRoute.Metric})
    deletedRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", deletedRoute.PathsCount})
    deletedRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", deletedRoute.AttributeIdentity})
    deletedRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", deletedRoute.TrafficIndex})
    deletedRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", deletedRoute.RoutePrecedence})
    deletedRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", deletedRoute.QosGroup})
    deletedRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", deletedRoute.FlowTag})
    deletedRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", deletedRoute.FwdClass})
    deletedRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", deletedRoute.PicCount})
    deletedRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", deletedRoute.Active})
    deletedRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", deletedRoute.Diversion})
    deletedRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", deletedRoute.DiversionProtoName})
    deletedRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", deletedRoute.RouteAge})
    deletedRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", deletedRoute.RouteLabel})
    deletedRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", deletedRoute.Version})
    deletedRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", deletedRoute.TblVersion})
    deletedRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", deletedRoute.RouteModifyTime})

    deletedRoute.EntityData.YListKeys = []string {}

    return &(deletedRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "deleted-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol
// Contains the classification of routes by
// protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protocol.
    Local Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local

    // BGP Protocol.
    Bgp Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp

    // Mobile Protocol.
    Mobile Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile

    // EIGRP Protocol.
    Eigrp Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp

    // RPL Protocol.
    Rpl Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl

    // Static Protocol.
    Static Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static

    // TEClient protocol.
    TeClient Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient

    // Subscriber Protocol.
    Subscriber Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber

    // OSPF Protocol.
    Ospf Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf

    // Connected Protocol.
    Connected Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected

    // ISIS Protocol.
    Isis Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
}

func (protocol *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "ip-rib-route-table-name"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("local", types.YChild{"Local", &protocol.Local})
    protocol.EntityData.Children.Append("bgp", types.YChild{"Bgp", &protocol.Bgp})
    protocol.EntityData.Children.Append("mobile", types.YChild{"Mobile", &protocol.Mobile})
    protocol.EntityData.Children.Append("eigrp", types.YChild{"Eigrp", &protocol.Eigrp})
    protocol.EntityData.Children.Append("rpl", types.YChild{"Rpl", &protocol.Rpl})
    protocol.EntityData.Children.Append("static", types.YChild{"Static", &protocol.Static})
    protocol.EntityData.Children.Append("te-client", types.YChild{"TeClient", &protocol.TeClient})
    protocol.EntityData.Children.Append("subscriber", types.YChild{"Subscriber", &protocol.Subscriber})
    protocol.EntityData.Children.Append("ospf", types.YChild{"Ospf", &protocol.Ospf})
    protocol.EntityData.Children.Append("connected", types.YChild{"Connected", &protocol.Connected})
    protocol.EntityData.Children.Append("isis", types.YChild{"Isis", &protocol.Isis})
    protocol.EntityData.Leafs = types.NewOrderedMap()

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local
// Local Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSPV(Label Switched Path Verification) protocol.
    Lspv Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
}

func (local *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "protocol"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = types.NewOrderedMap()
    local.EntityData.Children.Append("lspv", types.YChild{"Lspv", &local.Lspv})
    local.EntityData.Children.Append("non-as", types.YChild{"NonAs", &local.NonAs})
    local.EntityData.Leafs = types.NewOrderedMap()

    local.EntityData.YListKeys = []string {}

    return &(local.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv
// LSPV(Label Switched Path Verification)
// protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
}

func (lspv *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetEntityData() *types.CommonEntityData {
    lspv.EntityData.YFilter = lspv.YFilter
    lspv.EntityData.YangName = "lspv"
    lspv.EntityData.BundleName = "cisco_ios_xr"
    lspv.EntityData.ParentYangName = "local"
    lspv.EntityData.SegmentPath = "lspv"
    lspv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspv.EntityData.Children = types.NewOrderedMap()
    lspv.EntityData.Children.Append("information", types.YChild{"Information", &lspv.Information})
    lspv.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &lspv.ProtocolRoutes})
    lspv.EntityData.Leafs = types.NewOrderedMap()

    lspv.EntityData.YListKeys = []string {}

    return &(lspv.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "lspv"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "lspv"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "local"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp
// BGP Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As.
    As []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
}

func (bgp *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "protocol"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = types.NewOrderedMap()
    bgp.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range bgp.As {
        bgp.EntityData.Children.Append(types.GetSegmentPath(bgp.As[i]), types.YChild{"As", bgp.As[i]})
    }
    bgp.EntityData.Leafs = types.NewOrderedMap()

    bgp.EntityData.YListKeys = []string {}

    return &(bgp.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
// Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
}

func (as *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "bgp"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile
// Mobile Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
}

func (mobile *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetEntityData() *types.CommonEntityData {
    mobile.EntityData.YFilter = mobile.YFilter
    mobile.EntityData.YangName = "mobile"
    mobile.EntityData.BundleName = "cisco_ios_xr"
    mobile.EntityData.ParentYangName = "protocol"
    mobile.EntityData.SegmentPath = "mobile"
    mobile.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mobile.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mobile.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mobile.EntityData.Children = types.NewOrderedMap()
    mobile.EntityData.Children.Append("non-as", types.YChild{"NonAs", &mobile.NonAs})
    mobile.EntityData.Leafs = types.NewOrderedMap()

    mobile.EntityData.YListKeys = []string {}

    return &(mobile.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "mobile"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp
// EIGRP Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As.
    As []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
}

func (eigrp *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetEntityData() *types.CommonEntityData {
    eigrp.EntityData.YFilter = eigrp.YFilter
    eigrp.EntityData.YangName = "eigrp"
    eigrp.EntityData.BundleName = "cisco_ios_xr"
    eigrp.EntityData.ParentYangName = "protocol"
    eigrp.EntityData.SegmentPath = "eigrp"
    eigrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrp.EntityData.Children = types.NewOrderedMap()
    eigrp.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range eigrp.As {
        eigrp.EntityData.Children.Append(types.GetSegmentPath(eigrp.As[i]), types.YChild{"As", eigrp.As[i]})
    }
    eigrp.EntityData.Leafs = types.NewOrderedMap()

    eigrp.EntityData.YListKeys = []string {}

    return &(eigrp.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
// Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
}

func (as *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "eigrp"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl
// RPL Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As.
    As []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
}

func (rpl *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetEntityData() *types.CommonEntityData {
    rpl.EntityData.YFilter = rpl.YFilter
    rpl.EntityData.YangName = "rpl"
    rpl.EntityData.BundleName = "cisco_ios_xr"
    rpl.EntityData.ParentYangName = "protocol"
    rpl.EntityData.SegmentPath = "rpl"
    rpl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpl.EntityData.Children = types.NewOrderedMap()
    rpl.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range rpl.As {
        rpl.EntityData.Children.Append(types.GetSegmentPath(rpl.As[i]), types.YChild{"As", rpl.As[i]})
    }
    rpl.EntityData.Leafs = types.NewOrderedMap()

    rpl.EntityData.YListKeys = []string {}

    return &(rpl.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
// Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
}

func (as *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "rpl"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static
// Static Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
}

func (static *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetEntityData() *types.CommonEntityData {
    static.EntityData.YFilter = static.YFilter
    static.EntityData.YangName = "static"
    static.EntityData.BundleName = "cisco_ios_xr"
    static.EntityData.ParentYangName = "protocol"
    static.EntityData.SegmentPath = "static"
    static.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    static.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    static.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    static.EntityData.Children = types.NewOrderedMap()
    static.EntityData.Children.Append("non-as", types.YChild{"NonAs", &static.NonAs})
    static.EntityData.Leafs = types.NewOrderedMap()

    static.EntityData.YListKeys = []string {}

    return &(static.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "static"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient
// TEClient protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
}

func (teClient *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetEntityData() *types.CommonEntityData {
    teClient.EntityData.YFilter = teClient.YFilter
    teClient.EntityData.YangName = "te-client"
    teClient.EntityData.BundleName = "cisco_ios_xr"
    teClient.EntityData.ParentYangName = "protocol"
    teClient.EntityData.SegmentPath = "te-client"
    teClient.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teClient.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teClient.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teClient.EntityData.Children = types.NewOrderedMap()
    teClient.EntityData.Children.Append("non-as", types.YChild{"NonAs", &teClient.NonAs})
    teClient.EntityData.Leafs = types.NewOrderedMap()

    teClient.EntityData.YListKeys = []string {}

    return &(teClient.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "te-client"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber
// Subscriber Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
}

func (subscriber *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetEntityData() *types.CommonEntityData {
    subscriber.EntityData.YFilter = subscriber.YFilter
    subscriber.EntityData.YangName = "subscriber"
    subscriber.EntityData.BundleName = "cisco_ios_xr"
    subscriber.EntityData.ParentYangName = "protocol"
    subscriber.EntityData.SegmentPath = "subscriber"
    subscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriber.EntityData.Children = types.NewOrderedMap()
    subscriber.EntityData.Children.Append("non-as", types.YChild{"NonAs", &subscriber.NonAs})
    subscriber.EntityData.Leafs = types.NewOrderedMap()

    subscriber.EntityData.YListKeys = []string {}

    return &(subscriber.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "subscriber"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf
// OSPF Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As.
    As []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
}

func (ospf *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetEntityData() *types.CommonEntityData {
    ospf.EntityData.YFilter = ospf.YFilter
    ospf.EntityData.YangName = "ospf"
    ospf.EntityData.BundleName = "cisco_ios_xr"
    ospf.EntityData.ParentYangName = "protocol"
    ospf.EntityData.SegmentPath = "ospf"
    ospf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospf.EntityData.Children = types.NewOrderedMap()
    ospf.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range ospf.As {
        ospf.EntityData.Children.Append(types.GetSegmentPath(ospf.As[i]), types.YChild{"As", ospf.As[i]})
    }
    ospf.EntityData.Leafs = types.NewOrderedMap()

    ospf.EntityData.YListKeys = []string {}

    return &(ospf.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
// Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
}

func (as *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "ospf"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected
// Connected Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2VPN.
    L2vpn Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn

    // Non Autonomous System of protocol.
    NonAs Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
}

func (connected *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetEntityData() *types.CommonEntityData {
    connected.EntityData.YFilter = connected.YFilter
    connected.EntityData.YangName = "connected"
    connected.EntityData.BundleName = "cisco_ios_xr"
    connected.EntityData.ParentYangName = "protocol"
    connected.EntityData.SegmentPath = "connected"
    connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connected.EntityData.Children = types.NewOrderedMap()
    connected.EntityData.Children.Append("l2vpn", types.YChild{"L2vpn", &connected.L2vpn})
    connected.EntityData.Children.Append("non-as", types.YChild{"NonAs", &connected.NonAs})
    connected.EntityData.Leafs = types.NewOrderedMap()

    connected.EntityData.YListKeys = []string {}

    return &(connected.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn
// L2VPN
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes
}

func (l2vpn *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn) GetEntityData() *types.CommonEntityData {
    l2vpn.EntityData.YFilter = l2vpn.YFilter
    l2vpn.EntityData.YangName = "l2vpn"
    l2vpn.EntityData.BundleName = "cisco_ios_xr"
    l2vpn.EntityData.ParentYangName = "connected"
    l2vpn.EntityData.SegmentPath = "l2vpn"
    l2vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2vpn.EntityData.Children = types.NewOrderedMap()
    l2vpn.EntityData.Children.Append("information", types.YChild{"Information", &l2vpn.Information})
    l2vpn.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &l2vpn.ProtocolRoutes})
    l2vpn.EntityData.Leafs = types.NewOrderedMap()

    l2vpn.EntityData.YListKeys = []string {}

    return &(l2vpn.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "l2vpn"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "l2vpn"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
// Non Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "connected"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
// ISIS Protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As.
    As []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
}

func (isis *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "cisco_ios_xr"
    isis.EntityData.ParentYangName = "protocol"
    isis.EntityData.SegmentPath = "isis"
    isis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isis.EntityData.Children = types.NewOrderedMap()
    isis.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range isis.As {
        isis.EntityData.Children.Append(types.GetSegmentPath(isis.As[i]), types.YChild{"As", isis.As[i]})
    }
    isis.EntityData.Leafs = types.NewOrderedMap()

    isis.EntityData.YListKeys = []string {}

    return &(isis.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
// Autonomous System of protocol
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
}

func (as *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "isis"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
// Protocol related Information
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
// Protocol specific Route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes
// Route information 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route.
    Route []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
}

func (routes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetEntityData() *types.CommonEntityData {
    routes.EntityData.YFilter = routes.YFilter
    routes.EntityData.YangName = "routes"
    routes.EntityData.BundleName = "cisco_ios_xr"
    routes.EntityData.ParentYangName = "ip-rib-route-table-name"
    routes.EntityData.SegmentPath = "routes"
    routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routes.EntityData.Children = types.NewOrderedMap()
    routes.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range routes.Route {
        routes.EntityData.Children.Append(types.GetSegmentPath(routes.Route[i]), types.YChild{"Route", routes.Route[i]})
    }
    routes.EntityData.Leafs = types.NewOrderedMap()

    routes.EntityData.YListKeys = []string {}

    return &(routes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
// Route information of a specific Network
// Address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // NextHop Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // Outgoing Interface . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
}

func (route *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "routes"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &route.RoutePath})
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("address", types.YLeaf{"Address", route.Address})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", route.NextHopAddress})
    route.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", route.InterfaceName})
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", route.PrefixLengthXr})
    route.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", route.RouteVersion})
    route.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", route.ProtocolId})
    route.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", route.ProtocolName})
    route.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", route.Instance})
    route.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", route.ClientId})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", route.Priority})
    route.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", route.SvdType})
    route.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", route.Flags})
    route.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", route.ExtendedFlags})
    route.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", route.Tag})
    route.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", route.Distance})
    route.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", route.DiversionDistance})
    route.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", route.Metric})
    route.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", route.PathsCount})
    route.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", route.AttributeIdentity})
    route.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", route.TrafficIndex})
    route.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", route.RoutePrecedence})
    route.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", route.QosGroup})
    route.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", route.FlowTag})
    route.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", route.FwdClass})
    route.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", route.PicCount})
    route.EntityData.Leafs.Append("active", types.YLeaf{"Active", route.Active})
    route.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", route.Diversion})
    route.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", route.DiversionProtoName})
    route.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", route.RouteAge})
    route.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", route.RouteLabel})
    route.EntityData.Leafs.Append("version", types.YLeaf{"Version", route.Version})
    route.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", route.TblVersion})
    route.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", route.RouteModifyTime})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes
// Quarantine
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific quarantined address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute.
    QRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
}

func (qRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetEntityData() *types.CommonEntityData {
    qRoutes.EntityData.YFilter = qRoutes.YFilter
    qRoutes.EntityData.YangName = "q-routes"
    qRoutes.EntityData.BundleName = "cisco_ios_xr"
    qRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    qRoutes.EntityData.SegmentPath = "q-routes"
    qRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qRoutes.EntityData.Children = types.NewOrderedMap()
    qRoutes.EntityData.Children.Append("q-route", types.YChild{"QRoute", nil})
    for i := range qRoutes.QRoute {
        qRoutes.EntityData.Children.Append(types.GetSegmentPath(qRoutes.QRoute[i]), types.YChild{"QRoute", qRoutes.QRoute[i]})
    }
    qRoutes.EntityData.Leafs = types.NewOrderedMap()

    qRoutes.EntityData.YListKeys = []string {}

    return &(qRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
// Route information for a specific
// quarantined address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
}

func (qRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetEntityData() *types.CommonEntityData {
    qRoute.EntityData.YFilter = qRoute.YFilter
    qRoute.EntityData.YangName = "q-route"
    qRoute.EntityData.BundleName = "cisco_ios_xr"
    qRoute.EntityData.ParentYangName = "q-routes"
    qRoute.EntityData.SegmentPath = "q-route"
    qRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qRoute.EntityData.Children = types.NewOrderedMap()
    qRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &qRoute.RoutePath})
    qRoute.EntityData.Leafs = types.NewOrderedMap()
    qRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", qRoute.Address})
    qRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", qRoute.PrefixLength})
    qRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", qRoute.Prefix})
    qRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", qRoute.PrefixLengthXr})
    qRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", qRoute.RouteVersion})
    qRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", qRoute.ProtocolId})
    qRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", qRoute.ProtocolName})
    qRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", qRoute.Instance})
    qRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", qRoute.ClientId})
    qRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", qRoute.RouteType})
    qRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", qRoute.Priority})
    qRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", qRoute.SvdType})
    qRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", qRoute.Flags})
    qRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", qRoute.ExtendedFlags})
    qRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", qRoute.Tag})
    qRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", qRoute.Distance})
    qRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", qRoute.DiversionDistance})
    qRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", qRoute.Metric})
    qRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", qRoute.PathsCount})
    qRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", qRoute.AttributeIdentity})
    qRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", qRoute.TrafficIndex})
    qRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", qRoute.RoutePrecedence})
    qRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", qRoute.QosGroup})
    qRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", qRoute.FlowTag})
    qRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", qRoute.FwdClass})
    qRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", qRoute.PicCount})
    qRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", qRoute.Active})
    qRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", qRoute.Diversion})
    qRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", qRoute.DiversionProtoName})
    qRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", qRoute.RouteAge})
    qRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", qRoute.RouteLabel})
    qRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", qRoute.Version})
    qRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", qRoute.TblVersion})
    qRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", qRoute.RouteModifyTime})

    qRoute.EntityData.YListKeys = []string {}

    return &(qRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "q-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
// Backup route information for the given
// table
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific backup address . The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute.
    BackupRoute []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
}

func (backupRoutes *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetEntityData() *types.CommonEntityData {
    backupRoutes.EntityData.YFilter = backupRoutes.YFilter
    backupRoutes.EntityData.YangName = "backup-routes"
    backupRoutes.EntityData.BundleName = "cisco_ios_xr"
    backupRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    backupRoutes.EntityData.SegmentPath = "backup-routes"
    backupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoutes.EntityData.Children = types.NewOrderedMap()
    backupRoutes.EntityData.Children.Append("backup-route", types.YChild{"BackupRoute", nil})
    for i := range backupRoutes.BackupRoute {
        backupRoutes.EntityData.Children.Append(types.GetSegmentPath(backupRoutes.BackupRoute[i]), types.YChild{"BackupRoute", backupRoutes.BackupRoute[i]})
    }
    backupRoutes.EntityData.Leafs = types.NewOrderedMap()

    backupRoutes.EntityData.YListKeys = []string {}

    return &(backupRoutes.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
// Route information for a specific backup
// address 
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto ID. The type is interface{} with range: 0..4294967295.
    Protoid interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetEntityData() *types.CommonEntityData {
    backupRoute.EntityData.YFilter = backupRoute.YFilter
    backupRoute.EntityData.YangName = "backup-route"
    backupRoute.EntityData.BundleName = "cisco_ios_xr"
    backupRoute.EntityData.ParentYangName = "backup-routes"
    backupRoute.EntityData.SegmentPath = "backup-route"
    backupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoute.EntityData.Children = types.NewOrderedMap()
    backupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &backupRoute.RoutePath})
    backupRoute.EntityData.Leafs = types.NewOrderedMap()
    backupRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", backupRoute.Address})
    backupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRoute.PrefixLength})
    backupRoute.EntityData.Leafs.Append("protoid", types.YLeaf{"Protoid", backupRoute.Protoid})
    backupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRoute.Prefix})
    backupRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", backupRoute.PrefixLengthXr})
    backupRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", backupRoute.RouteVersion})
    backupRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", backupRoute.ProtocolId})
    backupRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", backupRoute.ProtocolName})
    backupRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", backupRoute.Instance})
    backupRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", backupRoute.ClientId})
    backupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRoute.RouteType})
    backupRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", backupRoute.Priority})
    backupRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", backupRoute.SvdType})
    backupRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", backupRoute.Flags})
    backupRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", backupRoute.ExtendedFlags})
    backupRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", backupRoute.Tag})
    backupRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", backupRoute.Distance})
    backupRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", backupRoute.DiversionDistance})
    backupRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backupRoute.Metric})
    backupRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", backupRoute.PathsCount})
    backupRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", backupRoute.AttributeIdentity})
    backupRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", backupRoute.TrafficIndex})
    backupRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", backupRoute.RoutePrecedence})
    backupRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", backupRoute.QosGroup})
    backupRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", backupRoute.FlowTag})
    backupRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", backupRoute.FwdClass})
    backupRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", backupRoute.PicCount})
    backupRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", backupRoute.Active})
    backupRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", backupRoute.Diversion})
    backupRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", backupRoute.DiversionProtoName})
    backupRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", backupRoute.RouteAge})
    backupRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", backupRoute.RouteLabel})
    backupRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", backupRoute.Version})
    backupRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", backupRoute.TblVersion})
    backupRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", backupRoute.RouteModifyTime})

    backupRoute.EntityData.YListKeys = []string {}

    return &(backupRoute.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
// Path(s) of the route
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6Rib_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby
// ipv6 rib stdby
type Ipv6RibStdby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RIB table.
    RibTableIds Ipv6RibStdby_RibTableIds

    // VRF table.
    Vrfs Ipv6RibStdby_Vrfs
}

func (ipv6RibStdby *Ipv6RibStdby) GetEntityData() *types.CommonEntityData {
    ipv6RibStdby.EntityData.YFilter = ipv6RibStdby.YFilter
    ipv6RibStdby.EntityData.YangName = "ipv6-rib-stdby"
    ipv6RibStdby.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibStdby.EntityData.ParentYangName = "Cisco-IOS-XR-ip-rib-ipv6-oper"
    ipv6RibStdby.EntityData.SegmentPath = "Cisco-IOS-XR-ip-rib-ipv6-oper:ipv6-rib-stdby"
    ipv6RibStdby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibStdby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibStdby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibStdby.EntityData.Children = types.NewOrderedMap()
    ipv6RibStdby.EntityData.Children.Append("rib-table-ids", types.YChild{"RibTableIds", &ipv6RibStdby.RibTableIds})
    ipv6RibStdby.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &ipv6RibStdby.Vrfs})
    ipv6RibStdby.EntityData.Leafs = types.NewOrderedMap()

    ipv6RibStdby.EntityData.YListKeys = []string {}

    return &(ipv6RibStdby.EntityData)
}

// Ipv6RibStdby_RibTableIds
// RIB table
type Ipv6RibStdby_RibTableIds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific Table. The type is slice of Ipv6RibStdby_RibTableIds_RibTableId.
    RibTableId []*Ipv6RibStdby_RibTableIds_RibTableId
}

func (ribTableIds *Ipv6RibStdby_RibTableIds) GetEntityData() *types.CommonEntityData {
    ribTableIds.EntityData.YFilter = ribTableIds.YFilter
    ribTableIds.EntityData.YangName = "rib-table-ids"
    ribTableIds.EntityData.BundleName = "cisco_ios_xr"
    ribTableIds.EntityData.ParentYangName = "ipv6-rib-stdby"
    ribTableIds.EntityData.SegmentPath = "rib-table-ids"
    ribTableIds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableIds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableIds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableIds.EntityData.Children = types.NewOrderedMap()
    ribTableIds.EntityData.Children.Append("rib-table-id", types.YChild{"RibTableId", nil})
    for i := range ribTableIds.RibTableId {
        ribTableIds.EntityData.Children.Append(types.GetSegmentPath(ribTableIds.RibTableId[i]), types.YChild{"RibTableId", ribTableIds.RibTableId[i]})
    }
    ribTableIds.EntityData.Leafs = types.NewOrderedMap()

    ribTableIds.EntityData.YListKeys = []string {}

    return &(ribTableIds.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId
// Specific Table
type Ipv6RibStdby_RibTableIds_RibTableId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Table ID. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    Tableid interface{}

    // Table related Information.
    Information Ipv6RibStdby_RibTableIds_RibTableId_Information

    // RIB table summary.
    SummaryProtos Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos

    // RIB table interface.
    RibTableItfHndls Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls
}

func (ribTableId *Ipv6RibStdby_RibTableIds_RibTableId) GetEntityData() *types.CommonEntityData {
    ribTableId.EntityData.YFilter = ribTableId.YFilter
    ribTableId.EntityData.YangName = "rib-table-id"
    ribTableId.EntityData.BundleName = "cisco_ios_xr"
    ribTableId.EntityData.ParentYangName = "rib-table-ids"
    ribTableId.EntityData.SegmentPath = "rib-table-id" + types.AddKeyToken(ribTableId.Tableid, "tableid")
    ribTableId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableId.EntityData.Children = types.NewOrderedMap()
    ribTableId.EntityData.Children.Append("information", types.YChild{"Information", &ribTableId.Information})
    ribTableId.EntityData.Children.Append("summary-protos", types.YChild{"SummaryProtos", &ribTableId.SummaryProtos})
    ribTableId.EntityData.Children.Append("rib-table-itf-hndls", types.YChild{"RibTableItfHndls", &ribTableId.RibTableItfHndls})
    ribTableId.EntityData.Leafs = types.NewOrderedMap()
    ribTableId.EntityData.Leafs.Append("tableid", types.YLeaf{"Tableid", ribTableId.Tableid})

    ribTableId.EntityData.YListKeys = []string {"Tableid"}

    return &(ribTableId.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_Information
// Table related Information
type Ipv6RibStdby_RibTableIds_RibTableId_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table id. The type is interface{} with range: 0..4294967295.
    Tableid interface{}

    // Address Family. The type is interface{} with range: 0..4294967295.
    Afi interface{}

    // sub Address Family. The type is interface{} with range: 0..4294967295.
    Safi interface{}

    // VRF Name of the table. The type is string.
    VrfName interface{}

    // Name of the table. The type is string.
    TableName interface{}

    // Table version. The type is interface{} with range: 0..18446744073709551615.
    Version interface{}

    // Configured prefix limit. The type is interface{} with range: 0..4294967295.
    ConfPrefixLimit interface{}

    // Num prefixes in table. The type is interface{} with range: 0..4294967295.
    CurrentPrefixCount interface{}

    // Num SVD local prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdlclPrefix interface{}

    // Num SVD remote prefixes. The type is interface{} with range: 0..4294967295.
    NumSvdremPrefix interface{}

    // Version no. of the table. The type is interface{} with range:
    // 0..18446744073709551615.
    TableVersion interface{}

    // Prefix limit state indicator. The type is bool.
    PrefixLimitNotified interface{}

    // Table in fwd reference state?. The type is bool.
    FwdReferenced interface{}

    // Table deleted?. The type is bool.
    Deleted interface{}

    // Table has reached convergence. The type is bool.
    InitialConverge interface{}
}

func (information *Ipv6RibStdby_RibTableIds_RibTableId_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "rib-table-id"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("tableid", types.YLeaf{"Tableid", information.Tableid})
    information.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", information.Afi})
    information.EntityData.Leafs.Append("safi", types.YLeaf{"Safi", information.Safi})
    information.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", information.VrfName})
    information.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", information.TableName})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("conf-prefix-limit", types.YLeaf{"ConfPrefixLimit", information.ConfPrefixLimit})
    information.EntityData.Leafs.Append("current-prefix-count", types.YLeaf{"CurrentPrefixCount", information.CurrentPrefixCount})
    information.EntityData.Leafs.Append("num-svdlcl-prefix", types.YLeaf{"NumSvdlclPrefix", information.NumSvdlclPrefix})
    information.EntityData.Leafs.Append("num-svdrem-prefix", types.YLeaf{"NumSvdremPrefix", information.NumSvdremPrefix})
    information.EntityData.Leafs.Append("table-version", types.YLeaf{"TableVersion", information.TableVersion})
    information.EntityData.Leafs.Append("prefix-limit-notified", types.YLeaf{"PrefixLimitNotified", information.PrefixLimitNotified})
    information.EntityData.Leafs.Append("fwd-referenced", types.YLeaf{"FwdReferenced", information.FwdReferenced})
    information.EntityData.Leafs.Append("deleted", types.YLeaf{"Deleted", information.Deleted})
    information.EntityData.Leafs.Append("initial-converge", types.YLeaf{"InitialConverge", information.InitialConverge})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos
// RIB table summary
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route summary information for a specific table/protocol . The type is slice
    // of Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto.
    SummaryProto []*Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto
}

func (summaryProtos *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos) GetEntityData() *types.CommonEntityData {
    summaryProtos.EntityData.YFilter = summaryProtos.YFilter
    summaryProtos.EntityData.YangName = "summary-protos"
    summaryProtos.EntityData.BundleName = "cisco_ios_xr"
    summaryProtos.EntityData.ParentYangName = "rib-table-id"
    summaryProtos.EntityData.SegmentPath = "summary-protos"
    summaryProtos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtos.EntityData.Children = types.NewOrderedMap()
    summaryProtos.EntityData.Children.Append("summary-proto", types.YChild{"SummaryProto", nil})
    for i := range summaryProtos.SummaryProto {
        summaryProtos.EntityData.Children.Append(types.GetSegmentPath(summaryProtos.SummaryProto[i]), types.YChild{"SummaryProto", summaryProtos.SummaryProto[i]})
    }
    summaryProtos.EntityData.Leafs = types.NewOrderedMap()

    summaryProtos.EntityData.YListKeys = []string {}

    return &(summaryProtos.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto
// Route summary information for a specific
// table/protocol 
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Proto ID. The type is interface{} with range:
    // 0..4294967295.
    Protoid interface{}

    // Proto name. The type is string.
    Name interface{}

    // Instance. The type is string.
    Instance interface{}

    // Count for proto. instance.
    ProtoRouteCount Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount

    // No route type.
    RtypeNone Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone

    // Unknown route type.
    RtypeOther Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther

    // OSPF route within an area.
    RtypeOspfIntra Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra

    // OSPF route across diff. areas.
    RtypeOspfInter Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter

    // OSPF external route of type 1.
    RtypeOspfExtern1 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1

    // OSPF external route of type 2.
    RtypeOspfExtern2 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2

    // IS-IS summary route.
    RtypeIsisSum Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum

    // IS-IS level 1 route.
    RtypeIsisL1 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1

    // IS-IS level 2 route.
    RtypeIsisL2 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2

    // IS-IS level1 inter-area route.
    RtypeIsisL1Ia Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia

    // iBGP route.
    RtypeBgpInt Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt

    // eBGP route.
    RtypeBgpExt Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt

    // BGP local route.
    RtypeBgpLoc Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc

    // OSPF NSSA ext. route type 1.
    RtypeOspfNssa1 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1

    // OSPF NSSA ext. route type 2.
    RtypeOspfNssa2 Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2

    // EIGRP internal route.
    RtypeIgrp2Int Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int

    // EIGRP external route.
    RtypeIgrp2Ext Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
}

func (summaryProto *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto) GetEntityData() *types.CommonEntityData {
    summaryProto.EntityData.YFilter = summaryProto.YFilter
    summaryProto.EntityData.YangName = "summary-proto"
    summaryProto.EntityData.BundleName = "cisco_ios_xr"
    summaryProto.EntityData.ParentYangName = "summary-protos"
    summaryProto.EntityData.SegmentPath = "summary-proto" + types.AddKeyToken(summaryProto.Protoid, "protoid")
    summaryProto.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProto.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProto.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProto.EntityData.Children = types.NewOrderedMap()
    summaryProto.EntityData.Children.Append("proto-route-count", types.YChild{"ProtoRouteCount", &summaryProto.ProtoRouteCount})
    summaryProto.EntityData.Children.Append("rtype-none", types.YChild{"RtypeNone", &summaryProto.RtypeNone})
    summaryProto.EntityData.Children.Append("rtype-other", types.YChild{"RtypeOther", &summaryProto.RtypeOther})
    summaryProto.EntityData.Children.Append("rtype-ospf-intra", types.YChild{"RtypeOspfIntra", &summaryProto.RtypeOspfIntra})
    summaryProto.EntityData.Children.Append("rtype-ospf-inter", types.YChild{"RtypeOspfInter", &summaryProto.RtypeOspfInter})
    summaryProto.EntityData.Children.Append("rtype-ospf-extern1", types.YChild{"RtypeOspfExtern1", &summaryProto.RtypeOspfExtern1})
    summaryProto.EntityData.Children.Append("rtype-ospf-extern2", types.YChild{"RtypeOspfExtern2", &summaryProto.RtypeOspfExtern2})
    summaryProto.EntityData.Children.Append("rtype-isis-sum", types.YChild{"RtypeIsisSum", &summaryProto.RtypeIsisSum})
    summaryProto.EntityData.Children.Append("rtype-isis-l1", types.YChild{"RtypeIsisL1", &summaryProto.RtypeIsisL1})
    summaryProto.EntityData.Children.Append("rtype-isis-l2", types.YChild{"RtypeIsisL2", &summaryProto.RtypeIsisL2})
    summaryProto.EntityData.Children.Append("rtype-isis-l1-ia", types.YChild{"RtypeIsisL1Ia", &summaryProto.RtypeIsisL1Ia})
    summaryProto.EntityData.Children.Append("rtype-bgp-int", types.YChild{"RtypeBgpInt", &summaryProto.RtypeBgpInt})
    summaryProto.EntityData.Children.Append("rtype-bgp-ext", types.YChild{"RtypeBgpExt", &summaryProto.RtypeBgpExt})
    summaryProto.EntityData.Children.Append("rtype-bgp-loc", types.YChild{"RtypeBgpLoc", &summaryProto.RtypeBgpLoc})
    summaryProto.EntityData.Children.Append("rtype-ospf-nssa1", types.YChild{"RtypeOspfNssa1", &summaryProto.RtypeOspfNssa1})
    summaryProto.EntityData.Children.Append("rtype-ospf-nssa2", types.YChild{"RtypeOspfNssa2", &summaryProto.RtypeOspfNssa2})
    summaryProto.EntityData.Children.Append("rtype-igrp2-int", types.YChild{"RtypeIgrp2Int", &summaryProto.RtypeIgrp2Int})
    summaryProto.EntityData.Children.Append("rtype-igrp2-ext", types.YChild{"RtypeIgrp2Ext", &summaryProto.RtypeIgrp2Ext})
    summaryProto.EntityData.Leafs = types.NewOrderedMap()
    summaryProto.EntityData.Leafs.Append("protoid", types.YLeaf{"Protoid", summaryProto.Protoid})
    summaryProto.EntityData.Leafs.Append("name", types.YLeaf{"Name", summaryProto.Name})
    summaryProto.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", summaryProto.Instance})

    summaryProto.EntityData.YListKeys = []string {"Protoid"}

    return &(summaryProto.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount
// Count for proto. instance
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (protoRouteCount *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_ProtoRouteCount) GetEntityData() *types.CommonEntityData {
    protoRouteCount.EntityData.YFilter = protoRouteCount.YFilter
    protoRouteCount.EntityData.YangName = "proto-route-count"
    protoRouteCount.EntityData.BundleName = "cisco_ios_xr"
    protoRouteCount.EntityData.ParentYangName = "summary-proto"
    protoRouteCount.EntityData.SegmentPath = "proto-route-count"
    protoRouteCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protoRouteCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protoRouteCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protoRouteCount.EntityData.Children = types.NewOrderedMap()
    protoRouteCount.EntityData.Leafs = types.NewOrderedMap()
    protoRouteCount.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", protoRouteCount.ActiveRoutesCount})
    protoRouteCount.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", protoRouteCount.NumBackupRoutes})
    protoRouteCount.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", protoRouteCount.NumActivePaths})
    protoRouteCount.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", protoRouteCount.NumBackupPaths})

    protoRouteCount.EntityData.YListKeys = []string {}

    return &(protoRouteCount.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone
// No route type
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeNone *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeNone) GetEntityData() *types.CommonEntityData {
    rtypeNone.EntityData.YFilter = rtypeNone.YFilter
    rtypeNone.EntityData.YangName = "rtype-none"
    rtypeNone.EntityData.BundleName = "cisco_ios_xr"
    rtypeNone.EntityData.ParentYangName = "summary-proto"
    rtypeNone.EntityData.SegmentPath = "rtype-none"
    rtypeNone.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeNone.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeNone.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeNone.EntityData.Children = types.NewOrderedMap()
    rtypeNone.EntityData.Leafs = types.NewOrderedMap()
    rtypeNone.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeNone.ActiveRoutesCount})
    rtypeNone.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeNone.NumBackupRoutes})
    rtypeNone.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeNone.NumActivePaths})
    rtypeNone.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeNone.NumBackupPaths})

    rtypeNone.EntityData.YListKeys = []string {}

    return &(rtypeNone.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther
// Unknown route type
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOther *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOther) GetEntityData() *types.CommonEntityData {
    rtypeOther.EntityData.YFilter = rtypeOther.YFilter
    rtypeOther.EntityData.YangName = "rtype-other"
    rtypeOther.EntityData.BundleName = "cisco_ios_xr"
    rtypeOther.EntityData.ParentYangName = "summary-proto"
    rtypeOther.EntityData.SegmentPath = "rtype-other"
    rtypeOther.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOther.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOther.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOther.EntityData.Children = types.NewOrderedMap()
    rtypeOther.EntityData.Leafs = types.NewOrderedMap()
    rtypeOther.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOther.ActiveRoutesCount})
    rtypeOther.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOther.NumBackupRoutes})
    rtypeOther.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOther.NumActivePaths})
    rtypeOther.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOther.NumBackupPaths})

    rtypeOther.EntityData.YListKeys = []string {}

    return &(rtypeOther.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra
// OSPF route within an area
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfIntra *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfIntra) GetEntityData() *types.CommonEntityData {
    rtypeOspfIntra.EntityData.YFilter = rtypeOspfIntra.YFilter
    rtypeOspfIntra.EntityData.YangName = "rtype-ospf-intra"
    rtypeOspfIntra.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfIntra.EntityData.ParentYangName = "summary-proto"
    rtypeOspfIntra.EntityData.SegmentPath = "rtype-ospf-intra"
    rtypeOspfIntra.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfIntra.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfIntra.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfIntra.EntityData.Children = types.NewOrderedMap()
    rtypeOspfIntra.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfIntra.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfIntra.ActiveRoutesCount})
    rtypeOspfIntra.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfIntra.NumBackupRoutes})
    rtypeOspfIntra.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfIntra.NumActivePaths})
    rtypeOspfIntra.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfIntra.NumBackupPaths})

    rtypeOspfIntra.EntityData.YListKeys = []string {}

    return &(rtypeOspfIntra.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter
// OSPF route across diff. areas
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfInter *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfInter) GetEntityData() *types.CommonEntityData {
    rtypeOspfInter.EntityData.YFilter = rtypeOspfInter.YFilter
    rtypeOspfInter.EntityData.YangName = "rtype-ospf-inter"
    rtypeOspfInter.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfInter.EntityData.ParentYangName = "summary-proto"
    rtypeOspfInter.EntityData.SegmentPath = "rtype-ospf-inter"
    rtypeOspfInter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfInter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfInter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfInter.EntityData.Children = types.NewOrderedMap()
    rtypeOspfInter.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfInter.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfInter.ActiveRoutesCount})
    rtypeOspfInter.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfInter.NumBackupRoutes})
    rtypeOspfInter.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfInter.NumActivePaths})
    rtypeOspfInter.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfInter.NumBackupPaths})

    rtypeOspfInter.EntityData.YListKeys = []string {}

    return &(rtypeOspfInter.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1
// OSPF external route of type 1
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern1 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern1) GetEntityData() *types.CommonEntityData {
    rtypeOspfExtern1.EntityData.YFilter = rtypeOspfExtern1.YFilter
    rtypeOspfExtern1.EntityData.YangName = "rtype-ospf-extern1"
    rtypeOspfExtern1.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfExtern1.EntityData.ParentYangName = "summary-proto"
    rtypeOspfExtern1.EntityData.SegmentPath = "rtype-ospf-extern1"
    rtypeOspfExtern1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfExtern1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfExtern1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfExtern1.EntityData.Children = types.NewOrderedMap()
    rtypeOspfExtern1.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfExtern1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfExtern1.ActiveRoutesCount})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfExtern1.NumBackupRoutes})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfExtern1.NumActivePaths})
    rtypeOspfExtern1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfExtern1.NumBackupPaths})

    rtypeOspfExtern1.EntityData.YListKeys = []string {}

    return &(rtypeOspfExtern1.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2
// OSPF external route of type 2
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfExtern2 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfExtern2) GetEntityData() *types.CommonEntityData {
    rtypeOspfExtern2.EntityData.YFilter = rtypeOspfExtern2.YFilter
    rtypeOspfExtern2.EntityData.YangName = "rtype-ospf-extern2"
    rtypeOspfExtern2.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfExtern2.EntityData.ParentYangName = "summary-proto"
    rtypeOspfExtern2.EntityData.SegmentPath = "rtype-ospf-extern2"
    rtypeOspfExtern2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfExtern2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfExtern2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfExtern2.EntityData.Children = types.NewOrderedMap()
    rtypeOspfExtern2.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfExtern2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfExtern2.ActiveRoutesCount})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfExtern2.NumBackupRoutes})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfExtern2.NumActivePaths})
    rtypeOspfExtern2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfExtern2.NumBackupPaths})

    rtypeOspfExtern2.EntityData.YListKeys = []string {}

    return &(rtypeOspfExtern2.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum
// IS-IS summary route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisSum *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisSum) GetEntityData() *types.CommonEntityData {
    rtypeIsisSum.EntityData.YFilter = rtypeIsisSum.YFilter
    rtypeIsisSum.EntityData.YangName = "rtype-isis-sum"
    rtypeIsisSum.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisSum.EntityData.ParentYangName = "summary-proto"
    rtypeIsisSum.EntityData.SegmentPath = "rtype-isis-sum"
    rtypeIsisSum.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisSum.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisSum.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisSum.EntityData.Children = types.NewOrderedMap()
    rtypeIsisSum.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisSum.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisSum.ActiveRoutesCount})
    rtypeIsisSum.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisSum.NumBackupRoutes})
    rtypeIsisSum.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisSum.NumActivePaths})
    rtypeIsisSum.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisSum.NumBackupPaths})

    rtypeIsisSum.EntityData.YListKeys = []string {}

    return &(rtypeIsisSum.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1
// IS-IS level 1 route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1) GetEntityData() *types.CommonEntityData {
    rtypeIsisL1.EntityData.YFilter = rtypeIsisL1.YFilter
    rtypeIsisL1.EntityData.YangName = "rtype-isis-l1"
    rtypeIsisL1.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL1.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL1.EntityData.SegmentPath = "rtype-isis-l1"
    rtypeIsisL1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL1.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL1.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL1.ActiveRoutesCount})
    rtypeIsisL1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL1.NumBackupRoutes})
    rtypeIsisL1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL1.NumActivePaths})
    rtypeIsisL1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL1.NumBackupPaths})

    rtypeIsisL1.EntityData.YListKeys = []string {}

    return &(rtypeIsisL1.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2
// IS-IS level 2 route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL2 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL2) GetEntityData() *types.CommonEntityData {
    rtypeIsisL2.EntityData.YFilter = rtypeIsisL2.YFilter
    rtypeIsisL2.EntityData.YangName = "rtype-isis-l2"
    rtypeIsisL2.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL2.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL2.EntityData.SegmentPath = "rtype-isis-l2"
    rtypeIsisL2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL2.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL2.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL2.ActiveRoutesCount})
    rtypeIsisL2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL2.NumBackupRoutes})
    rtypeIsisL2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL2.NumActivePaths})
    rtypeIsisL2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL2.NumBackupPaths})

    rtypeIsisL2.EntityData.YListKeys = []string {}

    return &(rtypeIsisL2.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia
// IS-IS level1 inter-area route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIsisL1Ia *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIsisL1Ia) GetEntityData() *types.CommonEntityData {
    rtypeIsisL1Ia.EntityData.YFilter = rtypeIsisL1Ia.YFilter
    rtypeIsisL1Ia.EntityData.YangName = "rtype-isis-l1-ia"
    rtypeIsisL1Ia.EntityData.BundleName = "cisco_ios_xr"
    rtypeIsisL1Ia.EntityData.ParentYangName = "summary-proto"
    rtypeIsisL1Ia.EntityData.SegmentPath = "rtype-isis-l1-ia"
    rtypeIsisL1Ia.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIsisL1Ia.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIsisL1Ia.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIsisL1Ia.EntityData.Children = types.NewOrderedMap()
    rtypeIsisL1Ia.EntityData.Leafs = types.NewOrderedMap()
    rtypeIsisL1Ia.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIsisL1Ia.ActiveRoutesCount})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIsisL1Ia.NumBackupRoutes})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIsisL1Ia.NumActivePaths})
    rtypeIsisL1Ia.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIsisL1Ia.NumBackupPaths})

    rtypeIsisL1Ia.EntityData.YListKeys = []string {}

    return &(rtypeIsisL1Ia.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt
// iBGP route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpInt *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpInt) GetEntityData() *types.CommonEntityData {
    rtypeBgpInt.EntityData.YFilter = rtypeBgpInt.YFilter
    rtypeBgpInt.EntityData.YangName = "rtype-bgp-int"
    rtypeBgpInt.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpInt.EntityData.ParentYangName = "summary-proto"
    rtypeBgpInt.EntityData.SegmentPath = "rtype-bgp-int"
    rtypeBgpInt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpInt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpInt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpInt.EntityData.Children = types.NewOrderedMap()
    rtypeBgpInt.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpInt.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpInt.ActiveRoutesCount})
    rtypeBgpInt.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpInt.NumBackupRoutes})
    rtypeBgpInt.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpInt.NumActivePaths})
    rtypeBgpInt.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpInt.NumBackupPaths})

    rtypeBgpInt.EntityData.YListKeys = []string {}

    return &(rtypeBgpInt.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt
// eBGP route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpExt *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpExt) GetEntityData() *types.CommonEntityData {
    rtypeBgpExt.EntityData.YFilter = rtypeBgpExt.YFilter
    rtypeBgpExt.EntityData.YangName = "rtype-bgp-ext"
    rtypeBgpExt.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpExt.EntityData.ParentYangName = "summary-proto"
    rtypeBgpExt.EntityData.SegmentPath = "rtype-bgp-ext"
    rtypeBgpExt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpExt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpExt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpExt.EntityData.Children = types.NewOrderedMap()
    rtypeBgpExt.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpExt.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpExt.ActiveRoutesCount})
    rtypeBgpExt.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpExt.NumBackupRoutes})
    rtypeBgpExt.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpExt.NumActivePaths})
    rtypeBgpExt.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpExt.NumBackupPaths})

    rtypeBgpExt.EntityData.YListKeys = []string {}

    return &(rtypeBgpExt.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc
// BGP local route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeBgpLoc *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeBgpLoc) GetEntityData() *types.CommonEntityData {
    rtypeBgpLoc.EntityData.YFilter = rtypeBgpLoc.YFilter
    rtypeBgpLoc.EntityData.YangName = "rtype-bgp-loc"
    rtypeBgpLoc.EntityData.BundleName = "cisco_ios_xr"
    rtypeBgpLoc.EntityData.ParentYangName = "summary-proto"
    rtypeBgpLoc.EntityData.SegmentPath = "rtype-bgp-loc"
    rtypeBgpLoc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeBgpLoc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeBgpLoc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeBgpLoc.EntityData.Children = types.NewOrderedMap()
    rtypeBgpLoc.EntityData.Leafs = types.NewOrderedMap()
    rtypeBgpLoc.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeBgpLoc.ActiveRoutesCount})
    rtypeBgpLoc.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeBgpLoc.NumBackupRoutes})
    rtypeBgpLoc.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeBgpLoc.NumActivePaths})
    rtypeBgpLoc.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeBgpLoc.NumBackupPaths})

    rtypeBgpLoc.EntityData.YListKeys = []string {}

    return &(rtypeBgpLoc.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1
// OSPF NSSA ext. route type 1
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa1 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa1) GetEntityData() *types.CommonEntityData {
    rtypeOspfNssa1.EntityData.YFilter = rtypeOspfNssa1.YFilter
    rtypeOspfNssa1.EntityData.YangName = "rtype-ospf-nssa1"
    rtypeOspfNssa1.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfNssa1.EntityData.ParentYangName = "summary-proto"
    rtypeOspfNssa1.EntityData.SegmentPath = "rtype-ospf-nssa1"
    rtypeOspfNssa1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfNssa1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfNssa1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfNssa1.EntityData.Children = types.NewOrderedMap()
    rtypeOspfNssa1.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfNssa1.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfNssa1.ActiveRoutesCount})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfNssa1.NumBackupRoutes})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfNssa1.NumActivePaths})
    rtypeOspfNssa1.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfNssa1.NumBackupPaths})

    rtypeOspfNssa1.EntityData.YListKeys = []string {}

    return &(rtypeOspfNssa1.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2
// OSPF NSSA ext. route type 2
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeOspfNssa2 *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeOspfNssa2) GetEntityData() *types.CommonEntityData {
    rtypeOspfNssa2.EntityData.YFilter = rtypeOspfNssa2.YFilter
    rtypeOspfNssa2.EntityData.YangName = "rtype-ospf-nssa2"
    rtypeOspfNssa2.EntityData.BundleName = "cisco_ios_xr"
    rtypeOspfNssa2.EntityData.ParentYangName = "summary-proto"
    rtypeOspfNssa2.EntityData.SegmentPath = "rtype-ospf-nssa2"
    rtypeOspfNssa2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeOspfNssa2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeOspfNssa2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeOspfNssa2.EntityData.Children = types.NewOrderedMap()
    rtypeOspfNssa2.EntityData.Leafs = types.NewOrderedMap()
    rtypeOspfNssa2.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeOspfNssa2.ActiveRoutesCount})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeOspfNssa2.NumBackupRoutes})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeOspfNssa2.NumActivePaths})
    rtypeOspfNssa2.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeOspfNssa2.NumBackupPaths})

    rtypeOspfNssa2.EntityData.YListKeys = []string {}

    return &(rtypeOspfNssa2.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int
// EIGRP internal route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Int *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Int) GetEntityData() *types.CommonEntityData {
    rtypeIgrp2Int.EntityData.YFilter = rtypeIgrp2Int.YFilter
    rtypeIgrp2Int.EntityData.YangName = "rtype-igrp2-int"
    rtypeIgrp2Int.EntityData.BundleName = "cisco_ios_xr"
    rtypeIgrp2Int.EntityData.ParentYangName = "summary-proto"
    rtypeIgrp2Int.EntityData.SegmentPath = "rtype-igrp2-int"
    rtypeIgrp2Int.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIgrp2Int.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIgrp2Int.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIgrp2Int.EntityData.Children = types.NewOrderedMap()
    rtypeIgrp2Int.EntityData.Leafs = types.NewOrderedMap()
    rtypeIgrp2Int.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIgrp2Int.ActiveRoutesCount})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIgrp2Int.NumBackupRoutes})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIgrp2Int.NumActivePaths})
    rtypeIgrp2Int.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIgrp2Int.NumBackupPaths})

    rtypeIgrp2Int.EntityData.YListKeys = []string {}

    return &(rtypeIgrp2Int.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext
// EIGRP external route
type Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of active routes. The type is interface{} with range: 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of backup (inactive) routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupRoutes interface{}

    // Number of paths to active routes. The type is interface{} with range:
    // 0..4294967295.
    NumActivePaths interface{}

    // Number of paths to backup routes. The type is interface{} with range:
    // 0..4294967295.
    NumBackupPaths interface{}
}

func (rtypeIgrp2Ext *Ipv6RibStdby_RibTableIds_RibTableId_SummaryProtos_SummaryProto_RtypeIgrp2Ext) GetEntityData() *types.CommonEntityData {
    rtypeIgrp2Ext.EntityData.YFilter = rtypeIgrp2Ext.YFilter
    rtypeIgrp2Ext.EntityData.YangName = "rtype-igrp2-ext"
    rtypeIgrp2Ext.EntityData.BundleName = "cisco_ios_xr"
    rtypeIgrp2Ext.EntityData.ParentYangName = "summary-proto"
    rtypeIgrp2Ext.EntityData.SegmentPath = "rtype-igrp2-ext"
    rtypeIgrp2Ext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rtypeIgrp2Ext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rtypeIgrp2Ext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rtypeIgrp2Ext.EntityData.Children = types.NewOrderedMap()
    rtypeIgrp2Ext.EntityData.Leafs = types.NewOrderedMap()
    rtypeIgrp2Ext.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", rtypeIgrp2Ext.ActiveRoutesCount})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-backup-routes", types.YLeaf{"NumBackupRoutes", rtypeIgrp2Ext.NumBackupRoutes})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-active-paths", types.YLeaf{"NumActivePaths", rtypeIgrp2Ext.NumActivePaths})
    rtypeIgrp2Ext.EntityData.Leafs.Append("num-backup-paths", types.YLeaf{"NumBackupPaths", rtypeIgrp2Ext.NumBackupPaths})

    rtypeIgrp2Ext.EntityData.YListKeys = []string {}

    return &(rtypeIgrp2Ext.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls
// RIB table interface
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface handle. The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl.
    RibTableItfHndl []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
}

func (ribTableItfHndls *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls) GetEntityData() *types.CommonEntityData {
    ribTableItfHndls.EntityData.YFilter = ribTableItfHndls.YFilter
    ribTableItfHndls.EntityData.YangName = "rib-table-itf-hndls"
    ribTableItfHndls.EntityData.BundleName = "cisco_ios_xr"
    ribTableItfHndls.EntityData.ParentYangName = "rib-table-id"
    ribTableItfHndls.EntityData.SegmentPath = "rib-table-itf-hndls"
    ribTableItfHndls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableItfHndls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableItfHndls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableItfHndls.EntityData.Children = types.NewOrderedMap()
    ribTableItfHndls.EntityData.Children.Append("rib-table-itf-hndl", types.YChild{"RibTableItfHndl", nil})
    for i := range ribTableItfHndls.RibTableItfHndl {
        ribTableItfHndls.EntityData.Children.Append(types.GetSegmentPath(ribTableItfHndls.RibTableItfHndl[i]), types.YChild{"RibTableItfHndl", ribTableItfHndls.RibTableItfHndl[i]})
    }
    ribTableItfHndls.EntityData.Leafs = types.NewOrderedMap()

    ribTableItfHndls.EntityData.YListKeys = []string {}

    return &(ribTableItfHndls.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl
// Interface handle
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Itf Handle. The type is interface{} with range:
    // 0..4294967295.
    Handle interface{}

    // Route information for a specific table/interface . The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute.
    ItfRoute []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
}

func (ribTableItfHndl *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl) GetEntityData() *types.CommonEntityData {
    ribTableItfHndl.EntityData.YFilter = ribTableItfHndl.YFilter
    ribTableItfHndl.EntityData.YangName = "rib-table-itf-hndl"
    ribTableItfHndl.EntityData.BundleName = "cisco_ios_xr"
    ribTableItfHndl.EntityData.ParentYangName = "rib-table-itf-hndls"
    ribTableItfHndl.EntityData.SegmentPath = "rib-table-itf-hndl" + types.AddKeyToken(ribTableItfHndl.Handle, "handle")
    ribTableItfHndl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ribTableItfHndl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ribTableItfHndl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ribTableItfHndl.EntityData.Children = types.NewOrderedMap()
    ribTableItfHndl.EntityData.Children.Append("itf-route", types.YChild{"ItfRoute", nil})
    for i := range ribTableItfHndl.ItfRoute {
        ribTableItfHndl.EntityData.Children.Append(types.GetSegmentPath(ribTableItfHndl.ItfRoute[i]), types.YChild{"ItfRoute", ribTableItfHndl.ItfRoute[i]})
    }
    ribTableItfHndl.EntityData.Leafs = types.NewOrderedMap()
    ribTableItfHndl.EntityData.Leafs.Append("handle", types.YLeaf{"Handle", ribTableItfHndl.Handle})

    ribTableItfHndl.EntityData.YListKeys = []string {"Handle"}

    return &(ribTableItfHndl.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute
// Route information for a specific
// table/interface 
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
}

func (itfRoute *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute) GetEntityData() *types.CommonEntityData {
    itfRoute.EntityData.YFilter = itfRoute.YFilter
    itfRoute.EntityData.YangName = "itf-route"
    itfRoute.EntityData.BundleName = "cisco_ios_xr"
    itfRoute.EntityData.ParentYangName = "rib-table-itf-hndl"
    itfRoute.EntityData.SegmentPath = "itf-route" + types.AddKeyToken(itfRoute.Address, "address")
    itfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    itfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    itfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    itfRoute.EntityData.Children = types.NewOrderedMap()
    itfRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &itfRoute.RoutePath})
    itfRoute.EntityData.Leafs = types.NewOrderedMap()
    itfRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", itfRoute.Address})
    itfRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", itfRoute.Prefix})
    itfRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", itfRoute.PrefixLengthXr})
    itfRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", itfRoute.RouteVersion})
    itfRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", itfRoute.ProtocolId})
    itfRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", itfRoute.ProtocolName})
    itfRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", itfRoute.Instance})
    itfRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", itfRoute.ClientId})
    itfRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", itfRoute.RouteType})
    itfRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", itfRoute.Priority})
    itfRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", itfRoute.SvdType})
    itfRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", itfRoute.Flags})
    itfRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", itfRoute.ExtendedFlags})
    itfRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", itfRoute.Tag})
    itfRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", itfRoute.Distance})
    itfRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", itfRoute.DiversionDistance})
    itfRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", itfRoute.Metric})
    itfRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", itfRoute.PathsCount})
    itfRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", itfRoute.AttributeIdentity})
    itfRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", itfRoute.TrafficIndex})
    itfRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", itfRoute.RoutePrecedence})
    itfRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", itfRoute.QosGroup})
    itfRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", itfRoute.FlowTag})
    itfRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", itfRoute.FwdClass})
    itfRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", itfRoute.PicCount})
    itfRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", itfRoute.Active})
    itfRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", itfRoute.Diversion})
    itfRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", itfRoute.DiversionProtoName})
    itfRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", itfRoute.RouteAge})
    itfRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", itfRoute.RouteLabel})
    itfRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", itfRoute.Version})
    itfRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", itfRoute.TblVersion})
    itfRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", itfRoute.RouteModifyTime})

    itfRoute.EntityData.YListKeys = []string {"Address"}

    return &(itfRoute.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "itf-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_RibTableIds_RibTableId_RibTableItfHndls_RibTableItfHndl_ItfRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs
// VRF table
type Ipv6RibStdby_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific VRF. The type is slice of Ipv6RibStdby_Vrfs_Vrf.
    Vrf []*Ipv6RibStdby_Vrfs_Vrf
}

func (vrfs *Ipv6RibStdby_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "ipv6-rib-stdby"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf
// Specific VRF
type Ipv6RibStdby_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the VRF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Address Family (AF) table.
    Afs Ipv6RibStdby_Vrfs_Vrf_Afs
}

func (vrf *Ipv6RibStdby_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("afs", types.YChild{"Afs", &vrf.Afs})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs
// Address Family (AF) table
type Ipv6RibStdby_Vrfs_Vrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific AF information. The type is slice of Ipv6RibStdby_Vrfs_Vrf_Afs_Af.
    Af []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af
}

func (afs *Ipv6RibStdby_Vrfs_Vrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af
// Specific AF information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the AF - 'IPv6'. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    AfName interface{}

    // Subsequent Address Family (SAF) table.
    Safs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs
}

func (af *Ipv6RibStdby_Vrfs_Vrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("safs", types.YChild{"Safs", &af.Safs})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs
// Subsequent Address Family (SAF) table
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specific SAF information. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf.
    Saf []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf
}

func (safs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs) GetEntityData() *types.CommonEntityData {
    safs.EntityData.YFilter = safs.YFilter
    safs.EntityData.YangName = "safs"
    safs.EntityData.BundleName = "cisco_ios_xr"
    safs.EntityData.ParentYangName = "af"
    safs.EntityData.SegmentPath = "safs"
    safs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    safs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    safs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    safs.EntityData.Children = types.NewOrderedMap()
    safs.EntityData.Children.Append("saf", types.YChild{"Saf", nil})
    for i := range safs.Saf {
        safs.EntityData.Children.Append(types.GetSegmentPath(safs.Saf[i]), types.YChild{"Saf", safs.Saf[i]})
    }
    safs.EntityData.Leafs = types.NewOrderedMap()

    safs.EntityData.YListKeys = []string {}

    return &(safs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf
// Specific SAF information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the SAF. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    SafName interface{}

    // Global container of routes.
    IpRibRouteTableNames Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
}

func (saf *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf) GetEntityData() *types.CommonEntityData {
    saf.EntityData.YFilter = saf.YFilter
    saf.EntityData.YangName = "saf"
    saf.EntityData.BundleName = "cisco_ios_xr"
    saf.EntityData.ParentYangName = "safs"
    saf.EntityData.SegmentPath = "saf" + types.AddKeyToken(saf.SafName, "saf-name")
    saf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saf.EntityData.Children = types.NewOrderedMap()
    saf.EntityData.Children.Append("ip-rib-route-table-names", types.YChild{"IpRibRouteTableNames", &saf.IpRibRouteTableNames})
    saf.EntityData.Leafs = types.NewOrderedMap()
    saf.EntityData.Leafs.Append("saf-name", types.YLeaf{"SafName", saf.SafName})

    saf.EntityData.YListKeys = []string {"SafName"}

    return &(saf.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames
// Global container of routes
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP RIB Route table name for a topology. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName.
    IpRibRouteTableName []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
}

func (ipRibRouteTableNames *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames) GetEntityData() *types.CommonEntityData {
    ipRibRouteTableNames.EntityData.YFilter = ipRibRouteTableNames.YFilter
    ipRibRouteTableNames.EntityData.YangName = "ip-rib-route-table-names"
    ipRibRouteTableNames.EntityData.BundleName = "cisco_ios_xr"
    ipRibRouteTableNames.EntityData.ParentYangName = "saf"
    ipRibRouteTableNames.EntityData.SegmentPath = "ip-rib-route-table-names"
    ipRibRouteTableNames.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipRibRouteTableNames.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipRibRouteTableNames.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipRibRouteTableNames.EntityData.Children = types.NewOrderedMap()
    ipRibRouteTableNames.EntityData.Children.Append("ip-rib-route-table-name", types.YChild{"IpRibRouteTableName", nil})
    for i := range ipRibRouteTableNames.IpRibRouteTableName {
        ipRibRouteTableNames.EntityData.Children.Append(types.GetSegmentPath(ipRibRouteTableNames.IpRibRouteTableName[i]), types.YChild{"IpRibRouteTableName", ipRibRouteTableNames.IpRibRouteTableName[i]})
    }
    ipRibRouteTableNames.EntityData.Leafs = types.NewOrderedMap()

    ipRibRouteTableNames.EntityData.YListKeys = []string {}

    return &(ipRibRouteTableNames.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName
// IP RIB Route table name for a topology
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the route table . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RouteTableName interface{}

    // Destination KW.
    DestinationKw Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw

    // Route advertiser information .
    Adverts Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts

    // Deleted.
    DeletedRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes

    // Contains the classification of routes by protocol.
    Protocol Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol

    // Route information .
    Routes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes

    // Quarantine.
    QRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes

    // Backup route information for the given table.
    BackupRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
}

func (ipRibRouteTableName *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName) GetEntityData() *types.CommonEntityData {
    ipRibRouteTableName.EntityData.YFilter = ipRibRouteTableName.YFilter
    ipRibRouteTableName.EntityData.YangName = "ip-rib-route-table-name"
    ipRibRouteTableName.EntityData.BundleName = "cisco_ios_xr"
    ipRibRouteTableName.EntityData.ParentYangName = "ip-rib-route-table-names"
    ipRibRouteTableName.EntityData.SegmentPath = "ip-rib-route-table-name" + types.AddKeyToken(ipRibRouteTableName.RouteTableName, "route-table-name")
    ipRibRouteTableName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipRibRouteTableName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipRibRouteTableName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipRibRouteTableName.EntityData.Children = types.NewOrderedMap()
    ipRibRouteTableName.EntityData.Children.Append("destination-kw", types.YChild{"DestinationKw", &ipRibRouteTableName.DestinationKw})
    ipRibRouteTableName.EntityData.Children.Append("adverts", types.YChild{"Adverts", &ipRibRouteTableName.Adverts})
    ipRibRouteTableName.EntityData.Children.Append("deleted-routes", types.YChild{"DeletedRoutes", &ipRibRouteTableName.DeletedRoutes})
    ipRibRouteTableName.EntityData.Children.Append("protocol", types.YChild{"Protocol", &ipRibRouteTableName.Protocol})
    ipRibRouteTableName.EntityData.Children.Append("routes", types.YChild{"Routes", &ipRibRouteTableName.Routes})
    ipRibRouteTableName.EntityData.Children.Append("q-routes", types.YChild{"QRoutes", &ipRibRouteTableName.QRoutes})
    ipRibRouteTableName.EntityData.Children.Append("backup-routes", types.YChild{"BackupRoutes", &ipRibRouteTableName.BackupRoutes})
    ipRibRouteTableName.EntityData.Leafs = types.NewOrderedMap()
    ipRibRouteTableName.EntityData.Leafs.Append("route-table-name", types.YLeaf{"RouteTableName", ipRibRouteTableName.RouteTableName})

    ipRibRouteTableName.EntityData.YListKeys = []string {"RouteTableName"}

    return &(ipRibRouteTableName.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw
// Destination KW
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Quarantine.
    DestQRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes

    // Backup.
    DestBackupRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes

    // Best Local.
    DestBestRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes

    // Resolving next hop.
    DestNextHopRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
}

func (destinationKw *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw) GetEntityData() *types.CommonEntityData {
    destinationKw.EntityData.YFilter = destinationKw.YFilter
    destinationKw.EntityData.YangName = "destination-kw"
    destinationKw.EntityData.BundleName = "cisco_ios_xr"
    destinationKw.EntityData.ParentYangName = "ip-rib-route-table-name"
    destinationKw.EntityData.SegmentPath = "destination-kw"
    destinationKw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationKw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationKw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationKw.EntityData.Children = types.NewOrderedMap()
    destinationKw.EntityData.Children.Append("dest-q-routes", types.YChild{"DestQRoutes", &destinationKw.DestQRoutes})
    destinationKw.EntityData.Children.Append("dest-backup-routes", types.YChild{"DestBackupRoutes", &destinationKw.DestBackupRoutes})
    destinationKw.EntityData.Children.Append("dest-best-routes", types.YChild{"DestBestRoutes", &destinationKw.DestBestRoutes})
    destinationKw.EntityData.Children.Append("dest-next-hop-routes", types.YChild{"DestNextHopRoutes", &destinationKw.DestNextHopRoutes})
    destinationKw.EntityData.Leafs = types.NewOrderedMap()

    destinationKw.EntityData.YListKeys = []string {}

    return &(destinationKw.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes
// Quarantine
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute.
    DestQRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
}

func (destQRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes) GetEntityData() *types.CommonEntityData {
    destQRoutes.EntityData.YFilter = destQRoutes.YFilter
    destQRoutes.EntityData.YangName = "dest-q-routes"
    destQRoutes.EntityData.BundleName = "cisco_ios_xr"
    destQRoutes.EntityData.ParentYangName = "destination-kw"
    destQRoutes.EntityData.SegmentPath = "dest-q-routes"
    destQRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destQRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destQRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destQRoutes.EntityData.Children = types.NewOrderedMap()
    destQRoutes.EntityData.Children.Append("dest-q-route", types.YChild{"DestQRoute", nil})
    for i := range destQRoutes.DestQRoute {
        destQRoutes.EntityData.Children.Append(types.GetSegmentPath(destQRoutes.DestQRoute[i]), types.YChild{"DestQRoute", destQRoutes.DestQRoute[i]})
    }
    destQRoutes.EntityData.Leafs = types.NewOrderedMap()

    destQRoutes.EntityData.YListKeys = []string {}

    return &(destQRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute
// Route information of a specific Backup
// Address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
}

func (destQRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute) GetEntityData() *types.CommonEntityData {
    destQRoute.EntityData.YFilter = destQRoute.YFilter
    destQRoute.EntityData.YangName = "dest-q-route"
    destQRoute.EntityData.BundleName = "cisco_ios_xr"
    destQRoute.EntityData.ParentYangName = "dest-q-routes"
    destQRoute.EntityData.SegmentPath = "dest-q-route"
    destQRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destQRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destQRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destQRoute.EntityData.Children = types.NewOrderedMap()
    destQRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destQRoute.RoutePath})
    destQRoute.EntityData.Leafs = types.NewOrderedMap()
    destQRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destQRoute.Address})
    destQRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", destQRoute.PrefixLength})
    destQRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destQRoute.Prefix})
    destQRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destQRoute.PrefixLengthXr})
    destQRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destQRoute.RouteVersion})
    destQRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destQRoute.ProtocolId})
    destQRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destQRoute.ProtocolName})
    destQRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destQRoute.Instance})
    destQRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destQRoute.ClientId})
    destQRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destQRoute.RouteType})
    destQRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destQRoute.Priority})
    destQRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destQRoute.SvdType})
    destQRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destQRoute.Flags})
    destQRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destQRoute.ExtendedFlags})
    destQRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destQRoute.Tag})
    destQRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destQRoute.Distance})
    destQRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destQRoute.DiversionDistance})
    destQRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destQRoute.Metric})
    destQRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destQRoute.PathsCount})
    destQRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destQRoute.AttributeIdentity})
    destQRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destQRoute.TrafficIndex})
    destQRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destQRoute.RoutePrecedence})
    destQRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destQRoute.QosGroup})
    destQRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destQRoute.FlowTag})
    destQRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destQRoute.FwdClass})
    destQRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destQRoute.PicCount})
    destQRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destQRoute.Active})
    destQRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destQRoute.Diversion})
    destQRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destQRoute.DiversionProtoName})
    destQRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destQRoute.RouteAge})
    destQRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destQRoute.RouteLabel})
    destQRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destQRoute.Version})
    destQRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destQRoute.TblVersion})
    destQRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destQRoute.RouteModifyTime})

    destQRoute.EntityData.YListKeys = []string {}

    return &(destQRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-q-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestQRoutes_DestQRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes
// Backup
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Backup Address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute.
    DestBackupRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
}

func (destBackupRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes) GetEntityData() *types.CommonEntityData {
    destBackupRoutes.EntityData.YFilter = destBackupRoutes.YFilter
    destBackupRoutes.EntityData.YangName = "dest-backup-routes"
    destBackupRoutes.EntityData.BundleName = "cisco_ios_xr"
    destBackupRoutes.EntityData.ParentYangName = "destination-kw"
    destBackupRoutes.EntityData.SegmentPath = "dest-backup-routes"
    destBackupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBackupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBackupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBackupRoutes.EntityData.Children = types.NewOrderedMap()
    destBackupRoutes.EntityData.Children.Append("dest-backup-route", types.YChild{"DestBackupRoute", nil})
    for i := range destBackupRoutes.DestBackupRoute {
        destBackupRoutes.EntityData.Children.Append(types.GetSegmentPath(destBackupRoutes.DestBackupRoute[i]), types.YChild{"DestBackupRoute", destBackupRoutes.DestBackupRoute[i]})
    }
    destBackupRoutes.EntityData.Leafs = types.NewOrderedMap()

    destBackupRoutes.EntityData.YListKeys = []string {}

    return &(destBackupRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute
// Route information of a specific Backup
// Address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
}

func (destBackupRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute) GetEntityData() *types.CommonEntityData {
    destBackupRoute.EntityData.YFilter = destBackupRoute.YFilter
    destBackupRoute.EntityData.YangName = "dest-backup-route"
    destBackupRoute.EntityData.BundleName = "cisco_ios_xr"
    destBackupRoute.EntityData.ParentYangName = "dest-backup-routes"
    destBackupRoute.EntityData.SegmentPath = "dest-backup-route"
    destBackupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBackupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBackupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBackupRoute.EntityData.Children = types.NewOrderedMap()
    destBackupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destBackupRoute.RoutePath})
    destBackupRoute.EntityData.Leafs = types.NewOrderedMap()
    destBackupRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destBackupRoute.Address})
    destBackupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", destBackupRoute.PrefixLength})
    destBackupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destBackupRoute.Prefix})
    destBackupRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destBackupRoute.PrefixLengthXr})
    destBackupRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destBackupRoute.RouteVersion})
    destBackupRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destBackupRoute.ProtocolId})
    destBackupRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destBackupRoute.ProtocolName})
    destBackupRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destBackupRoute.Instance})
    destBackupRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destBackupRoute.ClientId})
    destBackupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destBackupRoute.RouteType})
    destBackupRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destBackupRoute.Priority})
    destBackupRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destBackupRoute.SvdType})
    destBackupRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destBackupRoute.Flags})
    destBackupRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destBackupRoute.ExtendedFlags})
    destBackupRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destBackupRoute.Tag})
    destBackupRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destBackupRoute.Distance})
    destBackupRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destBackupRoute.DiversionDistance})
    destBackupRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destBackupRoute.Metric})
    destBackupRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destBackupRoute.PathsCount})
    destBackupRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destBackupRoute.AttributeIdentity})
    destBackupRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destBackupRoute.TrafficIndex})
    destBackupRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destBackupRoute.RoutePrecedence})
    destBackupRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destBackupRoute.QosGroup})
    destBackupRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destBackupRoute.FlowTag})
    destBackupRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destBackupRoute.FwdClass})
    destBackupRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destBackupRoute.PicCount})
    destBackupRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destBackupRoute.Active})
    destBackupRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destBackupRoute.Diversion})
    destBackupRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destBackupRoute.DiversionProtoName})
    destBackupRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destBackupRoute.RouteAge})
    destBackupRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destBackupRoute.RouteLabel})
    destBackupRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destBackupRoute.Version})
    destBackupRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destBackupRoute.TblVersion})
    destBackupRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destBackupRoute.RouteModifyTime})

    destBackupRoute.EntityData.YListKeys = []string {}

    return &(destBackupRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBackupRoutes_DestBackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes
// Best Local
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Best local route information for a specific Address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute.
    DestBestRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
}

func (destBestRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes) GetEntityData() *types.CommonEntityData {
    destBestRoutes.EntityData.YFilter = destBestRoutes.YFilter
    destBestRoutes.EntityData.YangName = "dest-best-routes"
    destBestRoutes.EntityData.BundleName = "cisco_ios_xr"
    destBestRoutes.EntityData.ParentYangName = "destination-kw"
    destBestRoutes.EntityData.SegmentPath = "dest-best-routes"
    destBestRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBestRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBestRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBestRoutes.EntityData.Children = types.NewOrderedMap()
    destBestRoutes.EntityData.Children.Append("dest-best-route", types.YChild{"DestBestRoute", nil})
    for i := range destBestRoutes.DestBestRoute {
        destBestRoutes.EntityData.Children.Append(types.GetSegmentPath(destBestRoutes.DestBestRoute[i]), types.YChild{"DestBestRoute", destBestRoutes.DestBestRoute[i]})
    }
    destBestRoutes.EntityData.Leafs = types.NewOrderedMap()

    destBestRoutes.EntityData.YListKeys = []string {}

    return &(destBestRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute
// Best local route information for a
// specific Address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
}

func (destBestRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute) GetEntityData() *types.CommonEntityData {
    destBestRoute.EntityData.YFilter = destBestRoute.YFilter
    destBestRoute.EntityData.YangName = "dest-best-route"
    destBestRoute.EntityData.BundleName = "cisco_ios_xr"
    destBestRoute.EntityData.ParentYangName = "dest-best-routes"
    destBestRoute.EntityData.SegmentPath = "dest-best-route" + types.AddKeyToken(destBestRoute.Address, "address")
    destBestRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destBestRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destBestRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destBestRoute.EntityData.Children = types.NewOrderedMap()
    destBestRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destBestRoute.RoutePath})
    destBestRoute.EntityData.Leafs = types.NewOrderedMap()
    destBestRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destBestRoute.Address})
    destBestRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destBestRoute.Prefix})
    destBestRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destBestRoute.PrefixLengthXr})
    destBestRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destBestRoute.RouteVersion})
    destBestRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destBestRoute.ProtocolId})
    destBestRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destBestRoute.ProtocolName})
    destBestRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destBestRoute.Instance})
    destBestRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destBestRoute.ClientId})
    destBestRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destBestRoute.RouteType})
    destBestRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destBestRoute.Priority})
    destBestRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destBestRoute.SvdType})
    destBestRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destBestRoute.Flags})
    destBestRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destBestRoute.ExtendedFlags})
    destBestRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destBestRoute.Tag})
    destBestRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destBestRoute.Distance})
    destBestRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destBestRoute.DiversionDistance})
    destBestRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destBestRoute.Metric})
    destBestRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destBestRoute.PathsCount})
    destBestRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destBestRoute.AttributeIdentity})
    destBestRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destBestRoute.TrafficIndex})
    destBestRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destBestRoute.RoutePrecedence})
    destBestRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destBestRoute.QosGroup})
    destBestRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destBestRoute.FlowTag})
    destBestRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destBestRoute.FwdClass})
    destBestRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destBestRoute.PicCount})
    destBestRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destBestRoute.Active})
    destBestRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destBestRoute.Diversion})
    destBestRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destBestRoute.DiversionProtoName})
    destBestRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destBestRoute.RouteAge})
    destBestRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destBestRoute.RouteLabel})
    destBestRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destBestRoute.Version})
    destBestRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destBestRoute.TblVersion})
    destBestRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destBestRoute.RouteModifyTime})

    destBestRoute.EntityData.YListKeys = []string {"Address"}

    return &(destBestRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-best-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestBestRoutes_DestBestRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes
// Resolving next hop
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop information for a specific address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute.
    DestNextHopRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
}

func (destNextHopRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes) GetEntityData() *types.CommonEntityData {
    destNextHopRoutes.EntityData.YFilter = destNextHopRoutes.YFilter
    destNextHopRoutes.EntityData.YangName = "dest-next-hop-routes"
    destNextHopRoutes.EntityData.BundleName = "cisco_ios_xr"
    destNextHopRoutes.EntityData.ParentYangName = "destination-kw"
    destNextHopRoutes.EntityData.SegmentPath = "dest-next-hop-routes"
    destNextHopRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destNextHopRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destNextHopRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destNextHopRoutes.EntityData.Children = types.NewOrderedMap()
    destNextHopRoutes.EntityData.Children.Append("dest-next-hop-route", types.YChild{"DestNextHopRoute", nil})
    for i := range destNextHopRoutes.DestNextHopRoute {
        destNextHopRoutes.EntityData.Children.Append(types.GetSegmentPath(destNextHopRoutes.DestNextHopRoute[i]), types.YChild{"DestNextHopRoute", destNextHopRoutes.DestNextHopRoute[i]})
    }
    destNextHopRoutes.EntityData.Leafs = types.NewOrderedMap()

    destNextHopRoutes.EntityData.YListKeys = []string {}

    return &(destNextHopRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute
// Nexthop information for a specific
// address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
}

func (destNextHopRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute) GetEntityData() *types.CommonEntityData {
    destNextHopRoute.EntityData.YFilter = destNextHopRoute.YFilter
    destNextHopRoute.EntityData.YangName = "dest-next-hop-route"
    destNextHopRoute.EntityData.BundleName = "cisco_ios_xr"
    destNextHopRoute.EntityData.ParentYangName = "dest-next-hop-routes"
    destNextHopRoute.EntityData.SegmentPath = "dest-next-hop-route" + types.AddKeyToken(destNextHopRoute.Address, "address")
    destNextHopRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destNextHopRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destNextHopRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destNextHopRoute.EntityData.Children = types.NewOrderedMap()
    destNextHopRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &destNextHopRoute.RoutePath})
    destNextHopRoute.EntityData.Leafs = types.NewOrderedMap()
    destNextHopRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", destNextHopRoute.Address})
    destNextHopRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", destNextHopRoute.Prefix})
    destNextHopRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", destNextHopRoute.PrefixLengthXr})
    destNextHopRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", destNextHopRoute.RouteVersion})
    destNextHopRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", destNextHopRoute.ProtocolId})
    destNextHopRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", destNextHopRoute.ProtocolName})
    destNextHopRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", destNextHopRoute.Instance})
    destNextHopRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", destNextHopRoute.ClientId})
    destNextHopRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", destNextHopRoute.RouteType})
    destNextHopRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", destNextHopRoute.Priority})
    destNextHopRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", destNextHopRoute.SvdType})
    destNextHopRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", destNextHopRoute.Flags})
    destNextHopRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", destNextHopRoute.ExtendedFlags})
    destNextHopRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", destNextHopRoute.Tag})
    destNextHopRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", destNextHopRoute.Distance})
    destNextHopRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", destNextHopRoute.DiversionDistance})
    destNextHopRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", destNextHopRoute.Metric})
    destNextHopRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", destNextHopRoute.PathsCount})
    destNextHopRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", destNextHopRoute.AttributeIdentity})
    destNextHopRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", destNextHopRoute.TrafficIndex})
    destNextHopRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", destNextHopRoute.RoutePrecedence})
    destNextHopRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", destNextHopRoute.QosGroup})
    destNextHopRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", destNextHopRoute.FlowTag})
    destNextHopRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", destNextHopRoute.FwdClass})
    destNextHopRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", destNextHopRoute.PicCount})
    destNextHopRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", destNextHopRoute.Active})
    destNextHopRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", destNextHopRoute.Diversion})
    destNextHopRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", destNextHopRoute.DiversionProtoName})
    destNextHopRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", destNextHopRoute.RouteAge})
    destNextHopRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", destNextHopRoute.RouteLabel})
    destNextHopRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", destNextHopRoute.Version})
    destNextHopRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", destNextHopRoute.TblVersion})
    destNextHopRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", destNextHopRoute.RouteModifyTime})

    destNextHopRoute.EntityData.YListKeys = []string {"Address"}

    return &(destNextHopRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "dest-next-hop-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DestinationKw_DestNextHopRoutes_DestNextHopRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts
// Route advertiser information 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert.
    Advert []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
}

func (adverts *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts) GetEntityData() *types.CommonEntityData {
    adverts.EntityData.YFilter = adverts.YFilter
    adverts.EntityData.YangName = "adverts"
    adverts.EntityData.BundleName = "cisco_ios_xr"
    adverts.EntityData.ParentYangName = "ip-rib-route-table-name"
    adverts.EntityData.SegmentPath = "adverts"
    adverts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adverts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adverts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adverts.EntityData.Children = types.NewOrderedMap()
    adverts.EntityData.Children.Append("advert", types.YChild{"Advert", nil})
    for i := range adverts.Advert {
        adverts.EntityData.Children.Append(types.GetSegmentPath(adverts.Advert[i]), types.YChild{"Advert", adverts.Advert[i]})
    }
    adverts.EntityData.Leafs = types.NewOrderedMap()

    adverts.EntityData.YListKeys = []string {}

    return &(adverts.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert
// Route information of a specific Network
// Address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // ipv6 rib edm advert. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert.
    Ipv6RibEdmAdvert []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert
}

func (advert *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert) GetEntityData() *types.CommonEntityData {
    advert.EntityData.YFilter = advert.YFilter
    advert.EntityData.YangName = "advert"
    advert.EntityData.BundleName = "cisco_ios_xr"
    advert.EntityData.ParentYangName = "adverts"
    advert.EntityData.SegmentPath = "advert"
    advert.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advert.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advert.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advert.EntityData.Children = types.NewOrderedMap()
    advert.EntityData.Children.Append("ipv6-rib-edm-advert", types.YChild{"Ipv6RibEdmAdvert", nil})
    for i := range advert.Ipv6RibEdmAdvert {
        advert.EntityData.Children.Append(types.GetSegmentPath(advert.Ipv6RibEdmAdvert[i]), types.YChild{"Ipv6RibEdmAdvert", advert.Ipv6RibEdmAdvert[i]})
    }
    advert.EntityData.Leafs = types.NewOrderedMap()
    advert.EntityData.Leafs.Append("address", types.YLeaf{"Address", advert.Address})
    advert.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", advert.PrefixLength})

    advert.EntityData.YListKeys = []string {}

    return &(advert.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert
// ipv6 rib edm advert
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Client advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // Extended communities. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunities interface{}

    // OSPF area-id flags. The type is interface{} with range: 0..255.
    ProtocolOpaqueFlags interface{}

    // OSPF area-id. The type is interface{} with range: 0..4294967295.
    ProtocolOpaque interface{}

    // Protocol code. The type is interface{} with range: -128..127.
    Code interface{}

    // Instance name. The type is string with length: 0..41.
    InstanceName interface{}
}

func (ipv6RibEdmAdvert *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Adverts_Advert_Ipv6RibEdmAdvert) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmAdvert.EntityData.YFilter = ipv6RibEdmAdvert.YFilter
    ipv6RibEdmAdvert.EntityData.YangName = "ipv6-rib-edm-advert"
    ipv6RibEdmAdvert.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmAdvert.EntityData.ParentYangName = "advert"
    ipv6RibEdmAdvert.EntityData.SegmentPath = "ipv6-rib-edm-advert"
    ipv6RibEdmAdvert.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmAdvert.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmAdvert.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmAdvert.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmAdvert.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", ipv6RibEdmAdvert.ProtocolId})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", ipv6RibEdmAdvert.ClientId})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmAdvert.NumberOfExtendedCommunities})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("extended-communities", types.YLeaf{"ExtendedCommunities", ipv6RibEdmAdvert.ExtendedCommunities})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-opaque-flags", types.YLeaf{"ProtocolOpaqueFlags", ipv6RibEdmAdvert.ProtocolOpaqueFlags})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("protocol-opaque", types.YLeaf{"ProtocolOpaque", ipv6RibEdmAdvert.ProtocolOpaque})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("code", types.YLeaf{"Code", ipv6RibEdmAdvert.Code})
    ipv6RibEdmAdvert.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", ipv6RibEdmAdvert.InstanceName})

    ipv6RibEdmAdvert.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmAdvert.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes
// Deleted
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific deleted address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute.
    DeletedRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
}

func (deletedRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes) GetEntityData() *types.CommonEntityData {
    deletedRoutes.EntityData.YFilter = deletedRoutes.YFilter
    deletedRoutes.EntityData.YangName = "deleted-routes"
    deletedRoutes.EntityData.BundleName = "cisco_ios_xr"
    deletedRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    deletedRoutes.EntityData.SegmentPath = "deleted-routes"
    deletedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deletedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deletedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deletedRoutes.EntityData.Children = types.NewOrderedMap()
    deletedRoutes.EntityData.Children.Append("deleted-route", types.YChild{"DeletedRoute", nil})
    for i := range deletedRoutes.DeletedRoute {
        deletedRoutes.EntityData.Children.Append(types.GetSegmentPath(deletedRoutes.DeletedRoute[i]), types.YChild{"DeletedRoute", deletedRoutes.DeletedRoute[i]})
    }
    deletedRoutes.EntityData.Leafs = types.NewOrderedMap()

    deletedRoutes.EntityData.YListKeys = []string {}

    return &(deletedRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute
// Route information for a specific
// deleted address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
}

func (deletedRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute) GetEntityData() *types.CommonEntityData {
    deletedRoute.EntityData.YFilter = deletedRoute.YFilter
    deletedRoute.EntityData.YangName = "deleted-route"
    deletedRoute.EntityData.BundleName = "cisco_ios_xr"
    deletedRoute.EntityData.ParentYangName = "deleted-routes"
    deletedRoute.EntityData.SegmentPath = "deleted-route"
    deletedRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    deletedRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    deletedRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    deletedRoute.EntityData.Children = types.NewOrderedMap()
    deletedRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &deletedRoute.RoutePath})
    deletedRoute.EntityData.Leafs = types.NewOrderedMap()
    deletedRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", deletedRoute.Address})
    deletedRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", deletedRoute.PrefixLength})
    deletedRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", deletedRoute.Prefix})
    deletedRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", deletedRoute.PrefixLengthXr})
    deletedRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", deletedRoute.RouteVersion})
    deletedRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", deletedRoute.ProtocolId})
    deletedRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", deletedRoute.ProtocolName})
    deletedRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", deletedRoute.Instance})
    deletedRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", deletedRoute.ClientId})
    deletedRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", deletedRoute.RouteType})
    deletedRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", deletedRoute.Priority})
    deletedRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", deletedRoute.SvdType})
    deletedRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", deletedRoute.Flags})
    deletedRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", deletedRoute.ExtendedFlags})
    deletedRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", deletedRoute.Tag})
    deletedRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", deletedRoute.Distance})
    deletedRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", deletedRoute.DiversionDistance})
    deletedRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", deletedRoute.Metric})
    deletedRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", deletedRoute.PathsCount})
    deletedRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", deletedRoute.AttributeIdentity})
    deletedRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", deletedRoute.TrafficIndex})
    deletedRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", deletedRoute.RoutePrecedence})
    deletedRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", deletedRoute.QosGroup})
    deletedRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", deletedRoute.FlowTag})
    deletedRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", deletedRoute.FwdClass})
    deletedRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", deletedRoute.PicCount})
    deletedRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", deletedRoute.Active})
    deletedRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", deletedRoute.Diversion})
    deletedRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", deletedRoute.DiversionProtoName})
    deletedRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", deletedRoute.RouteAge})
    deletedRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", deletedRoute.RouteLabel})
    deletedRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", deletedRoute.Version})
    deletedRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", deletedRoute.TblVersion})
    deletedRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", deletedRoute.RouteModifyTime})

    deletedRoute.EntityData.YListKeys = []string {}

    return &(deletedRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "deleted-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_DeletedRoutes_DeletedRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol
// Contains the classification of routes by
// protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protocol.
    Local Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local

    // BGP Protocol.
    Bgp Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp

    // Mobile Protocol.
    Mobile Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile

    // EIGRP Protocol.
    Eigrp Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp

    // RPL Protocol.
    Rpl Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl

    // Static Protocol.
    Static Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static

    // TEClient protocol.
    TeClient Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient

    // Subscriber Protocol.
    Subscriber Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber

    // OSPF Protocol.
    Ospf Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf

    // Connected Protocol.
    Connected Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected

    // ISIS Protocol.
    Isis Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
}

func (protocol *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol) GetEntityData() *types.CommonEntityData {
    protocol.EntityData.YFilter = protocol.YFilter
    protocol.EntityData.YangName = "protocol"
    protocol.EntityData.BundleName = "cisco_ios_xr"
    protocol.EntityData.ParentYangName = "ip-rib-route-table-name"
    protocol.EntityData.SegmentPath = "protocol"
    protocol.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocol.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocol.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocol.EntityData.Children = types.NewOrderedMap()
    protocol.EntityData.Children.Append("local", types.YChild{"Local", &protocol.Local})
    protocol.EntityData.Children.Append("bgp", types.YChild{"Bgp", &protocol.Bgp})
    protocol.EntityData.Children.Append("mobile", types.YChild{"Mobile", &protocol.Mobile})
    protocol.EntityData.Children.Append("eigrp", types.YChild{"Eigrp", &protocol.Eigrp})
    protocol.EntityData.Children.Append("rpl", types.YChild{"Rpl", &protocol.Rpl})
    protocol.EntityData.Children.Append("static", types.YChild{"Static", &protocol.Static})
    protocol.EntityData.Children.Append("te-client", types.YChild{"TeClient", &protocol.TeClient})
    protocol.EntityData.Children.Append("subscriber", types.YChild{"Subscriber", &protocol.Subscriber})
    protocol.EntityData.Children.Append("ospf", types.YChild{"Ospf", &protocol.Ospf})
    protocol.EntityData.Children.Append("connected", types.YChild{"Connected", &protocol.Connected})
    protocol.EntityData.Children.Append("isis", types.YChild{"Isis", &protocol.Isis})
    protocol.EntityData.Leafs = types.NewOrderedMap()

    protocol.EntityData.YListKeys = []string {}

    return &(protocol.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local
// Local Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSPV(Label Switched Path Verification) protocol.
    Lspv Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
}

func (local *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "protocol"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = types.NewOrderedMap()
    local.EntityData.Children.Append("lspv", types.YChild{"Lspv", &local.Lspv})
    local.EntityData.Children.Append("non-as", types.YChild{"NonAs", &local.NonAs})
    local.EntityData.Leafs = types.NewOrderedMap()

    local.EntityData.YListKeys = []string {}

    return &(local.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv
// LSPV(Label Switched Path Verification)
// protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
}

func (lspv *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv) GetEntityData() *types.CommonEntityData {
    lspv.EntityData.YFilter = lspv.YFilter
    lspv.EntityData.YangName = "lspv"
    lspv.EntityData.BundleName = "cisco_ios_xr"
    lspv.EntityData.ParentYangName = "local"
    lspv.EntityData.SegmentPath = "lspv"
    lspv.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspv.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspv.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspv.EntityData.Children = types.NewOrderedMap()
    lspv.EntityData.Children.Append("information", types.YChild{"Information", &lspv.Information})
    lspv.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &lspv.ProtocolRoutes})
    lspv.EntityData.Leafs = types.NewOrderedMap()

    lspv.EntityData.YListKeys = []string {}

    return &(lspv.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "lspv"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "lspv"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_Lspv_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "local"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Local_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp
// BGP Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As.
    As []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
}

func (bgp *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "protocol"
    bgp.EntityData.SegmentPath = "bgp"
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = types.NewOrderedMap()
    bgp.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range bgp.As {
        bgp.EntityData.Children.Append(types.GetSegmentPath(bgp.As[i]), types.YChild{"As", bgp.As[i]})
    }
    bgp.EntityData.Leafs = types.NewOrderedMap()

    bgp.EntityData.YListKeys = []string {}

    return &(bgp.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As
// Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
}

func (as *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "bgp"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Bgp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile
// Mobile Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
}

func (mobile *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile) GetEntityData() *types.CommonEntityData {
    mobile.EntityData.YFilter = mobile.YFilter
    mobile.EntityData.YangName = "mobile"
    mobile.EntityData.BundleName = "cisco_ios_xr"
    mobile.EntityData.ParentYangName = "protocol"
    mobile.EntityData.SegmentPath = "mobile"
    mobile.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mobile.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mobile.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mobile.EntityData.Children = types.NewOrderedMap()
    mobile.EntityData.Children.Append("non-as", types.YChild{"NonAs", &mobile.NonAs})
    mobile.EntityData.Leafs = types.NewOrderedMap()

    mobile.EntityData.YListKeys = []string {}

    return &(mobile.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "mobile"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Mobile_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp
// EIGRP Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As.
    As []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
}

func (eigrp *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp) GetEntityData() *types.CommonEntityData {
    eigrp.EntityData.YFilter = eigrp.YFilter
    eigrp.EntityData.YangName = "eigrp"
    eigrp.EntityData.BundleName = "cisco_ios_xr"
    eigrp.EntityData.ParentYangName = "protocol"
    eigrp.EntityData.SegmentPath = "eigrp"
    eigrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrp.EntityData.Children = types.NewOrderedMap()
    eigrp.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range eigrp.As {
        eigrp.EntityData.Children.Append(types.GetSegmentPath(eigrp.As[i]), types.YChild{"As", eigrp.As[i]})
    }
    eigrp.EntityData.Leafs = types.NewOrderedMap()

    eigrp.EntityData.YListKeys = []string {}

    return &(eigrp.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As
// Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
}

func (as *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "eigrp"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Eigrp_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl
// RPL Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As.
    As []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
}

func (rpl *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl) GetEntityData() *types.CommonEntityData {
    rpl.EntityData.YFilter = rpl.YFilter
    rpl.EntityData.YangName = "rpl"
    rpl.EntityData.BundleName = "cisco_ios_xr"
    rpl.EntityData.ParentYangName = "protocol"
    rpl.EntityData.SegmentPath = "rpl"
    rpl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpl.EntityData.Children = types.NewOrderedMap()
    rpl.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range rpl.As {
        rpl.EntityData.Children.Append(types.GetSegmentPath(rpl.As[i]), types.YChild{"As", rpl.As[i]})
    }
    rpl.EntityData.Leafs = types.NewOrderedMap()

    rpl.EntityData.YListKeys = []string {}

    return &(rpl.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As
// Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
}

func (as *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "rpl"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Rpl_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static
// Static Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
}

func (static *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static) GetEntityData() *types.CommonEntityData {
    static.EntityData.YFilter = static.YFilter
    static.EntityData.YangName = "static"
    static.EntityData.BundleName = "cisco_ios_xr"
    static.EntityData.ParentYangName = "protocol"
    static.EntityData.SegmentPath = "static"
    static.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    static.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    static.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    static.EntityData.Children = types.NewOrderedMap()
    static.EntityData.Children.Append("non-as", types.YChild{"NonAs", &static.NonAs})
    static.EntityData.Leafs = types.NewOrderedMap()

    static.EntityData.YListKeys = []string {}

    return &(static.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "static"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Static_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient
// TEClient protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
}

func (teClient *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient) GetEntityData() *types.CommonEntityData {
    teClient.EntityData.YFilter = teClient.YFilter
    teClient.EntityData.YangName = "te-client"
    teClient.EntityData.BundleName = "cisco_ios_xr"
    teClient.EntityData.ParentYangName = "protocol"
    teClient.EntityData.SegmentPath = "te-client"
    teClient.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teClient.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teClient.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teClient.EntityData.Children = types.NewOrderedMap()
    teClient.EntityData.Children.Append("non-as", types.YChild{"NonAs", &teClient.NonAs})
    teClient.EntityData.Leafs = types.NewOrderedMap()

    teClient.EntityData.YListKeys = []string {}

    return &(teClient.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "te-client"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_TeClient_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber
// Subscriber Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
}

func (subscriber *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber) GetEntityData() *types.CommonEntityData {
    subscriber.EntityData.YFilter = subscriber.YFilter
    subscriber.EntityData.YangName = "subscriber"
    subscriber.EntityData.BundleName = "cisco_ios_xr"
    subscriber.EntityData.ParentYangName = "protocol"
    subscriber.EntityData.SegmentPath = "subscriber"
    subscriber.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriber.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriber.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriber.EntityData.Children = types.NewOrderedMap()
    subscriber.EntityData.Children.Append("non-as", types.YChild{"NonAs", &subscriber.NonAs})
    subscriber.EntityData.Leafs = types.NewOrderedMap()

    subscriber.EntityData.YListKeys = []string {}

    return &(subscriber.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "subscriber"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Subscriber_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf
// OSPF Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As.
    As []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
}

func (ospf *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf) GetEntityData() *types.CommonEntityData {
    ospf.EntityData.YFilter = ospf.YFilter
    ospf.EntityData.YangName = "ospf"
    ospf.EntityData.BundleName = "cisco_ios_xr"
    ospf.EntityData.ParentYangName = "protocol"
    ospf.EntityData.SegmentPath = "ospf"
    ospf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospf.EntityData.Children = types.NewOrderedMap()
    ospf.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range ospf.As {
        ospf.EntityData.Children.Append(types.GetSegmentPath(ospf.As[i]), types.YChild{"As", ospf.As[i]})
    }
    ospf.EntityData.Leafs = types.NewOrderedMap()

    ospf.EntityData.YListKeys = []string {}

    return &(ospf.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As
// Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
}

func (as *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "ospf"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Ospf_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected
// Connected Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // L2VPN.
    L2vpn Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn

    // Non Autonomous System of protocol.
    NonAs Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
}

func (connected *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected) GetEntityData() *types.CommonEntityData {
    connected.EntityData.YFilter = connected.YFilter
    connected.EntityData.YangName = "connected"
    connected.EntityData.BundleName = "cisco_ios_xr"
    connected.EntityData.ParentYangName = "protocol"
    connected.EntityData.SegmentPath = "connected"
    connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connected.EntityData.Children = types.NewOrderedMap()
    connected.EntityData.Children.Append("l2vpn", types.YChild{"L2vpn", &connected.L2vpn})
    connected.EntityData.Children.Append("non-as", types.YChild{"NonAs", &connected.NonAs})
    connected.EntityData.Leafs = types.NewOrderedMap()

    connected.EntityData.YListKeys = []string {}

    return &(connected.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn
// L2VPN
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes
}

func (l2vpn *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn) GetEntityData() *types.CommonEntityData {
    l2vpn.EntityData.YFilter = l2vpn.YFilter
    l2vpn.EntityData.YangName = "l2vpn"
    l2vpn.EntityData.BundleName = "cisco_ios_xr"
    l2vpn.EntityData.ParentYangName = "connected"
    l2vpn.EntityData.SegmentPath = "l2vpn"
    l2vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    l2vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    l2vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    l2vpn.EntityData.Children = types.NewOrderedMap()
    l2vpn.EntityData.Children.Append("information", types.YChild{"Information", &l2vpn.Information})
    l2vpn.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &l2vpn.ProtocolRoutes})
    l2vpn.EntityData.Leafs = types.NewOrderedMap()

    l2vpn.EntityData.YListKeys = []string {}

    return &(l2vpn.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "l2vpn"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "l2vpn"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_L2vpn_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs
// Non Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
}

func (nonAs *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs) GetEntityData() *types.CommonEntityData {
    nonAs.EntityData.YFilter = nonAs.YFilter
    nonAs.EntityData.YangName = "non-as"
    nonAs.EntityData.BundleName = "cisco_ios_xr"
    nonAs.EntityData.ParentYangName = "connected"
    nonAs.EntityData.SegmentPath = "non-as"
    nonAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nonAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nonAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nonAs.EntityData.Children = types.NewOrderedMap()
    nonAs.EntityData.Children.Append("information", types.YChild{"Information", &nonAs.Information})
    nonAs.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &nonAs.ProtocolRoutes})
    nonAs.EntityData.Leafs = types.NewOrderedMap()

    nonAs.EntityData.YListKeys = []string {}

    return &(nonAs.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "non-as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "non-as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Connected_NonAs_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis
// ISIS Protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Autonomous System of protocol. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As.
    As []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
}

func (isis *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis) GetEntityData() *types.CommonEntityData {
    isis.EntityData.YFilter = isis.YFilter
    isis.EntityData.YangName = "isis"
    isis.EntityData.BundleName = "cisco_ios_xr"
    isis.EntityData.ParentYangName = "protocol"
    isis.EntityData.SegmentPath = "isis"
    isis.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isis.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isis.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isis.EntityData.Children = types.NewOrderedMap()
    isis.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range isis.As {
        isis.EntityData.Children.Append(types.GetSegmentPath(isis.As[i]), types.YChild{"As", isis.As[i]})
    }
    isis.EntityData.Leafs = types.NewOrderedMap()

    isis.EntityData.YListKeys = []string {}

    return &(isis.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As
// Autonomous System of protocol
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Autonomous system. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    As interface{}

    // Protocol related Information.
    Information Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information

    // Protocol specific Route.
    ProtocolRoutes Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
}

func (as *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "isis"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.As, "as")
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Children.Append("information", types.YChild{"Information", &as.Information})
    as.EntityData.Children.Append("protocol-routes", types.YChild{"ProtocolRoutes", &as.ProtocolRoutes})
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as", types.YLeaf{"As", as.As})

    as.EntityData.YListKeys = []string {"As"}

    return &(as.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information
// Protocol related Information
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name. The type is string.
    ProtocolNames interface{}

    // Instance. The type is string.
    Instance interface{}

    // Proto version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Number of redist clients. The type is interface{} with range:
    // 0..4294967295.
    RedistributionClientCount interface{}

    // Number of proto clients. The type is interface{} with range: 0..4294967295.
    ProtocolClientsCount interface{}

    // Number of routes (including active, backup and deleted), where, number of
    // backup routes = RoutesCounts - ActiveRoutesCount - DeletedRoutesCount . The
    // type is interface{} with range: 0..4294967295.
    RoutesCounts interface{}

    // Number of active routes (not deleted). The type is interface{} with range:
    // 0..4294967295.
    ActiveRoutesCount interface{}

    // Number of deleted routes. The type is interface{} with range:
    // 0..4294967295.
    DeletedRoutesCount interface{}

    // Number of paths for all routes. The type is interface{} with range:
    // 0..4294967295.
    PathsCount interface{}

    // Memory for proto's routes and paths in bytes. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    ProtocolRouteMemory interface{}

    // Number of backup routes. The type is interface{} with range: 0..4294967295.
    BackupRoutesCount interface{}
}

func (information *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_Information) GetEntityData() *types.CommonEntityData {
    information.EntityData.YFilter = information.YFilter
    information.EntityData.YangName = "information"
    information.EntityData.BundleName = "cisco_ios_xr"
    information.EntityData.ParentYangName = "as"
    information.EntityData.SegmentPath = "information"
    information.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    information.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    information.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    information.EntityData.Children = types.NewOrderedMap()
    information.EntityData.Leafs = types.NewOrderedMap()
    information.EntityData.Leafs.Append("protocol-names", types.YLeaf{"ProtocolNames", information.ProtocolNames})
    information.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", information.Instance})
    information.EntityData.Leafs.Append("version", types.YLeaf{"Version", information.Version})
    information.EntityData.Leafs.Append("redistribution-client-count", types.YLeaf{"RedistributionClientCount", information.RedistributionClientCount})
    information.EntityData.Leafs.Append("protocol-clients-count", types.YLeaf{"ProtocolClientsCount", information.ProtocolClientsCount})
    information.EntityData.Leafs.Append("routes-counts", types.YLeaf{"RoutesCounts", information.RoutesCounts})
    information.EntityData.Leafs.Append("active-routes-count", types.YLeaf{"ActiveRoutesCount", information.ActiveRoutesCount})
    information.EntityData.Leafs.Append("deleted-routes-count", types.YLeaf{"DeletedRoutesCount", information.DeletedRoutesCount})
    information.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", information.PathsCount})
    information.EntityData.Leafs.Append("protocol-route-memory", types.YLeaf{"ProtocolRouteMemory", information.ProtocolRouteMemory})
    information.EntityData.Leafs.Append("backup-routes-count", types.YLeaf{"BackupRoutesCount", information.BackupRoutesCount})

    information.EntityData.YListKeys = []string {}

    return &(information.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes
// Protocol specific Route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute.
    ProtocolRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
}

func (protocolRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes) GetEntityData() *types.CommonEntityData {
    protocolRoutes.EntityData.YFilter = protocolRoutes.YFilter
    protocolRoutes.EntityData.YangName = "protocol-routes"
    protocolRoutes.EntityData.BundleName = "cisco_ios_xr"
    protocolRoutes.EntityData.ParentYangName = "as"
    protocolRoutes.EntityData.SegmentPath = "protocol-routes"
    protocolRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoutes.EntityData.Children = types.NewOrderedMap()
    protocolRoutes.EntityData.Children.Append("protocol-route", types.YChild{"ProtocolRoute", nil})
    for i := range protocolRoutes.ProtocolRoute {
        protocolRoutes.EntityData.Children.Append(types.GetSegmentPath(protocolRoutes.ProtocolRoute[i]), types.YChild{"ProtocolRoute", protocolRoutes.ProtocolRoute[i]})
    }
    protocolRoutes.EntityData.Leafs = types.NewOrderedMap()

    protocolRoutes.EntityData.YListKeys = []string {}

    return &(protocolRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute
// Route information of a specific Network Address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
}

func (protocolRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute) GetEntityData() *types.CommonEntityData {
    protocolRoute.EntityData.YFilter = protocolRoute.YFilter
    protocolRoute.EntityData.YangName = "protocol-route"
    protocolRoute.EntityData.BundleName = "cisco_ios_xr"
    protocolRoute.EntityData.ParentYangName = "protocol-routes"
    protocolRoute.EntityData.SegmentPath = "protocol-route"
    protocolRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolRoute.EntityData.Children = types.NewOrderedMap()
    protocolRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &protocolRoute.RoutePath})
    protocolRoute.EntityData.Leafs = types.NewOrderedMap()
    protocolRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", protocolRoute.Address})
    protocolRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", protocolRoute.PrefixLength})
    protocolRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", protocolRoute.Prefix})
    protocolRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", protocolRoute.PrefixLengthXr})
    protocolRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", protocolRoute.RouteVersion})
    protocolRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", protocolRoute.ProtocolId})
    protocolRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", protocolRoute.ProtocolName})
    protocolRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", protocolRoute.Instance})
    protocolRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", protocolRoute.ClientId})
    protocolRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", protocolRoute.RouteType})
    protocolRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", protocolRoute.Priority})
    protocolRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", protocolRoute.SvdType})
    protocolRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", protocolRoute.Flags})
    protocolRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", protocolRoute.ExtendedFlags})
    protocolRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", protocolRoute.Tag})
    protocolRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", protocolRoute.Distance})
    protocolRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", protocolRoute.DiversionDistance})
    protocolRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", protocolRoute.Metric})
    protocolRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", protocolRoute.PathsCount})
    protocolRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", protocolRoute.AttributeIdentity})
    protocolRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", protocolRoute.TrafficIndex})
    protocolRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", protocolRoute.RoutePrecedence})
    protocolRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", protocolRoute.QosGroup})
    protocolRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", protocolRoute.FlowTag})
    protocolRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", protocolRoute.FwdClass})
    protocolRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", protocolRoute.PicCount})
    protocolRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", protocolRoute.Active})
    protocolRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", protocolRoute.Diversion})
    protocolRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", protocolRoute.DiversionProtoName})
    protocolRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", protocolRoute.RouteAge})
    protocolRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", protocolRoute.RouteLabel})
    protocolRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", protocolRoute.Version})
    protocolRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", protocolRoute.TblVersion})
    protocolRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", protocolRoute.RouteModifyTime})

    protocolRoute.EntityData.YListKeys = []string {}

    return &(protocolRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "protocol-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Protocol_Isis_As_ProtocolRoutes_ProtocolRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes
// Route information 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information of a specific Network Address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route.
    Route []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
}

func (routes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes) GetEntityData() *types.CommonEntityData {
    routes.EntityData.YFilter = routes.YFilter
    routes.EntityData.YangName = "routes"
    routes.EntityData.BundleName = "cisco_ios_xr"
    routes.EntityData.ParentYangName = "ip-rib-route-table-name"
    routes.EntityData.SegmentPath = "routes"
    routes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routes.EntityData.Children = types.NewOrderedMap()
    routes.EntityData.Children.Append("route", types.YChild{"Route", nil})
    for i := range routes.Route {
        routes.EntityData.Children.Append(types.GetSegmentPath(routes.Route[i]), types.YChild{"Route", routes.Route[i]})
    }
    routes.EntityData.Leafs = types.NewOrderedMap()

    routes.EntityData.YListKeys = []string {}

    return &(routes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route
// Route information of a specific Network
// Address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // NextHop Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // Outgoing Interface . The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
}

func (route *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "routes"
    route.EntityData.SegmentPath = "route"
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &route.RoutePath})
    route.EntityData.Leafs = types.NewOrderedMap()
    route.EntityData.Leafs.Append("address", types.YLeaf{"Address", route.Address})
    route.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", route.PrefixLength})
    route.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", route.NextHopAddress})
    route.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", route.InterfaceName})
    route.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", route.Prefix})
    route.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", route.PrefixLengthXr})
    route.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", route.RouteVersion})
    route.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", route.ProtocolId})
    route.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", route.ProtocolName})
    route.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", route.Instance})
    route.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", route.ClientId})
    route.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", route.RouteType})
    route.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", route.Priority})
    route.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", route.SvdType})
    route.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", route.Flags})
    route.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", route.ExtendedFlags})
    route.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", route.Tag})
    route.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", route.Distance})
    route.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", route.DiversionDistance})
    route.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", route.Metric})
    route.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", route.PathsCount})
    route.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", route.AttributeIdentity})
    route.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", route.TrafficIndex})
    route.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", route.RoutePrecedence})
    route.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", route.QosGroup})
    route.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", route.FlowTag})
    route.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", route.FwdClass})
    route.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", route.PicCount})
    route.EntityData.Leafs.Append("active", types.YLeaf{"Active", route.Active})
    route.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", route.Diversion})
    route.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", route.DiversionProtoName})
    route.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", route.RouteAge})
    route.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", route.RouteLabel})
    route.EntityData.Leafs.Append("version", types.YLeaf{"Version", route.Version})
    route.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", route.TblVersion})
    route.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", route.RouteModifyTime})

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_Routes_Route_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes
// Quarantine
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific quarantined address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute.
    QRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
}

func (qRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes) GetEntityData() *types.CommonEntityData {
    qRoutes.EntityData.YFilter = qRoutes.YFilter
    qRoutes.EntityData.YangName = "q-routes"
    qRoutes.EntityData.BundleName = "cisco_ios_xr"
    qRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    qRoutes.EntityData.SegmentPath = "q-routes"
    qRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qRoutes.EntityData.Children = types.NewOrderedMap()
    qRoutes.EntityData.Children.Append("q-route", types.YChild{"QRoute", nil})
    for i := range qRoutes.QRoute {
        qRoutes.EntityData.Children.Append(types.GetSegmentPath(qRoutes.QRoute[i]), types.YChild{"QRoute", qRoutes.QRoute[i]})
    }
    qRoutes.EntityData.Leafs = types.NewOrderedMap()

    qRoutes.EntityData.YListKeys = []string {}

    return &(qRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute
// Route information for a specific
// quarantined address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
}

func (qRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute) GetEntityData() *types.CommonEntityData {
    qRoute.EntityData.YFilter = qRoute.YFilter
    qRoute.EntityData.YangName = "q-route"
    qRoute.EntityData.BundleName = "cisco_ios_xr"
    qRoute.EntityData.ParentYangName = "q-routes"
    qRoute.EntityData.SegmentPath = "q-route"
    qRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    qRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    qRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    qRoute.EntityData.Children = types.NewOrderedMap()
    qRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &qRoute.RoutePath})
    qRoute.EntityData.Leafs = types.NewOrderedMap()
    qRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", qRoute.Address})
    qRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", qRoute.PrefixLength})
    qRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", qRoute.Prefix})
    qRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", qRoute.PrefixLengthXr})
    qRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", qRoute.RouteVersion})
    qRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", qRoute.ProtocolId})
    qRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", qRoute.ProtocolName})
    qRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", qRoute.Instance})
    qRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", qRoute.ClientId})
    qRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", qRoute.RouteType})
    qRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", qRoute.Priority})
    qRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", qRoute.SvdType})
    qRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", qRoute.Flags})
    qRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", qRoute.ExtendedFlags})
    qRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", qRoute.Tag})
    qRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", qRoute.Distance})
    qRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", qRoute.DiversionDistance})
    qRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", qRoute.Metric})
    qRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", qRoute.PathsCount})
    qRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", qRoute.AttributeIdentity})
    qRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", qRoute.TrafficIndex})
    qRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", qRoute.RoutePrecedence})
    qRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", qRoute.QosGroup})
    qRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", qRoute.FlowTag})
    qRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", qRoute.FwdClass})
    qRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", qRoute.PicCount})
    qRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", qRoute.Active})
    qRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", qRoute.Diversion})
    qRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", qRoute.DiversionProtoName})
    qRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", qRoute.RouteAge})
    qRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", qRoute.RouteLabel})
    qRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", qRoute.Version})
    qRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", qRoute.TblVersion})
    qRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", qRoute.RouteModifyTime})

    qRoute.EntityData.YListKeys = []string {}

    return &(qRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "q-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_QRoutes_QRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes
// Backup route information for the given
// table
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route information for a specific backup address . The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute.
    BackupRoute []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
}

func (backupRoutes *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes) GetEntityData() *types.CommonEntityData {
    backupRoutes.EntityData.YFilter = backupRoutes.YFilter
    backupRoutes.EntityData.YangName = "backup-routes"
    backupRoutes.EntityData.BundleName = "cisco_ios_xr"
    backupRoutes.EntityData.ParentYangName = "ip-rib-route-table-name"
    backupRoutes.EntityData.SegmentPath = "backup-routes"
    backupRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoutes.EntityData.Children = types.NewOrderedMap()
    backupRoutes.EntityData.Children.Append("backup-route", types.YChild{"BackupRoute", nil})
    for i := range backupRoutes.BackupRoute {
        backupRoutes.EntityData.Children.Append(types.GetSegmentPath(backupRoutes.BackupRoute[i]), types.YChild{"BackupRoute", backupRoutes.BackupRoute[i]})
    }
    backupRoutes.EntityData.Leafs = types.NewOrderedMap()

    backupRoutes.EntityData.YListKeys = []string {}

    return &(backupRoutes.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute
// Route information for a specific backup
// address 
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Network Address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Prefix Length . The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Proto ID. The type is interface{} with range: 0..4294967295.
    Protoid interface{}

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Length of prefix. The type is interface{} with range: 0..255.
    PrefixLengthXr interface{}

    // Route version. The type is interface{} with range: 0..4294967295.
    RouteVersion interface{}

    // Protocol advertising the route. The type is interface{} with range:
    // 0..4294967295.
    ProtocolId interface{}

    // Name of Protocol. The type is string.
    ProtocolName interface{}

    // Instance name. The type is string.
    Instance interface{}

    // Client adding the route to RIB. The type is interface{} with range:
    // 0..4294967295.
    ClientId interface{}

    // Route type. The type is interface{} with range: 0..65535.
    RouteType interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // SVD Type of route. The type is interface{} with range: 0..255.
    SvdType interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Extended Route flags. The type is interface{} with range:
    // 0..18446744073709551615.
    ExtendedFlags interface{}

    // Opaque proto specific info. The type is interface{} with range:
    // 0..4294967295.
    Tag interface{}

    // Distance of the route. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // Diversion distance of the route. The type is interface{} with range:
    // 0..4294967295.
    DiversionDistance interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Number of paths. The type is interface{} with range: 0..4294967295.
    PathsCount interface{}

    // BGP Attribute ID. The type is interface{} with range: 0..4294967295.
    AttributeIdentity interface{}

    // BGP Traffic Index. The type is interface{} with range: 0..255.
    TrafficIndex interface{}

    // Route ip precedence. The type is interface{} with range: 0..255.
    RoutePrecedence interface{}

    // Route qos group. The type is interface{} with range: 0..255.
    QosGroup interface{}

    // Flow tag. The type is interface{} with range: 0..255.
    FlowTag interface{}

    // Forward Class. The type is interface{} with range: 0..255.
    FwdClass interface{}

    // Number of pic paths in this route. The type is interface{} with range:
    // 0..255.
    PicCount interface{}

    // Is the route active or backup. The type is bool.
    Active interface{}

    // Route has a diversion path. The type is bool.
    Diversion interface{}

    // Diversion route protocol name. The type is string.
    DiversionProtoName interface{}

    // Age of route (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    RouteAge interface{}

    // Local label of the route. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Route Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Table Version. The type is interface{} with range: 0..18446744073709551615.
    TblVersion interface{}

    // Route modification time(nanoseconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are nanosecond.
    RouteModifyTime interface{}

    // Path(s) of the route.
    RoutePath Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
}

func (backupRoute *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute) GetEntityData() *types.CommonEntityData {
    backupRoute.EntityData.YFilter = backupRoute.YFilter
    backupRoute.EntityData.YangName = "backup-route"
    backupRoute.EntityData.BundleName = "cisco_ios_xr"
    backupRoute.EntityData.ParentYangName = "backup-routes"
    backupRoute.EntityData.SegmentPath = "backup-route"
    backupRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backupRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backupRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backupRoute.EntityData.Children = types.NewOrderedMap()
    backupRoute.EntityData.Children.Append("route-path", types.YChild{"RoutePath", &backupRoute.RoutePath})
    backupRoute.EntityData.Leafs = types.NewOrderedMap()
    backupRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", backupRoute.Address})
    backupRoute.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", backupRoute.PrefixLength})
    backupRoute.EntityData.Leafs.Append("protoid", types.YLeaf{"Protoid", backupRoute.Protoid})
    backupRoute.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", backupRoute.Prefix})
    backupRoute.EntityData.Leafs.Append("prefix-length-xr", types.YLeaf{"PrefixLengthXr", backupRoute.PrefixLengthXr})
    backupRoute.EntityData.Leafs.Append("route-version", types.YLeaf{"RouteVersion", backupRoute.RouteVersion})
    backupRoute.EntityData.Leafs.Append("protocol-id", types.YLeaf{"ProtocolId", backupRoute.ProtocolId})
    backupRoute.EntityData.Leafs.Append("protocol-name", types.YLeaf{"ProtocolName", backupRoute.ProtocolName})
    backupRoute.EntityData.Leafs.Append("instance", types.YLeaf{"Instance", backupRoute.Instance})
    backupRoute.EntityData.Leafs.Append("client-id", types.YLeaf{"ClientId", backupRoute.ClientId})
    backupRoute.EntityData.Leafs.Append("route-type", types.YLeaf{"RouteType", backupRoute.RouteType})
    backupRoute.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", backupRoute.Priority})
    backupRoute.EntityData.Leafs.Append("svd-type", types.YLeaf{"SvdType", backupRoute.SvdType})
    backupRoute.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", backupRoute.Flags})
    backupRoute.EntityData.Leafs.Append("extended-flags", types.YLeaf{"ExtendedFlags", backupRoute.ExtendedFlags})
    backupRoute.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", backupRoute.Tag})
    backupRoute.EntityData.Leafs.Append("distance", types.YLeaf{"Distance", backupRoute.Distance})
    backupRoute.EntityData.Leafs.Append("diversion-distance", types.YLeaf{"DiversionDistance", backupRoute.DiversionDistance})
    backupRoute.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", backupRoute.Metric})
    backupRoute.EntityData.Leafs.Append("paths-count", types.YLeaf{"PathsCount", backupRoute.PathsCount})
    backupRoute.EntityData.Leafs.Append("attribute-identity", types.YLeaf{"AttributeIdentity", backupRoute.AttributeIdentity})
    backupRoute.EntityData.Leafs.Append("traffic-index", types.YLeaf{"TrafficIndex", backupRoute.TrafficIndex})
    backupRoute.EntityData.Leafs.Append("route-precedence", types.YLeaf{"RoutePrecedence", backupRoute.RoutePrecedence})
    backupRoute.EntityData.Leafs.Append("qos-group", types.YLeaf{"QosGroup", backupRoute.QosGroup})
    backupRoute.EntityData.Leafs.Append("flow-tag", types.YLeaf{"FlowTag", backupRoute.FlowTag})
    backupRoute.EntityData.Leafs.Append("fwd-class", types.YLeaf{"FwdClass", backupRoute.FwdClass})
    backupRoute.EntityData.Leafs.Append("pic-count", types.YLeaf{"PicCount", backupRoute.PicCount})
    backupRoute.EntityData.Leafs.Append("active", types.YLeaf{"Active", backupRoute.Active})
    backupRoute.EntityData.Leafs.Append("diversion", types.YLeaf{"Diversion", backupRoute.Diversion})
    backupRoute.EntityData.Leafs.Append("diversion-proto-name", types.YLeaf{"DiversionProtoName", backupRoute.DiversionProtoName})
    backupRoute.EntityData.Leafs.Append("route-age", types.YLeaf{"RouteAge", backupRoute.RouteAge})
    backupRoute.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", backupRoute.RouteLabel})
    backupRoute.EntityData.Leafs.Append("version", types.YLeaf{"Version", backupRoute.Version})
    backupRoute.EntityData.Leafs.Append("tbl-version", types.YLeaf{"TblVersion", backupRoute.TblVersion})
    backupRoute.EntityData.Leafs.Append("route-modify-time", types.YLeaf{"RouteModifyTime", backupRoute.RouteModifyTime})

    backupRoute.EntityData.YListKeys = []string {}

    return &(backupRoute.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath
// Path(s) of the route
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ipv6 rib edm path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath.
    Ipv6RibEdmPath []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath
}

func (routePath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath) GetEntityData() *types.CommonEntityData {
    routePath.EntityData.YFilter = routePath.YFilter
    routePath.EntityData.YangName = "route-path"
    routePath.EntityData.BundleName = "cisco_ios_xr"
    routePath.EntityData.ParentYangName = "backup-route"
    routePath.EntityData.SegmentPath = "route-path"
    routePath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routePath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routePath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routePath.EntityData.Children = types.NewOrderedMap()
    routePath.EntityData.Children.Append("ipv6-rib-edm-path", types.YChild{"Ipv6RibEdmPath", nil})
    for i := range routePath.Ipv6RibEdmPath {
        routePath.EntityData.Children.Append(types.GetSegmentPath(routePath.Ipv6RibEdmPath[i]), types.YChild{"Ipv6RibEdmPath", routePath.Ipv6RibEdmPath[i]})
    }
    routePath.EntityData.Leafs = types.NewOrderedMap()

    routePath.EntityData.YListKeys = []string {}

    return &(routePath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath
// ipv6 rib edm path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InformationSource interface{}

    // V6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6Nexthop interface{}

    // V6 Infosource. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6InformationSource interface{}

    // Interface Name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Metrics. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Load Metrics. The type is interface{} with range: 0..4294967295.
    LoadMetric interface{}

    // Flags extended to 64 bits. The type is interface{} with range:
    // 0..18446744073709551615.
    Flags64 interface{}

    // Flags. The type is interface{} with range: 0..65535.
    Flags interface{}

    // Private Flags. The type is interface{} with range: 0..65535.
    PrivateFlags interface{}

    // Looping path. The type is bool.
    Looped interface{}

    // Nexthop tableid. The type is interface{} with range: 0..4294967295.
    NextHopTableId interface{}

    // VRF Name of the nh table. The type is string.
    NextHopVrfName interface{}

    // NH table name. The type is string.
    NextHopTableName interface{}

    // NH afi. The type is interface{} with range: 0..4294967295.
    NextHopAfi interface{}

    // NH safi. The type is interface{} with range: 0..4294967295.
    NextHopSafi interface{}

    // Label associated with this path. The type is interface{} with range:
    // 0..4294967295.
    RouteLabel interface{}

    // Tunnel ID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    TunnelId interface{}

    // Path id of this path. The type is interface{} with range: 0..4294967295.
    Pathid interface{}

    // Path id of this path's backup. The type is interface{} with range:
    // 0..4294967295.
    BackupPathid interface{}

    // Refcnt of backup. The type is interface{} with range: 0..4294967295.
    RefCntOfBackup interface{}

    // Number of extended communities. The type is interface{} with range:
    // 0..4294967295.
    NumberOfExtendedCommunities interface{}

    // MVPN attribute present. The type is bool.
    MvpnPresent interface{}

    // Path RT present. The type is bool.
    PathRtPresent interface{}

    // VRFIMPORTRTPresent. The type is bool.
    VrfImportRtPresent interface{}

    // SOURCEASRTPresent. The type is bool.
    SourceAsrtPresent interface{}

    // SOURCERDPresent. The type is bool.
    SourceRdPresent interface{}

    // SegmentedNexthopPresent. The type is bool.
    SegmentedNexthopPresent interface{}

    // Number of Next Next Hops. The type is interface{} with range:
    // 0..4294967295.
    NumberOfNnh interface{}

    // NHID associated with this path. The type is interface{} with range:
    // 0..4294967295.
    NextHopId interface{}

    // NHID references. The type is interface{} with range: 0..4294967295.
    NextHopIdRefcount interface{}

    // OSPF area associated with the path. The type is string.
    OspfAreaId interface{}

    // Path has a label stack. The type is bool.
    HasLabelstk interface{}

    // Number of labels in stack. The type is interface{} with range: 0..255.
    NumLabels interface{}

    // binding Label for this path. The type is interface{} with range:
    // 0..4294967295.
    BindingLabel interface{}

    // Fib nhid encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    NhidFeid interface{}

    // Fib mpls encap id. The type is interface{} with range:
    // 0..18446744073709551615.
    MplsFeid interface{}

    // VXLAN Network Identifier exists for this path. The type is bool.
    HasVxlanNetworkId interface{}

    // VXLAN Network Identifier for this path. The type is interface{} with range:
    // 0..4294967295.
    VxlanNetworkId interface{}

    // L2 Cross Connect ID exists for this path. The type is bool.
    HasXcid interface{}

    // L2 Cross Connect ID for this path. The type is interface{} with range:
    // 0..4294967295.
    Xcid interface{}

    // SPAN Diagnostics Interface exists for this path. The type is bool.
    HasSpanDiagInterface interface{}

    // SPAN Diagnostics Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SpanDiagInterface interface{}

    // Subscriber Parent Interface exists for this path. The type is bool.
    HasSubscriberParentInterface interface{}

    // Subscriber Parent Interface for this path. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    SubscriberParentInterface interface{}

    // Interface Index present. The type is bool.
    InterfaceIndexPresent interface{}

    // Interface Index attribute. The type is interface{} with range:
    // 0..4294967295.
    InterfaceIndexAttribute interface{}

    // Remote backup node address. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr.
    RemoteBackupAddr []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr

    // Outgoing label stack for this path. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk.
    Labelstk []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk

    // List of Next Next Hops. The type is slice of
    // Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop.
    NextNextHop []*Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
}

func (ipv6RibEdmPath *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath) GetEntityData() *types.CommonEntityData {
    ipv6RibEdmPath.EntityData.YFilter = ipv6RibEdmPath.YFilter
    ipv6RibEdmPath.EntityData.YangName = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.BundleName = "cisco_ios_xr"
    ipv6RibEdmPath.EntityData.ParentYangName = "route-path"
    ipv6RibEdmPath.EntityData.SegmentPath = "ipv6-rib-edm-path"
    ipv6RibEdmPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6RibEdmPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6RibEdmPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6RibEdmPath.EntityData.Children = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Children.Append("remote-backup-addr", types.YChild{"RemoteBackupAddr", nil})
    for i := range ipv6RibEdmPath.RemoteBackupAddr {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.RemoteBackupAddr[i]), types.YChild{"RemoteBackupAddr", ipv6RibEdmPath.RemoteBackupAddr[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("labelstk", types.YChild{"Labelstk", nil})
    for i := range ipv6RibEdmPath.Labelstk {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.Labelstk[i]), types.YChild{"Labelstk", ipv6RibEdmPath.Labelstk[i]})
    }
    ipv6RibEdmPath.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range ipv6RibEdmPath.NextNextHop {
        ipv6RibEdmPath.EntityData.Children.Append(types.GetSegmentPath(ipv6RibEdmPath.NextNextHop[i]), types.YChild{"NextNextHop", ipv6RibEdmPath.NextNextHop[i]})
    }
    ipv6RibEdmPath.EntityData.Leafs = types.NewOrderedMap()
    ipv6RibEdmPath.EntityData.Leafs.Append("address", types.YLeaf{"Address", ipv6RibEdmPath.Address})
    ipv6RibEdmPath.EntityData.Leafs.Append("information-source", types.YLeaf{"InformationSource", ipv6RibEdmPath.InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-nexthop", types.YLeaf{"V6Nexthop", ipv6RibEdmPath.V6Nexthop})
    ipv6RibEdmPath.EntityData.Leafs.Append("v6-information-source", types.YLeaf{"V6InformationSource", ipv6RibEdmPath.V6InformationSource})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", ipv6RibEdmPath.InterfaceName})
    ipv6RibEdmPath.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", ipv6RibEdmPath.Metric})
    ipv6RibEdmPath.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv6RibEdmPath.LoadMetric})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags64", types.YLeaf{"Flags64", ipv6RibEdmPath.Flags64})
    ipv6RibEdmPath.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", ipv6RibEdmPath.Flags})
    ipv6RibEdmPath.EntityData.Leafs.Append("private-flags", types.YLeaf{"PrivateFlags", ipv6RibEdmPath.PrivateFlags})
    ipv6RibEdmPath.EntityData.Leafs.Append("looped", types.YLeaf{"Looped", ipv6RibEdmPath.Looped})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", ipv6RibEdmPath.NextHopTableId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-vrf-name", types.YLeaf{"NextHopVrfName", ipv6RibEdmPath.NextHopVrfName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-table-name", types.YLeaf{"NextHopTableName", ipv6RibEdmPath.NextHopTableName})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-afi", types.YLeaf{"NextHopAfi", ipv6RibEdmPath.NextHopAfi})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-safi", types.YLeaf{"NextHopSafi", ipv6RibEdmPath.NextHopSafi})
    ipv6RibEdmPath.EntityData.Leafs.Append("route-label", types.YLeaf{"RouteLabel", ipv6RibEdmPath.RouteLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv6RibEdmPath.TunnelId})
    ipv6RibEdmPath.EntityData.Leafs.Append("pathid", types.YLeaf{"Pathid", ipv6RibEdmPath.Pathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("backup-pathid", types.YLeaf{"BackupPathid", ipv6RibEdmPath.BackupPathid})
    ipv6RibEdmPath.EntityData.Leafs.Append("ref-cnt-of-backup", types.YLeaf{"RefCntOfBackup", ipv6RibEdmPath.RefCntOfBackup})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-extended-communities", types.YLeaf{"NumberOfExtendedCommunities", ipv6RibEdmPath.NumberOfExtendedCommunities})
    ipv6RibEdmPath.EntityData.Leafs.Append("mvpn-present", types.YLeaf{"MvpnPresent", ipv6RibEdmPath.MvpnPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("path-rt-present", types.YLeaf{"PathRtPresent", ipv6RibEdmPath.PathRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("vrf-import-rt-present", types.YLeaf{"VrfImportRtPresent", ipv6RibEdmPath.VrfImportRtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-asrt-present", types.YLeaf{"SourceAsrtPresent", ipv6RibEdmPath.SourceAsrtPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("source-rd-present", types.YLeaf{"SourceRdPresent", ipv6RibEdmPath.SourceRdPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("segmented-nexthop-present", types.YLeaf{"SegmentedNexthopPresent", ipv6RibEdmPath.SegmentedNexthopPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("number-of-nnh", types.YLeaf{"NumberOfNnh", ipv6RibEdmPath.NumberOfNnh})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6RibEdmPath.NextHopId})
    ipv6RibEdmPath.EntityData.Leafs.Append("next-hop-id-refcount", types.YLeaf{"NextHopIdRefcount", ipv6RibEdmPath.NextHopIdRefcount})
    ipv6RibEdmPath.EntityData.Leafs.Append("ospf-area-id", types.YLeaf{"OspfAreaId", ipv6RibEdmPath.OspfAreaId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-labelstk", types.YLeaf{"HasLabelstk", ipv6RibEdmPath.HasLabelstk})
    ipv6RibEdmPath.EntityData.Leafs.Append("num-labels", types.YLeaf{"NumLabels", ipv6RibEdmPath.NumLabels})
    ipv6RibEdmPath.EntityData.Leafs.Append("binding-label", types.YLeaf{"BindingLabel", ipv6RibEdmPath.BindingLabel})
    ipv6RibEdmPath.EntityData.Leafs.Append("nhid-feid", types.YLeaf{"NhidFeid", ipv6RibEdmPath.NhidFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("mpls-feid", types.YLeaf{"MplsFeid", ipv6RibEdmPath.MplsFeid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-vxlan-network-id", types.YLeaf{"HasVxlanNetworkId", ipv6RibEdmPath.HasVxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("vxlan-network-id", types.YLeaf{"VxlanNetworkId", ipv6RibEdmPath.VxlanNetworkId})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-xcid", types.YLeaf{"HasXcid", ipv6RibEdmPath.HasXcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("xcid", types.YLeaf{"Xcid", ipv6RibEdmPath.Xcid})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-span-diag-interface", types.YLeaf{"HasSpanDiagInterface", ipv6RibEdmPath.HasSpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("span-diag-interface", types.YLeaf{"SpanDiagInterface", ipv6RibEdmPath.SpanDiagInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("has-subscriber-parent-interface", types.YLeaf{"HasSubscriberParentInterface", ipv6RibEdmPath.HasSubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("subscriber-parent-interface", types.YLeaf{"SubscriberParentInterface", ipv6RibEdmPath.SubscriberParentInterface})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-present", types.YLeaf{"InterfaceIndexPresent", ipv6RibEdmPath.InterfaceIndexPresent})
    ipv6RibEdmPath.EntityData.Leafs.Append("interface-index-attribute", types.YLeaf{"InterfaceIndexAttribute", ipv6RibEdmPath.InterfaceIndexAttribute})

    ipv6RibEdmPath.EntityData.YListKeys = []string {}

    return &(ipv6RibEdmPath.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr
// Remote backup node address
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (remoteBackupAddr *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_RemoteBackupAddr) GetEntityData() *types.CommonEntityData {
    remoteBackupAddr.EntityData.YFilter = remoteBackupAddr.YFilter
    remoteBackupAddr.EntityData.YangName = "remote-backup-addr"
    remoteBackupAddr.EntityData.BundleName = "cisco_ios_xr"
    remoteBackupAddr.EntityData.ParentYangName = "ipv6-rib-edm-path"
    remoteBackupAddr.EntityData.SegmentPath = "remote-backup-addr"
    remoteBackupAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBackupAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBackupAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBackupAddr.EntityData.Children = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs = types.NewOrderedMap()
    remoteBackupAddr.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", remoteBackupAddr.Entry})

    remoteBackupAddr.EntityData.YListKeys = []string {}

    return &(remoteBackupAddr.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk
// Outgoing label stack for this path
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelstk *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_Labelstk) GetEntityData() *types.CommonEntityData {
    labelstk.EntityData.YFilter = labelstk.YFilter
    labelstk.EntityData.YangName = "labelstk"
    labelstk.EntityData.BundleName = "cisco_ios_xr"
    labelstk.EntityData.ParentYangName = "ipv6-rib-edm-path"
    labelstk.EntityData.SegmentPath = "labelstk"
    labelstk.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelstk.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelstk.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelstk.EntityData.Children = types.NewOrderedMap()
    labelstk.EntityData.Leafs = types.NewOrderedMap()
    labelstk.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelstk.Entry})

    labelstk.EntityData.YListKeys = []string {}

    return &(labelstk.EntityData)
}

// Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop
// List of Next Next Hops
type Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // type. The type is RibEdmNnh.
    Type interface{}

    // Unknown Value. The type is interface{} with range: 0..4294967295.
    Unknownval interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface Index. The type is interface{} with range: 0..4294967295.
    InterfaceIndex interface{}
}

func (nextNextHop *Ipv6RibStdby_Vrfs_Vrf_Afs_Af_Safs_Saf_IpRibRouteTableNames_IpRibRouteTableName_BackupRoutes_BackupRoute_RoutePath_Ipv6RibEdmPath_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "ipv6-rib-edm-path"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("type", types.YLeaf{"Type", nextNextHop.Type})
    nextNextHop.EntityData.Leafs.Append("unknownval", types.YLeaf{"Unknownval", nextNextHop.Unknownval})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-index", types.YLeaf{"InterfaceIndex", nextNextHop.InterfaceIndex})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

